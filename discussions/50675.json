[
  {
    "Id": "169912",
    "ThreadId": "50675",
    "Html": "<p>Hi,</p>\r\n<p>I am using Prism 2.0 with WPF for my application and I created an MVP triplet for a Module of which I need to test the Presenter. The problem is that Prism/Unity is injecting several dependencies which is great at runtime in the shell but I am having trouble mocking them at test time in my unit tests. </p>\r\n<p>My question is: How can I use Unity/Prism to do the same job in my unit tests? I tried Rhino mocks but it fails with an error (apparently there is no easy solution to it).</p>\r\n<p>The presenter goes like this:</p>\r\n<p>public class LookupFormPresenter : ILookupFormPresenter, INotifyPropertyChanged<br>\r\n    {<br>\r\n        private readonly IEventAggregator _eventAggregator;<br>\r\n        private readonly IRegionManager _regionManager;<br>\r\n        private readonly IUnityContainer _container;</p>\r\n<p>        public LookupFormPresenter(<br>\r\n            IEventAggregator eventAggregator, <br>\r\n            IRegionManager regionManager,<br>\r\n            IUnityContainer container)<br>\r\n        {<br>\r\n            _eventAggregator = eventAggregator;<br>\r\n            _regionManager = regionManager;<br>\r\n            _container = container;<br>\r\n        }<br>\r\netc...</p>\r\n<p>The test would go like this:</p>\r\n<p> [Test]<br>\r\npublic void GetCustomerPresenterTest()<br>\r\n{<br>\r\n    //here be magic and puff I get a valid container... how do I do this?</p>\r\n<p>    var events = Container.Resolve&lt;IEventAggregator&gt;();<br>\r\n    var regions = Container.Resolve&lt; IRegionManager  &gt;(); </p>\r\n<p>    var presenter = new LookupFormPresenter(events, regions, Container);</p>\r\n<p>    events.GetEvent&lt;CustomerLookupReadyEvent&gt;().Subscribe(<br>\r\n        customers =&gt;<br>\r\n                {<br>\r\n                    Assert.AreEqual(1, customers.Count, &quot;Wrong number of customers returned&quot;);<br>\r\n                    Assert.AreEqual(&quot;the test client&quot;, customers[0].Surname, &quot;Wrong customer&quot;);<br>\r\n                });</p>\r\n<p>    presenter.Find();<br>\r\n}</p>\r\n<p>Any help appreciated and cheers for Prism. I am loving it.</p>\r\n<p>Bartol</p>\r\n",
    "PostedDate": "2009-03-19T10:35:04.997-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "169937",
    "ThreadId": "50675",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi Bartol,</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">To check your presenters’ functionality you should not use Unity in your test. The way in which you are going to test your presenters will be creating an instance of it manually, using the new keyword, and passing mock class instance as parameters. This mock classes have to implement the interfaces that the presenter’s constructor is waiting. For example: Your LookupFormPresenter is expecting three parameters that should implement the IEventAggregator, IRegionManager and IUnityContainer interfaces respectively. So, you should create 3 mock classes that implement these interfaces and help you to isolate the presenter’s behavior.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\">Also notice that it is not a good practice to pass the IUnityContainer as a parameter if it will be used to locate a service or create 1 instance of another class. In this case, you should inject the service or object directly instead of the container.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\">A scenario where passing the IUnityContainer would be valid, is if you will be using the container as a factory, to dynamically create several instances of a class.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">I think a good reference for you could be the mock classes created on the UIComposition.Modules.Employee.Desktop.Tests test project, inside the ViewDiscovery Quickstart solution (Or in the ViewInjection Quickstart solution). You can open this solution executing the BAT file called Desktop &amp; Silverlight - Open QS - View Discovery QuickStart.bat inside the folder where you extracted the Composite Application Library (CAL).  </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">There you will find mock classes that implement the IRegionManager interface (check the MockRegionManager class) and the IUnityContainer (MockUnityContainer class), using these as example you will be able to create a mock class for the IEventAggregator interface quickly.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">After you have all the mock classes implementing the required interfaces by the presenter’s constructor. You will be able to test your presenter in an isolated way instancing each of the mock class and passing them to the presenter as parameter.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">So the test would look something like this:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\"> [Test]</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">public void GetCustomerPresenterTest()</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">    //here be magic and puff I get a valid container... how do I do this?</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">    var events = new MockEventAggregator();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">    var regions = new MockRegionManager(); </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">    var container = new MockUnityContainer();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">    var presenter = new LookupFormPresenter(events, regions, container);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">    events.GetEvent&lt;CustomerLookupReadyEvent&gt;().Subscribe(</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">        customers =&gt;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">                {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">                    Assert.AreEqual(1, customers.Count, &quot;Wrong number of customers returned&quot;);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">                    Assert.AreEqual(&quot;the test client&quot;, customers[0].Surname, &quot;Wrong customer&quot;);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">                });</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">    presenter.Find();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:calibri\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\">Also, the EventAggregator QuickStart has an example on how to mock the EventAggregator in your unit tests.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Please, let me know if this helps.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Ezequiel Sculli</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><a href=\"http://blogs.southworks.net/esculli/\"><span style=\"font-family:calibri\">http://blogs.southworks.net/esculli/</span></a> </p>\r\n",
    "PostedDate": "2009-03-19T11:33:05.99-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "169974",
    "ThreadId": "50675",
    "Html": "Hi,<br>\r\n<br>\r\nMany thanks for the very complete answer and I am going to follow the quickstarts you pointed out.<br>\r\n<br>\r\nI am passing the container to this presenter because it creates and destroys the module that shows the results of the search. Would this be bad practice too? I am doing it this way because I don't want the grid with the results to be on screen before the user does the search and I want to show something else if the search returns no results. There is probably a better way but I haven't found out yet.<br>\r\n<br>\r\nAgain, thanks,<br>\r\nBartol\r\n",
    "PostedDate": "2009-03-19T12:50:39.067-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "174786",
    "ThreadId": "50675",
    "Html": "I am trying to test my ViewModels and some BusinessLogic I implemented for a composite application.<br>\r\nBut I don't really get the way of doing it. Is there somewhere something like a tutorial? I looked into the tests from the quickstarts but it is very hard for me to understand what these test are doing without any comments...<br>\r\nWould be great if anybody has a link for me!<br>\r\n<br>\r\nThanks in advance!\r\n",
    "PostedDate": "2009-04-02T05:48:57.723-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]