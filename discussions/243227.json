[
  {
    "Id": "555058",
    "ThreadId": "243227",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I&nbsp;have a delegate command on my viewmodel within ModuleA, which needs to call a function on another viewmodel in ModuleB.</p>\r\n<p>I have been studying this piece of PRISM documentation &#65279;&#65279;&#65279;</p>\r\n<pre>http://msdn.microsoft.com/en-us/library/ff921122(v=PandP.40).aspx</pre>\r\n<p>but I am still unsure about what strategy is the best. The documentation says to use commanding &#65279;</p>\r\n<pre>Use [commanding ]when there is an expectation of immediate action from the user interaction.\r\n</pre>\r\n<p>But then I am thinking shall I create a static delegateCommand and bind the button&nbsp;directly to the global delegate command&nbsp;rather than to the underlying command in the viewmodel?\r\n<br>\r\nOr shall I use an AggregateEvent? Which is really very similar&nbsp;the previous approach;&nbsp;created on the Infrastructure project and needs to be resolved through the IoC.<br>\r\n<br>\r\nIsn't the latter a better choice due its weak event nature while the delegatecommand holds a hard reference?&nbsp; The way the documentation implies teh difference, it almost sounds like AggregateEvents are slighly delayed...</p>\r\n<p><br>\r\nMany Thanks for advice,<br>\r\nHouman</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-01-25T07:45:34.203-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "555093",
    "ThreadId": "243227",
    "Html": "\r\n<p>Hi Houman,</p>\r\n<p>As you've mentioned, it could be useful for you to use the Event Aggregator to achieve your scenario. Even so, you could use a Delegate Command and publish a message through the event aggregator in the Execute method of your command.</p>\r\n<p>As for the <strong>CompositePresentationEvents</strong>, they shouldn't imply a delay in the execution of the operation you've defined in the subscribers to that event. However, although possible, the Event Aggregator isn't designed to the purpose of achieving\r\n a direct action-reaction communication. They are mostly meant to achieve communication between different modules.</p>\r\n<p>You might find the following thread useful to clarify the difference between Delegate Commands and Event Aggregation:</p>\r\n<p><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=239794\"><span>EventAgg or COmmand</span></a></p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2011-01-25T08:41:58.58-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "556153",
    "ThreadId": "243227",
    "Html": "\r\n<p>Hi Guido,</p>\r\n<p>&nbsp;</p>\r\n<p>Thank you very much for your help. I have studied the documentation and your example these days.&nbsp;&nbsp;In fact the way of using Event Aggregator thourgh the delegate command proved very successful. (Perhaps the best and only way until Prism 3)</p>\r\n<p>Now I also understand how the RegionContext could be utilized to achieve the same thing but simpler. I think this feature is new to Prism 4, and I found it very useful and like to share it here:<br>\r\n<br>\r\nThe scenario is that you have a NavigationModule that has a button bound to a Delegate Command.&nbsp;When pressed it would&nbsp;navigate (if not existing then instantiate)&nbsp;a View&nbsp;within MainModule.<br>\r\nNavigationModule has no idea about the MainModule and we won't be using any global Composite Commands nor any global Event Aggregator. Its Pure magic. :)<br>\r\n<br>\r\nFor now I have switched back to Unity, with MEF its even simpler.</p>\r\n<p>First you would make your ViewModel to implement INavigationAware. Three methods need to be implemented. Leave all empty but the IsNavigationtarget(..). This one should return false, so that everytime the command is called a new instance of the view is created.</p>\r\n<p>Within the&nbsp;Initialize() of the MainModule you would have to register the type of the View.<br>\r\n<br>\r\n_Container.RegisterType&lt;Object, ContactView&gt;(&quot;ContactView&quot;);</p>\r\n<p>Now that the view can be resolved by IoC, we can just make the call in the Delegate Command's method on NavigationModule, which has no idea about the View nor its region. It just says put that View I heard about in that region I heard about.<br>\r\n<br>\r\n_regionManager.RequestNavigate(&quot;MainRegion&quot;, new Uri(&quot;ContactView&quot;, UriKind.Relative);</p>\r\n<p>The IoC container does the magic, no need for composite commands nor any events.&nbsp;&nbsp;The Uri&nbsp;points to the view indirectly and the IoC can resolve the view on the MainModule's MainRegion, since the IsNavigationTarget() returns false, it would\r\n in this case always create a new View in that region. A logic can be implemented in that IsNavigationTarget() to return true if the Id's are equal. In that case it would navigate to an existing view rather than creating a new one. Perfect for TabControl scenarios.</p>\r\n<p>I hope this helps someone else, and if I am wrong with anything please correct me.</p>\r\n<p>Guido,<br>\r\n<br>\r\nI still have another Navigation related question for you.&nbsp; I do understand how the Confirmation/Cancellation works. But it seems to be only connected with Navigation, hence you get a chance to cancel or confirm when navigating away.&nbsp;However what if&nbsp;I\r\n wanted to add the confirmation to the CloseButton I have created on each TabItem?&nbsp; The summary says: &#65279;&#65279;</p>\r\n<pre>1.Navigation operation is initiated via a RequestNavigate call.\r\n</pre>\r\n<p>What do you suggest? Is there any other pattern implemented for this or do&nbsp;I have to write my own?</p>\r\n<p>Many Thanks,<br>\r\nHouman</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-01-27T04:13:30.987-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "556330",
    "ThreadId": "243227",
    "Html": "\r\n<p>Hi Houman,</p>\r\n<p>I'm glad that you've benefited from Navigation to address your scenario. Thank you for sharing your insight about this, as it might be useful for other users that might be pursuing a similar scenario.</p>\r\n<p>As for the scenario you're describing about confirmation/cancellation, the <strong>\r\nIConfirmNavigationRequest</strong> interface in the Prism Library &quot;<em>Provides a way for objects involved in navigation to determine if a navigation request should continue.</em>&quot;, so it isn't meant to provide a means of confirming the close of a tab. In case\r\n you'd like to initiate the close action from within the ViewModel (as a result of the execution of a DelegateCommand, for example), you could make use of an\r\n<strong>InteractionRequest&lt;Confirmation&gt;</strong>. You can read more about it in the &quot;Using Interaction Request Objects&quot; section of\r\n<a href=\"http://msdn.microsoft.com/en-us/library/gg405494%28PandP.40%29.aspx\">this chapter</a> from the Prism MSDN documentation.</p>\r\n<p>You might also find the following threads useful to find some possibilities regarding the ways to implement your scenario:</p>\r\n<ul>\r\n<li><a href=\"View.aspx?ThreadId=39629\"><span>Cancel a Tab closing event if a view is dirty</span></a>\r\n</li><li><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=225965\"><span>Detecting view model close</span></a>\r\n</li><li><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=210297\"><span>Commands in Style</span></a>\r\n</li></ul>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2011-01-27T08:46:09.717-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "557436",
    "ThreadId": "243227",
    "Html": "\r\n<p>Hi Guido,</p>\r\n<p>&nbsp;</p>\r\n<p>Many thanks for pointing me into the right direction.<br>\r\n<br>\r\n</p>\r\n<p>I have been working since three days on this specific problem and finally I have solved it in a clean way. While the first link is tempting, it also throws in the kitchen sink in there. &nbsp;I have managed doing it much simpler. I think eventually I would\r\n have to blog about it. I have further down one Prism question to you. Would be great if you could help me with this. I have used this link as help, but I had to change the WPF code to Silverlight. &nbsp;<a href=\"http://blogs.infosupport.com/blogs/willemm/archive/2008/07/31/Creating-closeable-tabitems-for-use-in-CompositeWPF.aspx\">http://blogs.infosupport.com/blogs/willemm/archive/2008/07/31/Creating-closeable-tabitems-for-use-in-CompositeWPF.aspx</a></p>\r\n<p>I have extended the TabItem header with the X button and attached a Command in there. &nbsp;Since Silverlight doesn't allow RelativeSource on anything else than Self and TemplatedParent, I had to pass the Button itself as a parameter to the Command in order\r\n to go up the visualtree on the view model.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">sdk</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">TabControl</span> <span style=\"color:red\">regions:RegionManager.RegionName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">MainRegion</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Grid.Row</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">HorizontalAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Stretch</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">VerticalAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Stretch</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>                \r\n\t\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">regions</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">TabControlRegionAdapter.ItemContainerStyle</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Style</span> <span style=\"color:red\">TargetType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">sdk:TabItem</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter</span> <span style=\"color:red\">Property</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">HeaderTemplate</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t\t\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Setter.Value</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t\t\t\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">DataTemplate</span><span style=\"color:blue\">&gt;</span>\t\t\t\t\t\t\t\t\t\r\n                                    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">StackPanel</span> <span style=\"color:red\">Orientation</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Horizontal</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>                                        \r\n                                        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">TextBlock</span> <span style=\"color:red\">Text</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding TabCaption}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n                                        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Button</span> <span style=\"color:red\">Margin</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">8,0,0,0</span><span style=\"color:black\">&quot;</span> \r\n                                                <span style=\"color:red\">Command</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding CloseContactCommand}</span><span style=\"color:black\">&quot;</span> \r\n                                                <span style=\"color:red\">CommandParameter</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding RelativeSource={RelativeSource Mode=Self}}</span><span style=\"color:black\">&quot;</span> \r\n                                                <span style=\"color:red\">HorizontalContentAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Center</span><span style=\"color:black\">&quot;</span> \r\n                                                <span style=\"color:red\">VerticalContentAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Center</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n                                            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n                                                <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Canvas</span> <span style=\"color:red\">Width</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">8</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Height</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">8</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n                                                    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Line</span> <span style=\"color:red\">X1</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">2</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">X2</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">6</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Y1</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">2</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Y2</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">6</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Stroke</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Black</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">StrokeThickness</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n                                                    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Line</span> <span style=\"color:red\">X1</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">6</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">X2</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">2</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Y1</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">2</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Y2</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">6</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Stroke</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Black</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">StrokeThickness</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n                                                <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Canvas</span><span style=\"color:blue\">&gt;</span>\r\n                                            <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n                                        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Button</span><span style=\"color:blue\">&gt;</span>                                        \r\n                                    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">StackPanel</span><span style=\"color:blue\">&gt;</span>\r\n                                <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">DataTemplate</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t\t\t\t\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Setter.Value</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t\t\t\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Setter</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t\t\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Style</span><span style=\"color:blue\">&gt;</span>\t\t\t\t\t\r\n\t\t\t\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">regions</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">TabControlRegionAdapter.ItemContainerStyle</span><span style=\"color:blue\">&gt;</span>\t\t\t\t\r\n\t\t\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">sdk</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">TabControl</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> T FindParentControl&lt;T&gt;(DependencyObject outerDepObj) <span style=\"color:blue\">where</span> T : DependencyObject\r\n        {\r\n            DependencyObject dObj = VisualTreeHelper.GetParent(outerDepObj);\r\n            <span style=\"color:blue\">if</span> (dObj == <span style=\"color:blue\">null</span>)\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">null</span>;\r\n\r\n            <span style=\"color:blue\">if</span> (dObj <span style=\"color:blue\">is</span> T)\r\n                <span style=\"color:blue\">return</span> dObj <span style=\"color:blue\">as</span> T;\r\n\r\n            <span style=\"color:blue\">while</span> ((dObj = VisualTreeHelper.GetParent(dObj)) != <span style=\"color:blue\">null</span>)\r\n            {\r\n                <span style=\"color:blue\">if</span> (dObj <span style=\"color:blue\">is</span> T)\r\n                    <span style=\"color:blue\">return</span> dObj <span style=\"color:blue\">as</span> T;\r\n            }\r\n\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">null</span>;\r\n        }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>on the view model a DelegateCommand of type object is waiting to retrieve the button.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> CloseTab(<span style=\"color:blue\">object</span> obj)\r\n        {\r\n            <span style=\"color:blue\">var</span> test = (((ContentControl)(obj)).Parent);\r\n            <span style=\"color:blue\">var</span> parent = Helper.FindParentControl&lt;TabItem&gt;(test);\r\n\r\n            <span style=\"color:blue\">if</span> (parent != <span style=\"color:blue\">null</span>)\r\n            {\r\n                FrameworkElement view = (parent <span style=\"color:blue\">as</span> TabItem).Content <span style=\"color:blue\">as</span> FrameworkElement;</pre>\r\n<pre>                <strong><span style=\"color:blue\">string</span> regionName = RegionManager.GetRegionName(view);\r\n                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">string</span>.IsNullOrEmpty(regionName))\r\n                    regionName = Constants.MainRegion;</strong></pre>\r\n<pre><strong>&nbsp;</strong>\r\n                _regionManager.Regions[regionName].Remove(view);\r\n            }\r\n        }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>This way I find the TabItem and can remove the view from the initial ItemContainer. &nbsp;The beauty of this is, you may implement an IInteraction and ask the user if they really want to close the tab and you may also unsubscribe from the composite commands\r\n at this stage.</p>\r\n<p>Now my question, for somereason RegionManager.getRegionName() doesnt find the region name for the view wrapped by the tabitem. The name remains null and I put a hack in there to get the name from the constant. &nbsp;It is not a big deal in my application.\r\n But it would be nice to have the option of finding the regionname of a given view. Do you &nbsp;know what I am doing wrong?&nbsp;</p>\r\n<p>BTW, do you see any problem regarding separation of concerns that I am handling my view specific code - although generic - in my view model? &nbsp;I see no cleaner way to do this in this scenario.</p>\r\n<p>Many Thanks,<br>\r\nHouman&nbsp;</p>\r\n<p><span style=\"font-family:Consolas,'Courier New',Courier,monospace; white-space:pre\">&nbsp;</span></p>\r\n",
    "PostedDate": "2011-01-29T16:16:24.463-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "558315",
    "ThreadId": "243227",
    "Html": "\r\n<p id=\"x_56acc650-0fab-012e-0bd1-12313918024c\">Hi Houman,</p>\r\n<p id=\"x_56accd80-0fab-012e-0bd2-12313918024c\">Based on my understanding of your scenario, it might be that you need to pass the\r\n<em>ContentControl </em>defined as the region, in order to obtain the region name. According to the Prism documentation, the parameter of GetRegionName method is &ldquo;<em>the object to adapt, this is typically a container (i.e a control)</em>&rdquo; not the\r\n view itself. That might be the reason why your string <em>regionName</em> variable\r\n<strong>is always null</strong>.</p>\r\n<p>In the other hand, regarding the separation of concerns of this approach. I think it is ok, as far as your scenario remains testeable.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br>\r\n<a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-01-31T13:51:27.46-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]