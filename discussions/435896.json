[
  {
    "Id": "1012337",
    "ThreadId": "435896",
    "Html": "Hi!\r<br />\n<br />\nWe are developing a Dashboard application that has Telerik's RadTabControl and RadTabItems are created based on views in MEF modules (we are using MEF bootstrapper).\r<br />\n<br />\nCreating these tabitems works ok at the moment; RadTabControl is a region in which module's &quot;main view&quot; (DashboardTabView) is loaded. TabControl can have multiple instances of these module views. Module's main view contains a Prism region (ContentControl) and nothing else. To this region we want to load multiple views based on user action (one at a time).\r<br />\n<br />\nDashboardTabView.xaml:<br />\n<pre><code>&lt;ContentControl x:Name=&quot;ContentRegion&quot; Prism:RegionManager.RegionName=&quot;{x:Static inf:RegionNames.TabContentRegion}&quot;/&gt;</code></pre>\n\nSo basically DashboardTabView.xaml has a region &quot;TabContentRegion&quot; and we would like to change the view that is shown in its region when needed.\r<br />\n<br />\nFirst problem is that Prism region manager does not have a region &quot;TabContentRegion&quot; but I've managed to overcome this problem by using scoped region manager. But how to get this scoped region manager from the view/viewmodel?\r<br />\n<br />\nThis is how I'm adding module's view (which has &quot;TabControlRegion&quot; region) to TabControl's region:<br />\n<pre><code>IRegion tabRegion = regionManager.Regions[RegionNames.TabRegion];\nvar myTabView = container.GetExportedValue&lt;DashboardTabView&gt;();\n// Create scoped region manager\nIRegionManager tabRegionManager = tabRegion.Add(myTabView, null, true);\n// Set scoped region manager to view model's property\nviewModel.TabRegionManager = tabRegionManager;\ntabRegion.Activate(myTabView);</code></pre>\n\nAfter this we want to navigate to first view that the user sees under this tab:<br />\n<pre><code>tabRegionManager.RegisterViewWithRegion(RegionNames.TabContentRegion, typeof(FirstTestView));\n\ntabRegionManager.RequestNavigate(RegionNames.TabContentRegion,\n                new Uri(&quot;FirstTestView&quot;, UriKind.Relative));</code></pre>\n\nSo far so good, FirstTestView is successfully navigated to. But now when I want to navigate to next view from FirstTestView I don't have access to scoped region manager that has &quot;TabContentRegion&quot; region.\r<br />\n<br />\nI try to use RequestNavigate from FirstTestView's viewmodel when user clicks a button:<br />\n<pre><code>TabRegionManager.RequestNavigate(RegionNames.TabContentRegion,\n                new Uri(&quot;SecondTestView&quot;, UriKind.Relative));</code></pre>\n\nTabRegionManager is a property which I have not been able to set when using RequestNavigate. With other approach I can set it like shown above.\r<br />\n<br />\nDo I have to set this scoped region manager as a property for the viewmodel or is there another way to do this? If I want to use RequestNavigate instead how to set scoped region manager?\r<br />\n<br />\nWe would like to use Prism navigation but I haven't found very good examples on that. Is it required that I register each view using RegisterViewWithRegion() before it can be navigated to?\r<br />\n<br />\nIf I register view before navigating to it it seems to work but how to get scoped region manager available to be able to navigate to the next view?\r<br />\n<br />\nI would greatly appreciate an example project that uses MEF+Prism navigation with nested regions.\r<br />\n<br />\nThank you,\r<br />\n<br />\nBr,\r<br />\n<br />\nKalle<br />\n",
    "PostedDate": "2013-03-08T05:40:49.947-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1012466",
    "ThreadId": "435896",
    "Html": "Hi,\r<br />\n<br />\nAs far as I know, Prism does not provide any mechanism to access scoped region managers as out of the box. But as a possible approach I could believe you could use my <strong>RegionManagerAwareBehavior</strong> , which you can find in the following blog post:<br />\n<ul>\n<li>\n<a href=\"http://blogs.southworks.net/dcherubini/2011/11/10/regions-inside-datatemplates-in-prism-v4-using-a-region-behavior/\" rel=\"nofollow\">Regions inside DataTemplates in Prism v4 using a region behavior</a><br />\n</li>\n</ul>\nBasically, when injecting a view with a view model that implements the <strong>IRegionManagerAware</strong> interface, the aforementioned region behavior will save the corresponding region manager in the <strong>RegionManager</strong> property. For example, if the <strong>FirstTestViewModel</strong> implements <strong>IRegionManagerAware</strong> , the <strong>TabRegionManager</strong> will automatically be stored in the view model's <strong>RegionManager</strong> property, allowing you to access the <strong>TabContentRegion</strong> and navigate to another view:<br />\n<pre><code>// FirstTestView's view model\npublic FirstTestViewModel : IRegionManagerAware\n{\n    // The TabRegionManager will be stored here automatically...\n    public IRegionManager RegionManager { get; set; }\n\n    . . .\n   \n    // And the you can use it to navigate\n    this.RegionManager.Regions[RegionNames.TabContentRegion].RequestNavigate(new Uri(&quot;SecondTestView&quot;, UriKind.Relative));\n}</code></pre>\n\nThe same applies to the <strong>SecondTestView</strong> and so on. If you wish to use this behavior, please remember that you need to register it by overriding the <strong>ConfigureDefaultRegionBehaviors</strong> method of the bootstrapper.\r<br />\n<br />\nRegarding the use of <strong>RegisterViewWithRegion</strong> , this method is used to register a view's type against a region name, so that a new instance of that view will be injected as soon as the region is available. This approach is usually called &quot; <strong><em>view registration</em></strong> &quot; and it does not form part of the navigation progress. Hence, it's not required to register the view before performing a navigation request. What's more, using both could result in two instances of the same view injected in the region.\r<br />\n<br />\nFinally, one of the known limitations of <strong>Prism</strong> is that you cannot perform a navigation request to a view and specify that you want to create a scoped region manager for it at the same time. In other words, the <strong>RequestNavigate</strong> method does not contain any overload that accepts a parameter to create a scoped region manager (like with the <strong>Add</strong> method.) However, as you can navigate to existing views in the region, the common approach is to inject the view with the <strong>Add</strong> method and then navigate to it using a <strong>NavigationRequest</strong> .\r<br />\n<br />\nI hope you find this useful,\r<br />\n<br />\nDamian Cherubini\r<br />\n<a href=\"http://blogs.southworks.net/dcherubini\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini</a><br />\n",
    "PostedDate": "2013-03-08T10:25:05.67-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013107",
    "ThreadId": "435896",
    "Html": "Hi!<br />\n<br />\nThanks for the reply, I think it will be helpful but now that I added these files: IRegionManagerAware.cs, RegionManagerAwareBehavior.cs and RegionManagerObservableObject.cs to my project I'm having problems with Assembly References.<br />\n<br />\nI'm using .NET Framework 4.0 at the moment (maybe 4.5 later) and I don't see System.Windows reference in Add Reference... (Windows 7, VS2012)<br />\nIt does not seem to recognize this FrameworkElement in ReqionManagerAwareBehavior.cs and when I added PresentationFramework the error changed to:<br />\n<br />\n// Error\t2\tCannot implicitly convert type 'System.Windows.DependencyObject' to 'object' ...\\DashboardLib\\RegionManagerAwareBehavior.cs\t68\t50\tDashboardLib<br />\n<pre><code>// line 68\nvar frameworkElementParent = frameworkElement.Parent as FrameworkElement;</code></pre>\n\nError\t3\t'System.Windows.FrameworkElement' does not contain a definition for 'GetValue' and no extension method 'GetValue' accepting a first argument of type 'System.Windows.FrameworkElement' could be found (are you missing a using directive or an assembly reference?)\t...\\DashboardLib\\RegionManagerAwareBehavior.cs\t100\t72\tDashboardLib<br />\n<pre><code>// line 100\nIRegionManager attachedRegionManager = element.GetValue(RegionManager.RegionManagerProperty) as IRegionManager;</code></pre>\n\nSo now I need to figure out which References to Add to the project.<br />\n<br />\nIf I understood your answer correctly I should Add view at least when I want to create a scoped Region Manager and then navigate to that view instead of using region.Activate? Or should I always use Add before navigating to a view? I guess this might give me an error that view already exists in region...<br />\n<br />\nEDIT: Nevermind this part about finding the correct References, when I tried to build the project it suggested me what references I should add. Now my problem is that for some reason I don't get the view &quot;FirstTestView&quot; to show up under the tab unless I register view before calling RequestNavigate... Any ideas?<br />\n<br />\nEDIT2: I was missing contractName from the view export like:<br />\n<pre><code>[Export(&quot;FirstTestView&quot;, typeof(FirstTestView)), PartCreationPolicy(CreationPolicy.NonShared)]</code></pre>\n\nNow view is showing when I call RequestNavigate :)<br />\n<pre><code>            // This part works, it adds DashboardTabView as a new TabItem for the TabControl and opens it\n            var myTabView = container.GetExportedValue&lt;DashboardTabView&gt;();\n            DashboardTabViewModel viewModel = myTabView.DataContext as DashboardTabViewModel;\n            viewModel.ViewTitle = TitleText;\n            IRegionManager tabRegionManager = tabRegion.Add(myTabView, null, true);\n            viewModel.TabRegionManager = tabRegionManager;\n            tabRegion.Activate(myTabView);\n\n            // Without registering the following RequestNavigate does not show anything\n            //tabRegionManager.RegisterViewWithRegion(RegionNames.TabContentRegion, typeof(FirstTestView));\n\n            tabRegionManager.Regions[RegionNames.TabContentRegion].RequestNavigate(new Uri(&quot;FirstTestView&quot;, UriKind.Relative));\n</code></pre>\n\nBr,<br />\n<br />\nKalle<br />\n",
    "PostedDate": "2013-03-11T01:00:00.403-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013122",
    "ThreadId": "435896",
    "Html": "Hi,<br />\n<br />\nI'm now trying to use your RegionManagerAwareBehavior and I get following exception in bootstrapper.Run():<br />\n<pre><code>An exception occurred while trying to create region objects. \n\n    - The most likely causing exception was: 'System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; Microsoft.Practices.Prism.Regions.Behaviors.RegionCreationException: An exception occurred while creating a region with name 'TabRegion'. The exception was: Microsoft.Practices.ServiceLocation.ActivationException: Activation error occured while trying to get instance of type RegionManagerAwareBehavior, key &quot;&quot; ---&gt; Microsoft.Practices.ServiceLocation.ActivationException: Activation error occured while trying to get instance of type RegionManagerAwareBehavior, key &quot;&quot;\n\n   at Microsoft.Practices.Prism.MefExtensions.MefServiceLocatorAdapter.DoGetInstance(Type serviceType, String key)\n\n   at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType, String key)\n\n   --- End of inner exception stack trace ---\n\n   at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType, String key)\n\n   at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType)\n\n   at Microsoft.Practices.Prism.Regions.RegionBehaviorFactory.CreateFromKey(String key)\n\n   at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.AttachDefaultBehaviors(IRegion region, T regionTarget)\n\n   at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Initialize(T regionTarget, String regionName)\n\n   at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Microsoft.Practices.Prism.Regions.IRegionAdapter.Initialize(Object regionTarget, String regionName)\n\n   at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(DependencyObject targetElement, String regionName).  ---&gt; Microsoft.Practices.ServiceLocation.ActivationException: Activation error occured while trying to get instance of type RegionManagerAwareBehavior, key &quot;&quot; ---&gt; Microsoft.Practices.ServiceLocation.ActivationException: Activation error occured while trying to get instance of type RegionManagerAwareBehavior, key &quot;&quot;\n\n   at Microsoft.Practices.Prism.MefExtensions.MefServiceLocatorAdapter.DoGetInstance(Type serviceType, String key)\n\n   at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType, String key)\n\n   --- End of inner exception stack trace ---\n\n   at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType, String key)\n\n   at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType)\n\n   at Microsoft.Practices.Prism.Regions.RegionBehaviorFactory.CreateFromKey(String key)\n\n   at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.AttachDefaultBehaviors(IRegion region, T regionTarget)\n\n   at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Initialize(T regionTarget, String regionName)\n\n   at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Microsoft.Practices.Prism.Regions.IRegionAdapter.Initialize(Object regionTarget, String regionName)\n\n   at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(DependencyObject targetElement, String regionName)\n\n   --- End of inner exception stack trace ---\n\n   at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(DependencyObject targetElement, String regionName)\n\n   at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.TryCreateRegion()\n\n   at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.OnUpdatingRegions(Object sender, EventArgs e)\n\n   --- End of inner exception stack trace ---\n\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\n\n   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\n\n   at System.Delegate.DynamicInvokeImpl(Object[] args)\n\n   at System.Delegate.DynamicInvoke(Object[] args)\n\n   at Microsoft.Practices.Prism.Events.WeakDelegatesManager.Raise(Object[] args)\n\n   at Microsoft.Practices.Prism.Regions.RegionManager.UpdateRegions()'.\n\n    But also check the InnerExceptions for more detail or call .GetRootException().</code></pre>\n\nThis is what my TabRegion looks like:<br />\n<pre><code>        &lt;telerik:RadTabControl  \n                Margin=&quot;0&quot; \n                x:Name=&quot;TabRegion&quot;\n                Prism:RegionManager.RegionName=&quot;{x:Static inf:RegionNames.TabRegion}&quot; \n                AllowDragReorder=&quot;True&quot;\n                SelectedItemRemoveBehaviour=&quot;SelectPrevious&quot;\n                ItemContainerStyle=&quot;{StaticResource TabDataTemplate}&quot;\n                &gt;\n        &lt;/telerik:RadTabControl&gt;</code></pre>\n\nEDIT: Adding configuration for this behavior triggers the exception.<br />\n<pre><code>        protected override IRegionBehaviorFactory ConfigureDefaultRegionBehaviors()\n        {\n            IRegionBehaviorFactory behaviors = base.ConfigureDefaultRegionBehaviors();\n\n            // Program runs when commented, otherwise an exception is thrown\n            //behaviors.AddIfMissing(RegionManagerAwareBehavior.BehaviorKey, typeof(RegionManagerAwareBehavior));\n\n            return behaviors;\n        }</code></pre>\n\nI must be missing something...<br />\n<br />\nBr,<br />\n<br />\nKalle<br />\n",
    "PostedDate": "2013-03-11T01:32:06.267-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013233",
    "ThreadId": "435896",
    "Html": "Hi,\r<br />\n<br />\nSorry for the &quot;spam&quot; but it seems to work now!\r<br />\n<br />\nI was not adding RegionManagerAwareBehavior to my catalog and it caused to exception:<br />\n<pre><code>            this.AggregateCatalog.Catalogs.Add(new AssemblyCatalog(typeof(RegionManagerAwareBehavior).Assembly));\n            this.AggregateCatalog.Catalogs.Add(new AssemblyCatalog(typeof(DashboardBootstrapper).Assembly));</code></pre>\n\nThanks alot for this solution!\r<br />\n<br />\nBr,\r<br />\n<br />\nKalle<br />\n",
    "PostedDate": "2013-03-11T06:32:00.603-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1013443",
    "ThreadId": "435896",
    "Html": "Hi Kalle,\r<br />\n<br />\nI am glad you find this useful and that you could find the cause behind those problems. Also, thanks for sharing this with the rest of the community as it might be helpful for other users that could be experiencing the same problems.\r<br />\n<br />\nRegards,\r<br />\n<br />\nDamian Cherubini\r<br />\n<a href=\"http://blogs.southworks.net/dcherubini\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini</a><br />\n",
    "PostedDate": "2013-03-11T12:16:02.173-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]