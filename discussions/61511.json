[
  {
    "Id": "208681",
    "ThreadId": "61511",
    "Html": "<p>I have a question regarding code responsibility in the MVP pattern.</p>\r\n<p>Say I have a view that holds a DataGrid, and a presenter that is responsible for attaching the view to a model, the view then takes this model and sets it as the DataGrid's ItemSource. I hope so far it makes sense.</p>\r\n<p>Now the issue is, the data that is attach is polymorphic, and according to the type, the DataGrid should display different column, not using the standard AutoGenerateColumns, but rather a custom code we have.</p>\r\n<p>The question is, whether the decision of which column to use and how to create them should be the View's responsibility (because he knows the DataGrid and how to interact with it) or should it be the Presenter's responsibility because he has the business-view logic of which columns should be displayed for each type, but doesn't (shouldn't?) know how to interact with the DataGrid - since View's DataGrid can be replaced in the future with other data grids (3rd party).</p>\r\n<p>Is it the View's or the Presenter's responsibility? or is it a combined effort? (for example, the presenter creates a special collection of column information and the view applies it to the data grid, using the control's specific properties and methods)</p>\r\n<p>I'd appreciate your design input.</p>\r\n<p>Thanks in advance,</p>\r\n<p>Ido.</p>",
    "PostedDate": "2009-07-05T08:36:56.133-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "209576",
    "ThreadId": "61511",
    "Html": "<p>Hi Ido,&nbsp;</p>\r\n<p>The three options you explain are perfectly feasible and which is the best might greatly depend on you specific scenario. More over there are several variations of the MVP pattern.<br>There are some documents and articles that provide some advice:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/magazine/cc188690.aspx\">Model View Presenter (Design Patterns)</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd458859.aspx\">Separated Presentation (Prism-v2 documentation)</a></li>\r\n<li><a href=\"http://blogs.southworks.net/jdominguez/2008/04/using-the-presentation-model-in-wpf/\">Using the Presentation Model in WPF</a></li>\r\n<li><span style=\"color:#1f497d\" lang=EN-US><a href=\"http://www.ctrl-shift-b.com/2007/08/interactive-application-architecture.html\">Interactive Application Architecture Patterns</a></span></li>\r\n</ul>\r\n<p>&nbsp;I will provide some more information, that expresses my personal point of view.</p>\r\n<p>As the prism-v2 documentation states for the <a href=\"http://msdn.microsoft.com/en-us/library/dd458863.aspx\">Presentation Model</a> pattern, the presentation model should be designed to be easily consumed by a view. <em>&quot;<span style=\"color:black\">Presentation model also frequently adapts the underlying model data into a form that is easier to represent in the user interface&quot;</span></em><span style=\"color:black\">. </span>So, if you are using this pattern your 3rd option seems to fit better: a combined effort, where the presenter exposes the model in such a way that the view can easily consume. This way the logic of which columns to show will be in the presenter but the view will be in charge of showing them (encapsulating the specific control).&nbsp;</p>\r\n<p>If your scenario allows for it, another approach might be using <a href=\"http://msdn.microsoft.com/en-us/library/ms742521.aspx\">Data Templates</a>. <span style=\"color:black\">In WPF, you can specify the data template for an object type at the application level. In Silverlight, you have to explicitly specify the data template for an object within the control that is to display it. Julian Dominguez as posted a good example of how to use dataTemplates with prism: <a href=\"http://blogs.southworks.net/jdominguez/2008/09/presentation-model-with-datatemplates-in-compositewpf-prism-sample/\">Presentation Model with DataTemplates in CompositeWPF (Prism) Sample</a>.</span>&nbsp;</p>\r\n<p>Hope it helps!&nbsp;</p>\r\n<p>Matias Bonaventura<br><a href=\"http://blogs.southworks.net/\">http://blogs.southworks.net/matiasb</a></p>",
    "PostedDate": "2009-07-07T10:16:57.213-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]