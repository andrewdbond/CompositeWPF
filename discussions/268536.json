[
  {
    "Id": "655837",
    "ThreadId": "268536",
    "Html": "\r\n<p>Hi</p>\r\n<p>I have a PRISM application with a master to multiple children setup. So for example I will insert a usercontrol showing a list of Person in my main region then have instances of Address, Contacts etc in my child region and load&nbsp;the filtered data when\r\n the&nbsp;master list publishes a selection changed event. In order to make it easy to do CRUD operations in the children I've set up all user controls with their own viewmodels.</p>\r\n<p>My problem is that every child viewmodel needs a List&lt;Person&gt;, and of course when I do changes in the Master list that chnages the undelying data, all those List&lt;Person&gt; in each child viewmodel must be updated also.</p>\r\n<p>Is there some clever way to set up a single List&lt;Person&gt; that all other child viewmodels can use so that I can update this one list only yet have it reflected in all viewmodels?</p>\r\n<p>TIA</p>\r\n<p>Dennis</p>\r\n",
    "PostedDate": "2011-08-10T05:44:12.71-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "656011",
    "ThreadId": "268536",
    "Html": "<p>Hi Dennis,</p>\n<p>If you want to share information between multiple viewmodels (regardless in which region/module they are) you could implement a shared service that stores a single <strong><span style=\"font-size: 10pt;\">List&lt;Person&gt;</span></strong> collection and inject that service in each viewmodel. Then, make each viewmodel access the data in the collection through the service, so when a CRUD operation is performed on the collection  the changes will be reflected in all the viewmodels.</p>\n<p>For more information about shared services you can check:</p>\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28v=PandP.40%29.aspx#sec7\">Communicating Between Components on MSDN &ndash; Shared Services</a> </li>\n</ul>\n<p>I hope you find this useful,</p>\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-08-10T11:21:02.613-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "657090",
    "ThreadId": "268536",
    "Html": "<p>Hi</p>\r\n<p>I'm not sure I see how this would help. I have a PeopleRepository that I can inject into the other ViewModels and then use peopleRepository.GetAll() to fill a public List&lt;Person&gt; in eacg ViewModel, but that only saves me from rewriting the LINQ call. When the underlying People entity set changes in the database, I would still have to tell each ViewModel to requery the repository/service and refresh it's own list, wouldn't I?</p>\r\n<p>I was thinking maybe of having a global resource of public static List&lt;Person&gt; so that the comboboxes in the relevant Views can all bind to the one list, and I only have to update that one list, but I'm not comfortable with static resources yet so I worry what will happen down the road.</p>\r\n<p>TIA</p>\r\n<p>Dennis</p>",
    "PostedDate": "2011-08-12T05:25:56.017-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "657094",
    "ThreadId": "268536",
    "Html": "<p>Dennis,</p>\r\n<p>If you use a shared service and export it as a non shared export (or a singleton instance, in case you're using unity), the same instance of your <strong>PeopleRepository </strong>will be shared among all your viewmodels; therefore, when updating the <strong>List&lt;Person&gt;</strong> property in your service, you could make all your view models consume it. To this end, you could have your <strong>PeopleRepository </strong>expose an event, which can be raised when the GetAll method has finished executing, and make your view models subscribe to that event. By doing that, you only need to query the database once to fill the values in the different view models.</p>\r\n<p>The approach of having a global static resource isn't recommendable, as it would break some testability and maintainability concerns (for example, you wouldn't be able to mock the dependency in your view models in a testing scenario).</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-08-12T05:38:31.917-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "657098",
    "ThreadId": "268536",
    "Html": "<p>OK, I think I see it more clearly now.</p>\r\n<p>In this case the PeopelRepository shouldn't be used, but rather a dedicated service for this lookup list (since the repository has CRUD etc). I'm a newbie programmer (my background is IT admin) and singleton doesn't tell me much, but I assume it means the resource is static, or should I use container.RegisterInstance&lt;&gt;()? (I use Unity).</p>\r\n<p>I would then need the following in the service; a List&lt;Person&gt;, a method that returns that list, a method that updates the list from the database and an IEventAggregator that publishes.</p>\r\n<p>In the ViewModels I would have an EventAggregator that subscribes and refills each the List&lt;Person&gt; in the ViewModel.</p>\r\n<p>Did I get it this time?</p>\r\n<p>TIA</p>\r\n<p>Dennis</p>",
    "PostedDate": "2011-08-12T05:50:27.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "657115",
    "ThreadId": "268536",
    "Html": "<p>Hi Dennis,</p>\r\n<p>That's correct, a dedicated service should be implemented for that, and that service would probably consume the people repository when needed.</p>\r\n<p>In the context of using Unity in your application, a singleton instance is an instance of a class that will be kept alive as long as the container is kept alive (which is probably the whole life cycle of your application). Therefore, in practical purposes, the same instance of your class will be returned when you call the <strong>IUnityContainer.Resolve&lt;T&gt;</strong> throughout your application. Using the <strong>IUnityContainer.RegisterInstance&lt;T&gt;</strong> method is a possible way to achieve that. Another one is to use the <strong>IUnityContainer.RegisterType&lt;TFrom,TTo&gt;</strong> method, passing a <strong>ContainerControlledLifetimeManager</strong> as the parameter. The difference between them is that, when you use the <strong>RegisterInstance</strong> method, you need to pass an instance to that method, and that will be the one that will be shared and kept alive; whereas when you use the <strong>RegisterType</strong> method passing a <strong>ContainerControlledLifetimeManager</strong>, the container will instantiate your service, and will always return the first (and only) instance it has created.</p>\r\n<p>Using a static resource would, as I've mentioned in my previous answer, break testability and maintainability concerns. This is because you would be creating a strong dependency between your components and your static resource, and you wouldn't be able to mock it on a test scenario. But in the case of using the container to expose a shared service (by doing an interface mapping), you would only depend on the interface, and your view models or any other component that depends on that service would be abstracted from the concrete implementation of the service (i.e. the only one that will be concerned with the concrete implementation of the service will be the container, which is responsible for mapping ISomeService -interface- to SomeService -implementation-).</p>\r\n<p>You can read more about the benefits of the Inversion of Control pattern and Dependency Injection in the following chapter from the Prism MSDN documentation:</p>\r\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ff921140%28PandP.40%29.aspx\">Chapter 3: Managing Dependencies Between Components</a></p>\r\n<p>As for the approach you've proposed which involves using the event aggregator, it is a valid possibility to achieve your scenario. In case you use the event agrgegator, you don't need to make your view models depend on your service, but rather on the event aggregator.</p>\r\n<p>However, using the event aggregator is not the only possibility to achieve that; when I mentioned the use of an event to notify that the list of people has been refreshed, I was referring to exposing a common .NET event in your service, which your components (such as the view models) could subscribe to.</p>\r\n<p>Both approaches have their benefits and caveats, so the choice would be based on your personal preference and requirements. You can read more about it in the following chapter from the Prism MSDN documentation:</p>\r\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28PandP.40%29.aspx\">Chapter 9: Communicating Between Loosely Coupled Components</a></p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-08-12T06:23:43.173-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "657117",
    "ThreadId": "268536",
    "Html": "<p>Hi</p>\r\n<p>I just implemented my DialogService the way you suggested and it works great, so I should be able to implement lookuplists the same way. I'll look into the .NET events vs EventAggregator and see what suits me better.</p>\r\n<p>Thanks a lot for all your help.</p>\r\n<p>Re</p>\r\n<p>Dennis</p>",
    "PostedDate": "2011-08-12T06:29:02.517-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]