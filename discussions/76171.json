[
  {
    "Id": "260503",
    "ThreadId": "76171",
    "Html": "<p>&nbsp;</p>\r\n<div>Hello,</div>\r\n<div></div>\r\n<div>I found there are some usages for lock as below in Prism v2. What is the main purpose of using lock(Subscriptions) in this code?&nbsp;Are they trying to lock the instance of Subscriptions?</div>\r\n<div></div>\r\n<div>As far as I know, lock method is for locking the code block (not an instance).&nbsp;As Subscriptions is a protected property, the child class will be able to access it and will be able to change this list. So, I think it's not thread-safe. Is this a bug or Am I missing something?&nbsp;</div>\r\n<div></div>\r\n<div>protected ICollection&lt;IEventSubscription&gt; Subscriptions</div>\r\n<div>{</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;get { return _subscriptions; }</div>\r\n<div>}</div>\r\n<p>&nbsp;</p>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">public virtual void Unsubscribe(SubscriptionToken token)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lock (Subscriptions)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IEventSubscription subscription = Subscriptions.FirstOrDefault(evt =&gt; evt.SubscriptionToken == token);</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (subscription != null)</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Subscriptions.Remove(subscription);</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<p>\r\n<p>public virtual void Unsubscribe(SubscriptionToken token)</p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;lock (Subscriptions)</p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{</p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IEventSubscription subscription = Subscriptions.FirstOrDefault(evt =&gt; evt.SubscriptionToken == token);</p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (subscription != null)</p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{</p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Subscriptions.Remove(subscription);</p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</p>\r\n</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-11-25T00:43:07.307-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "260594",
    "ThreadId": "76171",
    "Html": "<p id=f73f3700-bbf0-012c-f7b8-12313b030c55>Hi Michael,</p>\r\n<p id=f73f5d10-bbf0-012c-f7b9-12313b030c55>From <a href=\"http://msdn.microsoft.com/en-us/library/ms173179.aspx\">this article</a>&nbsp;<em>&ldquo;Strictly speaking, the object provided to lock is used solely to uniquely identify the resource being shared among multiple threads, so it can be an arbitrary class instance. In practice, however, this object usually represents the resource for which thread synchronization is necessary.&rdquo; </em>That article, and <a href=\"http://msdn.microsoft.com/en-us/library/c5kehkcz.aspx\">this one</a> provide a thorough explanation of the <strong>lock</strong> statement.</p>\r\n<p id=f73f9740-bbf0-012c-f7ba-12313b030c55>In this case, there can be no access to the Subscriptions protected property by any external components. Notice that for this purpose, the Subscriptions property behaves as a private property (which is recommended), as it can only be accessed through internally through your implementation of the <strong>EventBase</strong>. Therefore, if you inherit from <strong>EventBase</strong> without changing the lock on the Subscriptions property, this keeps behaving as Thread safe. If you want to access the Subscriptions property from any class that inherits from EventBase, you should consider using locks to keep your class Thread safe for any callers.</p>\r\n<p id=f73fecb0-bbf0-012c-f7bb-12313b030c55>Please let me know if this helps.</p>\r\n<p id=f74035e0-bbf0-012c-f7bc-12313b030c55>Damian Schenkelman <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2009-11-25T05:25:57.453-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]