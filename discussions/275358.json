[
  {
    "Id": "682239",
    "ThreadId": "275358",
    "Html": "<p>Hi,</p>\n<p>what is the best practice for implementing behaviors in WPF&nbsp;application? Please suggest.</p>\n<p>for eg : mouseclick, loaded, selected</p>\n<p>Thanks,</p>",
    "PostedDate": "2011-10-10T12:44:52.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "682730",
    "ThreadId": "275358",
    "Html": "<p>Hi,</p>\r\n<p>The Prism guidance is intended to be used primarily with the <strong>MVVM design pattern</strong>. In this pattern you have a <strong>view</strong>, which represents the UI, and a <strong>view model</strong>, which contains and exposes the operational logic and data for the view through commands and properties. Usually, the view and the view model interact with each other through <strong>data bindings</strong>. Like this, this pattern allows to develop more decoupled, maintainable and testable applications.</p>\r\n<p>For example, when implementing the MVVM pattern, you can bind the <strong>command property</strong> of a button to a <strong>property in the view model</strong> that exposes a command (this can be easily done using the <strong>DelegateCommand</strong> class shipped with the Prism library) and when the button is clicked, the aforementioned command will be executed.</p>\r\n<p>For other events (like for example <em>\"loaded,\" \"selected,\" \"mouseover\", etc</em>) you can implement you custom command behaviors, which could allow you to attach commands to you controls according to your needs. The commands attached using those behaviors can be <strong>DelegateCommands</strong> exposed by the view model through a property, and should be executed in the same way that a command attached to the click event of a button. To implement your custom command behaviors you might find the following thread useful:</p>\r\n<ul>\r\n<li><a href=\"http://compositewpf.codeplex.com/discussions/66368\">Custom Command Behavior</a></li>\r\n</ul>\r\n<p>If the cost of implementing your custom commands behaviors make the aforementioned approach unusable in your scenario, you can have an <strong>event handler</strong> in the code behind of the view that could <strong>obtain the required command from the view model</strong> (through its properties) and execute it. If this approach does not fit your scenario, you could invoke a public method exposed by the view model instead; however, take into account that you will need to cast the view model (which should be the data context of the view) to its specific type or interface in order to do it.</p>\r\n<p>Also, it is important to note that if the interaction represented by that event in the view will only cause visual modifications to your view (e.g. highlighting a textbox), you don't need to involve your view model. These events could be handled entirely on the code behind of the view.</p>\r\n<p>You can find more information about the MVVM pattern in the following links:</p>\r\n<ul>\r\n<li><a href=\"msdn.microsoft.com/en-us/library/gg405484(v=PandP.40).aspx\">Chapter 5: Implementing the MVVM Pattern</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg405494%28v=PandP.40%29.aspx\">Chapter 6: Advanced MVVM Scenarios</a></li>\r\n<li><a title=\"Permanent Link: In the Box &ndash; MVVM&nbsp;Training\" rel=\"bookmark\" href=\"http://karlshifflett.wordpress.com/2010/11/07/in-the-box-ndash-mvvm-training/\">In the Box &ndash; MVVM Training by Karl Shifflett</a></li>\r\n</ul>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\" target=\"_blank\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-10-11T11:36:56.293-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]