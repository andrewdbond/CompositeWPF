[
  {
    "Id": "474859",
    "ThreadId": "222026",
    "Html": "<p>I have used INotifiedChanged and DependencyProperties in the past and are OK comfortable with them, but they have also always been in the same class. Now I have a situation where I have one class that has a timer running that basically checks to see if a database is online every minute or so and sets a public property in another class to true or false. In my viewmodel I would like to use that public property to set the boolean for my Delegate commands CanExecute. However even though the public property gets changed&nbsp;the viewmodels CanExecute never knows about it even though I call RaisePropertyChanged on it.</p>\r\n<p>I know this has to be something simple that I just can't see, but all my Google attempts have left me still in limbo. Below are&nbsp;snippets from the&nbsp;two classes who need to talk. They are both in the same project and both implement INotifyPropertyChanged. I was thinking that maybe IEventAggregator needs ot be used here, but I usually save that bad boy for when I need to do Module to Module communication.</p>\r\n<p>Any help in explaining on how to accomplish this would be greatly appreciated.<span style=\"font-family:Consolas;color:#2b91af;font-size:x-small\"><span style=\"font-family:Consolas;color:#2b91af;font-size:x-small\"><span style=\"font-family:Consolas;color:#2b91af;font-size:x-small\">&nbsp;</span></span></span></p>\r\n<p>Thanks!</p>\r\n<p><strong>DBSynchronization Class (Contains the public bool property)</strong>&nbsp;</p>\r\n<p style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> isDatabaseOnline = <span style=\"color:blue\">false</span>;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> IsDatabaseOnline\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> isDatabaseOnline; }\r\n            <span style=\"color:blue\">set</span> \r\n            { \r\n                isDatabaseOnline = value;\r\n                RaisePropertyChanged(<span style=\"color:#a31515\">&quot;IsDatabaseOnline&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> INotifyPropertyChanged Members\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RaisePropertyChanged(<span style=\"color:blue\">string</span> prop)\r\n        {\r\n            <span style=\"color:blue\">if</span> (PropertyChanged != <span style=\"color:blue\">null</span>)\r\n            {\r\n                PropertyChanged(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">new</span> PropertyChangedEventArgs(prop));\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n</pre>\r\n</p>\r\n<p><strong>ViewModel class that needs to be notified when it changes</strong></p>\r\n<p style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">private</span></pre>\r\n</p>\r\n<p style=\"color:black;background-color:white\">\r\n<pre> <span style=\"color:blue\">bool</span> CanSyncExecute()\r\n        {\r\n            <span style=\"color:blue\">if</span> (dbSync.IsDatabaseOnline)\r\n                RibbonBarFactory.GetGroupByName(ModuleController.ModuleTab,Resources.DatabaseRibbonGroupHeader).Header = Resources.DatabaseRibbonGroupHeader + <span style=\"color:#a31515\">&quot; (Online)&quot;</span>;\r\n            <span style=\"color:blue\">else</span>\r\n                RibbonBarFactory.GetGroupByName(ModuleController.ModuleTab,Resources.DatabaseRibbonGroupHeader).Header = Resources.DatabaseRibbonGroupHeader + <span style=\"color:#a31515\">&quot; (Offline)&quot;</span>;\r\n            <span style=\"color:blue\">return</span></pre>\r\n</p>\r\n<p style=\"color:black;background-color:white\">\r\n<pre> dbSync.IsDatabaseOnline;            \r\n        } </pre>\r\n</p>\r\n<p><strong>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>   \r\n</pre>\r\n</div>\r\n</strong></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-07-30T11:25:10.577-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "474914",
    "ThreadId": "222026",
    "Html": "<p id=890bf0c0-7e44-012d-7be7-123139180535>Hi,</p>\r\n<p id=890c0360-7e44-012d-7be8-123139180535>Based on our understanding, you need to update the value that indicates whether a command can be executed in a cross-module scenario.</p>\r\n<p id=890c1680-7e44-012d-7be9-123139180535>That said, in the implementation you shared, all appears to be correct, except by in the ViewModel there is not a subscription to the PropertChangedEvent raised from your DBSynchronization class. So, it might be the reason why your ViewModel is not notified.</p>\r\n<p id=890c2980-7e44-012d-7bea-123139180535><strong>Important: </strong>when using DelegateCommands, you must manually call to its RaiseCanExecuteChanged method to get the UI updated.</p>\r\n<p id=890c3d40-7e44-012d-7beb-123139180535>On the other hand and as you mentioned, I think you could avoid implementing INotifyPropertyChanged in the DBSynchronization class and use <a href=\"http://msdn.microsoft.com/en-us/library/ff649187.aspx\">EventAggregator</a> instead. This way, you could publish this event when IsDatabaseOnline property changes and additionally you would obtain a more decoupled application.&nbsp;</p>\r\n<p id=890c5100-7e44-012d-7bec-123139180535>In addition, you could take a look at the <a href=\"http://msdn.microsoft.com/en-us/library/ff650891.aspx\">Event Aggregation Quickstart</a>.</p>\r\n<p id=890c6540-7e44-012d-7bed-123139180535>Please let me know if this helps.</p>\r\n<p id=890c7920-7e44-012d-7bee-123139180535>Fernando Antivero <br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>",
    "PostedDate": "2010-07-30T14:48:06.303-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "474937",
    "ThreadId": "222026",
    "Html": "<p>Fernando,</p>\r\n<p>Subscribing to the event was exactly what I neeed.</p>\r\n<p>This code does the magic inside the viewmodel.</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:green\">//Subscribe to DBSync change events</span>\r\n            dbSync.PropertyChanged += <span style=\"color:blue\">new</span> PropertyChangedEventHandler(dbSync_PropertyChanged);\r\n</pre>\r\n</div>\r\n<p>Thank you for the response!</p>",
    "PostedDate": "2010-07-30T16:50:53.47-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]