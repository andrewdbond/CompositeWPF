[
  {
    "Id": "214695",
    "ThreadId": "63174",
    "Html": "<p>Hi,</p>\r\n<p>Sorry, this topic doesn't really concern Composite WPF but I think, that it can be usefull for other person than me.</p>\r\n<p>I am a bit confusing about the commanding aspect in WPF with the pattern MVVM. I am currently looking for some documentation and I found different possibility.</p>\r\n<p>I don't know which one I should use in order to have the &quot;best practice&quot;.</p>\r\n<p>&nbsp;</p>\r\n<p>First : <strong>RelayCommand</strong></p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">private</span> RelayCommand r_launchModuleCommand;<br><br><span style=\"color:Blue\">public</span> ICommand launchModuleCommand<br>        {<br>            <span style=\"color:Blue\">get</span>\r\n            {\r\n                <span style=\"color:Blue\">if</span> (r_launchModuleCommand == <span style=\"color:Blue\">null</span>)<br>                {<br>                    r_launchModuleCommand = <span style=\"color:Blue\">new</span> RelayCommand(param =&gt; CanLaunch(), param =&gt; Launch());<br>                }<br><br>                <span style=\"color:Blue\">return</span> r_launchModuleCommand;<br>            }<br>        }<br><br><br><span style=\"color:Blue\">private</span> <span style=\"color:Blue\">bool</span> CanLaunch()<br>        {<br>            <span style=\"color:Blue\">return</span> Auth;<br>        }<br><br>        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Loads the data from database.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> Launch(<span style=\"color:Blue\">string</span> name)<br>        {<br>            Bootstrapper.LoadModule(name);         <br>        }<br><br><br>All of these are in the ViewModel and in the xaml : Command=&quot;{StaticResource launchMemberModuleCommand}&quot;<br>The problem with this method, I don't know how to have a parameter with a CommandParameter in the xaml.<br><br>Secondly : <strong>RoutedCommand</strong><br></pre>\r\n</div>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> RoutedCommand Foo = <span style=\"color:Blue\">new</span> RoutedCommand();\r\n\r\n<span style=\"color:Blue\">void</span> Foo_CanExecute(<span style=\"color:Blue\">object</span> sender, CanExecuteRoutedEventArgs e)\r\n        {\r\n            <span style=\"color:Green\">// The Window gets to determine if the Foo </span>\r\n            <span style=\"color:Green\">// command can execute at this time.</span>\r\n            e.CanExecute = <span style=\"color:Blue\">true</span>;\r\n        }\r\n\r\n        <span style=\"color:Blue\">void</span> Foo_Executed(<span style=\"color:Blue\">object</span> sender, ExecutedRoutedEventArgs e)\r\n        {\r\n            <span style=\"color:Green\">// The Window executes the command logic when the user wants to Foo.</span>\r\n            MessageBox.Show(<span style=\"color:#A31515\">&quot;The Window is Fooing...&quot;</span>);\r\n        }\r\n<br>Problem : these methods are in the code behind and if I understand MVVM, the less code we have in the code behind, the better is.<br><br><br>Thirdly :<strong>ICommand</strong><br></pre>\r\n</div>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> ICommand launchModule { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">set</span>; }\r\n       \r\n<span style=\"color:Green\">//Constructor</span>\r\n        <span style=\"color:Blue\">public</span> ShellViewModel()\r\n        {\r\n            <span style=\"color:Blue\">this</span>.launchModule = <span style=\"color:Blue\">new</span> DelegateCommand&lt;<span style=\"color:Blue\">string</span>&gt;(OnlaunchModule);         \r\n        }\r\n\r\n<span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> OnlaunchModule(<span style=\"color:Blue\">string</span> name)\r\n        {\r\n            Bootstrapper.LoadModule(name);        \r\n        }\r\n<br><br>with in the xaml :<br>xmlns:command=&quot;clr-namespace:Microsoft.Practices.Composite.Presentation.Commands;assembly=Microsoft.Practices.Composite.Presentation&quot;<br>command:Click.Command=&quot;{Binding launchModule}&quot; <br>command:Click.CommandParameter=&quot;memberModule&quot;/&gt;</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>This one seems to be a good solution if I can add the canExecute method, but how to do this ?</p>\r\n<p>Last one : the old method from MVC pattern :<strong> OnClick</strong></p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> On_Click(<span style=\"color:Blue\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            <span style=\"color:Green\">//Do something                  </span>\r\n        }\r\n<br>As you can see, I just want to use the canExecute method and Execute with a parameter  (selected item from list, combobox or string basically). <br>Thank you for helping me to use a good developing practice.<br><br>Vlado<br><br></pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-07-22T02:57:28.863-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "214765",
    "ThreadId": "63174",
    "Html": "<p>Hi Vlado</p>\r\n<p>A guidline for best practices is the testability of your code. Code Behind events are hard to test, so i would prefer the Commanding approach. <br>Whether to use RelayCommand or DelegateCommand is a question of your needs. The Relay command is a somewhat light-weight DelegateCommand.</p>\r\n<p>ICommand is just an interface that is implemented by both, RelayCommand and DelegateCommand. <br>I prefer to use ICommand and DelegateCommand&nbsp;in the ViewModels, so i can use my mocking framework for testing (which requires Interfaces to be mocked).<br>The DelegateCommand is clearer for me than the RelayCommand.</p>\r\n<p>I also use the AttachedCommandBehaviour framework from <a href=\"http://marlongrech.wordpress.com/2008/12/13/attachedcommandbehavior-v2-aka-acb/\">http://marlongrech.wordpress.com/2008/12/13/attachedcommandbehavior-v2-aka-acb/</a><br>It provides nice Event wrapping for Controls events. This way I can handle events and commands in a consistent manner.</p>\r\n<p>Hope this helps. Regards</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-22T07:06:32.96-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "214792",
    "ThreadId": "63174",
    "Html": "<p>Hi,</p>\r\n<p>thanks for this quick answer :)</p>\r\n<p>So finally, I didn't have a wrong idea. I implement the DelegateCommand already. I just have to find a wayt to use the canExecute method with the delegate. I am still a newbie concerning C# syntax.</p>\r\n<p>I was looking at this website this morning, I will download the example in order to understand a little bit more by trying the sample.</p>\r\n<p>Vlado</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-22T07:47:42.903-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "214904",
    "ThreadId": "63174",
    "Html": "<p>Hi Vlado,</p>\r\n<p>In Prism-v2, the approach you mentioned for the delegate command is for Silverlight Applications. In WPF applications you can simply use the <strong>Command</strong> and <strong>CommandParameter</strong> properties in XAML. The same approach is valid for WPF <strong>RoutedCommands</strong> (since they use the same interface).</p>\r\n<p><span style=\"font-size:10pt\" lang=EN-US>&lt;Button AutomationProperties.AutomationId=&quot;SaveButton&quot; Grid.Row=&quot;6&quot; Grid.Column=&quot;1&quot; Content=&quot;Save&quot; Command=&quot;{Binding SaveOrderCommand}&quot; CommandParameter=&quot;...&quot;/</span>&gt;</p>\r\n<p>As you said, one of the goals of the MVVM pattern is not having much code behind in the view, to increase testability among other things. For this reason, the view Model is set as the <strong>DataContext</strong> of the view, and bindings in XAML to commands are performed, thus avoiding the code behind (you can check any of the Quickstarts or RI that use command to check how this is done).</p>\r\n<p>Finally, to add a can execute method to the DelegateCommand&lt;T&gt;, you can use code like this:<br><span style=\"color:blue;font-size:10pt\" lang=EN-US>&nbsp; new</span><span style=\"color:black;font-size:10pt\" lang=EN-US> DelegateCommand&lt;</span><span style=\"color:blue;font-size:10pt\" lang=EN-US>MyType</span><span style=\"color:black;font-size:10pt\" lang=EN-US>&gt;(Execute, CanExecute); //Execute and CanExecute are methods in the ViewModel where the command is created.</span></p>\r\n<p><span style=\"color:black;font-size:10pt\" lang=EN-US>&nbsp;</span></p>\r\n<p><span style=\"color:black\" lang=EN-US>The following might provide some more information to you about commands:</span></p>\r\n<ul>\r\n<li><span style=\"color:black\" lang=EN-US><a href=\"http://msdn.microsoft.com/en-us/library/dd458931.aspx\">How to: Create Locally Available Commands</a></span></li>\r\n<li><span style=\"color:black\" lang=EN-US><a href=\"http://msdn.microsoft.com/en-us/library/dd458890.aspx\">Commanding QuickStart</a> solution that comes with Prism</span></li>\r\n<li><span style=\"color:black\" lang=EN-US><a href=\"http://msdn.microsoft.com/en-us/library/ms752308.aspx\">Commanding Overview</a></span></li>\r\n<li><span style=\"color:black\" lang=EN-US><a href=\"http://msdn.microsoft.com/en-us/library/ms752051.aspx\">Input and Commands How-to Topics</a></span></li>\r\n</ul>\r\n<p>Please let me know if this helps.</p>\r\n<p>Damian Schenkelman<br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2009-07-22T11:49:52.427-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "215141",
    "ThreadId": "63174",
    "Html": "<p>As usual, thanks a lot for this answer. I really like this discussion thread in codeplex, you are doing a great job.</p>\r\n<p>In fact, I find yesterday that the problem came from my control. I am using the ribbon office control and I can't use&nbsp; this method. (I am looking for a fix at this time :))&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>I will now clean my code with this syntax. Thanks</p>\r\n<p>&nbsp;</p>\r\n<p>Vlado</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-23T00:51:55.28-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]