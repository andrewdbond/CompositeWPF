[
  {
    "Id": "165141",
    "ThreadId": "49362",
    "Html": "I am trying to access a WCF service using the interface generated by adding a service reference to my project. It works if I use the concrete class's MyMethodAsync method and subscribe to the competed event, but I'm trying to use the interface so I'm not tied to the concreate implementation. The interface has the BeginXXX and EndXXX methods, but I get an UnauthorizedAccessException when I update my model and raise the PropertyChanged event. <div><br></div><div>What is the recommended method of updating the UI from a background thread? I've tried using Application.Current.RootVisual.Dispatcher but it throws the same exception when it tries to access RootVisual. So how am I supposed to do this, I don't see any examples in the documentation or on the web.</div>",
    "PostedDate": "2009-03-05T17:50:00.57-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165287",
    "ThreadId": "49362",
    "Html": "Here's what I ended up doing: <a href=\"http://stackoverflow.com/questions/617377/decoupling-silverlight-client-from-service-reference-generated-class/618592#618592\">http://stackoverflow.com/questions/617377/decoupling-silverlight-client-from-service-reference-generated-class/618592#618592</a><div><br></div><div>See my detailed answer in the above link describing how I made a custom interface and then extended the proxy class using a partial class.</div>",
    "PostedDate": "2009-03-06T03:55:41.98-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165314",
    "ThreadId": "49362",
    "Html": "If decoupling is your objective you might be interested in the UnityContrib project (no relation to UnityContributions) that I have in my <a href=\"http://www.CodePlex.com/SDMS\">http://www.CodePlex.com/SDMS</a> application.   As you'll see from the first WebCast link on the home page I can configure, from the <strong><span style=\"text-decoration:underline\">Website's</span> Web.Config</strong> which implementation the WCF service should use for the service interface.   <br>\r\n<br>\r\nYou'll find the Presentation Tier's Business Logic Layer works off of an interface (decoupled from the Data Layer - the Data Layer need only to adhere to the interface)<br>\r\n",
    "PostedDate": "2009-03-06T05:20:53.173-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165447",
    "ThreadId": "49362",
    "Html": "Thx, I'll check it out. But doesn't Prism support this scenario? I thought the whole point of the CAL was to create loosely-coupled, testible applications. The guidance doesn't seem to cover WCF and I can't seem to find anything concrete on the web.",
    "PostedDate": "2009-03-06T10:26:34.097-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165468",
    "ThreadId": "49362",
    "Html": "<p>[developmentally]&nbsp;guidance doesn't seem to cover WCF and I can't seem to find anything concrete on the web.<br><br>Which is why I'm still investing time in the SDMS application (in the midst of two contracts&nbsp;- pulling back on open source).&nbsp;&nbsp;SDMS utilization of WCF&nbsp;may not be &quot;the&quot; way but it is &quot;a&quot; way that works....&nbsp; It is a way that is independent of the Data Layer&nbsp;&nbsp;(WCF, L2S, EF, etc) on both the Presentation and Middle Tiers.&nbsp;&nbsp; <br><br>There is no authoritivative source for Prism/Silverlight and WCF (not even the Silverlight Web Service team is providing guidance - see below).&nbsp; Where John Papa is an authoritivative source for Silverlight and Data Access there is no one providing architectural guidance that doesn't fall outside of&nbsp; Presentation -&gt; WCF -&gt; ServiceLayer -&gt; BLL -&gt; DAL -&gt; Data.&nbsp;&nbsp;&nbsp; The CompositeWPF/Prism changed all of the rules - the&nbsp;reality is that&nbsp;<strong>both</strong> the <strong>Presentation</strong> and <strong>Middle</strong> tier's should have business logic and data access layers, particularly&nbsp;since we can reuse services in Silverlight modules.&nbsp;&nbsp;&nbsp;Case in point, Silverlight can benefit from Isolated Storage opening up scenarios where your Prism application could chose a local cached data source as an option limiting the round-trips.<br><br>(steps off his soap box hoping Microsoft is listening)<br><br>Bill</p>\r\n<p>-----Original Message-----<br>From: Yavor Georgiev <br>Sent: Monday, January 12, 2009 12:05 PM<br>To: <a href=\"mailto:bill@global-webnet.com\">bill@global-webnet.com</a><br>Cc: CDF Silverlight Customer Issues<br>Subject: RE: (Silverlight Web Services Team) : SLSvcUtil - what is recommended P&amp;P?</p>\r\n<p>Hi Bill,</p>\r\n<p>Thanks for your note.</p>\r\n<p>I understand the scenario you are encountering in your enterprise app around managing config files. This is a common customer request and a command-line tool like svcutil is being considered in the next version of Silverilght.</p>\r\n<p>Unfortunately we don't have any additional tips we can provide at this point. Please continue to follow our blog for SL3-related updates.</p>\r\n<p>Thanks,<br>-Yavor</p>\r\n<p>-----Original Message-----<br>From: <a href=\"mailto:bill@global-webnet.com\">bill@global-webnet.com</a> [mailto:bill@global-webnet.com] <br>Sent: Wednesday, January 07, 2009 7:21 PM<br>To: Yavor Georgiev<br>Subject: (Silverlight Web Services Team) : SLSvcUtil - what is recommended P&amp;P?<br>Importance: High</p>\r\n<p>Can the team provide guidance for consuming WCF service for enterprise level applications?&nbsp;&nbsp; My initial efforts were somewhat frustrating as the Silverlight forums have you going in circles looking for a SLSvcUtil that doesn't exist, or SVCUtil flags that supposedly support Silverlight (that no one can reference).</p>\r\n<p>The following blog highlights an issue with using Prism/CompositeWPF and Silverlight - the main assembly has to have a copy of the ServiceReferences.ClientConfig referenced in a module (separate assembly):&nbsp;</p>\r\n<p><a href=\"http://www.global-webnet.net/blogengine/post/2009/01/03/PrismWCF-Cannot-find-ServiceReferencesClientConfig-in-xap-application-package.aspx\">http://www.global-webnet.net/blogengine/post/2009/01/03/PrismWCF-Cannot-find-ServiceReferencesClientConfig-in-xap-application-package.aspx</a></p>\r\n<p>The above provides a simple solution for a single module that consumes a single WCF service.&nbsp;&nbsp; When we have 20+ modules, configuration promises to be quite the nightmare complicated by a cyle that has the solution moving through development, staging and production environments.</p>\r\n<p>&quot;Add Web Service&quot; doesn't seem to be a viable solution.</p>\r\n<p>Your guidance and assistance will be appreciated as we have numerous sprints planned throughout the year that will be based on the infrastructure I provide; as an Independent Contractor I have a large responsibility to get this done right.</p>\r\n<p>Bill Kratochvil<br>Global Webnet, LLC<br>Blog: <a href=\"http://www.global-webnet.net/BlogEngine\">http://www.Global-webnet.net/BlogEngine</a></p>",
    "PostedDate": "2009-03-06T11:13:34.423-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165499",
    "ThreadId": "49362",
    "Html": "Thanks for the details, now I understand the situation better. I'm still surprised that this wasn't addressed before releasing Silverlight support for Prism. I'm a bit disappointed as well that this is going to require waiting for SL3. I guess I'll need to go thru your samples in detail as well. I'm not looking for multi-targeting support, I just want an SL app that uses WCF and is maintainable and testable.",
    "PostedDate": "2009-03-06T12:59:35.543-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165543",
    "ThreadId": "49362",
    "Html": "[developmentally] I'm not looking for multi-targeting support, I just want an SL app that uses WCF and is maintainable and testable.<br>\r\n<br>\r\nI don't think they are mutually exclusive - I believe you may want/need multi-targeting support.   Let me explain by example - I just spent the last couple of hours updating the SDMS application so that the Modules folder is supported under both Desktop and Silverlight.  Why?   &quot;maintainable and testable&quot;.   I created a Unit Test for you and checked everything in (been really wanting to do this for a while and this gave me good reason to).<br>\r\n<br>\r\nThe key point here is that the &quot;only&quot; code that will be different will be the XAML (Silverlight/WPF) and the actual WCF Service call.  I did however create my Desktop WCF Service using Async communications so you won't find any SILVERLIGHT conditional statements anywhere in the Business Logic Layer or Data Layer (they are one and the same code for both sides).   I should give a plug for the Project Linker (blogged about on my blog site w/webcast); all my time was spent creating empty WPF views and implementing the interface on them.<br>\r\n<br>\r\n<div style=\"font-family:courier new;background:white;color:black;font-size:8pt\">\r\n<p style=\"margin:0px\">[<span style=\"color:#2b91af\">TestMethod</span>]</p>\r\n<p style=\"margin:0px\"><span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> TestMethod1()</p>\r\n<p style=\"margin:0px\">{</p>\r\n<p style=\"margin:0px\">    <span style=\"color:green\">// IModule does all of the heavy lifting - configures all interfaces</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:green\">// so we'll just use it to set things up.</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:#2b91af\">IModule</span> module = Container.Resolve&lt;<span style=\"color:#2b91af\">IModule</span>&gt;();</p>\r\n<p style=\"margin:0px\">    module.Initialize();</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">    <span style=\"color:green\">// Resolve the EmployeeList Presenter</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:#2b91af\">EmployeeListPresenter</span> MockView = Container.Resolve&lt;<span style=\"color:#2b91af\">EmployeeListPresenter</span>&gt;();</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">    <span style=\"color:green\">// Give WCF Service a chance to complete</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:#2b91af\">Thread</span>.Sleep(2000);</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">    <span style=\"color:green\">// Cast so we can easily access presentation model</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:#2b91af\">EmployeePresentationModel</span> model = (<span style=\"color:#2b91af\">EmployeePresentationModel</span>) MockView.Model;</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">    <span style=\"color:#2b91af\">Assert</span>.AreEqual(3, model.EmployeeList.Count, <span style=\"color:#a31515\">&quot;Employee list should have three records!&quot;</span>);</p>\r\n<p style=\"margin:0px\">}<br>\r\n<br>\r\n<br>\r\nNote we can put the Testing thread to sleep :)  I just tested everything short of the UI which is databound to the presentation model (nothing to test in the view) all the way through the WCF Service and back.  Since my PresentationModel implements INotifyPropertyChanged I can rest assured my View will work (assuming I did my Binding correctly).<br>\r\n<br>\r\nLet's see what IModule was up to (showing the effectiveness of multi-targeting)<br>\r\n<br>\r\n</p>\r\n<div style=\"font-family:courier new;background:white;color:black;font-size:8pt\">\r\n<p style=\"margin:0px\"><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">ModuleEmployee</span> : <span style=\"color:#2b91af\">IModule</span></p>\r\n<p style=\"margin:0px\">{</p>\r\n<p style=\"margin:0px\">    <span style=\"color:green\">// For class use</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> <span style=\"color:#2b91af\">IUnityContainer</span> container;</p>\r\n<p style=\"margin:0px\">    <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> <span style=\"color:#2b91af\">IRegionViewRegistry</span> regionViewRegistry;</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;summary&gt;</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> Constructor : Setup class</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;/summary&gt;</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;param name=&quot;container&quot;&gt;&lt;/param&gt;</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;param name=&quot;regionViewRegistry&quot;&gt;&lt;/param&gt;</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:blue\">public</span> ModuleEmployee(<span style=\"color:#2b91af\">IUnityContainer</span> container,</p>\r\n<p style=\"margin:0px\">        <span style=\"color:#2b91af\">IRegionViewRegistry</span> regionViewRegistry)</p>\r\n<p style=\"margin:0px\">    {</p>\r\n<p style=\"margin:0px\">        <span style=\"color:blue\">this</span>.container = container;</p>\r\n<p style=\"margin:0px\">        <span style=\"color:blue\">this</span>.regionViewRegistry = regionViewRegistry; </p>\r\n<p style=\"margin:0px\">    }</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">    <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()</p>\r\n<p style=\"margin:0px\">    {</p>\r\n<p style=\"margin:0px\">        RegisterViewAndServices();</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">        <span style=\"color:green\">// EmployeeModule - Views folder</span></p>\r\n<p style=\"margin:0px\">        regionViewRegistry.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;MainRegion&quot;</span>,</p>\r\n<p style=\"margin:0px\">            () =&gt; container.Resolve&lt;<span style=\"color:#2b91af\">EmployeeMainPresenter</span>&gt;().View);</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">        regionViewRegistry.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;frmCaption&quot;</span>,</p>\r\n<p style=\"margin:0px\">            () =&gt; container.Resolve&lt;<span style=\"color:#2b91af\">frmCaptionPresenter</span>&gt;().View);</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">        regionViewRegistry.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;frmEmployeeList&quot;</span>,</p>\r\n<p style=\"margin:0px\">            () =&gt; container.Resolve&lt;<span style=\"color:#2b91af\">EmployeeListPresenter</span>&gt;().View);</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">        regionViewRegistry.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;TabInformation&quot;</span>,</p>\r\n<p style=\"margin:0px\">            () =&gt; container.Resolve&lt;<span style=\"color:#2b91af\">EmployeeInformationPresenter</span>&gt;().View);</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">        regionViewRegistry.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;TabAssigned&quot;</span>,</p>\r\n<p style=\"margin:0px\">           () =&gt; container.Resolve&lt;<span style=\"color:#2b91af\">EmployeeAssignedPresenter</span>&gt;().View);</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">        regionViewRegistry.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;TabInWork&quot;</span>,</p>\r\n<p style=\"margin:0px\">           () =&gt; container.Resolve&lt;<span style=\"color:#2b91af\">EmployeeInWorkPresenter</span>&gt;().View);</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">        regionViewRegistry.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;frmStatus&quot;</span>,</p>\r\n<p style=\"margin:0px\">            () =&gt; container.Resolve&lt;<span style=\"color:#2b91af\">frmStatusPresenter</span>&gt;().View);</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">    }</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">    <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RegisterViewAndServices()</p>\r\n<p style=\"margin:0px\">    {</p>\r\n<p style=\"margin:0px\">        container.RegisterType&lt;<span style=\"color:#2b91af\">IEmployeeMainView</span>, <span style=\"color:#2b91af\">EmployeeMainView</span>&gt;()</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">            <span style=\"color:green\">// Layers</span></p>\r\n<p style=\"margin:0px\">            .RegisterType&lt;<span style=\"color:#2b91af\">IEmployeeProviderBLL</span>,<span style=\"color:#2b91af\">EmployeeProviderBLL</span>&gt;()</p>\r\n<p style=\"margin:0px\">            .RegisterType&lt;<span style=\"color:#2b91af\">IEmployeeProviderDAL</span>,<span style=\"color:#2b91af\">EmployeeProviderDAL</span>&gt;()</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">            <span style=\"color:green\">// Views</span></p>\r\n<p style=\"margin:0px\">            .RegisterType&lt;<span style=\"color:#2b91af\">IfrmStatusView</span>, <span style=\"color:#2b91af\">frmStatusView</span>&gt;()</p>\r\n<p style=\"margin:0px\">            .RegisterType&lt;<span style=\"color:#2b91af\">IfrmCaptionView</span>, <span style=\"color:#2b91af\">frmCaptionView</span>&gt;()</p>\r\n<p style=\"margin:0px\">            .RegisterType&lt;<span style=\"color:#2b91af\">IEmployeeListView</span>, <span style=\"color:#2b91af\">EmployeeListView</span>&gt;()</p>\r\n<p style=\"margin:0px\">            .RegisterType&lt;<span style=\"color:#2b91af\">IEmployeeListView</span>, <span style=\"color:#2b91af\">EmployeeListView</span>&gt;()</p>\r\n<p style=\"margin:0px\">            .RegisterType&lt;<span style=\"color:#2b91af\">IEmployeeInWorkView</span>, <span style=\"color:#2b91af\">EmployeeInWorkView</span>&gt;()</p>\r\n<p style=\"margin:0px\">            .RegisterType&lt;<span style=\"color:#2b91af\">IEmployeeAssignedView</span>, <span style=\"color:#2b91af\">EmployeeAssignedView</span>&gt;()</p>\r\n<p style=\"margin:0px\">            .RegisterType&lt;<span style=\"color:#2b91af\">IEmployeeInformationView</span>, <span style=\"color:#2b91af\">EmployeeInformationView</span>&gt;()</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">            <span style=\"color:green\">// Services</span></p>\r\n<p style=\"margin:0px\">            .RegisterType&lt;<span style=\"color:#2b91af\">IEmployeeService</span>, <span style=\"color:#2b91af\">EmployeeService</span>&gt;()</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">            <span style=\"color:green\">// Models</span></p>\r\n<p style=\"margin:0px\">            .RegisterType&lt;<span style=\"color:#2b91af\">IEmployeePresentationModel</span>, <span style=\"color:#2b91af\">EmployeePresentationModel</span>&gt;(</p>\r\n<p style=\"margin:0px\">                            <span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">ContainerControlledLifetimeManager</span>());</p>\r\n<p style=\"margin:0px\">    }</p>\r\n<p style=\"margin:0px\">}</p>\r\n<p style=\"margin:0px\">}</p>\r\n</div>\r\n<p style=\"margin:0px\">&lt;!--EndFragment--&gt;<br>\r\nIt did some pretty heavy lifting which tells me everything that will be executed during Silverlight runtime - works.  <br>\r\n<br>\r\nThe following is the Presenter, which is responsible for updating the Presentation Model (which the view is observing).  You can see that my Desktop Unit Test effectively exercises many, if not all, logic within the process.   Silverlight unit testing is done in a browser...  I'd rather take this approach.<br>\r\n<br>\r\nHope this helps in your quest to finding an architecture that works for you!<br>\r\n<br>\r\nBill<br>\r\n</p>\r\n<div style=\"font-family:courier new;background:white;color:black;font-size:8pt\">\r\n<p style=\"margin:0px\"><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">EmployeeListPresenter</span> : <span style=\"color:#2b91af\">PresenterBase</span>&lt;<span style=\"color:#2b91af\">IEmployeeListView</span>&gt;</p>\r\n<p style=\"margin:0px\">{</p>\r\n<p style=\"margin:0px\">    <span style=\"color:blue\">readonly</span> <span style=\"color:#2b91af\">IEmployeeService</span> employeeService;</p>\r\n<p style=\"margin:0px\">    <span style=\"color:blue\">readonly</span> <span style=\"color:#2b91af\">IEventAggregator</span> aggregator;</p>\r\n<p style=\"margin:0px\">    <span style=\"color:blue\">readonly</span> <span style=\"color:#2b91af\">IEmployeePresentationModel</span> model;</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;summary&gt;</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> Constructor : setup class</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;/summary&gt;</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;param name=&quot;container&quot;&gt;&lt;/param&gt;</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;param name=&quot;view&quot;&gt;&lt;/param&gt;</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:blue\">public</span> EmployeeListPresenter(</p>\r\n<p style=\"margin:0px\">        <span style=\"color:#2b91af\">IEmployeeListView</span> view,</p>\r\n<p style=\"margin:0px\">        <span style=\"color:#2b91af\">IEmployeePresentationModel</span> model,</p>\r\n<p style=\"margin:0px\">        <span style=\"color:#2b91af\">IUnityContainer</span> container,</p>\r\n<p style=\"margin:0px\">        <span style=\"color:#2b91af\">IEventAggregator</span> aggregator,</p>\r\n<p style=\"margin:0px\">        <span style=\"color:#2b91af\">IEmployeeService</span> service) : <span style=\"color:blue\">base</span>(view,model,container)</p>\r\n<p style=\"margin:0px\">    {</p>\r\n<p style=\"margin:0px\">        <span style=\"color:blue\">this</span>.aggregator = aggregator;</p>\r\n<p style=\"margin:0px\">        <span style=\"color:blue\">this</span>.employeeService = service;</p>\r\n<p style=\"margin:0px\">        <span style=\"color:blue\">this</span>.model = model;</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">        <span style=\"color:green\">// Subscribe to ListBoxChanged event and </span></p>\r\n<p style=\"margin:0px\">        aggregator.GetEvent&lt;<span style=\"color:#2b91af\">ListBoxChangedEvent</span>&gt;().Subscribe(ListBoxChangedEventHandler, <span style=\"color:blue\">true</span>);</p>\r\n<p style=\"margin:0px\">        aggregator.GetEvent&lt;<span style=\"color:#2b91af\">EmployeeEvent</span>&gt;().Subscribe(EmployeeEventHandler, <span style=\"color:blue\">true</span>);</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">        <span style=\"color:green\">// Async call to service to populate employee list.  The EmployeeListEventHandler</span></p>\r\n<p style=\"margin:0px\">        <span style=\"color:green\">// will be called when data is received</span></p>\r\n<p style=\"margin:0px\">        employeeService.GetEmployeeList();</p>\r\n<p style=\"margin:0px\">    }</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;summary&gt;</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> Subscribed to in constructor - updates the model's SelectedEmployee property every</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> time a new employee is selected</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;/summary&gt;</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;param name=&quot;args&quot;&gt;&lt;/param&gt;</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> ListBoxChangedEventHandler(<span style=\"color:#2b91af\">SelectionChangedEventArgs</span> args)</p>\r\n<p style=\"margin:0px\">    {</p>\r\n<p style=\"margin:0px\">        model.SelectedEmployee = args.AddedItems[0] <span style=\"color:blue\">as</span> <span style=\"color:#2b91af\">Employee_Data</span>;</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">        <span style=\"color:#2b91af\">StatusBarEvent</span> sbEvent = aggregator.GetEvent&lt;<span style=\"color:#2b91af\">StatusBarEvent</span>&gt;();</p>\r\n<p style=\"margin:0px\">        <span style=\"color:blue\">if</span> (sbEvent != <span style=\"color:blue\">null</span>)</p>\r\n<p style=\"margin:0px\">            aggregator.GetEvent&lt;<span style=\"color:#2b91af\">StatusBarEvent</span>&gt;().Publish(</p>\r\n<p style=\"margin:0px\">                <span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">StatusBarData</span></p>\r\n<p style=\"margin:0px\">                {</p>\r\n<p style=\"margin:0px\">                    Message = <span style=\"color:blue\">string</span>.Format(<span style=\"color:#a31515\">&quot;You clicked {0}&quot;</span>, model.SelectedEmployee.DisplayValue),</p>\r\n<p style=\"margin:0px\">                    Panel = <span style=\"color:#2b91af\">StatusPanel</span>.Left</p>\r\n<p style=\"margin:0px\">                });</p>\r\n<p style=\"margin:0px\">    }</p>\r\n<p style=\"margin:0px\"> </p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;summary&gt;</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> Handler for when Employee list is returned by service call to </span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> GetEmployeeList()</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;/summary&gt;</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;param name=&quot;args&quot;&gt;&lt;/param&gt;</span></p>\r\n<p style=\"margin:0px\">    <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> EmployeeEventHandler(<span style=\"color:#2b91af\">EmployeeEventArgs</span> args)</p>\r\n<p style=\"margin:0px\">    {</p>\r\n<p style=\"margin:0px\">        model.EmployeeList = args.EmployeeList;</p>\r\n<p style=\"margin:0px\">    }</p>\r\n<p style=\"margin:0px\"> }</p>\r\n</div>\r\n<p style=\"margin:0px\">&lt;!--EndFragment--&gt;<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n</p>\r\n</div>\r\n&lt;!--EndFragment--&gt;\r\n",
    "PostedDate": "2009-03-06T15:46:11.68-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165566",
    "ThreadId": "49362",
    "Html": "Wow, thanks!!! I must say, I appreciate your help. I figured out my original problem - just didn't understand Dispatcher and how/when I could use it. I just needed to register a reference to the shell's Dispatcher in the container - now I can access it anywhere. So now I'm able to just use the service client's interface instead of being dependent on the proxy class generated. This should allow me to test in isolation. I actually took it a step further and created my own interface (exactly the same as the generated one) and placed it in a separate module along with all my other interfaces. My goal is that the modules can reference the Interfaces project and won't need to reference each other. <div><br></div><div>As for the archtecture, I can tell yours is really well thought out and fits well with Prism, but for the moment what I have meets all my needs. I will need to incorporate something like your architechture down the road, but I'm a bit behind and will just be moving forward with what I've got at this point. Again, thanks. I've really rarely ever had the kind of response I've gotten from you.<br><div><br></div><div><br></div></div>",
    "PostedDate": "2009-03-06T17:14:11.623-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]