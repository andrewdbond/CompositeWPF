[
  {
    "Id": "193850",
    "ThreadId": "57362",
    "Html": "<p>Hi all,</p>\r\n<p>I encounter a problem using the event aggregator in silverlight. I get MethodAccessException when subscribing to an event. Here is my code :</p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#2b91af;font-size:x-small\"><span style=\"color:#2b91af;font-size:x-small\">\r\n<p>EventAggregator EventService = new EventAggregator ();</p>\r\n&lt;font size=&quot;2&quot; color=&quot;#2b91af&quot;&gt;&lt;font size=&quot;2&quot; color=&quot;#2b91af&quot;&gt;\r\n<p>&nbsp;</p>\r\n&lt;/font&gt;&lt;/font&gt;</span>&lt;font size=&quot;2&quot; color=&quot;#2b91af&quot;&gt;\r\n<p>&nbsp;</p>\r\n&lt;/font&gt;</span></p>\r\n<p><span style=\"font-size:x-small\">EventService.GetEvent&lt;</span><span style=\"color:#2b91af;font-size:x-small\"><span style=\"color:#2b91af;font-size:x-small\">GenericEvent</span></span><span style=\"font-size:x-small\">&lt;</span><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#0000ff;font-size:x-small\">string</span></span><span style=\"font-size:x-small\">&gt;&gt;().Subscribe(</span></p>\r\n<p><span style=\"font-size:x-small\">s =&gt;{</span><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#0000ff;font-size:x-small\">if</span></span><span style=\"font-size:x-small\"> (s.Topic == </span><span style=\"color:#a31515;font-size:x-small\"><span style=\"color:#a31515;font-size:x-small\">&quot;EventTopic&quot; }</span></span></p>\r\n<p><span style=\"font-size:x-small\">)</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size:x-small\">This is the stackTrace :</span></p>\r\n<p><span style=\"font-size:x-small\">&nbsp;at System.Delegate.BindToMethodInfo(Object target, RuntimeMethodHandle method, RuntimeTypeHandle methodType, DelegateBindingFlags flags)<br>&nbsp;&nbsp; at System.Delegate.CreateDelegate(Type type, Object firstArgument, MethodInfo method, Boolean throwOnBindFailure)<br>&nbsp;&nbsp; at System.Delegate.CreateDelegate(Type type, Object firstArgument, MethodInfo method)<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Events.DelegateReference.TryGetDelegate()<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Events.DelegateReference.get_Target()<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Events.EventSubscription`1..ctor(IDelegateReference actionReference, IDelegateReference filterReference)<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Events.CompositePresentationEvent`1.Subscribe(Action`1 action, ThreadOption threadOption, Boolean keepSubscriberReferenceAlive, Predicate`1 filter)<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Events.CompositePresentationEvent`1.Subscribe(Action`1 action, ThreadOption threadOption, Boolean keepSubscriberReferenceAlive)<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Events.CompositePresentationEvent`1.Subscribe(Action`1 action, ThreadOption threadOption)<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Events.CompositePresentationEvent`1.Subscribe(Action`1 action)<br>&nbsp;&nbsp; at MyEventAggregatorSeriveTest.SubscriberUserControl.UserControl_Loaded(Object sender, RoutedEventArgs e)</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size:x-small\">Any help.</span></p>\r\n<p><span style=\"font-size:x-small\">Thanks...</span></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-05-25T02:45:49.473-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "194466",
    "ThreadId": "57362",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Segoe UI','sans-serif'\" lang=EN-US><span style=\"font-size:small\">Hi wasimf, </span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Segoe UI','sans-serif'\" lang=EN-US><span style=\"font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Segoe UI','sans-serif'\" lang=EN-US><span style=\"font-size:small\">The current version of silverlight (SL 2.0) does not support weak references to lambda expressions. Taken from the Prism-v2 documentation </span><a href=\"http://msdn.microsoft.com/en-us/library/dd458918.aspx\"><span style=\"font-size:small\">Event Aggregation QuickStart</span></a><span style=\"font-size:small\">:</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><em><span style=\"font-family:'Segoe UI','sans-serif'\" lang=EN-US><span style=\"font-size:small\">Silverlight does not support weak references to lambda expressions or anonymous delegates. Therefore, the filter parameter must be a separate method if you are targeting Silverlight.</span></span></em></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Segoe UI','sans-serif'\" lang=EN-US>&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"color:#1f497d;font-family:'Segoe UI','sans-serif'\" lang=EN-US>T</span><span style=\"font-family:'Segoe UI','sans-serif'\" lang=EN-US>o work around this issue, you could create a separate method to implement the filtering. For example:</span></span></p>\r\n<p><span style=\"font-size:10pt;font-family:'Segoe UI','sans-serif'\" lang=EN-US>EventService.GetEvent&lt;<span style=\"color:#2b91af\">GenericEvent</span>&lt;<span style=\"color:blue\">string</span>&gt;&gt;().Subscribe(YourAction)</span></p>\r\n<p><span style=\"font-size:10pt;font-family:'Segoe UI','sans-serif'\" lang=EN-US>.....</span><span style=\"font-family:'Segoe UI','sans-serif'\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'Segoe UI','sans-serif'\" lang=EN-US>public</span><span style=\"font-size:10pt;font-family:'Segoe UI','sans-serif'\" lang=EN-US> <span style=\"color:blue\">void </span>YourAction(<span style=\"color:blue\">string</span> topic)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Segoe UI','sans-serif'\" lang=EN-US>{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Segoe UI','sans-serif'\" lang=EN-US>&nbsp;&nbsp; if(topic == &quot;something&quot;)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Segoe UI','sans-serif'\" lang=EN-US>&nbsp;&nbsp; {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Segoe UI','sans-serif'\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // more code</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Segoe UI','sans-serif'\" lang=EN-US>&nbsp;&nbsp; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Segoe UI','sans-serif'\" lang=EN-US>}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Segoe UI','sans-serif'\" lang=EN-US>&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Segoe UI','sans-serif'\" lang=EN-US><span style=\"font-size:small\">If you are using the <strong>if</strong> statement to filter which events to process, you could find useful the overload of the <strong>Subscribe</strong> method that accepts a filter.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Segoe UI','sans-serif'\" lang=EN-US>&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Segoe UI','sans-serif'\" lang=EN-US><span style=\"font-size:small\">Hope it helps!</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Segoe UI','sans-serif'\" lang=EN-US><span style=\"font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Segoe UI','sans-serif'\"><span style=\"font-size:small\">Matias Bonaventura</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Segoe UI','sans-serif'\"><a href=\"http://blogs.southworks.net/\"><span style=\"font-size:small;color:#0000ff\">http://blogs.southworks.net/matiasb</span></a></span></p>",
    "PostedDate": "2009-05-26T12:37:12.497-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "217040",
    "ThreadId": "57362",
    "Html": "<p>Matias</p>\r\n<p>but your sample code is not a *filter* method, it's a *action* method. Here is a correct sample from the document you referred to:</p>\r\n<p>&nbsp;</p>\r\n<pre id=\"ctl00_MTContentSelector1_mainContentContainer_ctl16CSharp\" style=\"white-space:pre-wrap\"><span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> FundOrderFilter(FundOrder fundOrder)<br>{<br>    <span style=\"color:blue\">return</span> fundOrder.CustomerId == _customerId;<br>}<br>...<br><br>FundAddedEvent fundAddedEvent = eventAggregator.GetEvent&lt;FundAddedEvent&gt;();<br><br>subscriptionToken = fundAddedEvent.Subscribe(FundAddedEventHandler, ThreadOption.UIThread, <span style=\"color:blue\">false</span>, FundOrderFilter);</pre>",
    "PostedDate": "2009-07-28T20:05:56.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "269327",
    "ThreadId": "57362",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>matiasbonaventura wrote:</strong><br>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Segoe UI','sans-serif'\" lang=EN-US><span style=\"font-size:small\">Hi wasimf, </span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Segoe UI','sans-serif'\" lang=EN-US><span style=\"font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Segoe UI','sans-serif'\" lang=EN-US><span style=\"font-size:small\">The current version of silverlight (SL 2.0) does not support weak references to lambda expressions. Taken from the Prism-v2 documentation </span><a href=\"http://msdn.microsoft.com/en-us/library/dd458918.aspx\"><span style=\"font-size:small\">Event Aggregation QuickStart</span></a><span style=\"font-size:small\">:</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><em><span style=\"font-family:'Segoe UI','sans-serif'\" lang=EN-US><span style=\"font-size:small\">Silverlight does not support weak references to lambda expressions or anonymous delegates. Therefore, the filter parameter must be a separate method if you are targeting Silverlight.</span></span></em></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Segoe UI','sans-serif'\" lang=EN-US>&nbsp;</span></p>\r\n</blockquote>\r\n<p>Hi matiasbonaventura,</p>\r\n<p>Your solution is right, but the reason is not correct. I think this is the true reason<span>:</span><span> </span><a href=\"http://msdn.microsoft.com/en-us/library/74x8f551(VS.96).aspx\">http://msdn.microsoft.com/en-us/library/74x8f551%28VS.96%29.aspx</a><br><em><span>&nbsp; &nbsp; &nbsp; &nbsp; In Silverlight, <span>method</span> must specify an accessible method. </span></em></p>\r\n<p><span>Lambda and anonymous delegates are implemented as private methods, so they cannot be accessed.</span><em></em></p>",
    "PostedDate": "2009-12-19T17:51:11.53-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "561881",
    "ThreadId": "57362",
    "Html": "\r\n<p>You can work around this issue by wrapping the target method in a method which is accessible publicly.</p>\r\n<p>An example of this can be found here:</p>\r\n<p>http://peplowdown.wordpress.com/2011/02/07/compositepresentationevent-methodaccessexception-keep-your-privates-to-yourself/</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-02-07T05:20:59.747-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "691675",
    "ThreadId": "57362",
    "Html": "<p>It's unfortunate that Silverlight works this way. It's been two releases of Prism and still no acceptable workaround.</p>\n<p>Being unable to use an anonymous lambda or private method forces one to break best practices (encapsulation), and fatten a public interface on&nbsp;a class just so messages can be passed.</p>\n<p>This issue has been most frustrating, and the workaround is nearly unacceptable.</p>",
    "PostedDate": "2011-10-31T08:42:22.41-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "691703",
    "ThreadId": "57362",
    "Html": "<p>Hi,</p>\r\n<p>Please take into account that, if you set the <strong>keepSubscriberReferenceAlive </strong>parameter in the <strong>Subscribe </strong>method to <strong>true</strong>, you will be able to pass a private method (such as a lambda expression) as the handler for the event subscription.</p>\r\n<p>You could, anyway, create a work item in the issue tracker so that the Prism team takes this into account for future releases of Prism.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi&nbsp;<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-10-31T09:38:00.41-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]