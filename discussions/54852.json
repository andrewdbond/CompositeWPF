[
  {
    "Id": "185066",
    "ThreadId": "54852",
    "Html": "I've run into what I believe to be a general Silverlight 2 limitation and was hoping to get MVVM/Prism guidance on how to overcome it. I'll give a brief description of the problem and provide the relevant code snippets.<br>\r\n<br>\r\n<strong>Scenario:</strong><br>\r\n<br>\r\nI'm using Prism and the MVVM pattern on a project which has a DataGrid and I'd like to use a ComboBox in the CellEditingTemplate to allow the end user to select a new value from a list. To enable this scenario, I've exposed two properties on my ViewModel - Types and Items. Types is an array of a class containing properties Key and Value and is where I store my display text and actual value for the ComboBox. Items is an ObservableCollection of my model class which exposes a property which is the type of my Key/Value class.<br>\r\n<br>\r\nThe project is setup such that I have a ContainerControlledLifetimeManager Service which returns values to a ViewModel which is bound to by the View: (i.e. Service &lt;--&gt; ViewModel &lt;--&gt; View). <br>\r\n<br>\r\n<strong>Problem:</strong><br>\r\n<br>\r\nWhen I set the ItemsSource of the DataGrid like so, ItemsSource={Binding Path=Items}, the ComboBox contained within the CellEditingTemplate is unable to bind to the Types property of my ViewModel because the relative binding path now has Items as the root.<br>\r\n<br>\r\n<strong>Solution?:</strong><br>\r\n<br>\r\nThe obvious solution would be to reset the root of the relative binding path back to the DataContext for the ComboBox (something like ItemsSource={Binding Path=Types, Source={DataContext}}, but I've searched high and low and haven't found a way to do that. All the other solutions I've seen involves setting up a class that exposes the property you want to bind to as a StaticReource. However, in my scenario that won't work (at least I don't think it will) because I'm using the ContainerControlledLifetimeManager Service to get the values for the Types property and as far as I know any class you markup as a resource needs to have an empty default constructor - which would prevent me from being able to pull the service from the container using constructor Dependency Injection.<br>\r\n<br>\r\nFor the time being, I've handled the binding in the code behind in the PreparingCellForEdit event handler, but I would definitly prefer a pure XAML/binding method if one exists.<br>\r\n<br>\r\nThe main code to reconstruct the scenario is below. Thanks in advance for any guidance you can provide.<br>\r\n<br>\r\nRyan<br>\r\n<br>\r\n<strong>Module</strong><br>\r\n<br>\r\n<pre><span>using</span> Microsoft.Practices.Composite.Modularity;\r\n<span>using</span> Microsoft.Practices.Composite.Regions;\r\n<span>using</span> Microsoft.Practices.Unity;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.Services;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.ViewModels;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.Views;\r\n\r\n<span>namespace</span> SLPrismGridComboBox.ModuleA\r\n{\r\n    <span>public</span> <span>class</span> ModuleAModule : IModule\r\n    {\r\n\r\n        IUnityContainer _container;\r\n        IRegionManager _regionManager;\r\n\r\n        <span>public</span> ModuleAModule(IUnityContainer container, IRegionManager regionManager)\r\n        {\r\n            _container = container;\r\n            _regionManager = regionManager;\r\n        }\r\n\r\n        <span>public</span> <span>void</span> Initialize()\r\n        {\r\n            RegisterTypes();\r\n\r\n            IMiscView view = _container.Resolve&lt;IMiscView&gt;();\r\n            _regionManager.AddToRegion(<span>&quot;MainRegion&quot;</span>, view);\r\n        }\r\n\r\n        <span>private</span> <span>void</span> RegisterTypes()\r\n        {\r\n            _container.RegisterType&lt;IMiscView, MiscView&gt;();\r\n            _container.RegisterType&lt;IMiscViewModel, MiscViewModel&gt;();\r\n            _container.RegisterType&lt;IMiscService, MiscService&gt;(<span>new</span> ContainerControlledLifetimeManager());\r\n        }\r\n\r\n    }\r\n}</pre>\r\n<br>\r\n<strong>Models</strong> <br>\r\n<pre><span>namespace</span> SLPrismGridComboBox.ModuleA.Models\r\n{\r\n    <span>public</span> <span>class</span> SimpleKeyValuePair\r\n    {\r\n        <span>public</span> <span>string</span> Key { get; set; }\r\n        <span>public</span> <span>string</span> Value { get; set; }\r\n\r\n        <span>public</span> SimpleKeyValuePair(<span>string</span> key, <span>string</span> <span>value</span>)\r\n        {\r\n            <span>this</span>.Key = key;\r\n            <span>this</span>.Value = <span>value</span>;\r\n        }\r\n\r\n        <span>public</span> <span>override</span> <span>bool</span> Equals(<span>object</span> obj)\r\n        {\r\n            <span>if</span> (obj.GetType().Equals(<span>this</span>.GetType()))\r\n            {\r\n                <span>if</span> (((SimpleKeyValuePair)obj).Value.Equals(<span>this</span>.Value))\r\n                {\r\n                    <span>return</span> <span>true</span>;\r\n                }\r\n            }\r\n            <span>return</span> <span>false</span>;\r\n        }\r\n\r\n        <span>public</span> <span>override</span> <span>int</span> GetHashCode()\r\n        {\r\n            <span>return</span> <span>base</span>.GetHashCode();\r\n        }\r\n    }\r\n}\r\n\r\n<span>namespace</span> SLPrismGridComboBox.ModuleA.Models\r\n{\r\n    <span>public</span> <span>class</span> MiscModel\r\n    {\r\n\r\n        <span>public</span> <span>string</span> Name { get; set; }\r\n        <span>public</span> SimpleKeyValuePair Type { get; set; }\r\n\r\n    }\r\n}</pre>\r\n<br>\r\n<strong>Service</strong><br>\r\n<pre><span>using</span> System.Collections.ObjectModel;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.Models;\r\n\r\n<span>namespace</span> SLPrismGridComboBox.ModuleA.Services\r\n{\r\n    <span>public</span> <span>interface</span> IMiscService\r\n    {\r\n        ObservableCollection&lt;MiscModel&gt; GetAllMiscModels();\r\n        SimpleKeyValuePair[] GetAllTypes();\r\n    }\r\n}</pre>\r\n<pre><span>using</span> System.Collections.Generic;\r\n<span>using</span> System.Collections.ObjectModel;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.Models;\r\n\r\n<span>namespace</span> SLPrismGridComboBox.ModuleA.Services\r\n{\r\n    <span>public</span> <span>class</span> MiscService : IMiscService\r\n    {\r\n        <span>public</span> ObservableCollection&lt;MiscModel&gt; GetAllMiscModels()\r\n        {\r\n            ObservableCollection&lt;MiscModel&gt; result = <span>new</span> ObservableCollection&lt;MiscModel&gt;();\r\n            SimpleKeyValuePair[] types = GetAllTypes();\r\n            <span>int</span> i = -1;\r\n\r\n            result.Add(<span>new</span> MiscModel() { Name = <span>&quot;Name 1&quot;</span>, Type = types[i += 1] });\r\n            result.Add(<span>new</span> MiscModel() { Name = <span>&quot;Name 2&quot;</span>, Type = types[i += 1] });\r\n            result.Add(<span>new</span> MiscModel() { Name = <span>&quot;Name 3&quot;</span>, Type = types[i += 1] });\r\n            result.Add(<span>new</span> MiscModel() { Name = <span>&quot;Name 4&quot;</span>, Type = types[i += 1] });\r\n            result.Add(<span>new</span> MiscModel() { Name = <span>&quot;Name 5&quot;</span>, Type = types[i += 1] });\r\n            result.Add(<span>new</span> MiscModel() { Name = <span>&quot;Name 6&quot;</span>, Type = types[i += 1] });\r\n            result.Add(<span>new</span> MiscModel() { Name = <span>&quot;Name 7&quot;</span>, Type = types[i += 1] });\r\n\r\n            <span>return</span> result;\r\n        }\r\n\r\n        <span>public</span> SimpleKeyValuePair[] GetAllTypes()\r\n        {\r\n            List&lt;SimpleKeyValuePair&gt; result = <span>new</span> List&lt;SimpleKeyValuePair&gt;();\r\n\r\n            result.Add(<span>new</span> SimpleKeyValuePair(<span>&quot;Type 1&quot;</span>, <span>&quot;Value 1&quot;</span>));\r\n            result.Add(<span>new</span> SimpleKeyValuePair(<span>&quot;Type 2&quot;</span>, <span>&quot;Value 2&quot;</span>));\r\n            result.Add(<span>new</span> SimpleKeyValuePair(<span>&quot;Type 3&quot;</span>, <span>&quot;Value 3&quot;</span>));\r\n            result.Add(<span>new</span> SimpleKeyValuePair(<span>&quot;Type 4&quot;</span>, <span>&quot;Value 4&quot;</span>));\r\n            result.Add(<span>new</span> SimpleKeyValuePair(<span>&quot;Type 5&quot;</span>, <span>&quot;Value 5&quot;</span>));\r\n            result.Add(<span>new</span> SimpleKeyValuePair(<span>&quot;Type 6&quot;</span>, <span>&quot;Value 6&quot;</span>));\r\n            result.Add(<span>new</span> SimpleKeyValuePair(<span>&quot;Type 7&quot;</span>, <span>&quot;Value 7&quot;</span>));\r\n\r\n            <span>return</span> result.ToArray();\r\n        }\r\n    }\r\n}</pre>\r\n<br>\r\n<br>\r\n<strong>ViewModel</strong> <br>\r\n<br>\r\n<pre><span>using</span> System.Collections.ObjectModel;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.Models;\r\n<span>namespace</span> SLPrismGridComboBox.ModuleA.ViewModels\r\n{\r\n    <span>public</span> <span>interface</span> IMiscViewModel\r\n    {\r\n        ObservableCollection&lt;MiscModel&gt; Items { get; set; }\r\n        SimpleKeyValuePair[] Types { get; }\r\n    }\r\n}\r\n\r\n<span>using</span> System.Collections.ObjectModel;\r\n<span>using</span> System.ComponentModel;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.Models;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.Services;\r\n\r\n<span>namespace</span> SLPrismGridComboBox.ModuleA.ViewModels\r\n{\r\n    <span>public</span> <span>class</span> MiscViewModel : IMiscViewModel, INotifyPropertyChanged\r\n    {\r\n        IMiscService _miscService;\r\n\r\n        <span>private</span> ObservableCollection&lt;MiscModel&gt; _items;\r\n        <span>public</span> ObservableCollection&lt;MiscModel&gt; Items\r\n        {\r\n            get { <span>return</span> _items; }\r\n            set\r\n            {\r\n                <span>if</span> (_items != <span>value</span>)\r\n                {\r\n                    _items = <span>value</span>;\r\n                    RaisePropertyChanged(<span>&quot;Items&quot;</span>);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span>private</span> SimpleKeyValuePair[] _types;\r\n        <span>public</span> SimpleKeyValuePair[] Types\r\n        {\r\n            get { <span>return</span> _types; }\r\n            <span>private</span> set\r\n            {\r\n                <span>if</span> (_types != <span>value</span>)\r\n                {\r\n                    _types = <span>value</span>;\r\n                    RaisePropertyChanged(<span>&quot;Types&quot;</span>);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span>public</span> <span>event</span> PropertyChangedEventHandler PropertyChanged;\r\n\r\n        <span>public</span> MiscViewModel(IMiscService miscService)\r\n        {\r\n            _miscService = miscService;\r\n            <span>this</span>.Items = _miscService.GetAllMiscModels();\r\n            <span>this</span>.Types = _miscService.GetAllTypes();\r\n        }\r\n\r\n        <span>private</span> <span>void</span> RaisePropertyChanged(<span>string</span> propertyName)\r\n        {\r\n            <span>if</span> (PropertyChanged != <span>null</span>)\r\n            {\r\n                PropertyChanged(<span>this</span>, <span>new</span> PropertyChangedEventArgs(propertyName));\r\n            }\r\n        }\r\n\r\n    }\r\n}</pre>\r\n<br>\r\n<strong>View</strong> <br>\r\n<pre><span>namespace</span> SLPrismGridComboBox.ModuleA.Views\r\n{\r\n    <span>public</span> <span>interface</span> IMiscView\r\n    {\r\n\r\n    }\r\n}\r\n\r\n<span>using</span> System.Windows.Controls;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.ViewModels;\r\n\r\n<span>namespace</span> SLPrismGridComboBox.ModuleA.Views\r\n{\r\n    <span>public</span> <span>partial</span> <span>class</span> MiscView : UserControl, IMiscView\r\n    {\r\n        IMiscViewModel _viewModel;\r\n\r\n        <span>public</span> MiscView(IMiscViewModel viewModel)\r\n        {\r\n            InitializeComponent();\r\n\r\n            _viewModel = viewModel;\r\n            <span>this</span>.DataContext = _viewModel;\r\n        }\r\n    }\r\n}</pre>\r\n<br>\r\n<pre><span>&lt;</span><span>UserControl</span> <span>x:Class</span><span>=&quot;SLPrismGridComboBox.ModuleA.Views.MiscView&quot;</span>\r\n    <span>xmlns</span><span>=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span> \r\n    <span>xmlns:x</span><span>=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span>\r\n    <span>xmlns:data</span><span>=&quot;clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Data&quot;</span> \r\n    <span>Width</span><span>=&quot;400&quot;</span> <span>Height</span><span>=&quot;300&quot;</span><span>&gt;</span>\r\n    <span>&lt;</span><span>Grid</span> <span>x:Name</span><span>=&quot;LayoutRoot&quot;</span> <span>Background</span><span>=&quot;White&quot;</span><span>&gt;</span>\r\n        <span>&lt;</span><span>data:DataGrid</span> <span>AutoGenerateColumns</span><span>=&quot;False&quot;</span> <span>ItemsSource</span><span>=&quot;{Binding Path=Items}&quot;</span><span>&gt;</span>\r\n            <span>&lt;</span><span>data:DataGrid.Columns</span><span>&gt;</span>\r\n                <span>&lt;</span><span>data:DataGridTextColumn</span> <span>Header</span><span>=&quot;Name&quot;</span> <span>Binding</span><span>=&quot;{Binding Path=Name}&quot;</span> <span>/&gt;</span>\r\n                <span>&lt;</span><span>data:DataGridTemplateColumn</span> <span>Header</span><span>=&quot;Type&quot;</span><span>&gt;</span>\r\n                    <span>&lt;</span><span>data:DataGridTemplateColumn.CellTemplate</span><span>&gt;</span>\r\n                        <span>&lt;</span><span>DataTemplate</span><span>&gt;</span>\r\n                            <span>&lt;</span><span>TextBlock</span> <span>Text</span><span>=&quot;{Binding Path=Type.Key}&quot;</span> <span>/&gt;</span>\r\n                        <span>&lt;/</span><span>DataTemplate</span><span>&gt;</span>\r\n                    <span>&lt;/</span><span>data:DataGridTemplateColumn.CellTemplate</span><span>&gt;</span>\r\n                    <span>&lt;</span><span>data:DataGridTemplateColumn.CellEditingTemplate</span><span>&gt;</span>\r\n                        <span>&lt;</span><span>DataTemplate</span><span>&gt;</span>\r\n                            <span>&lt;</span><span>ComboBox</span> <span>DisplayMemberPath</span><span>=&quot;{Binding Path=Type.Key}&quot;</span> <span>SelectedItem</span><span>=&quot;{Binding Path=Type}&quot;</span> <span>ItemsSource</span><span>=&quot;{Binding Path=Types}&quot;</span> <span>/&gt;</span>\r\n                        <span>&lt;/</span><span>DataTemplate</span><span>&gt;</span>\r\n                    <span>&lt;/</span><span>data:DataGridTemplateColumn.CellEditingTemplate</span><span>&gt;</span>\r\n                <span>&lt;/</span><span>data:DataGridTemplateColumn</span><span>&gt;</span>\r\n            <span>&lt;/</span><span>data:DataGrid.Columns</span><span>&gt;</span>\r\n        <span>&lt;/</span><span>data:DataGrid</span><span>&gt;</span>\r\n    <span>&lt;/</span><span>Grid</span><span>&gt;</span>\r\n<span>&lt;/</span><span>UserControl</span><span>&gt;</span></pre>\r\n",
    "PostedDate": "2009-04-29T09:39:02.343-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "185899",
    "ThreadId": "54852",
    "Html": "Any help on this would be greatly appreciated.<br>\r\n<br>\r\nThanks,<br>\r\nRyan\r\n",
    "PostedDate": "2009-05-01T08:03:43.93-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "214763",
    "ThreadId": "54852",
    "Html": "<p>Did you find the solution?</p>",
    "PostedDate": "2009-07-22T07:02:33.363-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "215712",
    "ThreadId": "54852",
    "Html": "<p>Unfortunately, no but with SL3 this may now be possible with element to element binding, however, I haven't tried.</p>",
    "PostedDate": "2009-07-24T06:00:11.847-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]