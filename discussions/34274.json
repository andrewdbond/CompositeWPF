[
  {
    "Id": "113733",
    "ThreadId": "34274",
    "Html": "Is it possible to remove a view from a region without having to hardcode the view name. I'm using the PresentationModel pattern.&nbsp; Most of my views are loaded from the module init or from a supervising controller.&nbsp; I'm ok in hard coding the region when I launch the view but once it's launch I would prefer no have to hard code the region name to be able to remove the view from region. Is there a better way?&nbsp; <br>\r\n",
    "PostedDate": "2008-08-26T03:32:10.28-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "114341",
    "ThreadId": "34274",
    "Html": "Hi martalex,<br>\r\n<br>\r\nIt is possible to remove a view from a region without knowing its name.<br>\r\nThe following example demonstrates this:<br>\r\n<br>\r\nforeach(object view in new List&lt;object&gt;(RegionManager.Regions[&quot;MyRegion&quot;].Views)) {<br>\r\n&nbsp; RegionManager.Regions[&quot;MyRegion&quot;].Remove(view);<br>\r\n}<br>\r\n<br>\r\nThe list construction is required to prevent the application from throwing EnumerationModifiedException instances.<br>\r\nHope this helps.<br>\r\n",
    "PostedDate": "2008-08-27T22:27:21.37-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115257",
    "ThreadId": "34274",
    "Html": "<p>martalex,<br>\r\n<br>\r\nAnother approach you could take for ContentControl placeholders is remove the Content value from ContentControl.<br>\r\n<br>\r\n<strong>&lt;!--View.xaml--&gt;</strong><br>\r\n...<br>\r\n&lt;ContentControl x:Name=&quot;childArea&quot; cal:RegionManager.RegionName=&quot;ViewPlace&quot;/&gt; <br>\r\n&lt;Button x:Name=&quot;removeView&quot;&nbsp;Content=&quot;Remove View&quot; Click=&quot;<strong>buttonRemoveView_Click</strong>&quot;/&gt;<br>\r\n...<br>\r\n<br>\r\n<strong>// View</strong><br>\r\nvoid buttonRemoveView_Click(object sender, RoutedEventArgs e)<br>\r\n{<br>\r\n&nbsp;// TODO: check for null region name<br>\r\n&nbsp;controller.RemoveView((string)childArea.GetValue(<strong>RegionManager.RegionName</strong>),&nbsp;<strong>childArea.Content</strong>);<br>\r\n}</p>\r\n<p>// Controller<br>\r\ninternal void RemoveView(string regionName, object view)<br>\r\n{<br>\r\n&nbsp;//&nbsp;TODO: check for null region<br>\r\n&nbsp;RegionManager.Regions[regionName].Remove(view);<br>\r\n}<br>\r\n<br>\r\nYou should be able to inject the IRegionManager into your controller.<br>\r\n<br>\r\nHopes this helps,<br>\r\n<br>\r\nAndres Olivares</p>\r\n",
    "PostedDate": "2008-09-01T17:55:14.49-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]