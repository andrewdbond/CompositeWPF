[
  {
    "Id": "566817",
    "ThreadId": "246195",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I have been struggling for quite abit now trying to work a unitybootstrapper into our current winform application. There is no getting around the winform and we are stuck with it for now. My discussion here might get abit lengthy, but please hear me out\r\n and I would really appreciate any help.</p>\r\n<p>So, the winform(main application window) has a list of logical modules(loaded from a config file) and each module comes with a winform type usercontrol that the developer can attach views to represent the logical modules. We currently have over 50 logical\r\n module views built with winform controls. We have slowly been adopting and implementing wpf controls into our winform type control by mounting the wpf control types into an elementhost that gets attached to the winform usercontrol that represents the view\r\n of a logical module. In each logical module, there are numerous loosely coupled components that gets loaded from a config file and each component may or may not have a view attached with it.</p>\r\n<p>As you can see these begs for modularity and&nbsp;extensibility that PRISM provides with its framework. My design is to have one UnityBootStrapper per logical module(Is it even possible to have multiple UBS in one app?). The UnityBootStrapper will create\r\n a shell(wpf usercontrol type) that will be mounted on to the elementhost(contained in a winform usercontrol) for that particular logical module. Then, the UnityBootStrapper will discover these loosely coupled components from a xaml config file. I intend these\r\n loosely coupled components to implement IModule. Each IModule will be instantiated and injected with a UnityContainer and a RegionManager. Depending on the IModule type, each IModule is responsible for creating its own view if necessary and injecting a view\r\n model that gets binded with the view in the Initialize function of the IModule. Using the RegionManager that was injected into the IModule, I will add the IModule views to the shell.&nbsp;The shells that get mounted to elementhost are wpf usercontrol types\r\n with an ItemsControl that has the RegionManager.RegionName as an attached property.&nbsp;</p>\r\n<p>I went about going through the PRISM tutorial and I started a new WPF Application project to test my design. Everything worked as plan, it was beautiful, it was really beautiful...until when I started integrating the same design into my winform application\r\n that runs on System.Windows.Forms.Application, instead of the wpf application version, which is the System.Windows.Application. The biggest slap in the face was the RegionManager created from the shell as region names specified in the ItemControls no longer\r\n gets added to the region list in the RegionManager. This is pretty much a brickwall for me and I desperately need help here.</p>\r\n<p>I guess I am up for any suggestions,solutions and even ideas, and my design might flawed from the beginning, so please do let me know if this is even feasible.</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks for reading, its lengthy i know haha.&nbsp;</p>\r\n",
    "PostedDate": "2011-02-15T16:11:33.627-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "566900",
    "ThreadId": "246195",
    "Html": "<p>I dug deeper into the PRISM lib and it was caused by&nbsp;IsInDesignMode returning true, which blocks the region creation code.&nbsp;</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">bool</span> IsInDesignMode(DependencyObject element)\r\n        {\r\n            <span style=\"color: green;\">// Due to a known issue in Cider, GetIsInDesignMode attached property value is not enough to know if it's in design mode.</span>\r\n            <span style=\"color: blue;\">return</span> DesignerProperties.GetIsInDesignMode(element) || Application.Current == <span style=\"color: blue;\">null</span>\r\n                   || Application.Current.GetType() == <span style=\"color: blue;\">typeof</span>(Application);\r\n        }\r\n\r\n</pre>\r\n</div>\r\n</p>\r\n<p>I changed it to check for only GetIsInDesignMode(element) because Application.Current is null due to the fact that I am running a windows form application. Life is awesome and beautiful again. Just curious, what was the reasoning behind this? Sorry for my ignorance, what is Cider btw? I did some search on it but I couldnt find any&nbsp;relevant topic on it.</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks.&nbsp;</p>",
    "PostedDate": "2011-02-15T20:31:01.477-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "567111",
    "ThreadId": "246195",
    "Html": "<p>Cider's just a codename for the wpf designer in VS.</p>\n<p>Hmm apparently, I keep answering myself in this thread. Its true, there is an issue in Cider when I removed the Application checks in the IsInDesignMode. I get \"The attachable property 'RegionName' was not found in type 'RegionManager'\" error when attaching  a region to my ContentControl.</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<dt>WPF Designer</dt><dd>The WPF designer, codenamed&nbsp;<em>Cider</em>,<sup id=\"cite_ref-25\" class=\"reference\"><a href=\"http://en.wikipedia.org/wiki/Microsoft_Visual_Studio#cite_note-25\"><span>[</span>26<span>]</span></a></sup>&nbsp;was introduced with Visual Studio 2008. Like the Windows  Forms designer it supports the drag and drop metaphor. It is used to author&nbsp;<a title=\"User interface\" href=\"http://en.wikipedia.org/wiki/User_interface\">user interfaces</a>&nbsp;targeting&nbsp;<a href=\"http://en.wikipedia.org/wiki/Windows_Presentation_Foundation\">Windows  Presentation Foundation</a>. It supports all WPF functionality including&nbsp;<a href=\"http://en.wikipedia.org/wiki/Data_binding\">data binding</a>&nbsp;and automatic layout management. It generates&nbsp;<a class=\"mw-redirect\" title=\"XAML\" href=\"http://en.wikipedia.org/wiki/XAML\">XAML</a>&nbsp;code  for the UI. The generated&nbsp;<a class=\"mw-redirect\" title=\"XAML\" href=\"http://en.wikipedia.org/wiki/XAML\">XAML</a>&nbsp;file is compatible with&nbsp;<a href=\"http://en.wikipedia.org/wiki/Microsoft_Expression_Design\">Microsoft Expression Design</a>, the designer-oriented  product. The XAML code is linked with code using a&nbsp;<a class=\"mw-redirect\" title=\"Code-behind\" href=\"http://en.wikipedia.org/wiki/Code-behind\">code-behind</a>&nbsp;model.</dd><dd><br />\n<p>&nbsp;</p>\n</dd>",
    "PostedDate": "2011-02-16T06:06:13.533-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "567140",
    "ThreadId": "246195",
    "Html": "<p>Hi,</p>\r\n<p>I'm glad that you've found a solution to your issue with the WPF Designer. Thank you for sharing your findings with the rest of the community, as other users might benefit from this.</p>\r\n<p>Guido Leandro Maliandi<br /><a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-02-16T06:40:35.547-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "678939",
    "ThreadId": "246195",
    "Html": "<p>i too thank u for ur info sharing. :)</p>",
    "PostedDate": "2011-10-01T05:04:27.773-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1077385",
    "ThreadId": "246195",
    "Html": "I too have the same issue.<br />\n<br />\nOur company are developing new modules. Each of those modules are developed in WPF and have a standalone version.<br />\n<br />\nAlthough those modules can also be called inside a VB6 and/or Windows Forms interface.<br />\n<br />\nSo we have created wrappers for the VB6 part with host the module in a Windows Forms control. <br />\n<br />\nWe made sure that the bootstrapper gets called in order for PRISM to initialize correctly. <br />\n<br />\nThe WPF interface loads correctly but the no interface are displayed in the regions probably due to the same issue described below.<br />\n<br />\nI don't feel comfortable to modify the IsInDesignMode property since i beleive that it must have good reasoning to have implemented it this way. Also i see that Application.Current is used elsewhere also...<br />\n<br />\nWould it be possible to address this issue in the next release or is it impossible to do?<br />\n<br />\nEdit: In other word does having Application.Current == null (due to the fact that the we're in Windows forms) a show stopper for using PRISM?<br />\n<br />\nThanks.<br />\n<br />\nSlick<br />\n",
    "PostedDate": "2013-08-06T11:52:36.127-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1078817",
    "ThreadId": "246195",
    "Html": "Hi,\r<br />\n<br />\nBased on our understanding, the <strong>IsInDesignMode</strong> method checks for the current application due to a known issue in <strong>Cider</strong> with <strong>Silverlight 3</strong>, where the <strong>DesignerProperties.GetIsInDesignMode</strong> method doesnâ€™t work correctly. You can find more information and possible workarounds about this in the following work item:<br />\n<h1></h1>\n<ul>\n<li>\n<a href=\"https://compositewpf.codeplex.com/workitem/3552\" rel=\"nofollow\">Region manager in V2 fails to recognize non-WPF applications</a><br />\n</li>\n</ul>\nRegarding if this is a show stopper for using <strong>Prism</strong>, no it isn't.\r<br />\n<br />\nRegards,\r<br />\n<br />\nFederico Martinez \r<br />\n<a href=\"http://blogs.southworks.net/fmartinez\" rel=\"nofollow\">http://blogs.southworks.net/fmartinez</a> <br />\n",
    "PostedDate": "2013-08-09T10:55:05.24-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1080202",
    "ThreadId": "246195",
    "Html": "Hi fmartinez, thanks for your reply.\r<br />\n<br />\nIn order to &quot;improve&quot; prism interop when a WPF application/form is called inside Windows.Forms or VB6, our company did the following modifications that we want to share in case it is found useful for future release, individual or if someone sees a big potential problem with the change.<br />\n<h1>Change no. 1 - Added an &quot;InteropHelper.cs&quot; class</h1>\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Microsoft.Practices.Prism\n{\n   /// &lt;summary&gt;\n   /// This class contains some usefull methods/properties used to interact with windows.forms applications\n   /// &lt;/summary&gt;\n public static class InteropHelper\n    {\n\n        /// &lt;summary&gt;\n        /// Returns if the current application is a windows.forms application.\n        /// &lt;/summary&gt;\n        /// &lt;returns&gt;Returns if the current application is a windows.forms application.&lt;/returns&gt;\n        public static bool IsWindowsFormsApplication()\n        {\n            return System.Windows.Application.Current == null\n                &amp;&amp; !string.IsNullOrWhiteSpace(System.Windows.Forms.Application.ExecutablePath)\n                &amp;&amp; System.Windows.Forms.Application.OpenForms.Count &gt; 0;\n        }\n\n      private static object _fallBackDispatcherObject;\n     /// &lt;summary&gt;\n     /// Use to set the dispatcher to be used by prism if no WPF application is running.\n     /// &lt;/summary&gt;\n     /// &lt;remarks&gt;\n     /// Can be set to one of the following type:\n      /// -System.Windows.Window\n      /// -System.Windows.Controls.UserControl\n      /// -System.Windows.Threading.Dispatcher\n      /// -System.Windows.Forms.Form\n      /// -System.Windows.Forms.Control\n     /// &lt;/remarks&gt;\n      public static object FallBackDispatcherObject\n      {\n          get {\n\n              return _fallBackDispatcherObject;\n          }\n          set {\n              if (value is System.Windows.Window)\n              {\n                  _fallBackDispatcherObject = ((System.Windows.Window)value).Dispatcher;\n              }\n              else if (value is System.Windows.Controls.UserControl)\n              {\n                  _fallBackDispatcherObject = ((System.Windows.Controls.UserControl)value).Dispatcher;\n              }\n              else if (value is System.Windows.Threading.Dispatcher)\n              {\n                  _fallBackDispatcherObject = value;\n              }\n              else if (value is System.Windows.Forms.Form)\n              {\n                  _fallBackDispatcherObject = ((System.Windows.Forms.Form)value);\n              }\n              else if (value is System.Windows.Forms.Control)\n              {\n                  _fallBackDispatcherObject = ((System.Windows.Forms.Control)value);\n              }\n              else\n              {\n                  _fallBackDispatcherObject = null;\n              }\n\n          }\n      }\n        \n    }\n}\n</code></pre>\n\n<h1>Change no. 2 - Modified RegionManager.cs IsInDesignMode property as follow:</h1>\n<pre><code> private static bool IsInDesignMode(DependencyObject element)\n        {\n            //Note: this was modified in order to allow the regions to be loaded when prism \n            //is instantiated inside a windows.Form application\n\n            if (Application.Current != null)\n            {\n                // Due to a known issue in Cider, GetIsInDesignMode attached property value is not enough to know if it's in design mode.\n                return DesignerProperties.GetIsInDesignMode(element) || Application.Current.GetType() == typeof(Application);\n\n            }\n            else if (InteropHelper.IsWindowsFormsApplication())\n            {\n                return false;\n            }\n            else\n                return DesignerProperties.GetIsInDesignMode(element);\n            //else if (WindowsFormHelper.FallBackDispatcherObject !=null)\n            //{\n            //    return false;\n            //}\n            //else\n            //{\n            //    // Due to a known issue in Cider, GetIsInDesignMode attached property value is not enough to know if it's in design mode.\n            //    return DesignerProperties.GetIsInDesignMode(element)\n            //        || Application.Current == null\n            //        || Application.Current.GetType() == typeof(Application);\n            //}\n\n         \n        }</code></pre>\n\n<h1>Change no. 3 - Modified BeginInvoke method in DefaultDispatcher.Desktop.cs as follow:</h1>\n<pre><code> /// &lt;summary&gt;\n        /// Forwards the BeginInvoke to the current application's &lt;see cref=&quot;Dispatcher&quot;/&gt;.\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;method&quot;&gt;Method to be invoked.&lt;/param&gt;\n        /// &lt;param name=&quot;arg&quot;&gt;Arguments to pass to the invoked method.&lt;/param&gt;\n        public void BeginInvoke(Delegate method, object arg)\n        {\n            \n            if (Application.Current != null)\n            {\n                Application.Current.Dispatcher.BeginInvoke(DispatcherPriority.Normal, method, arg);\n            }\n            else if (InteropHelper.IsWindowsFormsApplication())\n            {\n                System.Windows.Forms.Application.OpenForms[0].BeginInvoke(method, arg);\n            }\n            else if (InteropHelper.FallBackDispatcherObject is Dispatcher)\n            {\n                ((Dispatcher)InteropHelper.FallBackDispatcherObject).BeginInvoke(DispatcherPriority.Normal, method, arg);\n\n            }\n            else if (InteropHelper.FallBackDispatcherObject is System.Windows.Forms.Form)\n            {\n                ((System.Windows.Forms.Form)InteropHelper.FallBackDispatcherObject).BeginInvoke(method, arg);\n\n            }\n            else if (InteropHelper.FallBackDispatcherObject is System.Windows.Forms.Control)\n            {\n                ((System.Windows.Forms.Control)InteropHelper.FallBackDispatcherObject).BeginInvoke(method, arg);\n\n            }\n        }</code></pre>\n\n<h1>Change no. 4 - Changed the DispatcherProxy class in WeakEventHandlerManager.Desktop.cs as follow:</h1>\n<pre><code>  /// &lt;summary&gt;\n        /// Hides the dispatcher mis-match between Silverlight and .Net, largely so code reads a bit easier\n        /// &lt;/summary&gt;\n        private class DispatcherProxy\n        {\n            Dispatcher innerDispatcher;\n\n            private DispatcherProxy(Dispatcher dispatcher)\n            {\n                if (dispatcher != null)\n                {\n                    innerDispatcher = dispatcher;\n                }\n                else if (InteropHelper.FallBackDispatcherObject !=null) //(WindowsFormHelper.IsWindowsFormsApplication())\n                {\n                    if (InteropHelper.FallBackDispatcherObject is System.Windows.Threading.Dispatcher)\n                    {\n                        innerDispatcher = (System.Windows.Threading.Dispatcher)InteropHelper.FallBackDispatcherObject;\n                    }                 \n                    else\n                        innerDispatcher = null;\n                }\n\n            }\n\n            public static DispatcherProxy CreateDispatcher()\n            {\n                DispatcherProxy proxy = null;\n#if SILVERLIGHT\n                if (Deployment.Current == null)\n                    return null;\n\n                proxy = new DispatcherProxy(Deployment.Current.Dispatcher);\n#else\n                if (InteropHelper.FallBackDispatcherObject != null)\n                    return new DispatcherProxy(null);\n                else if (InteropHelper.IsWindowsFormsApplication())\n                    return new DispatcherProxy(null);\n                else if (Application.Current == null)\n                    return null;\n\n                proxy = new DispatcherProxy(Application.Current.Dispatcher);\n#endif\n                return proxy;\n\n            }\n\n            public bool CheckAccess()\n            {\n                if (innerDispatcher != null)\n                {\n                    return innerDispatcher.CheckAccess();\n                }\n                else if (InteropHelper.IsWindowsFormsApplication())\n                {\n                    return !System.Windows.Forms.Application.OpenForms[0].InvokeRequired;\n                }\n                else if (InteropHelper.FallBackDispatcherObject is System.Windows.Forms.Form)\n                {\n\n                    return !((System.Windows.Forms.Form)InteropHelper.FallBackDispatcherObject).InvokeRequired;                    \n                }\n                else if (InteropHelper.FallBackDispatcherObject is System.Windows.Forms.Control)\n                {\n\n                    return !((System.Windows.Forms.Control)InteropHelper.FallBackDispatcherObject).InvokeRequired;\n                }\n                return true;\n            }\n\n          \n            [System.Diagnostics.CodeAnalysis.SuppressMessage(&quot;Microsoft.Portability&quot;, &quot;CA1903:UseOnlyApiFromTargetedFramework&quot;, MessageId = &quot;System.Windows.Threading.Dispatcher.#BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])&quot;)]\n            public DispatcherOperation BeginInvoke(Delegate method, params Object[] args)\n            {\n#if SILVERLIGHT\n                return innerDispatcher.BeginInvoke(method, args);\n#else\n                if (innerDispatcher != null)\n                {\n                    return innerDispatcher.BeginInvoke(method, DispatcherPriority.Normal, args);\n                }\n                else if (InteropHelper.IsWindowsFormsApplication())\n                {\n                    System.Windows.Forms.Application.OpenForms[0].BeginInvoke(method, args);\n                }\n                else if (InteropHelper.FallBackDispatcherObject is System.Windows.Forms.Form)\n                {\n                    ((System.Windows.Forms.Form)InteropHelper.FallBackDispatcherObject).BeginInvoke(method, args);\n                                     \n                }\n                else if (InteropHelper.FallBackDispatcherObject is System.Windows.Forms.Control)\n                {\n                    ((System.Windows.Forms.Control)InteropHelper.FallBackDispatcherObject).BeginInvoke(method, args);\n\n                }\n\n                return null;\n#endif\n            }\n        }</code></pre>\n\n",
    "PostedDate": "2013-08-13T11:16:20.74-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1080212",
    "ThreadId": "246195",
    "Html": "Hi,\r<br />\n<br />\nThanks for sharing your solution with the community. It would be helpful if you could also post it as a work item so that it could be considered as a suggestion for future releases.\r<br />\n<br />\nRegards,\r<br />\n<br />\nFederico Martinez \r<br />\n<a href=\"http://blogs.southworks.net/fmartinez\" rel=\"nofollow\">http://blogs.southworks.net/fmartinez</a> <br />\n",
    "PostedDate": "2013-08-13T11:49:31.367-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]