[
  {
    "Id": "577679",
    "ThreadId": "249006",
    "Html": "\r\n<p>Something I can't figure out from the documentation is what occurs if a certain interface is registered with two&nbsp;separate&nbsp;implementations? Which one is resolved?</p>\r\n<p>E.g. We have the following types</p>\r\n<p>Infrastructure.IService</p>\r\n<p>ModuleA.ServiceA : Infrastructure.IService</p>\r\n<p>ModuleB.ServiceB : Infrastructure.IService</p>\r\n<p>ModuleC.ViewModelC tries to resolve&nbsp;Infrastructure.IService. Which concrete implementation will be returned? Or will this throw an exception?</p>\r\n<p>Regards,</p>\r\n<p>Neil</p>\r\n",
    "PostedDate": "2011-03-09T04:46:50.22-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "577857",
    "ThreadId": "249006",
    "Html": "<p>Hi Neil,</p>\r\n<p>Assuming you're using Unity, you can't register an interface mapping with two different implementations, unless you specify a name for the mappings. That way, you could have a name identifying the two separate implementations of the service, hence eliminating the ambiguity between them.</p>\r\n<p>You might find this article from MSDN useful:</p>\r\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ee649762%28PandP.20%29.aspx\">RegisterType Method</a></p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-03-09T08:54:07.017-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "577869",
    "ThreadId": "249006",
    "Html": "<blockquote style=\"border: solid .1em #ccc; font-style: italic; margin: .25em 1em 0 1em; padding: 0 .25em 0 .25em;\"><strong>GuidoMaliandi wrote:</strong><br />\r\n<p>Hi Neil,</p>\r\n<p>Assuming you're using Unity, you can't register an interface mapping with two different implementations, unless you specify a name for the mappings. That way, you could have a name identifying the two separate implementations of the service, hence eliminating  the ambiguity between them.</p>\r\n<p>You might find this article from MSDN useful:</p>\r\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ee649762%28PandP.20%29.aspx\">RegisterType Method</a></p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n</blockquote>\r\n<p>Thanks for that clarification, it makes sense. So this leads me on to another set of questions:</p>\r\n<ol>\r\n<li>What about if I'm using MEF? How are multiple mappings handled then?</li>\r\n<li>Since Prism is addressing loosely coupled UI frameworks and therefore module developers may not be part of the core project team, how can we control that only one implementation of a common interface is loaded in a set of modules that may have come from unknown sources? Named mapping can't address this issue since third-parties might not use a named mapping or use one that another third-party has also used.</li>\r\n<li>If we use the named mapping as you suggest, this would mean a decoupled module would need to ask for that implementation by name. That seems to go against the Prism way?</li>\r\n</ol>\r\n<p>Neil</p>",
    "PostedDate": "2011-03-09T09:06:47.57-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "577876",
    "ThreadId": "249006",
    "Html": "<p>Hi Neil,</p>\n<p>In MEF you can specify a contract name for your export attribute, which would be similar to named mappings. You can read more about that in the <a href=\"http://mef.codeplex.com/wikipage?title=Guide\">Mef Programming Guide in Codeplex</a>.</p>\n<p>As for your second and third concerns, even though Prism is intended to address the difficulties of developing composite client applications, there are certain aspects of the development that should be agreed on even if there are separate teams working on  a project, such as the name of the regions in which to add the views, or the name of the mapping in case it is known that there are going to be different implementations of the same interface. If you do need to avoid named mappings, you could try using child  containers, but you should consider whether the overhead of using child containers is worth its benefits. You can read more about that in the following resources:</p>\n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/247975\"><span>Nested containers with MEF</span></a> </li>\n<li><a href=\"http://www.pnpguidance.net/post/UnityNestedContainersIUnityParentContainerCreateChildContainer.aspx\"><span id=\"ctl00_ContentPlaceHolder1_ThePostTitle\">Unity Nested Containers - IUnityContainer and CreateChildContainer</span></a> </li>\n</ul>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-03-09T09:16:20.9-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]