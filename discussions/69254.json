[
  {
    "Id": "235621",
    "ThreadId": "69254",
    "Html": "<p>When designing a MVP Solution, should the view hold a reference to the model? &nbsp;or should it hold a reference to the presenter, which exposes the model as a public property?</p>\r\n<p>in other words, which is the better practice?:</p>\r\n<p>&nbsp;</p>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">public partial class ProjectsListView : UserControl, IProjectsListView</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public ProjectsListView()</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;InitializeComponent();</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public ProjectsListPresentationModel Model</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;get { return this.DataContext as ProjectsListPresentationModel; }</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;set { this.DataContext = value; }</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp;}</div>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">partial</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyView : UserControl, IMyView\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> MyView()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> MyPresentationModel Model\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">this</span>.DataContext <span style=\"color:Blue\">as</span> MyPresentationModel; }\r\n            <span style=\"color:Blue\">set</span> { <span style=\"color:Blue\">this</span>.DataContext = value; }\r\n        }\r\n    }\r\n</pre>\r\n<pre></pre>\r\n<pre>or</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">partial</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyView : UserControl, IMyView\r\n    </span>{\r\n        <span style=\"color:Blue\">private</span> IMyViewPresenter presenter;\r\n        <span style=\"color:Blue\">public</span> MyView(IMyViewPresenter presenter)\r\n        {\r\n            InitializeComponent();\r\n            <span style=\"color:Blue\">this</span>.presenter = presenter;\r\n            <span style=\"color:Blue\">this</span>.DataContext = <span style=\"color:Blue\">this</span>.presenter.Model\r\n        }\r\n\r\n    }\r\n\r\n<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyViewPresenter : IMyViewPresenter\r\n</span>{\r\n\r\n   ...\r\n   <span style=\"color:Blue\">public</span> IMyPresentationModel Model {<span style=\"color:Blue\">get</span>;<span style=\"color:Blue\">set</span>;}\r\n   \r\n}\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n<p>Thanks.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-17T08:10:26.393-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "235654",
    "ThreadId": "69254",
    "Html": "<p>When combining MVP and MVVM I would suggest a method I gleened from PRISM V2 Drop 7 (topdown composition quickstart).&nbsp;&nbsp; Your View actually holds neither a reference to the model nor the presenter; it's totally decoupled.&nbsp;&nbsp; In this case the presenter is responsible for resolving the view - thus you'll find code samples that look as follows:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    regionManager.RegisterViewWithRegion(RegionConstants.StatusBarRegion,\r\n       <strong> () =&gt; <span style=\"color:Blue\">this</span>.container.Resolve&lt;StatusBarPresenter&gt;().View</strong>);\r\n\r\n</pre>\r\n</div>\r\n<p>The Presenter is being resolved and the resulting View registered with a particular region.</p>\r\n<p>I am working on an infrastructure at <a href=\"http://MultiTargeting.CodePlex.com\">http://MultiTargeting.CodePlex.com</a> which is designed to simplify the infrastructure/wireup process - for example the following is the minimum required code to wire up a presenter to it's view and model:</p>\r\n<p><span style=\"color:Blue\">namespace</span> Module.Main.Views.StatusBar<br>{<br>&nbsp;&nbsp;&nbsp; <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span><br>&nbsp;&nbsp;&nbsp; <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Status Bar Presenter</span><br>&nbsp;&nbsp;&nbsp; <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span><br>&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> StatusBarPresenter : <strong>PresenterBase&lt;IStatusBarView</strong>&gt;<br>&nbsp;&nbsp;&nbsp; </span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Initializes a new instance of the &lt;see cref=&quot;StatusBarPresenter&quot;/&gt; class.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;view&quot;&gt;</span><span style=\"color:Green\">The view.&lt;/param&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;model&quot;&gt;</span><span style=\"color:Green\">The model.&lt;/param&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;container&quot;&gt;</span><span style=\"color:Green\">The container.&lt;/param&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">public</span> StatusBarPresenter(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IStatusBarView view, IDemoPresentationModel model, IUnityContainer container) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <span style=\"color:Blue\">base</span>(view, model, container)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// Minimum required code to wire-up view/presenter </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }<br>}</p>\r\n<p>The above code works for the WPF, Silverlight and even WinForm applications the MultiTargeting project works with (all code is shared with exception of Views).&nbsp;&nbsp; The following is the PresenterBase&lt;T&gt; baseclass that does the wiring up:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> PresenterBase(IView view, IPresentationModel model, IUnityContainer container)\r\n{\r\n    <span style=\"color:Blue\">try</span>\r\n    {\r\n        <span style=\"color:Green\">// For logging purposes</span>\r\n        ModuleName = GetType().FullName;\r\n\r\n        <span style=\"color:Green\">// Setter injection is not available until after the constructor</span>\r\n        <span style=\"color:Green\">// so we'll set them manually</span>\r\n        Error = container.Resolve&lt;IError&gt;();\r\n        Logger = container.Resolve&lt;ILoggerFacade&gt;();\r\n\r\n        <span style=\"color:Green\">// Set the presenter with a reference to the container</span>\r\n        Container = container;\r\n\r\n        <span style=\"color:Green\">// Set the Presenter with a reference to the model</span>\r\n        Model = model;\r\n\r\n        <span style=\"color:Blue\">if</span> ((TView)view <span style=\"color:Blue\">is</span> UserControl)\r\n        {\r\n<span style=\"color:Blue\">#if</span> !WinForm\r\n            <span style=\"color:Green\">// WPF/Silverlight have SizeChanged event</span>\r\n            <span style=\"color:Green\">// Provide means to notify User Controls that their size has been set</span>\r\n            ((TView)view).SizeChanged += (<span style=\"color:Blue\">object</span> sender, SizeChangedEventArgs e) =&gt;\r\n                {\r\n                    OnViewSizeSet(sender, e);\r\n                };\r\n<span style=\"color:Blue\">#endif</span>\r\n        }\r\n\r\n\r\n        <span style=\"color:Green\">// Set the Presenter with a reference to the view</span>\r\n        View = (TView)view;\r\n\r\n        <span style=\"color:Green\">// Subscribe to all Button Click events.  The main view (MappingView)</span>\r\n        <span style=\"color:Green\">// will bubble all button click events (see MappingView code-behind)</span>\r\n        container.Resolve&lt;IEventAggregator&gt;()\r\n            .GetEvent&lt;ClickEvent&gt;().Subscribe(OnButtonClickEventHandler, <span style=\"color:Blue\">true</span>);\r\n\r\n        <span style=\"color:Green\">// Subscribe to any Data Access Layer event changes</span>\r\n        container.Resolve&lt;IEventAggregator&gt;()\r\n            .GetEvent&lt;DALEvent&gt;().Subscribe(OnDALEventHandler, <span style=\"color:Blue\">true</span>);\r\n\r\n        <span style=\"color:Green\">// Process controls on view </span>\r\n        IControlProcessor controlProcessor = container.Resolve&lt;IControlProcessor&gt;();\r\n        controlProcessor.ProcessControlCollection(View);\r\n\r\n        <span style=\"color:Green\">// Set Unity container in View - this will allow us</span>\r\n        <span style=\"color:Green\">// to gain access to the container if all we have is</span>\r\n        <span style=\"color:Green\">// a reference to the view</span>\r\n        View.Container = container;\r\n\r\n        <span style=\"color:Green\">// For the XAML forms (WPF and Silverlight) this sets the databinding</span>\r\n        <span style=\"color:Green\">// to the Presentation Model / View Model</span>\r\n        View.DataContext = model;\r\n\r\n    }\r\n    <span style=\"color:Blue\">catch</span> (Exception ex)\r\n    {\r\n        Error.SetError(ex);\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-17T09:37:21.43-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]