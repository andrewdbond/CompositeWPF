[
  {
    "Id": "608373",
    "ThreadId": "256631",
    "Html": "\r\n<p>Hi</p>\r\n<p>Say for arguments sake i had 2 modules 'Customer' and 'CustomerOrders'.&nbsp; When my app starts up the user can display a list of customers, when a customer is selected&nbsp;you can click&nbsp; an orders button that will load the view dispalying orders\r\n for that customer.</p>\r\n<p>From my understanding i can use the eventaggregator to publish the selected customer and in the Ctor of the customer orders view subscribe to this event and then load orders for that customer.&nbsp; Am i correct in my assumption?</p>\r\n<p>What will happen if i leave this first customer and customer order details&nbsp; open and then go ahead and open a second customer therefore publishing a different customer object to the eventaggregator, is this going to have any effect on the first customer\r\n and customer order details?</p>\r\n<p>Is this even the right way to deal with this secenario?&nbsp; Are there any blog posts/examples of this secenario that somebody can point me to?</p>\r\n<p>Thanks</p>\r\n<p>Paul</p>\r\n",
    "PostedDate": "2011-05-06T03:33:03.717-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "608470",
    "ThreadId": "256631",
    "Html": "<p>Hi Paul,</p>\n<p>The scenario you're mentioning will behave differently depending on the event aggregator subscription you've used. By default, if you subscribe to an event from your first view and you don't unsubscribe from it, the second time an event is published, it  will be handled in both the old and the new view. However, if you, for example, specify a filter in your subscription, you could have the event handled only if a certain condition is met (for example, a field behaving like an ID in your view).</p>\n<p>One possible approach that I would recommend for fulfilling this requirement would be to place the responsibility of subscribing to that event in a controller, which would be responsible for holding a list of open views (for example, subscribing to the region's  Views collection's <strong>CollectionChanged </strong>event) and creating new views if applicable (passing the selected customer as a constructor parameter). This could also be implemented using Navigation; if your view implements <strong>INavigationAware</strong>, you could make the <strong>IsNavigationTarget </strong> method return false when there is a view with the same customer already opened.</p>\n<p>You might find the following resources useful to dig deeper on the aforementioned concepts:</p>\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28PandP.40%29.aspx#sec16\">Subscription Filtering</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28PandP.40%29.aspx#sec19\">Unsubscribing from an Event</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921173%28PandP.40%29.aspx\">Event Aggregation QuickStart</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg430861%28PandP.40%29.aspx\">Chapter 8: Navigation</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg430881%28PandP.40%29.aspx\">View-Switching Navigation QuickStart</a></li>\n</ul>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-05-06T06:59:34.98-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "609406",
    "ThreadId": "256631",
    "Html": "<p>Thanks Guido, I'll have a look at the links provided.</p>",
    "PostedDate": "2011-05-09T01:21:09.12-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]