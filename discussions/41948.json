[
  {
    "Id": "139236",
    "ThreadId": "41948",
    "Html": "<p>I think this question is simple, but i can not figure it out by myself:-/</p>\r\n<p>- I have two modules &quot;A&quot; and &quot;B&quot; - both are loaded.</p>\r\n<p>- Module A references module B - (because Module &quot;A&quot; loads &quot;B&quot; ) </p>\r\n<p>A loads B doing this: </p>\r\n<p>// IRegion r = _regionManager.Regions[&quot;MainArea&quot;];<br>\r\n// if (r != null)<br>\r\n// {<br>\r\n//                      r.RemoveAllOtherControlsFromRegion();<br>\r\n//                      ModuleB.MainView mlgv = new ModuleB.MainView(_unityContainer, _regionManager);<br>\r\n//                      r.Add(mlgv); </p>\r\n<p>//}</p>\r\n<p>My MainView (module B) takes keyboard focus during startup. </p>\r\n<p>What i am now trying to do is to give back the keyboard focus ( e.g. pressing a button) to a certain focusable element in my viewA (module A).</p>\r\n<p>Is commanding the right way ?  Can someone provide me a code snipset ?</p>\r\n<p>best regards</p>\r\n<p>frank</p>\r\n",
    "PostedDate": "2008-12-10T03:12:26.027-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "140002",
    "ThreadId": "41948",
    "Html": "<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Hi</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">You can create a globally available command to accomplish that task by creating an instance of the <b>CompositeCommand</b> class and expose it through a static class. The CompositeCommand class supports programmatic registration of child commands like a <b>DelegateCommand</b>. When the composite command is executed, all the child commands get executed.</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">To create a globally available command follow these steps:</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span><span style=\"font-family:calibri\">1.</span><span style=\"font:7pt 'times new roman'\">       </span></span><span style=\"font-family:calibri\">Create a static class to hold your command instance. You typically create this class inside a common infrastructure project.</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span><span style=\"font-family:calibri\">2.</span><span style=\"font:7pt 'times new roman'\">       </span></span><span style=\"font-family:calibri\">Add a public <b>CompositeCommand</b> instance to your static class:</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 71.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">public static class GlobalCommands</span></p>\r\n<p style=\"margin:0in 0in 0pt 71.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt 107.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">public static CompositeCommand MyCompositeCommand = new CompositeCommand();</span></p>\r\n<p style=\"margin:0in 0in 0pt 71.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span><span style=\"font-family:calibri\">3.</span><span style=\"font:7pt 'times new roman'\">       </span></span><span style=\"font-family:calibri\">Add an invoker to the global command and associate it to a control in your MainView (module B) in the following way:</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 71.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">&lt;Button Name=&quot;MyCompositeCommandButton&quot; Command=&quot;{x:Static local:GlobalCommands.MyCompositeCommand}&quot;&gt;Execute Command&lt;/Button&gt;</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span><span style=\"font-family:calibri\">4.</span><span style=\"font:7pt 'times new roman'\">       </span></span><span style=\"font-family:calibri\">In the ViewA (module B) where you want to get focus, implement a method that contains the logic to be executed when the command is invoked (get focus on an element). This method must return void and take a single parameter:</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 71.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">public void OnMyCommandExecute(MyParameter parameter)</span></p>\r\n<p style=\"margin:0in 0in 0pt 71.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt 107.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">// TODO: Implement business logic for the command.</span></p>\r\n<p style=\"margin:0in 0in 0pt 107.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 107.4pt\"><b><span style=\"font-size:10pt;font-family:'courier new'\">this.MyFocusableElement.Focus();</span></b></p>\r\n<p style=\"margin:0in 0in 0pt 107.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">//NOTE: MyFocusableElement is the control that you want to focus on.</span></p>\r\n<p style=\"margin:0in 0in 0pt 71.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span><span style=\"font-family:calibri\">5.</span><span style=\"font:7pt 'times new roman'\">       </span></span><span style=\"font-family:calibri\">Add a variable definition to your class of type <b>DelegateCommand&lt;T&gt;</b>, where <b>T</b> is the type of the parameter the methods you implemented in the previous steps. When creating an instance of the DelegateCommand, pass as a parameter in its constructor the handler of the method defined in the previous step:</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 71.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">DelegateCommand&lt;MyParameter&gt; myCommand = new DelegateCommand&lt;MyParameter&gt;(OnMyCommandExecute);</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span><span style=\"font-family:calibri\">6.</span><span style=\"font:7pt 'times new roman'\">       </span></span><span style=\"font-family:calibri\">Finally, associate the previous command (myCommand) to the globally available command. To do this, access the static instance of the command and register the child command with the <b>RegisterCommand</b> method:</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 71.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">GlobalCommands.MyCompositeCommand.RegisterCommand(myCommand);</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Perhaps you could find useful the following articles in the documentation.</span></p>\r\n<p style=\"margin:0in 0in 0pt 35.4pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707894.aspx\"><span style=\"font-family:calibri\">Commands</span></a>\r\n<p style=\"margin:0in 0in 0pt 35.4pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707861.aspx\"><span style=\"font-family:calibri\">How to: Create Globally Available Commands</span></a>\r\n<p style=\"margin:0in 0in 0pt 35.4pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707896.aspx\"><span style=\"font-family:calibri\">How to: Create Locally Available Commands</span></a>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt -0.6pt\"><span style=\"font-family:calibri\">Please let me know if this helps.</span></p>\r\n<p style=\"margin:0in 0in 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt -0.6pt\"><span style=\"font-family:calibri\">Mariano Converti</span></p>\r\n<span style=\"font-size:11pt;font-family:'calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/mconverti\">http://blogs.southworks.net/mconverti</a></span></span></p>\r\n</span></p>\r\n</span></p>\r\n",
    "PostedDate": "2008-12-12T03:58:10.553-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "140576",
    "ThreadId": "41948",
    "Html": "Hi <span style=\"font-family:calibri\">Mariano </span>,<br>\r\nthanks for your reply - some things become clear.<br>\r\nTomorrow i will give it a try :-)<br>\r\n<br>\r\n<p>best regards</p>\r\n<p>frank</p>\r\n<br>\r\n",
    "PostedDate": "2008-12-15T06:01:54.613-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]