[
  {
    "Id": "576104",
    "ThreadId": "248576",
    "Html": "\r\n<p>Dear All</p>\r\n<p>Is it possible to use the navigation parameter to pass objects to navigated page ? if yes, how is it possible ?</p>\r\n<p>Appreciate any feedback</p>\r\n<p>Regards</p>\r\n<p>Waleed</p>\r\n",
    "PostedDate": "2011-03-05T13:32:24.037-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "577765",
    "ThreadId": "248576",
    "Html": "<p>Hi Waleed,</p>\r\n<p>The scenario you're mentioning isn't possible in Prism out of the box. You might find the following <a href=\"246152\" target=\"_blank\">thread</a> handy, in which a similar concern is covered.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-03-09T07:02:08.53-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "593421",
    "ThreadId": "248576",
    "Html": "<p>Hi Waleed,</p>\r\n<p>You can pass parameters as objects, however there is a little bit more work involved. I really feel that the default method of passing parameters by using the query string in Prism is one of it's biggest weaknesses. Anyway, you can do something like the following:</p>\r\n<p>In a project I am working on at the moment, I have an ICommand like this:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>    <span style=\"color: blue;\">Public</span> <span style=\"color: blue;\">Class</span> ShowClientsModuleCommand\r\n        <span style=\"color: blue;\">Implements</span> ICommand\r\n\r\n        <span style=\"color: blue;\">Public</span> <span style=\"color: blue;\">Function</span> CanExecute(parameter <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Object</span>) <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Boolean</span> <span style=\"color: blue;\">Implements</span> System.Windows.Input.ICommand.CanExecute\r\n            <span style=\"color: blue;\">Return</span> <span style=\"color: blue;\">True</span>\r\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Function</span>\r\n\r\n        <span style=\"color: blue;\">Public</span> <span style=\"color: blue;\">Event</span> CanExecuteChanged(sender <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Object</span>, e <span style=\"color: blue;\">As</span> System.EventArgs) <span style=\"color: blue;\">Implements</span> System.Windows.Input.ICommand.CanExecuteChanged\r\n\r\n        <span style=\"color: blue;\">Public</span> <span style=\"color: blue;\">Sub</span> Execute(parameter <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">Object</span>) <span style=\"color: blue;\">Implements</span> System.Windows.Input.ICommand.Execute\r\n            <span style=\"color: blue;\">Dim</span> regionManager <span style=\"color: blue;\">As</span> IRegionManager = ServiceLocator.Current.GetInstance(Of IRegionManager)()\r\n            <span style=\"color: blue;\">Dim</span> navigatorUri <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">New</span> Uri(<span style=\"color: blue;\">GetType</span>(ClientsNavigator).Name, UriKind.Relative)\r\n            <span style=\"color: blue;\">Dim</span> workspaceUri <span style=\"color: blue;\">As</span> <span style=\"color: blue;\">New</span> Uri(<span style=\"color: blue;\">GetType</span>(ClientsSummary).Name, UriKind.Relative)\r\n\r\n            regionManager.Regions(RegionNames.WorkspaceRegion).Context = parameter\r\n\r\n            regionManager.RequestNavigate(RegionNames.NavigatorRegion, navigatorUri)\r\n            regionManager.RequestNavigate(RegionNames.WorkspaceRegion, workspaceUri)\r\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Sub</span>\r\n\r\n    <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Class</span></pre>\r\n</div>\r\n<div id=\"_mcePaste\" class=\"mcePaste\" style=\"position: absolute; width: 1px; height: 1px; overflow: hidden; top: 239px; left: -10000px;\">ï»¿</div>\r\n<p>The&nbsp;line that sets the Context of the region you are navigating to is what is important here (you don't have to use an ICommand to do this of course).</p>\r\n<p>Then in the ViewModel for the UserControl that will be displayed in that region you will need to implement the INavigationAware interface and do something like the following:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>        <span style=\"color: blue;\">Public</span> <span style=\"color: blue;\">Sub</span> OnNavigatedTo(navigationContext <span style=\"color: blue;\">As</span> Microsoft.Practices.Prism.Regions.NavigationContext) <span style=\"color: blue;\">Implements</span> Microsoft.Practices.Prism.Regions.INavigationAware.OnNavigatedTo\r\n            mClient = <span style=\"color: blue;\">CType</span>(navigationContext.NavigationService.Region.Context, UI.ClientUI)\r\n        <span style=\"color: blue;\">End</span> <span style=\"color: blue;\">Sub</span></pre>\r\n</div>\r\n<p>Seems way too hard, and it's hardly type-safe, but gets around Prisms rather obvious limitation in this area. Any other ideas are welcome.</p>\r\n<p>Cheers,</p>\r\n<p>Adam Valpied</p>",
    "PostedDate": "2011-04-07T04:27:31.687-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "606093",
    "ThreadId": "248576",
    "Html": "<p>I implemented some extensions that incorporate Adam Valpied's suggestion - I think they make the functionality more obvious to developers that will use my code later on. &nbsp;I created a class \"NavigationParameters\" that is almost identical to the UriQuery class, except instead of mapping strings to strings it maps strings to objects. &nbsp;Here it is:</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>    <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n    <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Represents custom navigation parameters for PRISM region navigation.</span>\r\n    <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> NavigationParameters : IEnumerable&lt;KeyValuePair&lt;<span style=\"color: blue;\">string</span>, <span style=\"color: blue;\">object</span>&gt;&gt;\r\n    {\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">readonly</span> List&lt;KeyValuePair&lt;<span style=\"color: blue;\">string</span>, <span style=\"color: blue;\">object</span>&gt;&gt; entries = <span style=\"color: blue;\">new</span> List&lt;KeyValuePair&lt;<span style=\"color: blue;\">string</span>, <span style=\"color: blue;\">object</span>&gt;&gt;();\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Initializes a new instance of the &lt;see cref=\"NavigationParameters\"/&gt; class.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: blue;\">public</span> NavigationParameters()\r\n        {\r\n        }\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Gets the &lt;see cref=\"System.Object\"/&gt; with the specified key.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;value&gt;</span><span style=\"color: green;\">The value for the specified key, or &lt;see langword=\"null\"/&gt; if the query does not contain such a key.&lt;/value&gt;</span>\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">object</span> <span style=\"color: blue;\">this</span>[<span style=\"color: blue;\">string</span> key]\r\n        {\r\n            <span style=\"color: blue;\">get</span>\r\n            {\r\n                <span style=\"color: blue;\">foreach</span> (<span style=\"color: blue;\">var</span> kvp <span style=\"color: blue;\">in</span> <span style=\"color: blue;\">this</span>.entries)\r\n                {\r\n                    <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">string</span>.Compare(kvp.Key, key, StringComparison.Ordinal) == 0)\r\n                    {\r\n                        <span style=\"color: blue;\">return</span> kvp.Value;\r\n                    }\r\n                }\r\n\r\n                <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">null</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Gets the enumerator.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;returns&gt;</span><span style=\"color: green;\">An &lt;see cref=\"T:System.Collections.IEnumerator\"/&gt; object that can be used to iterate through the collection.&lt;/returns&gt;</span>\r\n        <span style=\"color: blue;\">public</span> IEnumerator&lt;KeyValuePair&lt;<span style=\"color: blue;\">string</span>, <span style=\"color: blue;\">object</span>&gt;&gt; GetEnumerator()\r\n        {\r\n            <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">this</span>.entries.GetEnumerator();\r\n        }\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Returns an enumerator that iterates through a collection.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;returns&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> An &lt;see cref=\"T:System.Collections.IEnumerator\"/&gt; object that can be used to iterate through the collection.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/returns&gt;</span>\r\n        IEnumerator IEnumerable.GetEnumerator()\r\n        {\r\n            <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">this</span>.GetEnumerator();\r\n        }\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Adds the specified key.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"key\"&gt;</span><span style=\"color: green;\">The item key.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"value\"&gt;</span><span style=\"color: green;\">The value.&lt;/param&gt;</span>\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Add(<span style=\"color: blue;\">string</span> key, <span style=\"color: blue;\">object</span> value)\r\n        {\r\n            <span style=\"color: blue;\">this</span>.entries.Add(<span style=\"color: blue;\">new</span> KeyValuePair&lt;<span style=\"color: blue;\">string</span>, <span style=\"color: blue;\">object</span>&gt;(key, value));\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Then I created some extension methods for RegionManager and NavigationContext for requesting navigation and grabbing the objects off of the context. &nbsp;You can create similar methods to suit your needs.</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>    <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n    <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Extends functionality of the region navigation in PRISM.</span>\r\n    <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">class</span> NavigationExtensions\r\n    {\r\n        <span style=\"color: blue;\">#region</span> RegionManager Extensions\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Requests the navigate.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"regionManager\"&gt;</span><span style=\"color: green;\">The region manager.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"regionName\"&gt;</span><span style=\"color: green;\">Name of the region.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"target\"&gt;</span><span style=\"color: green;\">The target.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"navigationCallback\"&gt;</span><span style=\"color: green;\">The navigation callback.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"navigationParameters\"&gt;</span><span style=\"color: green;\">The navigation parameters.&lt;/param&gt;</span>\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> RequestNavigate(<span style=\"color: blue;\">this</span> IRegionManager regionManager, <span style=\"color: blue;\">string</span> regionName, Uri target, Action&lt;NavigationResult&gt; navigationCallback, NavigationParameters navigationParameters)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (regionManager == <span style=\"color: blue;\">null</span>)\r\n            {\r\n               navigationCallback(<span style=\"color: blue;\">new</span> NavigationResult(<span style=\"color: blue;\">new</span> NavigationContext(<span style=\"color: blue;\">null</span>, target), <span style=\"color: blue;\">false</span>));\r\n                <span style=\"color: blue;\">return</span>;\r\n            }\r\n\r\n            <span style=\"color: blue;\">if</span> (regionManager.Regions.ContainsRegionWithName(regionName))\r\n            {\r\n                regionManager.Regions[regionName].RequestNavigate(target, navigationCallback, navigationParameters);\r\n            }\r\n            <span style=\"color: blue;\">else</span>\r\n            {\r\n               navigationCallback(<span style=\"color: blue;\">new</span> NavigationResult(<span style=\"color: blue;\">new</span> NavigationContext(<span style=\"color: blue;\">null</span>, target), <span style=\"color: blue;\">false</span>));\r\n            }\r\n        }\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Requests the navigate.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"region\"&gt;</span><span style=\"color: green;\">The region.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"target\"&gt;</span><span style=\"color: green;\">The target.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"navigationParameters\"&gt;</span><span style=\"color: green;\">The navigation parameters.&lt;/param&gt;</span>\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> RequestNavigate(<span style=\"color: blue;\">this</span> IRegionManager regionManager, <span style=\"color: blue;\">string</span> regionName, <span style=\"color: blue;\">string</span> target, NavigationParameters navigationParameters)\r\n        {\r\n            RequestNavigate(regionManager, regionName, <span style=\"color: blue;\">new</span> Uri(target, UriKind.RelativeOrAbsolute), (nr) =&gt; { }, navigationParameters);\r\n        }\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Requests the navigate.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"region\"&gt;</span><span style=\"color: green;\">The region.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"target\"&gt;</span><span style=\"color: green;\">The target.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"navigationCallback\"&gt;</span><span style=\"color: green;\">The navigation callback.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"navigationParameters\"&gt;</span><span style=\"color: green;\">The navigation parameters.&lt;/param&gt;</span>\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> RequestNavigate(<span style=\"color: blue;\">this</span> IRegionManager regionManager, <span style=\"color: blue;\">string</span> regionName, <span style=\"color: blue;\">string</span> target, Action&lt;NavigationResult&gt; navigationCallback, NavigationParameters navigationParameters)\r\n        {\r\n            RequestNavigate(regionManager, regionName, <span style=\"color: blue;\">new</span> Uri(target, UriKind.RelativeOrAbsolute), navigationCallback, navigationParameters);\r\n        }\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Requests the navigate.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"region\"&gt;</span><span style=\"color: green;\">The region.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"target\"&gt;</span><span style=\"color: green;\">The target.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"navigationParameters\"&gt;</span><span style=\"color: green;\">The navigation parameters.&lt;/param&gt;</span>\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> RequestNavigate(<span style=\"color: blue;\">this</span> IRegionManager regionManager, <span style=\"color: blue;\">string</span> regionName, Uri target, NavigationParameters navigationParameters)\r\n        {\r\n            RequestNavigate(regionManager, regionName, target, (nr) =&gt; { }, navigationParameters);\r\n        }\r\n\r\n        <span style=\"color: blue;\">#endregion</span>\r\n\r\n        <span style=\"color: blue;\">#region</span> Region Extensions\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Requests the navigate.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"region\"&gt;</span><span style=\"color: green;\">The region.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"target\"&gt;</span><span style=\"color: green;\">The target.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"navigationCallback\"&gt;</span><span style=\"color: green;\">The navigation callback.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"navigationParameters\"&gt;</span><span style=\"color: green;\">The navigation parameters.&lt;/param&gt;</span>\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> RequestNavigate(<span style=\"color: blue;\">this</span> IRegion region, Uri target, Action&lt;NavigationResult&gt; navigationCallback, NavigationParameters navigationParameters)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (region == <span style=\"color: blue;\">null</span>)\r\n            {\r\n                <span style=\"color: blue;\">return</span>;\r\n            }\r\n\r\n            region.Context = navigationParameters;\r\n\r\n            region.RequestNavigate(target, navigationCallback);\r\n        }\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Requests the navigate.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"region\"&gt;</span><span style=\"color: green;\">The region.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"target\"&gt;</span><span style=\"color: green;\">The target.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"navigationParameters\"&gt;</span><span style=\"color: green;\">The navigation parameters.&lt;/param&gt;</span>\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> RequestNavigate(<span style=\"color: blue;\">this</span> IRegion region, <span style=\"color: blue;\">string</span> target, NavigationParameters navigationParameters)\r\n        {\r\n            RequestNavigate(region, <span style=\"color: blue;\">new</span> Uri(target, UriKind.RelativeOrAbsolute), (nr) =&gt; { }, navigationParameters);\r\n        }\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Requests the navigate.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"region\"&gt;</span><span style=\"color: green;\">The region.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"target\"&gt;</span><span style=\"color: green;\">The target.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"navigationCallback\"&gt;</span><span style=\"color: green;\">The navigation callback.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"navigationParameters\"&gt;</span><span style=\"color: green;\">The navigation parameters.&lt;/param&gt;</span>\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> RequestNavigate(<span style=\"color: blue;\">this</span> IRegion region, <span style=\"color: blue;\">string</span> target, Action&lt;NavigationResult&gt; navigationCallback, NavigationParameters navigationParameters)\r\n        {\r\n            RequestNavigate(region, <span style=\"color: blue;\">new</span> Uri(target, UriKind.RelativeOrAbsolute), navigationCallback, navigationParameters);\r\n        }\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Requests the navigate.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"region\"&gt;</span><span style=\"color: green;\">The region.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"target\"&gt;</span><span style=\"color: green;\">The target.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"navigationParameters\"&gt;</span><span style=\"color: green;\">The navigation parameters.&lt;/param&gt;</span>\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> RequestNavigate(<span style=\"color: blue;\">this</span> IRegion region, Uri target, NavigationParameters navigationParameters)\r\n        {\r\n            RequestNavigate(region, target, (nr) =&gt; { }, navigationParameters);\r\n        }\r\n\r\n        <span style=\"color: blue;\">#endregion</span>\r\n\r\n        <span style=\"color: blue;\">#region</span> NavigationContext Extensions\r\n\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Gets the navigation parameters.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"context\"&gt;</span><span style=\"color: green;\">The context.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;returns&gt;</span><span style=\"color: green;\">The NavigationParameters for the NavigationContext.&lt;/returns&gt;</span>\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> NavigationParameters GetNavigationParameters(<span style=\"color: blue;\">this</span> NavigationContext context)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (context == <span style=\"color: blue;\">null</span>)\r\n            {\r\n                <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">new</span> NavigationParameters();\r\n            }\r\n\r\n            <span style=\"color: blue;\">if</span> (context.NavigationService == <span style=\"color: blue;\">null</span> || context.NavigationService.Region == <span style=\"color: blue;\">null</span>)\r\n            {\r\n                <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">new</span> NavigationParameters();\r\n            }\r\n\r\n            <span style=\"color: blue;\">if</span> (context.NavigationService.Region.Context <span style=\"color: blue;\">is</span> NavigationParameters)\r\n            {\r\n                <span style=\"color: blue;\">return</span> context.NavigationService.Region.Context <span style=\"color: blue;\">as</span> NavigationParameters;\r\n            }\r\n\r\n            <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">new</span> NavigationParameters();\r\n        }\r\n\r\n        <span style=\"color: blue;\">#endregion</span>\r\n    }\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2011-05-02T13:29:53.743-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "606516",
    "ThreadId": "248576",
    "Html": "<p>You could convert your object to a json string using either DataContractJsonSerializer of Newtonsoft Json.Net and then pass it as UriQuery and the deserialize it on the other end.</p>",
    "PostedDate": "2011-05-03T08:54:22.93-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "609518",
    "ThreadId": "248576",
    "Html": "<p>Hi petunya,</p>\r\n<p>I like your approach. Haven't used it obviously, but I think that should work quite well.</p>\r\n<p>Gan_s, thanks for your suggestion, but this is why I do not like to&nbsp;do what you have suggested in a Window's application:</p>\r\n<ul>\r\n<li>There is a lot more overhead involved than what is really&nbsp;necessary</li>\r\n<li>The object that you end up with is not the same object that you began with - so you end up with two versions of the object. It just makes more sense to pass objects by reference in most applications like this. </li>\r\n<li>Some objects that you want to pass around may contain read-only computed values, or properties&nbsp;that cannot be serialized easily - or at all.</li>\r\n<li>You can only pass 1 or 2k worth of data in a query string - only enough for the simplest of objects.</li>\r\n</ul>\r\n<p>I still do not like having to pass objects using the Region's context and that, along with a few other things, has caused me to stop using Prism. I feel that it still has a LONG way to go before it's ready for the type of commercial desktop applications that the company I work for develop, and the time you have to invest setting Prism up and learning its quirks is just too high.&nbsp;Still I plan to keep an eye on how it develops.</p>\r\n<p>That's just my two cents worth though :)</p>",
    "PostedDate": "2011-05-09T06:18:41.977-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "609747",
    "ThreadId": "248576",
    "Html": "<p>Hello Adam,</p>\r\n<p>I guess you might consider the eventAgrregator to pass any type of objects (nested Object) if you want to.</p>\r\n<p>Using Publish &amp; Subscribe.</p>\r\n<p>Regards</p>\r\n<p>Waleed</p>",
    "PostedDate": "2011-05-09T13:21:19.97-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "609859",
    "ThreadId": "248576",
    "Html": "<p>Hi Waleed,</p>\r\n<p>You could do that, but it just seems so much harder than it should be. There are a number of ways to pass objects by reference around, but I think that any framework that requires this much work to do something so simple and critical for anything but the most basic of applications is not ready for commercial use. Personally I only use an EventAggregator to notify different parts of the application that a particular event has taken place - like a customer object being updated or something. I'm not sure it should be used to pass data around for navigation.</p>\r\n<p>It's an interesting design choice they made with Prism&nbsp;as even the basic WPF Navigation Service, which also has its quirks, supports passing context to the page that you are navigating to.</p>\r\n<p>Cheers,</p>\r\n<p>Adam</p>",
    "PostedDate": "2011-05-09T17:36:10.31-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "609925",
    "ThreadId": "248576",
    "Html": "<blockquote style=\"padding-right: 0.25em; padding-left: 0.25em; padding-bottom: 0px; margin: 0.25em 1em 0px; padding-top: 0px; font-style: italic; border: #ccc 0.1em solid;\"><strong>adamvalpied wrote:</strong><br />\r\n<p>Hi petunya,</p>\r\n<p>I like your approach. Haven't used it obviously, but I think that should work quite well.</p>\r\n<p>Gan_s, thanks for your suggestion, but this is why I do not like to&nbsp;do what you have suggested in a Window's application:</p>\r\n<ul>\r\n<li>There is a lot more overhead involved than what is really&nbsp;necessary </li>\r\n<li>The object that you end up with is not the same object that you began with - so you end up with two versions of the object. It just makes more sense to pass objects by reference in most applications like this. </li>\r\n<li>Some objects that you want to pass around may contain read-only computed values, or properties&nbsp;that cannot be serialized easily - or at all. </li>\r\n<li>You can only pass 1 or 2k worth of data in a query string - only enough for the simplest of objects. </li>\r\n</ul>\r\n<p>I still do not like having to pass objects using the Region's context and that, along with a few other things, has caused me to stop using Prism. I feel that it still has a LONG way to go before it's ready for the type of commercial desktop applications that the company I work for develop, and the time you have to invest setting Prism up and learning its quirks is just too high.&nbsp;Still I plan to keep an eye on how it develops.</p>\r\n<p>That's just my two cents worth though :)</p>\r\n</blockquote>\r\n<p><br />Adam,</p>\r\n<p>Firstly I thought your app was a silverlight app and not a windows app&nbsp;as you have posted it under \"Prism 4 - Silverlight 4\".</p>\r\n<p>Also with json serialization/deserialization I dont see any overhead. A better serializer is the newtonsoft json serializer, which does not require your POCO classes to be decorated with DataContract and DataMember attributes. It is very efficient for json-object-json. So your point about \"you end up with two versions of the object\" is eliminated. You get back exactly what you serialized. But yes, you may right in saying that the query string might reject beyond a certain size.</p>\r\n<p>If you ask me Prism is a best way to go for modularised applications, of course only if you use it the right way :), otherwise it could be messy to figure out issues. RegionContext is another good option as mentioned above.</p>",
    "PostedDate": "2011-05-09T20:07:18.293-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "610083",
    "ThreadId": "248576",
    "Html": "<p>Hi gan_s,</p>\r\n<p>Ah - didn't realize this was in a Silverlight forum - just stumbled upon it when I was searching for something else. I agree that serializing objects does not have a huge overhead - I just dislike having to work so hard to just pass data around - and not really an option if you are passing the serialized object in the query string.</p>\r\n<p>I've seen a number of posts about this where people were using all sorts of 'hacky' measures to try to pass context around - like using global variables, sessions and the like - all of which used in this scenario are bad practice (especially since navigation is not synchronious - so you could end up grabbing the wrong context in the examples I saw). I feel that it's interesting that this framework comes under Microsoft's 'patterns &amp; practices' banner and yet makes it very difficult for users to actually use 'best practice' for things&nbsp;as simple as passing data from one part of the application to another.</p>\r\n<p>RegionContext was good - but I did not find it helpful in the following scenario:</p>\r\n<ul>\r\n<li>You have a region with a list of customers for example</li>\r\n<li>When you click on a customer you want to show that customer in an editing region (in my example I also had another region showing summary info for the customer underneath the list).</li>\r\n<li>But if the user has&nbsp;modified the previously selected customer object you want to show a confirmation dialog asking if the user wants to continue and lose their changes.</li>\r\n<li>If the customer selects 'No' then you don't want to set the RegionContext of all regions in scope - but it's too late of course.</li>\r\n</ul>\r\n<p>I agree with the general principle of Prism - and generally code&nbsp;using MVP or MVVM so it fits quite nicely with my usual approach to things - I just don't think it's ready for the real world yet. But I'm happy to be proven wrong :)</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-05-10T02:53:41.16-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "610639",
    "ThreadId": "248576",
    "Html": "<p>I think the decision of having uri string parameters is not a bad one since we are talking about a modular framework where views can be plugged in and out anywhere (region). It makes the navigation simple.</p>\r\n<p>In LOB applications, you will most probably have&nbsp;a service layer / data repository layer to access your data whether its from isolated storage, in memory cache or web services. When you go from one view to another, you can pass the ID in the navigation URI, and the target view can get the object against that ID from your service/repository layer.</p>\r\n<p>so, I dont think this \"issue\" will make me not use Prism for projects. Its a great framework and will improve further with subsequent releases.</p>",
    "PostedDate": "2011-05-10T16:28:56.793-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "610698",
    "ThreadId": "248576",
    "Html": "<p>Absolutely echo that !! Prism has much more to offer !!</p>",
    "PostedDate": "2011-05-10T20:23:33.16-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "653088",
    "ThreadId": "248576",
    "Html": "<p>The workaround I use is to create a class that inheirts the Uri class and has a property called 'Parameters' that returns a Dictionary&lt;string,object&gt;. I then pass an instance of this class to the&nbsp;RequestNavigate as the uri. In my view model, I cast the Uri of the&nbsp;NavigationContext to my subclassed Uri and from there I access the 'Parameters' property.</p>\r\n<p>&nbsp;</p>\r\n<p>E.x.:</p>\r\n<p>My Uri (I'm using MEF with exported views, so the full type name of the view is the url)</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">sealed</span> <span style=\"color: blue;\">class</span> NavigationUri : Uri\r\n{\r\n    <span style=\"color: blue;\">private</span> NavigationUri(<span style=\"color: blue;\">string</span> uri)\r\n        : <span style=\"color: blue;\">base</span>(uri, UriKind.Relative)\r\n    {\r\n        Parameters = <span style=\"color: blue;\">new</span> Dictionary&lt;<span style=\"color: blue;\">string</span>, <span style=\"color: blue;\">object</span>&gt;();\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> NavigationUri Create&lt;TView&gt;()\r\n    {\r\n        <span style=\"color: blue;\">string</span> uri = <span style=\"color: blue;\">typeof</span>(TView).FullName;\r\n        <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">new</span> NavigationUri(uri);\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> Dictionary&lt;<span style=\"color: blue;\">string</span>, <span style=\"color: blue;\">object</span>&gt; Parameters\r\n    {\r\n        <span style=\"color: blue;\">get</span>;\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">set</span>;\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>Instead of hardcoding strings, I use a class to generate the parameter keys</pre>\r\n<pre>\r\n    <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">sealed</span> <span style=\"color: blue;\">class</span> NavigationUriParameters\r\n    {\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">readonly</span> <span style=\"color: blue;\">string</span> ViewText = Guid.NewGuid().ToString();\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">readonly</span> <span style=\"color: blue;\">string</span> ViewIcon = Guid.NewGuid().ToString();\r\n    }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Here's the code snippet that creates the uri and does the navigation</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">var</span> uri = NavigationUri.Create&lt;ConfigurationSearchView&gt;();\r\nuri.Parameters[NavigationUriParameters.ViewIcon] = icon.Source;\r\nuri.Parameters[NavigationUriParameters.ViewText] = <span style=\"color: #a31515;\">\"View Header Text Goes Here\"</span>;\r\n_regionMgr.RequestNavigate(Shell.ViewRegion, uri, Callback);\r\n</pre>\r\n</div>\r\n</p>\r\n<p>I can now retrieve the parameters from the&nbsp;NavigationContext from my viewmodel (The viewmodel implements&nbsp;IConfirmNavigationRequest)</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> OnNavigatedTo(NavigationContext navigationContext)\r\n{\r\n    <span style=\"color: blue;\">var</span> uri = (NavigationUri)navigationContext.Uri;\r\n    Text = (<span style=\"color: blue;\">string</span>)uri.Parameters[NavigationUriParameters.ViewText];\r\n    Image = (ImageSource)uri.Parameters[NavigationUriParameters.ViewIcon];\r\n}\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2011-08-05T06:32:46.257-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "683563",
    "ThreadId": "248576",
    "Html": "<p>Thanks.</p>",
    "PostedDate": "2011-10-13T02:01:03.823-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]