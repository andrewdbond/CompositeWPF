[
  {
    "Id": "986567",
    "ThreadId": "429579",
    "Html": "\r\n<p>Hi</p>\r\n<p>How do you guys handle users logging into an application structured in a modular fashion?</p>\r\n<p>I have added the Login view and associated view model directly into my Desktop application and was going to simply store my logged in user as a property in my applications' App.xaml.cs like so:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>App.Current.Properties[<span style=\"color:#a31515\">&quot;CurrentUser&quot;</span>] = user;\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>However using this approach means I cannot access the user property throughout the application as my modules requiring access to the value would all require a reference to the App, which already has a reference to the modules.....</p>\r\n<p>Is there an agreed method of passing this value or would you have a LoginModule that has a lifetime of ?????????(what) and access the value from this module, thus all modules will require a refernce to the LoginModule......&nbsp;</p>\r\n<p>Yours</p>\r\n<p>Lost.</p>\r\n",
    "PostedDate": "2013-01-14T10:03:07.167-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "986665",
    "ThreadId": "429579",
    "Html": "\r\n<p>Hi,</p>\r\n<p>In my opinion, a possible approach to handle this scenario could be using <strong>\r\nShared Services</strong> to access and manage information among different modules (in this case, the logged user).</p>\r\n<p>Basically, you could create a service that could store the current user, implementing an interface. Then, you could register this service in the container as a\r\n<strong>singleton </strong>mapped to that interface and import it in the modules through it. This interface could be declared in a common assembly referenced by all the modules (like an &quot;Infrastructure&quot; project,) while the service implementation itself could\r\n be declared in a module or in the shell project. Like this, you wouldn't need to have a reference to the project where the service is implemented, as the modules only need to know the corresponding interface.</p>\r\n<p>You can find more information about <strong>Shared Services</strong> in the following section of the documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28v=pandp.40%29.aspx#sec7\">Chapter 9 - Communication Between Loosely Coupled Components - Shared Services</a>\r\n</li></ul>\r\n<p>Also, you can find more information about how to register a singleton in the container in the following chapter:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921140%28v=pandp.40%29.aspx\">Chapter 3 - Managing Dependencies Between Components</a>\r\n</li></ul>\r\n<p>Damian Cherubini<br>\r\n<a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>\r\n",
    "PostedDate": "2013-01-14T12:34:40.553-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "986938",
    "ThreadId": "429579",
    "Html": "\r\n<p>Thanks for response Damian</p>\r\n<p>I wonder if this might be the easiest solution to my other query regarding modules of an application that are envisaged to be used by many other modules to display &quot;child window&quot; screens as my &quot;Notes&quot; module is envisaged?</p>\r\n<p>Perhaps if a developer identifies such &quot;universal&quot; modules such as this that he/she sees as being used in many of his/her applications, they should reside in a &quot;global&quot;/&quot;infrastructure&quot; style serviceing module?</p>\r\n<p>Thanks again</p>\r\n",
    "PostedDate": "2013-01-15T02:33:02.71-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "987269",
    "ThreadId": "429579",
    "Html": "\r\n<p>Hi,</p>\r\n<p>It might be possible to create a <strong>Shared Service</strong> that could be in charge of showing a view inside a new window to manage the\r\n<strong>Notes </strong>when requested. As all the logic to do so will be encapsulated inside the service, the modules could be kept decoupled from each other. You will need to develop the logic of the service that will be in charge of doing this including how\r\n to manage the popup, pass information back and forth, etc. but you will also to be able to customize it according to your needs. Regarding this same topic, I just described another possible approach in your\r\n<a href=\"http://compositewpf.codeplex.com/discussions/428995\">previous thread</a> that you might find useful.</p>\r\n<p>About your second question, I believe we should first make a distinction between a module and a infrastructure project. Based on my understanding, in a Prism application architecture an &quot;Infrastructure&quot; project is a project which contains resources which\r\n are &quot;directly&quot; used by decoupled modules and / or the main application. Such resources usually include common interfaces, common identifiers, helpers, prism extensions, etc, that are globally used. They rarely include specific implementations (like in this\r\n case <strong>Shared Services</strong>) and they are not modules (thus, they do not register classes in the container by they own.)</p>\r\n<p>Following this same concept, the structure of a solution with a <strong>Shared Service</strong> could be similar to this:</p>\r\n<ul>\r\n<li><strong>Infrastructure </strong>(not a module) - Contains <strong>IService </strong>\r\nonly. </li><li><strong>Main </strong>project - Reference <strong>Infrastructure</strong> </li><li><strong>ServiceModule </strong>- Reference <strong>Infrastructure </strong>- Implements\r\n<strong>Service </strong>and registers it to the container though <strong>IService</strong>\r\n</li><li><strong>ConsumerModule </strong>- Reference <strong>Infrastructure </strong>- Consumes an\r\n<strong>IService </strong>injected by the container </li></ul>\r\n<p>As you can see, <strong>ServiceModule </strong>and <strong>ConsumerModule </strong>\r\ndon't reference each other; however <strong>ConsumerModule </strong>can still use the service because both knows the\r\n<strong>IService </strong>interface. This is the advantage of using a <strong>Infrastructure\r\n</strong>project. The <strong>Service </strong>implementation is not in the <strong>\r\nInfrastructure </strong>project to allow decoupling the service implementation from the modules. Like this, if in the future you need to change the service, you can replace the\r\n<strong>ServiceModule </strong>without affecting the <strong>ConsumerModule</strong>. Also, this will allow you to port the\r\n<strong>ServiceModule </strong>to other applications, as long as you define the corresponding interface in the\r\n<strong>Infrastructure </strong>of that application too.</p>\r\n<p>As you mentioned, by following this kind of pattern and by properly decoupling the modules, you can be able to create &quot;universal&quot; modules that could be reused in several of your applications.</p>\r\n<p>Regards,</p>\r\n<p>Damian Cherubini<br>\r\n<a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>\r\n",
    "PostedDate": "2013-01-15T12:37:59.067-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]