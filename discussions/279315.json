[
  {
    "Id": "697659",
    "ThreadId": "279315",
    "Html": "\r\n<p>When one of&nbsp;my module contains a&nbsp;view with Label (System.Windows.Controls.Data.Input, Silverlight Toolkit)</p>\r\n<p>and I used library caching, it throw error about filenotfound exception.</p>\r\n<p>it worked if NOT using library caching (reduce xap filesize)</p>\r\n<p>and when I test without prism, library caching with Label worked ok.</p>\r\n<p>is this a known issue in Prism 4 using library caching?</p>\r\n<p>I have uploaded a sample: <a href=\"https://skydrive.live.com/?cid=e6666d4e95ba2779&sc=documents&uc=1&id=E6666D4E95BA2779%21146\">\r\nhttps://skydrive.live.com/?cid=e6666d4e95ba2779&amp;sc=documents&amp;uc=1&amp;id=E6666D4E95BA2779%21146</a>#</p>\r\n<p>LibraryCachingBug.zip</p>\r\n<p>There are 2 views in SilverlightApplication1:</p>\r\n<p>SilverlightControl1 (just a TextBlock)</p>\r\n<p>SilverlightControl2 (just a Label)</p>\r\n<p>the module is now straight poping the 2nd view, it break at runtime with library caching.</p>\r\n<p>using SilverlightControl1 is ok, so its nothing wrong with my codes.</p>\r\n",
    "PostedDate": "2011-11-13T19:34:14.487-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "698063",
    "ThreadId": "279315",
    "Html": "<p>Hi,</p>\r\n<p>We have downloaded you repro-sample application and we could reproduce the problem you are mentioning. We have also found that if you add a reference to the <strong>System.Windows.Controls.Data.Input.dll</strong> library in the <strong>Shell </strong>project, this problem doesn't appear and the application works correctly.</p>\r\n<p>It seems that when the <strong>SilverlightApplication1 </strong>project is discovered as a module and the <strong>SilverlightControl2</strong> control is initialized, the <strong>System.Windows.Controls.Data.Input.dll</strong> library is missing and the exception is thrown.</p>\r\n<p>Based on my understanding the reason behind this problem might be related to the fact that the <strong>SilverlightApplication1</strong> project is not referenced by the <strong>Shell </strong>project (which is the recommended approach when using Prism). When the Silverlight application is compiled, the only project that the application \"knows\" is the <strong>Shell</strong> project, which doesn't have a reference to the <strong>SilverlightApplication1 </strong>project or to the <strong>System.Windows.Controls.Data.Input.dll</strong> library. So, it might be possible that, as the <strong>Shell </strong>project doesn't know the <strong>System.Windows.Controls.Data.Input.dll</strong> library or any project that requires it, the library is not \"cached.\"</p>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\" target=\"_blank\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-11-14T12:48:06.62-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "698193",
    "ThreadId": "279315",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>DCherubini wrote:</strong><br />\r\n<p>Hi,</p>\r\n<p>...&nbsp;So, it might be possible that, as the <strong>Shell </strong>project doesn't know the <strong>System.Windows.Controls.Data.Input.dll</strong> library or any project that requires it, the library is not \"cached.\"</p>\r\n<p>....</p>\r\n<p>Damian Cherubini<br /><a href=\"http://blogs.southworks.net/dcherubini\" target=\"_blank\">http://blogs.southworks.net/dcherubini</a></p>\r\n</blockquote>\r\n<p><br />does this mean, if my another module using another other extra/difference dependencies, I must add them onto Shell if using library chaching?</p>\r\n<p>But it worked without library caching, as Shell still has no reference to this extra thing?</p>\r\n<p>i come across an article about library cahing, manually zipping and&nbsp;grouped those dependencies in different way. I can't find this article anymore. Dunno will this help resolve this kind of problem?</p>",
    "PostedDate": "2011-11-14T18:50:26.303-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "698619",
    "ThreadId": "279315",
    "Html": "<p>Hi,</p>\r\n<p>We examined the way Prism downloads Xap files and found that the <strong>XapModuleTypeLoader </strong>reads the <strong>AppManifest.xaml</strong> file inside your module's Xap file, searches for the <strong>Deployment.Parts</strong> elements and then loads the assemblies corresponding to the ones specified in the <strong>Source </strong>property of the <strong>AssemblyPart </strong>elements in the aforementioned XML element. However, dependencies that have been placed on a zip file using Application Library Caching are referenced in <strong>ExtensionPart </strong>elements inside the <strong>Deployment.ExternalParts</strong> element, and the physical file is stored outside your Xap file.</p>\r\n<p>To illustrate this, here's how the <strong>AppManifest </strong>for a module might look like:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Deployment</span> <span style=\"color: red;\">xmlns</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">http://schemas.microsoft.com/client/2007/deployment</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">xmlns:x</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">EntryPointAssembly</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">SilverlightApplication1</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">EntryPointType</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">SilverlightApplication1.App</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">RuntimeVersion</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">4.0.50826.0</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n  <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Deployment.Parts</span><span style=\"color: blue;\">&gt;</span>\r\n    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">AssemblyPart</span> <span style=\"color: red;\">x:Name</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">SilverlightApplication1</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Source</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">SilverlightApplication1.dll</span><span style=\"color: black;\">\"</span> <span style=\"color: blue;\">/&gt;</span>\r\n    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">AssemblyPart</span> <span style=\"color: red;\">x:Name</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Infrastructure</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Source</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Infrastructure.dll</span><span style=\"color: black;\">\"</span> <span style=\"color: blue;\">/&gt;</span>\r\n  <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Deployment.Parts</span><span style=\"color: blue;\">&gt;</span>\r\n  <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Deployment.ExternalParts</span><span style=\"color: blue;\">&gt;</span>\r\n    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ExtensionPart</span> <span style=\"color: red;\">Source</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">System.Windows.Controls.Data.Input.zip</span><span style=\"color: black;\">\"</span> <span style=\"color: blue;\">/&gt;</span>\r\n    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ExtensionPart</span> <span style=\"color: red;\">Source</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">System.ComponentModel.DataAnnotations.zip</span><span style=\"color: black;\">\"</span> <span style=\"color: blue;\">/&gt;</span>\r\n  <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Deployment.ExternalParts</span><span style=\"color: blue;\">&gt;</span>\r\n<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Deployment</span><span style=\"color: blue;\">&gt;</span>\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Now, when a module's Xap file has been downloaded, the <strong>XapModuleTypeLoader.HandleModuleDownloaded </strong>method is called, which loads in memory the results obtained by calling the <strong>XapModuleTypeLoader.GetParts</strong> method, which ignores the <strong>Deployment.ExternalParts</strong> element inside the <strong>AppManifest.xaml </strong>file (as seen in the code snippet above):</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\"><span style=\"color: #000000;\">(...)</span><br />private</span> <span style=\"color: blue;\">static</span> IEnumerable&lt;AssemblyPart&gt; GetParts(Stream stream)\r\n        {\r\n            List&lt;AssemblyPart&gt; assemblyParts = <span style=\"color: blue;\">new</span> List&lt;AssemblyPart&gt;();\r\n\r\n            <span style=\"color: blue;\">var</span> streamReader = <span style=\"color: blue;\">new</span> StreamReader(Application.GetResourceStream(<span style=\"color: blue;\">new</span> StreamResourceInfo(stream, <span style=\"color: blue;\">null</span>), <span style=\"color: blue;\">new</span> Uri(<span style=\"color: #a31515;\">\"AppManifest.xaml\"</span>, UriKind.Relative)).Stream);\r\n            <span style=\"color: blue;\">using</span> (XmlReader xmlReader = XmlReader.Create(streamReader))\r\n            {\r\n                xmlReader.MoveToContent();\r\n                <span style=\"color: blue;\">while</span> (xmlReader.Read())\r\n                {\r\n                    <span style=\"color: blue;\">if</span> (xmlReader.NodeType == XmlNodeType.Element &amp;&amp; xmlReader.Name == <span style=\"color: #a31515;\">\"Deployment.Parts\"</span>)\r\n                    {\r\n                        <span style=\"color: blue;\">using</span> (XmlReader xmlReaderAssemblyParts = xmlReader.ReadSubtree())\r\n                        {\r\n                            <span style=\"color: blue;\">while</span> (xmlReaderAssemblyParts.Read())\r\n                            {\r\n                                <span style=\"color: blue;\">if</span> (xmlReaderAssemblyParts.NodeType == XmlNodeType.Element &amp;&amp; xmlReaderAssemblyParts.Name == <span style=\"color: #a31515;\">\"AssemblyPart\"</span>)\r\n                                {\r\n                                    AssemblyPart assemblyPart = <span style=\"color: blue;\">new</span> AssemblyPart();\r\n                                    assemblyPart.Source = xmlReaderAssemblyParts.GetAttribute(<span style=\"color: #a31515;\">\"Source\"</span>);\r\n                                    assemblyParts.Add(assemblyPart);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        <span style=\"color: blue;\">break</span>;\r\n                    }\r\n                }\r\n            }\r\n\r\n            <span style=\"color: blue;\">return</span> assemblyParts;\r\n        }\r\n(...)\r\n</pre>\r\n</div>\r\n</p>\r\n<p>As a possible workaround to avoid this problem from happening, we created a modified version of the <strong>XapModuleTypeLoader </strong>(named <strong>XapModuleTypeLoaderWithLibraryCachingFix</strong>), which loads the extension parts in memory before loading the assembly parts. To do this, we modified the <strong>IFileDownloader_DownloadCompleted</strong> method to obtain an <strong>ExternalPartsLoader</strong> and call its <strong>LoadExtensionParts</strong> method before calling the <strong>HandleModuleDownloaded</strong>. The <strong>ExternalPartsLoader.LoadExtensionParts</strong> method basically receives a stream, searches for the <strong>AppManifest.xaml</strong> inside that stream, downloads the zip files containing the extension parts and loads the dll file inside them in memory. Once this operation has finished, the <strong>HandleModuleDownloaded</strong> (which had been passed as a callback) is called, and the module loading process continues as it would regularly do. Also you can check the code of the <strong>ExternalPartsLoader </strong>class included in the sample to verify this behavior.</p>\r\n<p>You can find the sample that contains all the aforementioned modifications in my <a href=\"https://skydrive.live.com/#cid=7890102B5B8BC928&amp;id=7890102B5B8BC928!103\">Skydrive account</a> under the name <strong>LibraryCachingBug.zip</strong>.</p>\r\n<p>On the other hand, to make this work, we had to create a class that inherits from <strong>ModuleManager </strong>and overrides its <strong>ModuleTypeLoaders </strong>property to use the <strong>XapModuleTypeLoaderWithLibraryCachingFix </strong>class instead of the regular <strong>XapModuleTypeLoader</strong>. We then overrided the <strong>ConfigureContainer </strong>method in the bootstrapper to register this custom module manager (named <strong>ModuleManagerWithLibraryCachingFix</strong>) in the container, so that it is used instead of the regular one.</p>\r\n<p><em>Please note that in this sample we only created a <strong>XapModuleTypeLoaderWithLibraryCachingFix </strong>that works with Unity; if you want to use this with Mef, you will have to apply a similar workaround modifying the <strong>MefXapModuleTypeLoader </strong>class. Also note that this workaround might not be proper to all scenarios and has only been tested in this case.</em></p>\r\n<p>I hope you find it useful.</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a>﻿</p>",
    "PostedDate": "2011-11-15T12:51:19.207-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]