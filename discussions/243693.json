[
  {
    "Id": "556900",
    "ThreadId": "243693",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I get random errors with the regionmanager complaining about the region already existing it its collection. I use MEF all over the application. I use regionManager.RequestNavigate to navigate to views in a region. My scenario is as below</p>\r\n<p>Main Page</p>\r\n<ul>\r\n<li>MainRegion\r\n<ul>\r\n<li>TabView loaded in MainRegion. This view is marked with NonShared creation policy and Regionmemberlifetime is set to keepalive false.\r\n<ul>\r\n<li>TabRegion : the regionManager, randomly complains about this region being already added to its collection. This happens unpredictably and very hard to reproduce\r\n</li></ul>\r\n</li></ul>\r\n</li></ul>\r\n<p>I dont add region to the regionManager manually. The region manager automatically picks up regions defined in the views. I have a RadTabRegionAdapter defined and it all works fine. I'm clueless as to how to get around this issue. Shouldnt the regionManager\r\n not check inherently if the region exists in its collection before adding it?</p>\r\n<p>Any help with this would be appreciated. I dont think I can reproduce this issue in any sample application.</p>\r\n<p>Thanks.</p>\r\n<p>Ganesh</p>\r\n",
    "PostedDate": "2011-01-28T08:02:36.973-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "556908",
    "ThreadId": "243693",
    "Html": "\r\n<p>Here is the stack trace. Also attaching an <a href=\"http://cid-0b3d61b7a214f81a.office.live.com/self.aspx/.Documents/app%5E_structure.PNG\" target=\"_blank\">\r\nimage</a> showing how the regions are structured in the app.</p>\r\n<p><em><span style=\"color:#0000ff\">An exception occurred while trying to create region objects.</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp;&nbsp; - The most likely causing exception was: 'System.Reflection.TargetInvocationException: [Arg_TargetInvocationException]</span></em><br>\r\n<em><span style=\"color:#0000ff\">Arguments:</span></em><br>\r\n<em><span style=\"color:#0000ff\">Debugging resource strings are unavailable. Often the key and arguments provide sufficient information to diagnose the problem. See\r\n<a href=\"http://go.microsoft.com/fwlink/?linkid=106663&Version=4.0.50401.0&File=mscorlib.dll&Key=Arg_TargetInvocationException\">\r\nhttp://go.microsoft.com/fwlink/?linkid=106663&amp;Version=4.0.50401.0&amp;File=mscorlib.dll&amp;Key=Arg_TargetInvocationException</a> ---&gt; Microsoft.Practices.Prism.Regions.UpdateRegionsException: An exception occurred while trying to create region objects.</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp;&nbsp; - The most likely causing exception was: 'System.Reflection.TargetInvocationException: [Arg_TargetInvocationException]</span></em><br>\r\n<em><span style=\"color:#0000ff\">Arguments:</span></em><br>\r\n<em><span style=\"color:#0000ff\">Debugging resource strings are unavailable. Often the key and arguments provide sufficient information to diagnose the problem. See\r\n<a href=\"http://go.microsoft.com/fwlink/?linkid=106663&Version=4.0.50401.0&File=mscorlib.dll&Key=Arg_TargetInvocationException\">\r\nhttp://go.microsoft.com/fwlink/?linkid=106663&amp;Version=4.0.50401.0&amp;File=mscorlib.dll&amp;Key=Arg_TargetInvocationException</a> ---&gt; Microsoft.Practices.Prism.Regions.Behaviors.RegionCreationException: An exception occurred while creating a region\r\n with name 'TabRegion'. The exception was: System.ArgumentException: Region with the given name is already registered: TabRegion</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.RegionCollection.Add(IRegion region)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.TryRegisterRegion()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.StartMonitoringRegionManager()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.OnAttach()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionBehavior.Attach()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionBehaviorCollection.Add(String key, IRegionBehavior regionBehavior)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.AttachDefaultBehaviors(IRegion region, T regionTarget)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Initialize(T regionTarget, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Microsoft.Practices.Prism.Regions.IRegionAdapter.Initialize(Object regionTarget, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(DependencyObject targetElement, String regionName).&nbsp; ---&gt; System.ArgumentException: Region with the given name is\r\n already registered: TabRegion</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.RegionCollection.Add(IRegion region)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.TryRegisterRegion()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.StartMonitoringRegionManager()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.OnAttach()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionBehavior.Attach()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionBehaviorCollection.Add(String key, IRegionBehavior regionBehavior)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.AttachDefaultBehaviors(IRegion region, T regionTarget)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Initialize(T regionTarget, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Microsoft.Practices.Prism.Regions.IRegionAdapter.Initialize(Object regionTarget, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(DependencyObject targetElement, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; --- End of inner exception stack trace ---</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(DependencyObject targetElement, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.TryCreateRegion()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.OnUpdatingRegions(Object sender, EventArgs e)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; --- End of inner exception stack trace ---</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at System.RuntimeMethodHandle._InvokeMethodFast(IRuntimeMethodInfo method, Object target, Object[] arguments, SignatureStruct&amp; sig, MethodAttributes methodAttributes, RuntimeType typeOwner)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, Boolean skipVisibilityChecks)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at System.Delegate.DynamicInvokeImpl(Object[] args)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at System.Delegate.DynamicInvoke(Object[] args)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Events.WeakDelegatesManager.Raise(Object[] args)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.UpdateRegions()'.</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp;&nbsp; But also check the InnerExceptions for more detail or call .GetRootException().&nbsp; ---&gt; Microsoft.Practices.Prism.Regions.Behaviors.RegionCreationException: An exception occurred while creating a region\r\n with name 'TabRegion'. The exception was: System.ArgumentException: Region with the given name is already registered: TabRegion</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.RegionCollection.Add(IRegion region)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.TryRegisterRegion()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.StartMonitoringRegionManager()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.OnAttach()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionBehavior.Attach()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionBehaviorCollection.Add(String key, IRegionBehavior regionBehavior)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.AttachDefaultBehaviors(IRegion region, T regionTarget)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Initialize(T regionTarget, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Microsoft.Practices.Prism.Regions.IRegionAdapter.Initialize(Object regionTarget, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(DependencyObject targetElement, String regionName).&nbsp; ---&gt; System.ArgumentException: Region with the given name is\r\n already registered: TabRegion</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.RegionCollection.Add(IRegion region)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.TryRegisterRegion()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.StartMonitoringRegionManager()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.OnAttach()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionBehavior.Attach()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionBehaviorCollection.Add(String key, IRegionBehavior regionBehavior)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.AttachDefaultBehaviors(IRegion region, T regionTarget)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Initialize(T regionTarget, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Microsoft.Practices.Prism.Regions.IRegionAdapter.Initialize(Object regionTarget, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(DependencyObject targetElement, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; --- End of inner exception stack trace ---</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(DependencyObject targetElement, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.TryCreateRegion()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.OnUpdatingRegions(Object sender, EventArgs e)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; --- End of inner exception stack trace ---</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.UpdateRegions()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.RegionCollection.Remove(String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.TryRegisterRegion()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.OnUpdatingRegions(Object sender, EventArgs e)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; --- End of inner exception stack trace ---</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at System.RuntimeMethodHandle._InvokeMethodFast(IRuntimeMethodInfo method, Object target, Object[] arguments, SignatureStruct&amp; sig, MethodAttributes methodAttributes, RuntimeType typeOwner)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, Boolean skipVisibilityChecks)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at System.Delegate.DynamicInvokeImpl(Object[] args)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at System.Delegate.DynamicInvoke(Object[] args)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Events.WeakDelegatesManager.Raise(Object[] args)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.UpdateRegions()'.</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp;&nbsp; But also check the InnerExceptions for more detail or call .GetRootException().</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.UpdateRegions()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.RegionCollection.GetEnumerator()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at System.Linq.Enumerable.Any[TSource](IEnumerable`1 source, Func`2 predicate)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; </span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp;&nbsp; - The most likely causing exception was: 'System.Reflection.TargetInvocationException: [Arg_TargetInvocationException]</span></em><br>\r\n<em><span style=\"color:#0000ff\">Arguments:</span></em><br>\r\n<em><span style=\"color:#0000ff\">Debugging resource strings are unavailable. Often the key and arguments provide sufficient information to diagnose the problem. See\r\n<a href=\"http://go.microsoft.com/fwlink/?linkid=106663&Version=4.0.50401.0&File=mscorlib.dll&Key=Arg_TargetInvocationException\">\r\nhttp://go.microsoft.com/fwlink/?linkid=106663&amp;Version=4.0.50401.0&amp;File=mscorlib.dll&amp;Key=Arg_TargetInvocationException</a> ---&gt; Microsoft.Practices.Prism.Regions.Behaviors.RegionCreationException: An exception occurred while creating a region\r\n with name 'TabRegion'. The exception was: System.ArgumentException: Region with the given name is already registered: TabRegion</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.RegionCollection.Add(IRegion region)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.TryRegisterRegion()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.StartMonitoringRegionManager()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.OnAttach()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionBehavior.Attach()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionBehaviorCollection.Add(String key, IRegionBehavior regionBehavior)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.AttachDefaultBehaviors(IRegion region, T regionTarget)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Initialize(T regionTarget, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Microsoft.Practices.Prism.Regions.IRegionAdapter.Initialize(Object regionTarget, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(DependencyObject targetElement, String regionName).&nbsp; ---&gt; System.ArgumentException: Region with the given name is\r\n already registered: TabRegion</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.RegionCollection.Add(IRegion region)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.TryRegisterRegion()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.StartMonitoringRegionManager()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.OnAttach()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionBehavior.Attach()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionBehaviorCollection.Add(String key, IRegionBehavior regionBehavior)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.AttachDefaultBehaviors(IRegion region, T regionTarget)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Initialize(T regionTarget, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Microsoft.Practices.Prism.Regions.IRegionAdapter.Initialize(Object regionTarget, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(DependencyObject targetElement, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; --- End of inner exception stack trace ---</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(DependencyObject targetElement, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.TryCreateRegion()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.OnUpdatingRegions(Object sender, EventArgs e)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; --- End of inner exception stack trace ---</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at System.RuntimeMethodHandle._InvokeMethodFast(IRuntimeMethodInfo method, Object target, Object[] arguments, SignatureStruct&amp; sig, MethodAttributes methodAttributes, RuntimeType typeOwner)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, Boolean skipVisibilityChecks)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at System.Delegate.DynamicInvokeImpl(Object[] args)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at System.Delegate.DynamicInvoke(Object[] args)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Events.WeakDelegatesManager.Raise(Object[] args)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.UpdateRegions()'.</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp;&nbsp; But also check the InnerExceptions for more detail or call .GetRootException().</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.UpdateRegions()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.RegionCollection.Remove(String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.TryRegisterRegion()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.OnUpdatingRegions(Object sender, EventArgs e)An exception occurred while creating a region with name 'TabRegion'. The exception was:\r\n System.ArgumentException: Region with the given name is already registered: TabRegion</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManager.RegionCollection.Add(IRegion region)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.TryRegisterRegion()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.StartMonitoringRegionManager()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.OnAttach()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionBehavior.Attach()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionBehaviorCollection.Add(String key, IRegionBehavior regionBehavior)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.AttachDefaultBehaviors(IRegion region, T regionTarget)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Initialize(T regionTarget, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Microsoft.Practices.Prism.Regions.IRegionAdapter.Initialize(Object regionTarget, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(DependencyObject targetElement, String regionName).</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(DependencyObject targetElement, String regionName)</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.TryCreateRegion()</span></em><br>\r\n<em><span style=\"color:#0000ff\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors</span></em></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-01-28T08:15:42.42-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "556925",
    "ThreadId": "243693",
    "Html": "\r\n<p>Hi Ganesh,</p>\r\n<p>You might find the scoped regions approach as described in <a href=\"http://msdn.microsoft.com/en-us/library/ff921098%28PandP.40%29.aspx\">\r\nthis article</a> from the Prism MSDN documentation useful to achieve your scenario. By defining a scoped region manager for each of the tab view that is created, Prism attaches a different instance of the Region Manager to that view, so that you can add regions\r\n with the same name inside multiple instances of that view. If you try to add more than one region with the same name inside the same region manager, a\r\n<strong>RegionCreationException </strong>will be thrown.</p>\r\n<p>You could also use the approach shown in the following thread to create region names dynamically, so as to avoid defining your tab regions with the same name:</p>\r\n<p><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=240566\"><span>How to create a tabcontrol with dynamic region names.</span></a></p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2011-01-28T08:43:15.16-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "557839",
    "ThreadId": "243693",
    "Html": "\r\n<p>Hi Guido,</p>\r\n<p>I have handled this differently. Instead of dealing with dynamic regions all I do is when i navigate away from the view I remove that region from the Regions collection in the region manager. Now since my views are nonshared, they get recreated when navigated\r\n to and the tab region gets added to the Regions collection. This way I'm double sure that the region with the same name would not get added to the Regions collection everytime I naviagte to this view.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>_regionManager.Regions.Remove(<span style=\"color:#a31515\">&quot;TabRegion&quot;</span>);\r\n</pre>\r\n</div>\r\n<p>this seems to work well. Is this approach good enough?</p>\r\n<p>Cheers,</p>\r\n<p>Ganesh</p>\r\n",
    "PostedDate": "2011-01-30T19:28:37.197-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "597790",
    "ThreadId": "243693",
    "Html": "<p>Hello, I'm sorry if I am not supposed to reopen this thread.</p>\r\n<p>I'm doing the same thing than gan_s, I'm removing manually the region otherwise I have the same exception, I would like to know if adding and removing a region in the code behind of a view isn't a bad practice in a MVVM-prism application.</p>\r\n<p>&nbsp;</p>\r\n<p>thanks.</p>",
    "PostedDate": "2011-04-15T02:15:38.743-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "597928",
    "ThreadId": "243693",
    "Html": "<p>Hi,</p>\n<p>The approach is a valid workaround to deal with this scenario; however that's not the recommended practice. You could try using scoped regions, which might probably be suitable to your situation as well.</p>\n<p>If you wish to keep using the approach of removing the regions from the <strong> RegionManager</strong>'s <strong>Regions </strong>collection, you could implement <strong>INavigationAware </strong>in your view's ViewModel and remove the region from the <strong>Region</strong>'s collection in the <strong>OnNavigatedFrom </strong>method of the view that's being navigated away from.</p>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-04-15T06:57:25.47-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "598884",
    "ThreadId": "243693",
    "Html": "<p>Hello GuidoMaliandi,</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks for the reply, the problem is I have the same exception with scoped regions.</p>",
    "PostedDate": "2011-04-18T00:27:10.197-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "626005",
    "ThreadId": "243693",
    "Html": "<p>Same problem and I'm using scoped regio</p>",
    "PostedDate": "2011-06-10T07:35:14.14-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "626028",
    "ThreadId": "243693",
    "Html": "<p>Hi,</p>\r\n<p>It would be helpful if you could provide us with further details regarding your scenario, and possibly a repro sample in which he problem can be seen.</p>\r\n<p>Additionally, have you tried the approaches discussed in this thread? If that is the case, did you experience the same problem after trying them out?</p>\r\n<p>Thanks,</p>\r\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-06-10T07:59:17.037-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "737669",
    "ThreadId": "243693",
    "Html": "<p>Hi Guido,</p>\r\n<p>I guess this is wrong time to re-open this. I had a look at scoped regions. I says you need to create a scoped region when registering the view with the region. I use MEF, i.e. RequestNavigate to load a view into a region. How should I be handling this scenario?</p>\r\n<p>here is the structure</p>\r\n<p>MainRegion</p>\r\n<ul>\r\n<li>TabView loaded in MainRegion. This view is marked with NonShared  creation policy and Regionmemberlifetime is set to keepalive false.  \r\n<ul>\r\n<li>TabRegion : where i load my tabitem views using regionmanager.RequestNavigate</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p>So do i not declare the RegionManager.RegionName=\"TabRegion\" in xaml of the View that hosts the tab control? And add it manually when the view is loaded, as a scoped region?</p>\r\n<p>Need help here are I'm still getting the random errors.</p>\r\n<p>Thanks.</p>",
    "PostedDate": "2012-02-03T03:45:48.107-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "737969",
    "ThreadId": "243693",
    "Html": "<p>Hi Ganesh,</p>\n<p>So far Prism Region Navigation does not provide a way of using Scoped Regions out-of-the-box. However, you might use an alternative approach to achieve the scoped regions scenario while keeping the benefits of navigation.</p>\n<p>I believe you might find the following blog post useful, where a possible approach is proposed:</p>\n<ul>\n<li><a href=\"http://blogs.southworks.net/aadami/2011/11/30/prism-region-navigation-and-scoped-regions/\">Prism Region Navigation and Scoped Regions</a> </li>\n</ul>\n<p>Also, I believe you might find the following threads interesting where similar issues are discussed:</p>\n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/279224\">Scoped Regions in TabControls</a> </li>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/236849\">Navigation and ScopedRegions</a> </li>\n</ul>\n<p>I hope you find this handy,</p>\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a>﻿</p>",
    "PostedDate": "2012-02-03T08:48:44.44-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "751635",
    "ThreadId": "243693",
    "Html": "<p>Hi aadami,</p>\r\n<p><a href=\"http://blogs.southworks.net/aadami/2011/11/30/prism-region-navigation-and-scoped-regions/\">Prism Region Navigation and Scoped Regions</a> approach cannot be applied to my scenario because of this</p>\r\n<ul>\r\n<li>ShellView : MainRegion</li>\r\n<li>regionManager.RequestNavigate(\"MainRegion\", new Uri(\".. view1 in module1.\"))\r\n<ul>\r\n<li>View1 loads and it has region TabRegion and it makes a set of RequestNavigateCalls to some views for each tabitem.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p>So practically I cannot get into the callback of the first request navigate to create TabRegion as my scoped region for MainRegion and do the requestNavigates for the tabitems in there, as shell is not responsible for that. It is the View1 in module1 which needs to load views in its TabRegion, with some entitlement checks.</p>\r\n<p>So I think only way out for my case it to manually remove the region from the regionManager on navigating away from the view which has the TabRegion.</p>\r\n<p>Thanks.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-02-10T02:13:22.393-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "830051",
    "ThreadId": "243693",
    "Html": "<p>Hi aadami,</p>\r\n<p><a href=\"https://skydrive.live.com/redir.aspx?cid=0b3d61b7a214f81a&amp;resid=B3D61B7A214F81A!150&amp;parid=root\">Here</a> is a sample project reproducing the issue. In case you do not have asyncctp installed, just comment out the Execute method and just keep clicking on ModuleA button on the UI in quick successions. If asycnctp is there then just run the app. It will simulate the page switching. And at some point you wll get the region creation exception.</p>\r\n<p>Kindly suggest us a good solution for this issue.</p>\r\n<p>Thanks.</p>",
    "PostedDate": "2012-04-29T23:04:21.023-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "831324",
    "ThreadId": "243693",
    "Html": "<p>Hi,</p>\n<p>I have downloaded your repro-sample application, but I were unable to reproduce the error you are mentioning using it.</p>\n<p>Based on the descriptions you provided, it seems that the problem happens when you have a view that has an inner region (for example <strong>View1 </strong>and its <strong>TabRegion</strong>) and you navigate back to it without navigating to any other view in between. As the <strong>TabRegion </strong>is not a scoped region it will be registered in the \"<em><strong>main region manager</strong></em>\" and when you perform the aforementioned navigation another <strong>TabRegion </strong>region would be register in the same region manager, thus raising the region creation exception. I believe that this is very similar to a problem described in the following thread:</p>\n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/353521\">Clearing Child Views from region and memmory</a> </li>\n</ul>\n<p>Based on this, and in the descriptions you provided so far, I believe that the approach proposed in the <a href=\"http://blogs.southworks.net/aadami/2011/11/30/prism-region-navigation-and-scoped-regions/\"> Prism Region Navigation and Scoped Regions</a> blog post can be applicable to your scenario: the sample provided in the aforementioned forum includes a region behavior named <strong>RegionManagerAwareBehavior </strong>and an interface named <strong>IRegionManagerAware</strong>. Basically, when a view or view model that is added to a region implements the <strong>IRegionManagerAware </strong>interface, the <strong>RegionManagerAwareBehavior </strong>will inject the corresponding <strong>RegionManager </strong>for that view / view model in its <strong>RegionManager </strong>property.</p>\n<p>In your scenario, you could implement the <strong>IRegionManagerAware </strong> in your <strong>View1 </strong>view or its view model. Then, you can navigate to the <strong>View1 </strong>view creating an <em><strong>scoped region manager</strong></em> like described in the aforementioned blog post (without the navigation callback part):</p>\n<p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">this</span>.regionManager.RequestNavigate(\n        <span style=\"color: #a31515;\">\"MainRegion\"</span>,\n        <span style=\"color: blue;\">new</span> Uri(<span style=\"color: #a31515;\">\"HelloWorldView?createRegionManagerScope=true\"</span>, UriKind.Relative)\n);\n</pre>\n</div>\n</p>\n<p>The <strong>RegionManagerAwareBehavior </strong>will then inject this <em><strong>scoped region manager</strong></em> in your view or view model. Therefore, you would be able to perform the corresponding navigation requests for the <strong>TabRegion </strong>region in the <strong>View1 </strong>view or its view model, instead of the <strong>Shell</strong>.</p>\n<p>I hope you find this useful,</p>\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-05-02T13:59:39.56-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "831439",
    "ThreadId": "243693",
    "Html": "<p>Thanks Damian for the elaborate response. I'll try out your solutions and let you.</p>\r\n<p>Cheers!</p>\r\n<p>Ganesh</p>",
    "PostedDate": "2012-05-02T20:49:30.373-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]