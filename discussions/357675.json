[
  {
    "Id": "842588",
    "ThreadId": "357675",
    "Html": "\r\n<p><span>I have my bootstrapper creating an instance of the shell:</span></p>\r\n<div id=\"premain0\"><img id=\"preimg0\" src=\"http://www.codeproject.com/images/minus.gif\" alt=\"\" width=\"9\" height=\"9\"><span id=\"precollapse0\">&nbsp;Collapse</span>&nbsp;|&nbsp;<a href=\"http://www.codeproject.com/Answers/394770/Trying-to-inject-IEventAggregator-in-Prism-Shell-n#\">Copy\r\n Code</a></div>\r\n<pre id=\"pre0\" lang=\"c#\">        <span>protected</span> <span>override</span> DependencyObject CreateShell ( )\r\n        {\r\n            MainWindow shell = <span>new</span> MainWindow( <span>this</span>.Container.Resolve&lt;IEventAggregator&gt;( ) );\r\n            <span>return</span> shell;\r\n        }\r\n&nbsp;\r\n        <span>protected</span> <span>override</span> <span>void</span> InitializeShell ( )\r\n        {\r\n            <span>base</span>.InitializeShell( );\r\n&nbsp;\r\n            App.Current.MainWindow = (Window)<span>this</span>.Shell;\r\n        }\r\n</pre>\r\n<p><span>&nbsp;</span><br>\r\n<span>and I have my shell consuming the constructor:</span></p>\r\n<div id=\"premain1\"><img id=\"preimg1\" src=\"http://www.codeproject.com/images/minus.gif\" alt=\"\" width=\"9\" height=\"9\"><span id=\"precollapse1\">&nbsp;Collapse</span>&nbsp;|&nbsp;<a href=\"http://www.codeproject.com/Answers/394770/Trying-to-inject-IEventAggregator-in-Prism-Shell-n#\">Copy\r\n Code</a></div>\r\n<pre id=\"pre1\" lang=\"c#\">        <span>public</span> MainWindow(IEventAggregator aggregator)\r\n        {\r\n            InitializeComponent( );\r\n            <span>this</span>.DataContext = <span>this</span>;\r\n            <span>this</span>.eventAggregator = aggregator;\r\n            eventAggregator.GetEvent&lt;BusyIndicator&gt;( ).Subscribe( SetIndicator, ThreadOption.UIThread );\r\n        }\r\n</pre>\r\n<p><span>&nbsp;</span><br>\r\n<span>However I found two issues: the framework wanted to call the empty constructor and I kept getting a null exception until I added an empty constructor to the Shell.</span><br>\r\n<span>Then I added a test in that logic to Assert if the initialized IEventAggregator ended up to be null. No surprise here it was null. So for some reason even though InitializeShell() was called and the window was set, it was recreated by the system (Prism?).</span><br>\r\n<span>&nbsp;</span><br>\r\n<span>Any suggestions on how to inject the event aggregator into the shell of my prism application? Should I not call base.InitializeShell() ??? (though the call to the empty constructor of the shell occurs after the BootStrapper.Run command was executed) I'm\r\n building it as a WPF application under the 4.0 framework using Prism 4.1 and Unity 2.0.</span></p>\r\n",
    "PostedDate": "2012-05-30T08:13:08.85-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "842739",
    "ThreadId": "357675",
    "Html": "<p>Hi,</p>\r\n<p>Based on my understanding, I believe this kind of behavior can occur if the \"<strong>StartupUri</strong>\" property is present in the <strong>App.xaml</strong> file used by your application. Please remember that when creating a <strong> Prism </strong>application, the aforementioned property should not be present as  the <strong>Shell </strong>window would be manually created in the <strong>CreateShell </strong>method of your <strong>Bootstrapper</strong> like you mentioned above. This can also be related to the fact that your application requires your <strong>Shell </strong>to have a constructor without parameters: when you define a <strong>Window </strong>in as your \"<strong>StartupUri</strong>\" in your <strong>App.xaml</strong>, the application will search for a constructor without parameters to instantiate the <strong>Window</strong>.</p>\r\n<p>If this is not the case, it would be helpful if you could provide us with more information or a repro-sample application portraying this problem so that we can help you further with this.</p>\r\n<p>As a side note (which is not related to the aforementioned problem,) regarding how you are injecting the <strong>EventAggregator </strong>in your <strong>Shell</strong>, I believe a cleaner approach could be to <strong>Create </strong>your shell for example like this:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> DependencyObject CreateShell ( )\r\n{\r\n    MainWindow shell = <span style=\"color: blue;\">this</span>.Container.Resolve&lt;MainWindow&gt;( );\r\n    <span style=\"color: blue;\">return</span> shell;\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>The container (in this case <strong>Unity</strong>) should inject the <strong>EventAggregator </strong>in your <strong>Shell </strong>constructor automatically.</p>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-05-30T11:56:26.157-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "842760",
    "ThreadId": "357675",
    "Html": "<p>Thank you!</p>\r\n<p>&nbsp;</p>\r\n<p>That was just the thing I was missing. &nbsp;Quietly buried deep with then header of the app.xaml file!</p>\r\n<p>I originally was doing the Container.Resolve() and was still not seeing the window pop up but was probably because of this issue.</p>",
    "PostedDate": "2012-05-30T12:33:20.16-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]