[
  {
    "Id": "1425876",
    "ThreadId": "638082",
    "Html": "Hi,<br />\n<br />\nI'm <em>Serializing</em> a ObservableCollection:<br />\n<pre><code>private ObservableCollection&lt;Models.WorkSenario&gt; workingSenarios;\npublic ObservableCollection&lt;Models.WorkSenario&gt; _WorkingSenarios\n{\n    get { return this.workingSenarios; }\n    set\n    {\n        SetProperty(ref this.workingSenarios, value);\n    }\n}\n</code></pre>\n\n...my class:<br />\n<pre><code>[System.Runtime.Serialization.DataContract(Name = &quot;WorkSenario&quot;)]\npublic class WorkSenario\n{\n    public Models.WritingMenu WorkingSenario { get; set; }\n    public int MainViewId { get; set; }\n    public CoreDispatcher MainDispatcher { get; set; }\n    public CoreDispatcher Dispatcher { get; set; }\n    public CoreWindow Window { get; set; }\n    [System.Runtime.Serialization.DataMember]\n    public string Title { get; set; }\n    public int ViewId { get; set; }\n    [System.Runtime.Serialization.DataMember]\n    public bool Released { get; set; }\n    [System.Runtime.Serialization.DataMember]\n    public bool Consolidated { get; set; }\n}</code></pre>\n\n...using:<br />\n<pre><code>/// &lt;summary&gt;Serializes an object and write to file in specified storage strategy&lt;/summary&gt;\n/// &lt;typeparam name=&quot;T&quot;&gt;Specified type of object to serialize&lt;/typeparam&gt;\n/// &lt;param name=&quot;key&quot;&gt;Path to the file in storage&lt;/param&gt;\n/// &lt;param name=&quot;value&quot;&gt;Instance of object to be serialized and written&lt;/param&gt;\n/// &lt;param name=&quot;location&quot;&gt;Location storage strategy&lt;/param&gt;\npublic static async Task&lt;bool&gt; WriteFileAsync&lt;T&gt;(string key, T value, StorageStrategies location = StorageStrategies.Local)\n{\n    // create file\n    var _File = await CreateFileAsync(key, location, Windows.Storage.CreationCollisionOption.ReplaceExisting);\n    // convert to string\n    var _String = Serialize(value);\n    // save string to file\n    await Windows.Storage.FileIO.WriteTextAsync(_File, _String);\n    // result\n    return await FileExistsAsync(key, location);\n}\n</code></pre>\n\n..and was wondering if this does the same thing:<br />\n<pre><code>protected override void OnRegisterKnownTypesForSerialization()\n{\n    // Set up the list of known types for the SuspensionManager\n    .\n    ..\n    ...\n    SessionStateService.RegisterKnownType(typeof(Product));\n    SessionStateService.RegisterKnownType(typeof(Collection&lt;Product&gt;));\n}\n</code></pre>\n\n...for the class:<br />\n<pre><code>public class Product\n{\n    public string ProductNumber { get; set; }\n    public string Title { get; set; }\n    public string Description { get; set; }\n    public Uri ImageUri { get; set; }\n    public int SubcategoryId { get; set; }\n    public double ListPrice { get; set; }\n    public double DiscountPercentage { get; set; }\n    public double Weight { get; set; }\n    public string Color { get; set; }\n    public string Currency { get; set; }\n}</code></pre>\n\n..without using a <strong>DataContract</strong>, because I want to use all of <strong>Prism's</strong> built in capabilities before using standard coding.  <strong>Secondly</strong>) would explain how this works please?<br />\n<br />\nI'm guessing this is how it works?:<br />\n<pre><code>public class SearchResultsPageViewModel : ViewModel\n{\n    .\n    ..\n    ...\n    \n    [RestorableState]\n    public static Collection&lt;Product&gt; PreviousResults { get; private set; }\n\n    .\n    ..\n    ...\n\n    public async override void OnNavigatedTo(object navigationParameter, NavigationMode navigationMode, Dictionary&lt;string, object&gt; viewModelState)\n    {\n        base.OnNavigatedTo(navigationParameter, navigationMode, viewModelState);\n        var queryText = navigationParameter as String;\n        string errorMessage = string.Empty;\n        this.SearchTerm = queryText;\n        this.QueryText = '\\u201c' + queryText + '\\u201d';\n\n        try\n        {\n            Collection&lt;Product&gt; products;\n            if (queryText == PreviousSearchTerm)\n            {\n                products = PreviousResults;\n            }\n            ...\n            ..\n            .</code></pre>\n\nThanks!...<br />\n",
    "PostedDate": "2015-05-17T13:22:45.98-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1425882",
    "ThreadId": "638082",
    "Html": "Short answer - SessionStateService uses DataContractSerializer under the covers, so it will honor your DataContract/DataMember annotations if present, if not it treats it as an implicit data contract and serializes all the public properties - this behavior has been in DataContractSerializer since .NET 3.5 SP1.\r<br />\n<br />\nYou might want to check out my article here: <a href=\"http://www.silverlightshow.net/items/WinRT-Business-Apps-with-Prism-App-State-Management.aspx\" rel=\"nofollow\">http://www.silverlightshow.net/items/WinRT-Business-Apps-with-Prism-App-State-Management.aspx</a> for more background, as well as the docs: <a href=\"https://msdn.microsoft.com/en-us/library/windows/apps/xx130647.aspx\" rel=\"nofollow\">https://msdn.microsoft.com/en-us/library/windows/apps/xx130647.aspx</a>\r<br />\nBrian<br />\n",
    "PostedDate": "2015-05-17T14:35:12.513-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1425922",
    "ThreadId": "638082",
    "Html": "Cool!  Thanks for your response!  I check out the articles too!<br />\n",
    "PostedDate": "2015-05-17T23:09:46.453-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]