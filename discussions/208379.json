[
  {
    "Id": "427562",
    "ThreadId": "208379",
    "Html": "<p>Hi there,</p>\r\n<p>I have a WPF window created and running on another UI thread. This is how I started it:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>            threadOtherWindow = <span style=\"color:Blue\">new</span> Thread(<span style=\"color:Blue\">new</span> ThreadStart(\r\n                () =&gt;\r\n                {\r\n                    ThreadTest2 tt2 = <span style=\"color:Blue\">new</span> ThreadTest2();\r\n                    tt2.ShowDialog();\r\n                }\r\n                ));\r\n            threadOtherWindow.SetApartmentState(ApartmentState.STA);\r\n            threadOtherWindow.Name = <span style=\"color:#A31515\">&quot;OtherWindow&quot;</span>;\r\n            threadOtherWindow.Start();\r\n\r\n</pre>\r\n</div>\r\n<p>Within that new window, I'm using a viewmodel that has a property of type DelegateCommand&lt;object&gt;. This command is bound to a button as &lt;Button Command=&quot;{Binding MyCommand}&quot; /&gt;</p>\r\n<p>If I call myCommand.RaiseCanExecuteChanged(), I get this exception:</p>\r\n<p>&nbsp;</p>\r\n<pre>  InnerException: System.InvalidOperationException\r\n       Message=&quot;The calling thread cannot access this object because a different thread owns it.&quot;\r\n       Source=&quot;WindowsBase&quot;\r\n       StackTrace:\r\n            at System.Windows.Threading.Dispatcher.VerifyAccess()\r\n            at System.Windows.Threading.DispatcherObject.VerifyAccess()\r\n            at System.Windows.DependencyObject.GetValue(DependencyProperty dp)\r\n            at System.Windows.Controls.Primitives.ButtonBase.get_Command()\r\n            at System.Windows.Controls.Primitives.ButtonBase.UpdateCanExecute()\r\n            at System.Windows.Controls.Primitives.ButtonBase.OnCanExecuteChanged(Object sender, EventArgs e)\r\n            at Microsoft.Practices.Composite.Presentation.Commands.WeakEventHandlerManager.CallHandler(Object sender, EventHandler eventHandler)</pre>\r\n<p>I've checked, and both the second window as well as its VM are created on the same separate thread.</p>\r\n<p>Is this a limitation of Prism or am I doing something wrong?</p>\r\n<p>Thanks.</p>\r\n<p>&nbsp;</p>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;threadOtherWindow = new Thread(new ThreadStart(</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;() =&gt;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ThreadTest2 tt2 = new ThreadTest2();</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tt2.ShowDialog();</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;));</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;threadOtherWindow.SetApartmentState(ApartmentState.STA);</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;threadOtherWindow.Name = &quot;OtherWindow&quot;;</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;threadOtherWindow.Start();</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-04-05T11:48:54.887-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "436083",
    "ThreadId": "208379",
    "Html": "<p>Hi,</p>\r\n<p>We found the same problem in our recent development. Basically, our system has many sub applications. Each sub application is created by its own ui thread. But prism assumes that an application/system should only have one ui thread, which is the same main thread as the underlying thread of &quot;Application.Current.Dispatcher&quot;.</p>\r\n<p>To work around the issue, we have to expand the DelegateCommand&lt;T&gt; to accept an ui Dispatcher. Then when it arises OnCanExecuteChanged event, it passes the ui Dispatcher to WeaEventHandlerManager. In the manager, it uses ui Dispatcher if the Dispather exists. If you have interst, I can send you our workaround.</p>\r\n<p>What I wonder is whether or not in future the Prism team will change the design assumption &quot;an application/system should only have one ui thread&quot;, and put a more robust version there. Anyone can provide some insight?</p>\r\n<p>Thanks,</p>\r\n<p>Andy</p>",
    "PostedDate": "2010-04-27T10:54:14.203-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "442502",
    "ThreadId": "208379",
    "Html": "<p id=56c57ec0-401e-012d-1284-12313d013db1>Hi Andy,</p>\r\n<p>As you said, the current Prism version uses the default dispatcher in the <strong>WeakEventHandlerManager</strong>. This is because the <a href=\"http://msdn.microsoft.com/en-us/library/ms741870.aspx\">common use for WPF applications is to have a single UI thread</a>, and applications with multiple UI threads are not the most common scenario. Some time ago, <a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=206952\">David Hill expressed his thoughts</a> on a related, but not exactly the same issue.</p>\r\n<p id=56c5a4d0-401e-012d-1286-12313d013db1>Additionally, right now the <a href=\"http://www.zoomerang.com/Survey/WEB22AK39NFHMT\">Prism survey</a> is online, and you can add your input for the future version. You could also consider adding this as a new item in the <a href=\"http://compositewpf.codeplex.com/workitem/list/basic\">Issue Tracker</a>. That way it might be considered to be tackled in future versions.</p>\r\n<p id=56c5c130-401e-012d-1287-12313d013db1>Please let me know if this helps.</p>\r\n<p id=56c5deb0-401e-012d-1288-12313d013db1>Damian Schenkelman <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2010-05-13T06:23:49.54-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "516491",
    "ThreadId": "208379",
    "Html": "\r\n<p>I am working through the same problem as well. Could you share your expansion of the DelegateCommand&lt;T&gt; so it will accept a ui Dispatcher? I started working with the solution posted here:&nbsp;<a href=\"http://www.philippbraun.net/\">http://www.philippbraun.net/</a>&nbsp;but\r\n its a bit old and the version of Prism is different.</p>\r\n",
    "PostedDate": "2010-11-03T08:11:42.957-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]