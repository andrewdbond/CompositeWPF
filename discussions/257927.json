[
  {
    "Id": "613929",
    "ThreadId": "257927",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I have an issue with raising an interaction request after navigating back and forth between region member lifetime controlled&nbsp;views. What appears to be happening is that everytime the interaction request is raised a new instance of the ConfirmationChildWindow\r\n is associated with the IInteractionRequest property on my view model.</p>\r\n<p>The view model is long lived whilst the view is marked with the RegionMemberLifetime attribute with KeepAlive set to false. If the the interaction request has been raised, navigating away from the view and then back again and re-raising the interaction request\r\n causes 2 (or however many times the view has been navigated to)&nbsp;pop-ups to be displayed on top of each other. Setting&nbsp;KeepAlive to true does&nbsp;resolve the problem.&nbsp;Is there a standard approach for handling this situation or a workaround that\r\n anyone can suggest?</p>\r\n<p>XAML:</p>\r\n<pre style=\"font-family:consolas\"><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">i</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Interaction.Triggers</span><span style=\"color:blue\">&gt;</span><br><span style=\"color:#a31515\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">InteractionRequestTrigger</span><span style=\"color:red\">&nbsp;SourceObject</span><span style=\"color:blue\">=&quot;{</span><span style=\"color:#a31515\">Binding</span><span style=\"color:red\">&nbsp;ConfirmInteractionRequest</span><span style=\"color:blue\">}</span><span style=\"color:blue\">&quot;</span><span style=\"color:blue\">&gt;</span><br><span style=\"color:#a31515\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">PopupChildWindowAction</span><span style=\"color:blue\">&gt;</span><br><span style=\"color:#a31515\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">PopupChildWindowAction.ChildWindow</span><span style=\"color:blue\">&gt;</span><br><span style=\"color:#a31515\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">shared</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ConfirmationWindow</span><span style=\"color:blue\">&nbsp;/&gt;</span><br><span style=\"color:#a31515\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">PopupChildWindowAction.ChildWindow</span><span style=\"color:blue\">&gt;</span><br><span style=\"color:#a31515\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">PopupChildWindowAction</span><span style=\"color:blue\">&gt;</span><br><span style=\"color:#a31515\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">InteractionRequestTrigger</span><span style=\"color:blue\">&gt;</span></pre>\r\n<pre style=\"font-family:consolas\"><span style=\"color:blue\"><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">i</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Interaction.Triggers</span><span style=\"color:blue\">&gt;</span></span></pre>\r\n<pre style=\"font-family:consolas\"><span style=\"color:blue\"><span style=\"color:blue\">View Model:</span></span></pre>\r\n<pre style=\"font-family:consolas\"><span style=\"color:blue\"><span style=\"color:blue\"><pre style=\"font-family:consolas\"><pre style=\"font-family:consolas\"><span style=\"color:blue\">public</span>&nbsp;<span style=\"color:blue\">void</span>&nbsp;CancelOperation(<span style=\"color:#2b91af\">Action</span>&lt;<span style=\"color:blue\">bool</span>?&gt;&nbsp;onCancel)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green\">//&nbsp;Generic&nbsp;cancel&nbsp;operation</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_confirmInteractionRequest.Raise(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af\">ConfirmationViewModel</span>.YesNoCancel(<span style=\"color:#2b91af\">StringLibrary</span>.ConfirmAction,&nbsp;<span style=\"color:#2b91af\">StringLibrary</span>.Confirm_Cancel),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;confirm&nbsp;=&gt;&nbsp;onCancel(confirm.Confirmation));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre>\r\n</pre>\r\n</span></span></pre>\r\n",
    "PostedDate": "2011-05-17T06:58:21.51-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "613981",
    "ThreadId": "257927",
    "Html": "<p>Hi,</p>\r\n<p>It could be helpful if you could provide us with a repro sample (for example <a href=\"http://skydrive.live.com/\">SkyDrive</a>) of your solution, so that we can help you find out the cause of the unexpected behavior you're experiencing.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br /><a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-05-17T07:58:35.63-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "614026",
    "ThreadId": "257927",
    "Html": "<p>Hi Miguel,</p>\r\n<p>Thanx for coming back to me so quickly. If I have time today&nbsp;I will try and produce a small sample as this forms part of a much larger app. To recreate you would need to follow the below steps:</p>\r\n<p>1. Add a Prism module to a Prism&nbsp;shell application project&nbsp;that includes a single view. The view is marked with the [RegionMemberLifetime(KeepAlive = false)] attribute and is injected with the interface of a simple view model</p>\r\n<p>2. In the simple&nbsp;view model expose an IInteractionRequest property and set this up to use&nbsp;the basic Notification class&nbsp;to raise against</p>\r\n<p>3. In the view's XAML&nbsp;add the Interaction.Triggers element&nbsp;as above and simply omit the child window which will use the NotificationChildWindow by default.</p>\r\n<p>4. In the module init of the new module&nbsp;ensure the registered view model is set up as long-lived i.e. ContainerControlledLifetimeManager</p>\r\n<p>5. In the view add a button that raises the interaction request in the view model</p>\r\n<p>6. Run the application and navigate to the view - clicking the button will display a notification window</p>\r\n<p>7. Navigate to a different module and then back again - click the button again and this time you should recieve 2 notification windows on top of each other</p>\r\n<p>Regards,</p>\r\n<p>Chris</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-05-17T09:06:18.537-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "614045",
    "ThreadId": "257927",
    "Html": "<p>Hi Miguel,</p>\r\n<p>I have been able to recreate the issue by modifying the Prism quick start solution.</p>\r\n<p>Please find a linkt to the zipped up project here - <a href=\"http://cid-09f71a6daa654209.office.live.com/self.aspx/Public/PrismQuickStart.zip\">http://cid-09f71a6daa654209.office.live.com/self.aspx/Public/PrismQuickStart.zip</a></p>\r\n<p>You may need to fix the Prism references to get it to work, but when you do run it up, click the&nbsp;arrows to edit multiple records and click the Test button at the bottom. You will see for every edit a new notification child window is displayed on top of each other. These all stem from the fact the view model is long-lived whilst the views are disposed using the RegionMemberLifetime attribute.</p>\r\n<p>Any workaround you could suggest would be much appreciated.</p>\r\n<p>Regards,</p>\r\n<p>Chris</p>",
    "PostedDate": "2011-05-17T09:36:10.8-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "614250",
    "ThreadId": "257927",
    "Html": "<p>Hi Chris,</p>\r\n<p>After debugging your application we found that the reason why your notifications popups windows were displayed many times is because your view even they are removed from the <strong>Region Manager</strong> <strong>Region</strong>&rsquo;s <strong>collection</strong>, they are not disposed and at the same time you configured your view models as <strong>singleton</strong>.</p>\r\n<p>We modified the solution and uploaded to SkyDrive, you can find it <a href=\"http://cid-c29751940e840420.office.live.com/self.aspx/p%5e0p%20samples/ConfirmChildWindow.zip\">here</a>. The workaround we applied was to create a new instance of the view models every time you navigate to <strong>EditView</strong>.</p>\r\n<p>On the other hand, on <em>EditView.xaml.cs</em> you will find debugging trace code to verify all the live instances of the view when you stop debugging.</p>\r\n<p>I hope this information helps you.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br /><a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-05-17T14:44:15.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "614456",
    "ThreadId": "257927",
    "Html": "<p>Hi Miguel,</p>\r\n<p>Thank you for coming back to me, but the fix you have supplied does not solve my problem. The singleton view models within my application do not hold single objects, but instead hold a lot of additional information relating to collections, selected state of objects&nbsp;etc., etc. They&nbsp;effectively hold the current state of the module.&nbsp;I want the view models to stay as singletons whilst the views are disposed when navigating to a different spoke of the application. This will reduce the memory footprint but ensure that on navigating back to a view the previous&nbsp;state can be restored.</p>\r\n<p>I believe that this is a bug in the Prism framework and that the InteractionRequestTrigger's should be disposed of&nbsp;along with the view.</p>\r\n<p>I have constructed a workaround for this issue, as detailed below, but would like this raised as bug in the framework. Simply detaching the interaction request triggers when the view is disposed resolves the problem:</p>\r\n<p>In code-behind of view:</p>\r\n<pre style=\"font-family: consolas;\">Unloaded&nbsp;+=&nbsp;(o,&nbsp;e)&nbsp;=&gt;&nbsp;<span style=\"color: #2b91af;\">InteractionHelper</span>.DisposeTriggers(<span style=\"color: blue;\">this</span>);<br /></pre>\r\n<p>DisposeTriggers method:</p>\r\n<pre style=\"font-family: consolas;\"><span style=\"color: blue;\">public</span>&nbsp;<span style=\"color: blue;\">static</span>&nbsp;<span style=\"color: blue;\">void</span>&nbsp;DisposeTriggers(<span style=\"color: #2b91af;\">Control</span>&nbsp;parentControl)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">var</span>&nbsp;triggers&nbsp;=&nbsp;<span style=\"color: #2b91af;\">Interaction</span>.GetTriggers(parentControl);<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">foreach</span>&nbsp;(<span style=\"color: blue;\">var</span>&nbsp;trigger&nbsp;<span style=\"color: blue;\">in</span>&nbsp;triggers.OfType&lt;<span style=\"color: #2b91af;\">InteractionRequestTrigger</span>&gt;())<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trigger.SourceObject&nbsp;=&nbsp;<span style=\"color: blue;\">null</span>;<br /> <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">foreach</span>&nbsp;(<span style=\"color: blue;\">var</span>&nbsp;action&nbsp;<span style=\"color: blue;\">in</span>&nbsp;trigger.Actions.OfType&lt;<span style=\"color: #2b91af;\">PopupChildWindowAction</span>&gt;())<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action.ChildWindow.DataContext&nbsp;=&nbsp;<span style=\"color: blue;\">null</span>;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action.ChildWindow&nbsp;=&nbsp;<span style=\"color: blue;\">null</span>;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action.Detach();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trigger.Detach();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre>\r\n<pre style=\"font-family: consolas;\">Regards,</pre>\r\n<pre style=\"font-family: consolas;\">Chris</pre>",
    "PostedDate": "2011-05-18T02:00:38.873-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "615352",
    "ThreadId": "257927",
    "Html": "<p>Hi Chris,</p>\r\n<p>You could create a work item in the <a href=\"http://compositewpf.codeplex.com/workitem/list/basic\">Issue Tracker</a>, notifying the team about this behavior, so that it is considered to be changed on a future Prism release.</p>\r\n<p>Thanks,</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-05-19T10:07:09.03-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "619175",
    "ThreadId": "257927",
    "Html": "<p>Hi Chris,</p>\r\n<p>thanks for your question and the code you provided to solve this problem</p>\r\n<p>It saved my day and working time</p>",
    "PostedDate": "2011-05-27T01:58:06.993-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "703148",
    "ThreadId": "257927",
    "Html": "<p>This solution helped me too.</p>\r\n<p>Thanks Chris!</p>",
    "PostedDate": "2011-11-24T13:46:02.873-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]