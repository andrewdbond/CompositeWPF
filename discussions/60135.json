[
  {
    "Id": "203582",
    "ThreadId": "60135",
    "Html": "<p>\r\n<p>I have been working through the changes required to upgrade from V1 to V2 &nbsp;(Feb2008 release)</p>\r\n<p>After initial startup, the application loads two modules. &nbsp;Based on the user's selected functionality, all other modules are loaded on demand.</p>\r\n<p>\r\n<div>For the upgrade testing, I've &nbsp;replaced &nbsp;IModuleEnumerator with&nbsp;IModuleCatalog; &nbsp;I also replaced&nbsp;the I<strong><span style=\"font-weight:normal\">ModuleLoader</span></strong>&nbsp;with I<strong><span style=\"font-weight:normal\">ModuleManager.</span></strong></div>\r\n<div></div>\r\n<div>I am now receiving exceptions that the moduleManager cannot be resolved.</div>\r\n<div></div>\r\n</p>\r\n<p>-<span> </span>exception<span> </span>{&quot;Resolution of the dependency failed, type = \\&quot;PET.MasterViewManager.Views.IHostPresenter\\&quot;, name = \\&quot;NVSHostPresenter\\&quot;. Exception message is: The current build operation (build key Build Key[PET.MasterViewManager.Views.NVSHostPresenter, NVSHostPresenter]) failed: The parameter moduleManager could not be resolved when attempting to call constructor PET.MasterViewManager.Views.NVSHostPresenter(Microsoft.Practices.Composite.Regions.IRegionManager regionManager, Microsoft.Practices.Unity.IUnityContainer container, Microsoft.Practices.Composite.Events.IEventAggregator eventAggregator, Microsoft.Practices.Composite.Modularity.IModuleManager moduleManager, Microsoft.Practices.Composite.Modularity.IModuleCatalog moduleCatalog, Microsoft.Practices.Composite.Logging.ILoggerFacade logger, PET.MasterViewManager.Views.INVSHostView view).(Strategy type BuildPlanStrategy, index 3)&quot;}<span> </span>System.Exception {Microsoft.Practices.Unity.ResolutionFailedException}</p>\r\n<div></div>\r\n<div>I have a master &quot;controller&quot; module which has two host view/presenters. &nbsp;Each instance of a host presenters needs to have the ability to load modules/views on an as per need bases. &nbsp;</div>\r\n<div></div>\r\n<div></div>\r\n<div>This is the constructor for a &quot;hostPresenter&quot;: &nbsp;</div>\r\n<div></div>\r\n<div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; public NVSHostPresenter(IRegionManager regionManager,</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IUnityContainer container,</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IEventAggregator eventAggregator,</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IModuleManager moduleManager,</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IModuleCatalog moduleCatalog,</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ILoggerFacade logger,</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;INVSHostView view)</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: base(regionManager,</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; container,</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; eventAggregator,</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; moduleManager,</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; moduleCatalog,</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logger)</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_view = view;</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n</div>\r\n<div></div>\r\n<div>How has the ModuleManager changed? &nbsp; &nbsp;Any insight on why this would not work?</div>\r\n<div></div>\r\n<div>I see in the QuickStart that ConstructorInjectino is used in ModuleB with IModuleManager&nbsp;</div>\r\n<div></div>\r\n<div>\r\n<div>&nbsp;public partial class DefaultViewB : UserControl</div>\r\n<div>&nbsp;&nbsp; &nbsp;{</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;private readonly IModuleManager moduleManager;</div>\r\n<div></div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;public DefaultViewB(IModuleManager moduleManager)</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;this.moduleManager = moduleManager;</div>\r\n<div></div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;InitializeComponent();</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div></div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;private void OnLoadModuleCClick(object sender, RoutedEventArgs e)</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;moduleManager.LoadModule(&quot;ModuleC&quot;);</div>\r\n<div>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div>\r\n<div>&nbsp;&nbsp; &nbsp;}</div>\r\n</div>\r\n<div></div>\r\n<div></div>\r\n<div>Any help is appreciated.</div>\r\n</p>",
    "PostedDate": "2009-06-19T19:52:02.663-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "204616",
    "ThreadId": "60135",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">Hi Tracy,</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\">You should be able to inject the instance of the <strong>IModuleManager </strong>implementation that your application uses into your Presenters as you are doing. One possible reason I this could be failing, is if the call to the BasePresenter is throwing an exception. To check this, you could check the InnerException &ldquo;chain&rdquo;, which you could look for InnerException</span></span><span style=\"font-family:Wingdings\" lang=EN-US>&egrave;</span><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"> InnerException</span></span><span style=\"font-family:Wingdings\" lang=EN-US>&egrave;</span><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\">&hellip;</span></span><span style=\"font-family:Wingdings\" lang=EN-US>&egrave;</span><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\">InnerException(RootException).&nbsp; Another option to check the <strong>RootException</strong> could be using the exception.GetRootException() extension method.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"color:#1f497d\" lang=EN-US>&nbsp;</span><span style=\"\" lang=EN-US></span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>A</span><span style=\"\" lang=EN-US>nother possible cause could be that the <strong>IModuleManager</strong> service implementation was not added to the Bootstrapper. So if the above suggestion does not work you could check if it was correctly added.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><strong><span style=\"color:#1f497d\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></strong></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><strong><span style=\"\" lang=EN-US>Note: </span></strong><span style=\"\" lang=EN-US>&nbsp;In Prism-v2 there is no need to use module catalog to load modules on demand. You just need the module&rsquo;s name. You can read more about that <span style=\"color:#1f497d\"><a href=\"http://msdn.microsoft.com/en-us/library/dd458932.aspx\">here</a>.</span></span><span style=\"\" lang=EN-US></span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Please let me know if this helps.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Damian Schenkelman</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:'Calibri','sans-serif';font-size:11pt\" lang=EN-US><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></span></p>",
    "PostedDate": "2009-06-23T11:35:37.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "292066",
    "ThreadId": "60135",
    "Html": "<p>I had a similar (or the same?) problem with a controller not being able to be resolved. Problem could be detected by setting VS to break on all CLR exceptions. I had a similar method like yours:</p>\r\n<p>&nbsp;</p>\r\n<p>private void OnLoadModuleCClick(object sender, RoutedEventArgs e)</p>\r\n<p>&nbsp;</p>\r\n<p>Changed private to public and it worked :-)</p>\r\n<p>Probably too late for you, just letting people know who land on this thread ;)</p>",
    "PostedDate": "2010-02-18T02:06:34.333-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]