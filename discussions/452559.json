[
  {
    "Id": "1077252",
    "ThreadId": "452559",
    "Html": "Hi,\r<br />\nI am going through MVVM QuickStart example together with this link for explanation:\r<br />\n<a href=\"http://msdn.microsoft.com/en-us/library/gg430869(v=pandp.40).aspx\" rel=\"nofollow\">TEXT</a>\r<br />\nThe link goes about ViewModel base class which all other ViewModels inherit.  But I can't find ViewModel base class anywhere.<br />\n\r<br />\nCan anyone please suggest if I am reading the right documentation for the quickstart or perhaps I am missing something ?\r<br />\n<br />\nThanks<br />\n",
    "PostedDate": "2013-08-06T06:54:49.447-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1077315",
    "ThreadId": "452559",
    "Html": "Hi,\r<br />\n<br />\nAs far as I know, the documentation is the correct one. Please notice however, that there is a known issue in the <strong>Prism 4.1 MVVM Quickstart</strong> documentation since it is out of sync with the <strong>Quickstart</strong> source code. You can find more information in the following Work Item:<br />\n<h1></h1>\n<ul>\n<li>\n<a href=\"https://compositewpf.codeplex.com/workitem/8284\" rel=\"nofollow\">MVVM Quick Start: Prism4.chm is out of sync with the code</a><br />\n</li>\n</ul>\nHowever, the <strong>ViewModel</strong> base class is indeed not available on the <strong>Quickstart</strong> nor the <strong>Prism library</strong>. Instead, you will find that the view model classes from the <strong>Quickstart</strong> inherit from <strong>NotificationObject</strong> which is defined in the <strong>Prism.ViewModel</strong> namespace from the <strong>Prism Library</strong> and works as the replacement for the <strong>ViewModel</strong> base class. \r<br />\n<br />\nConsider then referring to the <strong>NotificationObject</strong> class instead of the <strong>ViewModel</strong> base class. Take into account that <strong>NotificationObject</strong> class does not provide the <strong>ExecuteOnIUThread</strong> method from <strong>ViewModel</strong> base class. You can find more information about <strong>NotificationObject</strong> in the Prism Library source code. \r<br />\n<br />\nRegards, \r<br />\n<br />\nFederico Martinez \r<br />\n<a href=\"http://blogs.southworks.net/fmartinez\" rel=\"nofollow\">http://blogs.southworks.net/fmartinez</a> <br />\n",
    "PostedDate": "2013-08-06T09:22:58.87-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1078663",
    "ThreadId": "452559",
    "Html": "Thanks Federico.  As I am still new to this I got confused.  I have to say though the main Prism Documentation, Hands-on Labs and various Quickstarts show different implementation on how for instance Modules are created and initialized.  This is different to Unity/MEF implementation though and I found this confusing.  <br />\n",
    "PostedDate": "2013-08-09T03:56:36.457-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1078740",
    "ThreadId": "452559",
    "Html": "Hi, \r<br />\n<br />\nAs you correctly pointed out, there are several ways available to register and initialize modules which cover the general scenarios in a Prism application. Every alternative is mentioned in the <strong>Prism documentation</strong>, although many of them are not described in deep. However, <strong>Hands-on-Labs</strong> and <strong>QuickStarts</strong> could make use of those alternatives in order to provide a better exemplification on how to use them.\r<br />\n<br />\nGlad we could help you,\r<br />\n<br />\nFederico Martinez \r<br />\n<a href=\"http://blogs.southworks.net/fmartinez\" rel=\"nofollow\">http://blogs.southworks.net/fmartinez</a> <br />\n",
    "PostedDate": "2013-08-09T08:01:00.387-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]