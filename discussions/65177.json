[
  {
    "Id": "221960",
    "ThreadId": "65177",
    "Html": "<p><span style=\"color:black;font-size:10pt\">I have a shell with one region. This region is loaded with the help of Module. Now within this shell, I have 4 regions.</span><span style=\"color:black;font-size:10pt\">My goal is to communicate between these 4 regions in a module.</span><span style=\"color:black;font-size:10pt\">I am currently using Event aggregators to communicate between the regions in a module.</span><span style=\"color:black;font-size:10pt\">However, the performance of the application is very slow. After some goggling I came to know that event aggregator should be used to communicate between modules and not within modules.</span></p>\r\n<p><span style=\"color:black;font-size:10pt\">Now the questions I have is</span></p>\r\n<p>&nbsp;1. Is <span style=\"color:black;font-size:10pt\">it better to use multiple regions within a single module or should I have only one region within a module</span></p>\r\n<p><span style=\"color:black;font-size:10pt\">&nbsp;&nbsp;&nbsp; If I use multiple regions, then communication between regions (or their presentation model) becomes a challenge.</span></p>\r\n<p><span style=\"color:black;font-size:10pt\">&nbsp;&nbsp; If I use a single region, then I am worried about the future changes and coupling.</span><span style=\"color:black;font-size:10pt\">&nbsp;</span></p>\r\n<p><span style=\"color:black;font-size:10pt\">2. What is the best way to communicate between regions in a module? Each of my regions has their own presentation models. My goal is to communicate between the presentations models (of the views or regions) within a module in prism. &nbsp;&nbsp;Can I use composite WPF commands for the same or should I use event aggregator.</span></p>\r\n<p><span style=\"color:black;font-size:10pt\">Thanks</span></p>\r\n<p><span style=\"color:black;font-size:10pt\">Raj</span></p>",
    "PostedDate": "2009-08-11T04:07:29.92-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "221969",
    "ThreadId": "65177",
    "Html": "<p>Hi devgeekrai,</p>\r\n<p>A shared presentation model (aka View Model) would be an efficient method.&nbsp;&nbsp; I have a CALDemo (<a href=\"http://www.global-webnet.net/blogengine/post/2009/07/31/Does-PRISM-have-a-performance-issue.aspx\">AVAILABLE ON THIS BLOG</a>) application that demonstrates how this can be done using a combination of the Model-View-Presenter and Model-View-ViewModel patterns.&nbsp;&nbsp; The MyControlPresenter shows the minimal code required to wire-up the MVP-MVVM model (see example below).&nbsp;&nbsp; The Smart Client Software Factory folks will recognize the pattern as well as virtual methods - the remaining concepts came from PRISM V2 Drop 7 (top down composition quickstart).</p>\r\n<p>Each view updates the model as applicable and if required there is a hook OnModelPropertySet() which will allow a view to be notified when model properties change.&nbsp;&nbsp; If you have all of your views within a module share the same Presentation Model you simply have to update the model and your work is done.&nbsp; Since each View (MVP-MVVM) is encapsulated I use the event aggregator for publishing information that would not be appropriate on a domain model but is of value to external processes - for example&nbsp;generating Status bar messages and/or calculations&nbsp;that are composed of a combination of internal information as well as model information.</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyControlPresenter : PresenterBase&lt;IMyControl&gt;\r\n    </span>{\r\n        <span style=\"color:Blue\">private</span> IEntityDataService entityService;\r\n        <span style=\"color:Blue\">private</span> IMyControlPresentationModel model;\r\n\r\n        <span style=\"color:Blue\">public</span> MyControlPresenter(\r\n            IMyControl view, IUnityContainer container, \r\n            IMyControlPresentationModel model,\r\n            IEntityDataService entityService) \r\n                : <span style=\"color:Blue\">base</span>(view, container, model)\r\n        {\r\n            <span style=\"color:Blue\">this</span>.entityService = entityService;\r\n            <span style=\"color:Blue\">this</span>.model = model;\r\n        }\r\n \r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">void</span> OnProcessEvent(ProcessEventArgs e)\r\n        {\r\n            entityService.GetEntityList(model.TestEntities);\r\n        }\r\n\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">void</span> OnModelPropertySet(<span style=\"color:Blue\">string</span> propertyName)\r\n        {\r\n        }\r\n\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">void</span> OnViewSet()\r\n        {\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-11T04:43:59.533-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]