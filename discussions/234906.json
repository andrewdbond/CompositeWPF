[
  {
    "Id": "522747",
    "ThreadId": "234906",
    "Html": "\r\n<p>First, somebody had answered a thread and talked about a method of retrieving parts without relying on SatisfyImports but I haven't seen it.&nbsp; Is that up or in the help for Prism 4.</p>\r\n<p>Next, I have a common assembly that Exports ITruckService.</p>\r\n<p>[Export(typeof(ITruckService))]<br>\r\n&nbsp;&nbsp;&nbsp; public class TruckService : ITruckService</p>\r\n<p>I make sure this is initialized into the this.AggregateCatalog.Catalogs via the bootstrapper.</p>\r\n<p>This problem is modular and I have other modules that load and import ITruckService just fine.</p>\r\n<p>However, the new Scanning module, I have a ViewModel which I've tried importing it in the constructor and as a property and it fails.&nbsp;</p>\r\n<p>The failure is another frustrating topic.&nbsp; All I'm getting is that the module failed to load.&nbsp; I have to go through every piece of the module and disable imports to try and track down the problem.</p>\r\n<p>I finally tracked it down to this.</p>\r\n<p>[ImportingConstructor]<br>\r\npublic ScanningMainViewModel(ITruckService truckService)</p>\r\n<p>Makes no sense because in a separate Module it works just fine.</p>\r\n<p>[ImportingConstructor]<br>\r\npublic TruckViewModel(ITruckService truckService)</p>\r\n<p>I set a break point in the Bootstrapper's CreateContainer and the container contains ITruckService but yet it fails when my ScanningModule loads.</p>\r\n<p>With no error to go off of, my hunch is something to do with Prism's ModuleInitializer.&nbsp; So I went and changed the Import for ITruckService to ImportMany.</p>\r\n<p>Sure enough now it works.&nbsp;</p>\r\n<p>&nbsp;[ImportMany(typeof(ITruckService))]<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public IEnumerable&lt;ITruckService&gt; TruckService<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return _truckService; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { _truckService = value; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>The problem is ITruckService should have not been exported more than once.&nbsp; I've raised this problem before but got the usual blow off of post a sample.&nbsp; This is a fairly large app but I posted a link to a base that is patterned after this.</p>\r\n<p>Again, here's how my bootstrapper works.</p>\r\n<p>My CreateContainer</p>\r\n<p>protected override CompositionContainer CreateContainer()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var _container = base.CreateContainer();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Necessary so export parts from EyeCue get added.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.AggregateCatalog.Catalogs.Add(new AssemblyCatalog(typeof(Bootstrapper).Assembly));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // This is necessary so the parts of the EyeCue.Common get added.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.AggregateCatalog.Catalogs.Add(new AssemblyCatalog(typeof(GlobalValues).Assembly));</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Initialize the container so parts are available in Modules when SatisfyImports is called.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CompositionHost.Initialize(_container);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _container;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>My CreateModuleCatalog()</p>\r\n<p>&nbsp;protected override IModuleCatalog CreateModuleCatalog()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IModuleCatalog _modCat = Microsoft.Practices.Prism.Modularity.ModuleCatalog.CreateFromXaml(new Uri(ModuleCatalogUri, UriKind.Relative));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _modCat;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>My InitializeModules()</p>\r\n<p>protected override void InitializeModules()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //base.InitializeModules();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IModuleManager _moduleManager = this.Container.GetExportedValue&lt;IModuleManager&gt;();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _modulesToLoad = this.ModuleCatalog.Modules.Count();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _moduleManager.LoadModuleCompleted &#43;= new EventHandler&lt;LoadModuleCompletedEventArgs&gt;(ModuleManager_LoadModuleCompleted);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.InitializeModules();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>Here's my ModuleCatalog file.</p>\r\n<p>protected override IModuleCatalog CreateModuleCatalog()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IModuleCatalog _modCat = Microsoft.Practices.Prism.Modularity.ModuleCatalog.CreateFromXaml(new Uri(ModuleCatalogUri, UriKind.Relative));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _modCat;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>To summarize, why would me adding another module cause ITruckService which is part of a common assembly to get Exported 2 times.</p>\r\n<p>I would think it has to do with something in the Prism InitializeModules() call but what and why?&nbsp;&nbsp; Also, how would you go about changing this behavior.</p>\r\n<p>I consider it a bug if there is not a way to configure.&nbsp; Because 1) I'm not exporting multiple ITruckService classes, just one.&nbsp; 2) With it doing this in a modular app, if I don't use ImportMany's for everything, things stand to break depending\r\n on what modules I have loading.&nbsp; Plus it invalidates ImportMany because you have to use it whether it's what you wanted or not.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-16T08:28:00.903-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "522763",
    "ThreadId": "234906",
    "Html": "\r\n<p>Is this a Silverlight app? and are the modules in separate XAPs?</p>\r\n<p>If so, this is due to a quirk in how MEF imports things.&nbsp; If you have the same DLL in two different XAPs, even if it is strongly typed, and it exports any types, MEF views the types as distinctly different types (one from each XAP), so they will be\r\n imported multiple times.&nbsp; The simplest work around is to ensure that any dlls that export concrete types are only in one XAP, and the reference to the dll in all other projects has the Copy Local flag set to false.</p>\r\n<p>If this is not a Silverlight app with separate Xaps, there may be something else going on.</p>\r\n<p>Let me know if this helps or not</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-16T08:50:45.78-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "522773",
    "ThreadId": "234906",
    "Html": "\r\n<p>Michael,</p>\r\n<p>I apologize but I marked it as Silverlight 4 and thought that would be portrayed.</p>\r\n<p>Yes this is SL 4.</p>\r\n<p>The main Silverlight xap is called EyeCue.xap.</p>\r\n<p>I have a common&nbsp;assembly called EyeCue.Common&nbsp;and it is where&nbsp;ITruckService is exported.&nbsp; It is a part of the Main application&nbsp;EyeCue.Xap.&nbsp; EyeCue.Common is the only place I'll export anything that needs to be used by more than\r\n one module.&nbsp; Otherwise the modules maintain their own Exports internally and none of the modules will contain references to each other.&nbsp;</p>\r\n<p>Each of my modules are their own xap file.&nbsp; I have TruckStatModule, AppSettingModule &amp; ScanningModule.</p>\r\n<p>TruckStatModule has an Import for ITruckService but it does not see multiple&nbsp;parts for ITruckService.</p>\r\n<p>I created ScanningModule and it has an import for ITruckService and it&nbsp;does see multiple exports for ITruckService.</p>\r\n<p>Both TruckStatModule &amp; ScanningModule have assembly references to EyeCue.Common and I do have the Copy Local for it in both modules set to false.&nbsp; I actually set all assembly references&nbsp;Copy Local to false if they are used in the main&nbsp;.xap.&nbsp;</p>\r\n<p>So to recap, ITruckService is in a separate .xap from the modules, however the modules reference Copy Local is set to false.&nbsp; Also, why does the&nbsp;TruckStatModule not see multiple ITruckService parts but my new ScanningModule sees more than 1?</p>\r\n<p>Actually when I set a break point on the setter for the Property in my ScanningModule, value is an array but there it's only showing 1 element in the array.</p>\r\n<p>This is what value looks like in the setter for the Import.</p>\r\n<p>[EyeCue.Common.TruckSvc.ITruckService[]] = {EyeCue.Common.TruckSvc.ITruckService[0]}</p>\r\n",
    "PostedDate": "2010-11-16T09:10:41.59-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "523497",
    "ThreadId": "234906",
    "Html": "\r\n<p>Ooops.&nbsp; I should actually read the tags on these posts on occasion.</p>\r\n<p>Thanks for the clarification of the issue.&nbsp; I took the Modularity with MEF for Silverlight QS and hacked it a bit to try to reproduce this.</p>\r\n<p>There are two different implementations I looked at:</p>\r\n<ul>\r\n<li>I added a new Infrastructure project, which contains the IMyService interface and an implementation MySimpleService.&nbsp;In the bootstrapper, I add the Infrastrucutre DLL to the aggregate catalog.&nbsp; In ModuleA and ModuleF, I import the service (in\r\n one via in ImportingConstructor and via a property in the other). If I do not set copylocal to false on ModuleF, I get exceptions thrown.&nbsp; If I do set it, things work well.\r\n</li><li>I added a new Infrastructure project, which only contains the IMyService interface.&nbsp; I also added a ServiceImplementation project that has a class that implements and exports the IMyService interface. In the bootstrapper, I add the ServiceImplementation\r\n DLL to the aggregate catalog.&nbsp;In ModuleA and ModuleF, I import the service (in one via in ImportingConstructor and via a property in the other). In this case, the modules only reference the DLL with the interface defined, so there&nbsp;are no copylocal\r\n settings to change. </li></ul>\r\n<p>And based on my understanding of MEF, this is what I expected. Which of these better matches the scenario you are attempting?&nbsp;Or did I miss something from your above that has me far off base?</p>\r\n<p>I see a few things to try:</p>\r\n<p>I would double check all the references to the&nbsp;dll that has the concrete implemntation of the service.</p>\r\n<p>If that does not help, grab one of the MEF visualizers to help with debugging.</p>\r\n<p>Another option, if you want to change the default behavior, could be to specialized the MefModuleManager ModuleTypeLoaders property, providing a custom implementation (probably based on the MefXapModuleTypeLoader) that filters out types being loaded before\r\n MEF can get ahold of them, so you can ensure that types do not get loaded more than once.&nbsp; In an earlier drop of Prism v4 (around drop 5, I think) we did something like this, but it was a little ugly.</p>\r\n<p>Or you could use Unity where things are a bit more explicit and different &quot;magic&quot; happens behind the scenes. :-)</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-17T14:52:04.633-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "523509",
    "ThreadId": "234906",
    "Html": "\r\n<div>\r\n<p><span style=\"font-size:11.0pt; font-family:\">I would say it more closely matches item 1.</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">http://cid-ff05a29e13af7bfd.office.live.com/self.aspx/.Public</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">ModuleTemplate.rar is there and if you start adding new modules I would imagine you can see what I'm dealing with.</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">I've rechecked the CopyLocal and it's false on all dll's.</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">I also have IPopuController in my Common assembly. I had a similar before I ran into this one. When I had one module, there was only one part for it. I Import IPopupController in my main Silverlight Xap.</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">When I added a second module it started throwing an exception and I had to change it to ImportMany.</span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\"></span></p>\r\n<p><span style=\"font-size:11.0pt; font-family:\">Honestly, I wish I hadn't bought into MEF or at least until they work out the problems of implementing and debugging. But it's integrated now and I need to figure this out without going back and ripping things\r\n out and wasting time learning how to get it to work with dynamically loading xap files.</span></p>\r\n</div>\r\n",
    "PostedDate": "2010-11-17T15:22:17.737-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]