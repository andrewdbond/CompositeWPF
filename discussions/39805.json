[
  {
    "Id": "132107",
    "ThreadId": "39805",
    "Html": "Hi, I'm studing CAL for quite some time.<div>I can see that a lot of thinking has been put into this project and I try to learn as much as possible from it.</div><div><br></div><div>One area which I do not understand it how to create an application with more than one screen.</div><div>I know there are several ways to go about it, but it seem you don't offer any advice about it.</div><div>So my first question is &quot;What is your best practice for transition between screens?&quot; (Something like SDI but with more than one screen).</div><div><br></div><div>I have an application which has a single screen that host all the possible &quot;sub-screens&quot; of the application. It remind me the way iPhone UI is built, each time you work with a single screen, if you need details the current screen is &quot;pushed&quot; to the stack of screens and the next window is now display.</div><div>So, as a great fan of Mac softwares (don't be sad, they don't have WPF equivilent yet) I've stady the iPhone SDK. Apple has very clear seperation for MVC. The thing is that in the iPhone SDK the controller has a single view which is bound to it. That means that have a reference to view and reference to controller is the same (you can get to the view from the controller).</div><div>My second question is &quot;Should I have a property in my presenter which is the view connected to it?&quot;</div><div><br></div><div>Thank you,</div><div>Ido.</div>",
    "PostedDate": "2008-11-12T13:32:11.407-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "132195",
    "ThreadId": "39805",
    "Html": "#1... Take a look at <a href=\"http://www.codeplex.com/CompositeWPFContrib\">CompositeWPFContrib</a> which now has a WindowRegionAdapter.  I haven't used it, but I like what I've read (<a href=\"http://blogs.southworks.net/ibaumann/2008/10/27/windowregionadapter-at-compositewpf-prism-contrib/\">here</a>).<br>\r\n<br>\r\n#2... That is what I do.  I have my Presenter constructor demand an instance of IMyView which is then applied to a public IMyView property called View.  It is this View property that is Added to regions.  Take a look at the UIComposition QuickStart which comes with CAL.  The Quickstarts are invaluable.\r\n",
    "PostedDate": "2008-11-12T20:04:15.68-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "132212",
    "ThreadId": "39805",
    "Html": "Hi, Thanks, I will have a look at WindowRegionAdapter.<div><br></div><div>What about the second question?</div><div>I've notice there is no base interface from which all Views, Presenters or Model implement.</div><div>This means they have nothing in common, which can be a good thing, but it makes creating a generic system around them very hard.</div><div>I'll think how to put the problem in a form of question.</div><div><br></div><div>Thank you,</div><div>Ido.</div>",
    "PostedDate": "2008-11-12T23:09:18.393-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "132287",
    "ThreadId": "39805",
    "Html": "It looks like #2 has a few parts so I'll break them down.<br>\r\n<br>\r\nFor the &quot;window stack&quot; concept you are referring, you can do this in a number of ways.  Depending on the pattern you choose, you could have a Controller per View and have a managing Presenter Add and subsiquently Activate each view &quot;on to the stack&quot;.  Unfortunately, Region.Remove will not Reactivate the previously active View; it doesn't presume to know which view should be activated, if any, after removing a previous view.  It would, IMO, seem logical for the &quot;View Stack&quot; logic to be kept in the Presenter.  Some may argue that is better kept in a &quot;Supervising Controller&quot;, but its semantics at that point.<br>\r\n<br>\r\nAs for the IView to rule them all, I'm curious as to the common View logic you feel would be important for creating a generic system that is missing from CAL today.  I would definitely see a place for a common IView interface among individual implementations of CAL, but each will have their own way of dealing with Views (Model property w/DataContext backer, SetModel method, etc).  That said, a View doesn't have to be something that implements an Interface, nor does it need to be a WPF Control.  It could simply be a Model or ViewModel instance with DataTemplates deciding how things will be rendered.  I believe the CompositeWPFContrib has an example of this.  \r\n",
    "PostedDate": "2008-11-13T06:14:31.953-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "132319",
    "ThreadId": "39805",
    "Html": "<div dir=ltr>Hi,<div>Thank you very much for the answer.</div><div><br></div><div>I agree with you that my need for common view comes from perspective of single application. Another reason for me to think about common interfaces for view,controller and model is to stream-line the build process of them.</div>\r\n<div>I'm not sure what is the best way to composite model-view-controller pieces. For screen that display a single object or collection of objects is pretty strait forward. The case I'm dealing with right now is creating a screen which combine single model and two sets of view-controller (actually since I'm developing WPF application I'm using view/view-model combinations).</div>\r\n<div>Suddenly the process of composing this screen from several different blocks is not that easy.</div><div><br></div><div>I've learned a lot from studying iPhone SDK in side call <a href=\"http://icodeblog.com\">icodeblog.com</a>, take a look there, you might just like it.</div>\r\n<div><br></div><div>I've implement the &quot;View Stack&quot; by placing TransitionControl from <a href=\"http://work.j832.com/2008/03/bag-o-tricks-march-edition.html\">Bag-O-Trick of Kevin</a> and set the Content of that control each time a content is pushed or pop from the stack.</div>\r\n<div>I know about WPF content model so my content is just an Object. If you push model object which happens to have a DataTemplate everything works just fine. And the bonus is that I get nice animated transition between screens (I use the 3D cube, but there are plenty more).</div>\r\n<div><br></div><div>Thank again,</div><div>Ido.<br><br><div>On Thu, Nov 13, 2008 at 4:14 PM, cromwellryan <span dir=ltr>&lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex\">   <div> <p>From: cromwellryan</p> <div>It looks like #2 has a few parts so I'll break them down.<br>\r\n<br>\r\nFor the &quot;window stack&quot; concept you are referring, you can do this in a number of ways.  Depending on the pattern you choose, you could have a Controller per View and have a managing Presenter Add and subsiquently Activate each view &quot;on to the stack&quot;.  Unfortunately, Region.Remove will not Reactivate the previously active View; it doesn't presume to know which view should be activated, if any, after removing a previous view.  It would, IMO, seem logical for the &quot;View Stack&quot; logic to be kept in the Presenter.  Some may argue that is better kept in a &quot;Supervising Controller&quot;, but its semantics at that point.<br>\r\n\r\n<br>\r\nAs for the IView to rule them all, I'm curious as to the common View logic you feel would be important for creating a generic system that is missing from CAL today.  I would definitely see a place for a common IView interface among individual implementations of CAL, but each will have their own way of dealing with Views (Model property w/DataContext backer, SetModel method, etc).  That said, a View doesn't have to be something that implements an Interface, nor does it need to be a WPF Control.  It could simply be a Model or ViewModel instance with DataTemplates deciding how things will be rendered.  I believe the CompositeWPFContrib has an example of this.  \r\n</div><div> <div> <p>Read the <a href=\"http://www.codeplex.com/CompositeWPF/Thread/View.aspx?ThreadId=39805&ANCHOR#Post132287\">full discussion online</a>.</p> <p>To add a post to this discussion, reply to this email (<a href=\"mailto:CompositeWPF@discussions.codeplex.com?subject=[CompositeWPF:39805]\">CompositeWPF@discussions.codeplex.com</a>)</p>\r\n <p>To start a new discussion for this project, email <a href=\"mailto:CompositeWPF@discussions.codeplex.com\">CompositeWPF@discussions.codeplex.com</a></p> <p>You are receiving this email because you subscribed to this discussion on CodePlex. You can <a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/39805\">unsubscribe</a> on codePlex.com.</p>\r\n <p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at <a href=\"http://codeplex.com\">codeplex.com</a></p> </div> </div></div> </blockquote>\r\n</div><br></div></div>",
    "PostedDate": "2008-11-13T07:36:30.997-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]