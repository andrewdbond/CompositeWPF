[
  {
    "Id": "269220",
    "ThreadId": "78625",
    "Html": "<p>Hi,</p>\r\n<p>&nbsp;&nbsp;How can one ensure that a particular constructor of your class is called in Prism: &nbsp;I have two constructors:</p>\r\n<p>(I need to ensure my second constructor is invoked.)</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre> <span style=\"color:Blue\">public</span> ProductCollectionViewModel()\r\n        {\r\n\r\n     \r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> ProductCollectionViewModel(IInventoryDataService dataService,\r\n                                          IEventAggregator eventAggregator,\r\n                                          IRegionManager regionManager,\r\n                                          IUnityContainer container)\r\n            : <span style=\"color:Blue\">base</span>()\r\n        {\r\n\r\n            <span style=\"color:Blue\">this</span>.dataService = dataService;\r\n            <span style=\"color:Blue\">this</span>.regionManager = regionManager;\r\n            <span style=\"color:Blue\">this</span>.container = container;\r\n            <span style=\"color:Blue\">this</span>.eventAggregator = eventAggregator;\r\n            eventAggregator.GetEvent&lt;AppStatusMessageEvent&gt;().Publish(<span style=\"color:#A31515\">&quot;Loading Categories...&quot;</span>);\r\n            <span style=\"color:Blue\">this</span>.SelectProductCommand = <span style=\"color:Blue\">new</span> DelegateCommand&lt;Product&gt;(<span style=\"color:Blue\">this</span>.SelectProduct);\r\n         \r\n            List&lt;ProductCategory&gt; prodCats = dataService.GetAllCategories();\r\n            prodCats.Sort((x, y) =&gt; <span style=\"color:Blue\">string</span>.Compare(x.Name, y.Name));\r\n            categories = <span style=\"color:Blue\">new</span> PopUpCollection&lt;ProductCategory&gt;();\r\n            <span style=\"color:Blue\">foreach</span> (<span style=\"color:Blue\">var</span> pc <span style=\"color:Blue\">in</span> prodCats)\r\n                categories.Add(pc);\r\n\r\n            selectedProduct = <span style=\"color:Blue\">new</span> Product();\r\n            <span style=\"color:Green\">//SetValue(ShowMessageCommandProperty, new ShowMessageBoxCommand(this));</span>\r\n            <span style=\"color:Green\">//SetValue(ItemCommandProperty, new ItemSelectedCommand(this));</span>\r\n        }\r\n\r\n</pre>\r\n</div>\r\n<p>I need to declare two constructors because in my view I use an ObjectDataProvider thus:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">UserControl.Resources</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">ObjectDataProvider</span> <span style=\"color:Red\">x:Key</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Data</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">ObjectType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{x:Type vm:ProductCollectionViewModel}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Style</span> <span style=\"color:Red\">TargetType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{x:Type ComboBoxItem}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n            <span style=\"color:Green\">&lt;!-- Sync the lists selected item with the ViewModel IsSelected--&gt;</span>\r\n            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Setter</span> <span style=\"color:Red\">Property</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">IsSelected</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=IsSelected, Mode=TwoWay}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n        <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Style</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTemplate</span> <span style=\"color:Red\">DataType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{x:Type model:ProductCategory}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=Name}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n        <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTemplate</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">UserControl.Resources</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>and an ObjectDataProvider needs a default constructor.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>My question is how can I ensure that my second constructor is invoked?</p>\r\n<p>My InventoryModule &nbsp;which uses these is declared thusly:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> InventoryModuleInit : IModule\r\n    {\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">readonly</span> IUnityContainer _container;\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">readonly</span> IRegionManager _regionManager;\r\n        <span style=\"color:Blue\">private</span> Controller1 _controller;\r\n\r\n        <span style=\"color:Blue\">public</span> InventoryModuleInit(IUnityContainer container, IRegionManager regionManager)\r\n        {\r\n            _container = container;\r\n            _regionManager = regionManager;\r\n        }\r\n\r\n        <span style=\"color:Blue\">#region</span> IModule Members\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> Initialize()\r\n        {\r\n            \r\n            RegisterTypes();\r\n            \r\n            _regionManager.RegisterViewWithRegion(<span style=\"color:#A31515\">&quot;MainRegion&quot;</span>, () =&gt; _container.Resolve&lt;ProductWorkspaceView&gt;());\r\n            _regionManager.RegisterViewWithRegion(<span style=\"color:#A31515\">&quot;LeftRegion&quot;</span>, GetCategorizedCollectionView);\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">object</span> GetCategorizedCollectionView()\r\n        {\r\n            <span style=\"color:Green\">//_container.RegisterType&lt;IProductCategory, ProductCategory&gt;();</span>\r\n            <span style=\"color:Green\">//IProductCategory productCategory = _container.Resolve&lt;IProductCategory&gt;();</span>\r\n            <span style=\"color:Blue\">var</span> categorizedProductView = _container.Resolve&lt;ICategorizedProductCollectionView&gt;();<span style=\"color:Green\">// new CategorizedProductCollectionView();</span>\r\n            <span style=\"color:Blue\">return</span> categorizedProductView;\r\n        }\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> RegisterTypes()\r\n        {\r\n            _container.RegisterType&lt;IInventoryDataService, InventoryDataService&gt;();\r\n            _container.RegisterType&lt;IProductWorkspaceView, ProductWorkspaceView&gt;();\r\n            _container.RegisterType&lt;IProductWorkspaceViewModel, ProductWorkspaceViewModel&gt;();\r\n            _container.RegisterType&lt;ICategorizedProductCollectionView, CategorizedProductCollectionView&gt;();\r\n        }\r\n\r\n        <span style=\"color:Blue\">#endregion</span>\r\n    }\r\n</pre>\r\n</div>\r\n<p>thanks,</p>\r\n<p>Arun</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-12-19T04:24:21.747-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "270027",
    "ThreadId": "78625",
    "Html": "<p id=ba712110-d129-012c-f9f6-12313b030e01>Hi Arun,</p>\r\n<p id=ba7132d0-d129-012c-f9f7-12313b030e01>You can use the Injection constructor attribute to specify which constructor you want to Unity to use in case you have multiple constructors. The following extract from the Unity documentation explains how the constructor to be used is determined: <em>&ldquo;When a target class contains more than one constructor, Unity will use the one that has the <strong>InjectionConstructor</strong> attribute applied. If there is more than one constructor, and none carries the<strong> InjectionConstructor</strong> attribute, Unity will use the constructor with the most parameters. If there is more than one such constructor (more than one of the &quot;longest&quot; with the same number of parameters), Unity will raise an exception.&rdquo;</em></p>\r\n<p id=ba714400-d129-012c-f9f8-12313b030e01>If you would like more information about this topic, you can check this article:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd203129.aspx\">Annotating Objects for Constructor Injection</a></li>\r\n</ul>\r\n<p id=ba715580-d129-012c-f9f9-12313b030e01>Please let me know if this helps.</p>\r\n<p id=ba716750-d129-012c-f9fa-12313b030e01>Damian Schenkelman    <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-12-22T12:40:10.373-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]