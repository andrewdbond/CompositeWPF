[
  {
    "Id": "160008",
    "ThreadId": "47957",
    "Html": "I really like the ease of downloading modules on demand that the Module Manager offers, however for Silverlight it is almost necessary to provide some type of visual feedback that the application is downloading something.  This is particularly important when downloading large modules.  The Module Manager does not expose a progress event so my first inclination was to create a custom IModuleTypeLoader.  After looking into this it appears I would have to make changes in more classes than just my custom impementation of IModuleTypeLoader.   Has anyone made similar modification and if so could you offer me a few suggestions? \r\n",
    "PostedDate": "2009-02-19T19:35:35.26-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "160268",
    "ThreadId": "47957",
    "Html": "What you need to do are the following steps:<br>\r\n<br>\r\n* Create a class that derrives from IFileDownloader. You can use the code in FileDownloader for inspriration. <br>\r\n* Catch the progress events you're interested and publish them to the outside world. Using EventAggregator would be a non-invasive option for that..<br>\r\n* Create a class that derrives from XapModuleTypeLoader and override the CreateDownloader() method. Return your own FileDownloader <br>\r\n* Replace the XapModuleTypeLoader in the ModuleTypeLoader list with your custom XapFileDownloader. <br>\r\n<br>\r\nHope this helps,<br>\r\n<br>\r\n_Err<br>\r\n<br>\r\n",
    "PostedDate": "2009-02-20T12:13:21.993-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "160577",
    "ThreadId": "47957",
    "Html": "Thank you that was helpful.  It took a little time to figure out the extensibility points, but with your instructions and a little elbow grease it worked.  Thank you for the reply!\r\n",
    "PostedDate": "2009-02-21T22:17:52.027-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "213171",
    "ThreadId": "47957",
    "Html": "<p>Hi, I was wondering if you could elaborate on this solution.&nbsp; I don't know how to inject an EventAggregator into my derived XapModuleTypeLoader.&nbsp; I am also assuming that I have to derive from ModuleManager to override the ModuleTypeLoader but I don't know how to get a UnityContainer to create my new derived XapModuleTypeLoader.&nbsp; If you could provide an example of this I would greatly appreciate it.&nbsp; I am trying to do this in my own library so that I don't recompile the CAL assemblies.</p>\r\n<p>Thanks advance!</p>",
    "PostedDate": "2009-07-17T12:26:53.15-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "213298",
    "ThreadId": "47957",
    "Html": "<p>Actually,it has been awhile since I wrote that, but I was able to find it.&nbsp; I am not sure&nbsp;I included all the&nbsp;relevant classes, but below you will find three I know are involved.&nbsp; Since you are not able to inject EventAggregator in the constructor, I used the ServiceLocator to get it.&nbsp; I think another alternative could be to use property injection with a buildup method.&nbsp;&nbsp; ServiceLocator works great though.&nbsp; The idea is to publish event using eventagg and then subscribe to that event in one of your view models.&nbsp; In my case I think I had some progress spinner that was bound to an&nbsp;int Progress&nbsp;property in my ApplicationViewModel where the view is Shell.xaml.&nbsp; I registered for the event in ApplicationViewModel and set the progress property from the event handler.&nbsp; I also think I made a IntegerToVisibility Converter that i used for the binding between the progress control and the progress property.&nbsp; Basically&nbsp;return (value&nbsp;&gt;0&nbsp;&amp;&amp; &lt;100) ?&nbsp;Visibility.Visible : Visibility.Collapsed.</p>\r\n<p>If I remember right, I was uncertain about overriding ModuleTypeLoaders property because I would have preferred to just add a new IModuleTypeLoader to it since it is an IEnumerable, rather than overriding the property.&nbsp; For some reason I decided to just override the property which works, but there is likely a better way to accomplish this that I missed.&nbsp; .....Hope this helps!&nbsp;</p>\r\n<p>public class VerbFileDownloader : IFileDownloader<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private readonly WebClient webClient = new WebClient();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private readonly IEventAggregator eventAgg;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public VerbFileDownloader()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventAgg = ServiceLocator.Current.GetInstance&lt;IEventAggregator&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private event EventHandler&lt;DownloadCompletedEventArgs&gt; _downloadCompleted;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public event EventHandler&lt;DownloadCompletedEventArgs&gt; DownloadCompleted<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (this._downloadCompleted == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.webClient.OpenReadCompleted += this.WebClient_OpenReadCompleted;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.webClient.DownloadProgressChanged += this.DownloadProgressChanged;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this._downloadCompleted += value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; remove<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this._downloadCompleted -= value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (this._downloadCompleted == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.webClient.OpenReadCompleted -= this.WebClient_OpenReadCompleted;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.webClient.DownloadProgressChanged -= this.DownloadProgressChanged;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void DownloadProgressChanged(object sender, DownloadProgressChangedEventArgs e)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RaiseDownloadProgressChanged(e.ProgressPercentage, false);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void RaiseDownloadProgressChanged(int val, bool isComplete)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventAgg.GetEvent&lt;ModuleDownloadProgressEvent&gt;().Publish(new ModuleDownloadProgressArgs(val, isComplete));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void DownloadAsync(Uri uri, object userToken)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.webClient.OpenReadAsync(uri, userToken);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void WebClient_OpenReadCompleted(object sender, OpenReadCompletedEventArgs e)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this._downloadCompleted(this, ConvertArgs(e));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RaiseDownloadProgressChanged(0, true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static DownloadCompletedEventArgs ConvertArgs(OpenReadCompletedEventArgs args)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new DownloadCompletedEventArgs(args.Error == null ? args.Result : null, args.Error, args.Cancelled, args.UserState);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;</p>\r\n<p>public class VerbModuleManager : ModuleManager<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public VerbModuleManager(IModuleInitializer moduleInitializer, IModuleCatalog moduleCatalog, ILoggerFacade loggerFacade)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : base(moduleInitializer, moduleCatalog, loggerFacade) { }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private System.Collections.Generic.IEnumerable&lt;IModuleTypeLoader&gt; typeLoaders;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public override System.Collections.Generic.IEnumerable&lt;IModuleTypeLoader&gt; ModuleTypeLoaders<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (this.typeLoaders == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.typeLoaders = new List&lt;IModuleTypeLoader&gt;()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new VerbXapModuleTypeLoader()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return this.typeLoaders;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.typeLoaders = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;public class VerbXapModuleTypeLoader : XapModuleTypeLoader<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected override IFileDownloader CreateDownloader()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new VerbFileDownloader();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-17T21:55:38.627-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "213445",
    "ThreadId": "47957",
    "Html": "<p>Thanks so much for your response.&nbsp; I have pretty much setup what you have described above but I am not sure how to get one of my modules to use the new ModuleManager that I have created.&nbsp; I was using Constructor injection of the IModuleManager but it is never creating my manager?&nbsp; Is there some place in the bootstrapper that needs to have this registered?</p>\r\n<p>I also noticed that when the completed event fires, it is still too early.&nbsp; I am trying to know when the file has been downloaded and initialized so that I can publish an event that the new downloaded module can handle?&nbsp; I was trying to kill two birds with one stone:&nbsp; 1.&nbsp; Download progress notification.&nbsp; 2.&nbsp; Publish an event so that the new module would respond correctly.</p>\r\n<p>Does this make sense or should I separate the two?</p>\r\n<p>Thanks again for helping.</p>",
    "PostedDate": "2009-07-18T14:43:57.037-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216438",
    "ThreadId": "47957",
    "Html": "<p>Hi <a id=\"ctl00_ctl00_MasterContent_Content_PostRepeater_ctl10_UserNameLink\" style=\"text-decoration:underline;color:#3e62a6\" href=\"http://www.codeplex.com/site/users/view/mkduffi2272\">mkduffi2272</a>,</p>\r\n<p>Did you figure out your issue? &nbsp;I too am trying to figure out how to inform my main application when a module has completed initialization. &nbsp;I was thinking along the lines of extending the ModuleInitializer to dispatch an event folllowing the call to module.Initialise(), but the problem is how to subscribe to such an event.</p>",
    "PostedDate": "2009-07-27T09:47:35.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216463",
    "ThreadId": "47957",
    "Html": "<p>Sorry for late response...was on vacation :).&nbsp;&nbsp; Regarding the IModuleManager, you override ConfigureContainer() in the bootstrapper similar to below.</p>\r\n<p>protected override void ConfigureContainer()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.UpdateMessage(&quot;Configuring Injection Container&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //this.RegisterTypeIfMissing&lt;IModuleLoader, SplashModuleLoader&gt;(true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.RegisterTypeIfMissing(typeof(IModuleInitializer), typeof(NotifyingModuleInitializer), true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>base.RegisterTypeIfMissing(typeof(IModuleManager), typeof(VerbModuleManager), true);<br></strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; currentDispatcher.BeginInvoke(delegate { CreateCatalog(); });<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (catalog == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.CurrentThread.Join(50);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.ConfigureContainer();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>Regarding the module initializing, one way is to just raise an event using event aggregator in the Initialize() of IModule.&nbsp; Similar to the way you said above.&nbsp; Maybe pass in the module name as a parameter to your event args class and wherever you subscribe to that event you just say eventAgg.GetEvent&lt;EventType&gt;().Subscribe(handler, UIThread, something, ()=&gt; x.Name == &quot;ModuleName&quot;);</p>\r\n<p>When this event is raised you will know the module has been registered and ready for access.&nbsp; If the eventAgg instructions are too vague I can send you an example, I am just running out the door.</p>",
    "PostedDate": "2009-07-27T10:35:14.31-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216698",
    "ThreadId": "47957",
    "Html": "<p>Thanks reddoglaw,</p>\r\n<p>The problem i having is this:</p>\r\n<p>I already have default classes registered with the container, but also need to load modules on demand which will override the defaults by registering the classes within the modules. &nbsp;My model holds an xml config string which maps classes' keys against modules, so can be used to decide whether the relevant module has yet been downloaded.</p>\r\n<p>I'm currently looking at overriding UnityContainer.Resolve(Type,string), which will check whether the relevant module is downloaded yet. &nbsp;If not, I would like it to call moduleManager.LoadModule, and only return with the resolution once the module in question has finished initialising. &nbsp;I have been able to get the event aggregator to publish the event at the end of module initialisation, what i can't do is figure out a way to handle that event in my extended unity container to make &nbsp;the Resolve() call block until the initialisation is completed.</p>\r\n<p>Thanks</p>\r\n<p>Mark</p>",
    "PostedDate": "2009-07-28T02:45:57.167-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "216803",
    "ThreadId": "47957",
    "Html": "<p>Thanks reddoglaw for your response.&nbsp; It answered both my questions and I now have progress notification as well as initialization notification using event aggregators.</p>\r\n<p>Regards,</p>\r\n<p>Matt</p>",
    "PostedDate": "2009-07-28T07:20:06.063-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "248955",
    "ThreadId": "47957",
    "Html": "<p>Hey - what would you guys think of this alternative strategy: (Note: this strategy relies on populating the ModuleInfo entries in the module catalog in code)</p>\r\n<p>Create a module info replacement class that supports INotifyPropertyChanged and hook the changed event, listening for Status Changes?</p>\r\n<p>That way you could update the UI progress and do whatever is needed once the module is done loading?</p>",
    "PostedDate": "2009-10-23T04:51:16.86-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "413471",
    "ThreadId": "47957",
    "Html": "<p>I have implemented the above solution with an SL3 Toolkit &quot;BusyIndicator&quot; control like so:</p>\r\n<p>_eventAggregator.GetEvent&lt;ModuleDownloadProgressEvent&gt;().Subscribe(args =&gt;<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!args.IsFinishedDownloading)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; BusyWindow.IsBusy = true;&nbsp;&nbsp;&nbsp; &lt;== this line executes but progress  window doesn't show up<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BusyWindow.IsBusy = false;&nbsp;&nbsp;&nbsp; &lt;== this line executes correctly<br>}, true);</p>\r\n<p>_verbmoduleManager.LoadModule(&quot;xyz&quot;);</p>\r\n<p>&nbsp;</p>\r\n<p>If I just set BusyWindow.IsBusy = true before the call to LoadModule, it will not work because the download won't happen when the module was already cached, and the BusyWindow will be stuck open (yes it displays if set to busy like that).</p>",
    "PostedDate": "2010-03-02T18:47:07.443-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]