[
  {
    "Id": "172806",
    "ThreadId": "51525",
    "Html": "Hello,<div>I could do with some advice on how to go about architecting the following using a module-view(-presenter) architecture using unity and prism.</div><div><br></div><div>The main module's purpose is to edit, say a Line. The Bootstrapper initializes a LineModule, which registers a LineView into a region on the Shell called &quot;LineRegion&quot;.</div><div>Its data will also be stored in and manipulated by a LineModel.</div><div><br></div><div>So far so good.</div><div><br></div><div>The Line, however, is described by a Start and and End. Now the Start and the End are complex data structures (say, a Point) in themselves and need their own controls for editing them.</div><div>So, these want to also conform to the MVP architecture, so I will have a PointModel, and a PointView.</div><div>However, I am a bit lost as to how to arrange these with respect to the Line view.</div><div><br></div><div>Firstly I am presuming it would be nonsensical to define a PointModule? Since the Point editing functionality is a sub-function of the Line editing functionality...?</div><div><br></div><div>The 'holy grail' if you like, would be to have it so that:</div><div>* the LineView can define regions called &quot;StartPoint&quot; and &quot;EndPoint&quot;, and </div><div>* into each of these will be loaded a PointView, </div><div>* each PointView which will be instantiated by the unity container, thus creating for each one a PointModel automatically which it takes in its constructor</div><div>* ... but each PointModel will be able to be referred to by the LineModel!</div><div>does that make sense?!</div><div>Is this possible?! ;-)</div><div><br></div><div>Will any regions I define in the LineView be picked up by the region manager and in what section of code should they be registered with their respective PointView?</div><div><br></div><div>Also how would I go about making two PointModel objects available to the LineModel, such that the LineModel can refer to StartPoint and EndPoint individually?</div><div>i.e.</div><div>public class LineModel : ILineModel</div><div>{</div><div>    private IPointModel startPoint;</div><div>    private IPointModel endPoint;</div><div><br></div><div>the important thing is that it needs to refer to each of them, not just have an arbitrary collection of them - so it needs to have a reference to each one.</div><div><br></div><div><br></div><div>Thanks for any help, much apprecated</div><div><br></div><div><br></div>",
    "PostedDate": "2009-03-27T08:32:27.143-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "172923",
    "ThreadId": "51525",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi,</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> If I understood you correctly you are having problems on how to create <b>LineModel</b> and <b>PointModel</b> instances in such a way that <b>LineModel</b> can reference <span style=\"color:#1f497d\">to </span>its <i>child startLine and endLine</i> individually.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">A thing that I agree with you that it is not necessary to create a <b>PointModule</b>.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">The way I believe this could be achieved is doing something like the following:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 53.4pt\"><span><span style=\"font-family:calibri\">1.</span><span style=\"font:7pt 'times new roman'\">       </span></span><span style=\"font-family:calibri\">The <b>LineView</b> define<span style=\"color:#1f497d\">s</span> regions called &quot;<b>StartPoint</b>&quot; and &quot;<b>EndPoint&quot;</b></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 53.4pt\"><span><span style=\"font-family:calibri\">2.</span><span style=\"font:7pt 'times new roman'\">       </span></span><span style=\"font-family:calibri\">The <b>LineModel</b> receive<span style=\"color:#1f497d\">s</span> in its constructor an instance of a <b>LineView</b>, and two instances of its <b>PointModels</b>.  This way both the <b>LineView</b> and <b>PointModels</b> instances will be created by unity and injected into the <b>LineModel</b>:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">    public</span><span style=\"font-size:10pt;font-family:'courier new'\"> <span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">LineModel</span>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        <span style=\"color:blue\">private</span> <span style=\"color:#2b91af\">IPointModel</span> startPoint;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">        private</span><span style=\"font-size:10pt;font-family:'courier new'\"> <span style=\"color:#2b91af\">IPointModel</span> endPoint;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        <span style=\"color:blue\">public</span> LineModel(<span style=\"color:#2b91af\">ILineView</span> lineView, <span style=\"color:#2b91af\">IPointModel</span> startPoint, <span style=\"color:#2b91af\">IPointModel</span> endPoint, <span style=\"color:#2b91af\">IRegionManager</span> regionManager)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;font-family:'courier new'\">            <span style=\"color:blue\">this</span>.startPoint = startPoint;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">            this</span><span style=\"font-size:10pt;font-family:'courier new'\">.endPoint = endPoint;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;font-family:'courier new'\">            regionManager.Regions[<span style=\"color:#a31515\">&quot;StartPoint&quot;</span>].Add(<span style=\"color:blue\">this</span>.startPoint.View);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;font-family:'courier new'\">            regionManager.Regions[<span style=\"color:#a31515\">&quot;endPoint&quot;</span>].Add(<span style=\"color:blue\">this</span>.endPoint.View);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        </span><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        ...</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    }</span> </p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 53.4pt\"><span><span style=\"font-family:calibri\">3.</span><span style=\"font:7pt 'times new roman'\">       </span></span><span style=\"font-family:calibri\">In the <b>PointModel</b> constructor receive an instance of <b>PointView</b>. The <b>PointView</b> instance will created by unity and injected into the <b>PointModel.</b></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 17.4pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 52.95pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">public</span><span style=\"font-size:10pt;font-family:'courier new'\"> <span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">PointModel</span>\r\n<p style=\"margin:0cm 0cm 0pt 17.55pt\"><span style=\"font-size:10pt;font-family:'courier new'\">     {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 17.55pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        <span style=\"color:blue\">private</span> <span style=\"color:#2b91af\">IPointView</span> view;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 17.55pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        <span style=\"color:blue\">public</span> <span style=\"color:#2b91af\">PointModel</span> (<span style=\"color:#2b91af\">IPointView</span> pointView)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 17.55pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 17.55pt\"><span style=\"font-size:10pt;font-family:'courier new'\">              <span style=\"color:blue\">this</span>.view = pointView;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 17.55pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 17.55pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 17.55pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        </span><span style=\"font-size:10pt;font-family:'courier new'\">...</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 17.55pt\"><span style=\"font-size:10pt;font-family:'courier new'\">     }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Benefits:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 53.4pt\"><span style=\"font-family:calibri\">·<span style=\"font:7pt 'times new roman'\">         </span>This way the LineModel will be able to reference each of it's point individually.\r\n<p style=\"margin:0cm 0cm 0pt 53.4pt\"><span style=\"font-family:calibri\">·<span style=\"font:7pt 'times new roman'\">         </span>The line model is testable and you can mock the different point models.\r\n<p style=\"margin:0cm 0cm 0pt 53.4pt\"><span style=\"font-family:calibri\">·<span style=\"font:7pt 'times new roman'\">         </span>Each model creates it's own view.\r\n<p style=\"margin:0cm 0cm 0pt 53.4pt\"><span style=\"font-family:calibri\">·<span style=\"font:7pt 'times new roman'\">         </span>Unity is used to create all instances<span style=\"color:#1f497d\">.</span>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Drawbacks:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 53.4pt\"><span style=\"font-family:calibri\">·<span style=\"font:7pt 'times new roman'\">         </span>LineModel has a dependency on the RegionManager. This can be avoided creating a LineController<span style=\"color:#1f497d\">.</span>\r\n<p style=\"margin:0cm 0cm 0pt 53.4pt\"><span style=\"font-family:calibri\">·<span style=\"font:7pt 'times new roman'\">         </span>You are creating a Region for each point. Depending on your scenario it might be a better solution just to databind the each point to the Control you desire without creating a region on it.\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hope it helps!</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 26.4pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Matias Bonaventura</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><a href=\"http://blogs.southworks.net/\"><span style=\"font-family:calibri\">http://blogs.southworks.net/matiasb</span></a> </p>\r\n</span></p>\r\n</span></p>\r\n</span></p>\r\n</span></p>\r\n</span></p>\r\n</span></p>\r\n</span></p>\r\n</span></p>\r\n",
    "PostedDate": "2009-03-27T13:42:50.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "173472",
    "ThreadId": "51525",
    "Html": "Hi,<div>Thanks for this - it works well.</div><div>The only thing I have different to what you have suggested is that instead of the LineModel taking an instance of the LineView in its constructor, I have it the other way round - the LineView takes an instance of the LineModel. The LineModule forces the creation of the LineView, using</div><div>regionManager.RegisterViewWithRegion(&quot;MainRegion&quot;, unityContainer.Resolve&lt;LineView&gt;)</div><div>I suppose it could instead be like you said and have</div><div>regionManager.RegisterViewWithRegion(&quot;MainRegion&quot;, () =&gt; unityContainer.Resolve&lt;ILineModel&gt;().View)</div><div>however, I'm not sure whether is a worse sin - the view knowing about the model or the model knowing about the view?? :-), or should neither cause any particular concern?<br><br></div><div>And where would a LineController sit in the scheme of things, i.e what (interfaces) would it know about and what would know about it(s interface)?</div><div><br></div><div><br></div>",
    "PostedDate": "2009-03-30T07:11:43.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "173478",
    "ThreadId": "51525",
    "Html": "ok i've got the LineController working now, that's fine, thanks.",
    "PostedDate": "2009-03-30T07:23:57.637-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "173620",
    "ThreadId": "51525",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">\r\n<p><span style=\"font-family:calibri\">Hi, </span><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:calibri\">Both approaches, having the model be logically created first (know as Presenter-First) and having the view be logically created first(known as View-First), are perfectly valid. In most scenarios the view discovery approach lends itself most naturally to view-first composition. If you are interested in the difference between these approaches you might find useful the </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707883.aspx\"><span style=\"font-family:calibri\">UI Composition</span></a><span style=\"font-family:calibri\"> design concept from the documentation. </span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:calibri\">Regarding the controller, you should think of it as a controller of the whole module, coordinating all necessary view/presenters of the module. You might find </span><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=50763http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=50763\"><span style=\"color:#0000ff;font-family:calibri\">this related discussion</span></a><span style=\"font-family:calibri\"> interesting where </span><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"font-family:calibri\">Damian Schenkelman</span></a><span style=\"font-family:calibri\"> explains the controller purpose in the ViewDiscoveryComposition Quickstart.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Going back to your original question, if your scenario is such that only lines can manipulate your points,  you should really consider if using prism regions is the best approach. Using regions might not be necessary and brings some complexities that might be avoided. In general the Region manager acts as a locator, used by external modules to be able to find UI containers defined on other module. So if the only module that will use the <b>StartPoint </b>and<b> EndPoint </b>regions is the <b>LineModule</b>, and also the LineModel needs to know explicitly about these PointModels (although in a decoupled fashion by using interfaces), regions are probably unnecessary.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">For example you can just databind each point from XAML to the Control you desire without  creating a region on it.<i> </i> You can even use automatic DataTemplates to define the View for the PointModels (these won't work in Silverlight though).</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">If you have any doubt just let me know!</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Matias Bonaventura</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><a href=\"http://blogs.southworks.net/\"><span style=\"font-family:calibri\">http://blogs.southworks.net/matiasb</span></a></p>\r\n</span>\r\n<p style=\"margin:0cm 0cm 0pt\">&nbsp;</p>\r\n</p>\r\n",
    "PostedDate": "2009-03-30T13:22:46.313-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]