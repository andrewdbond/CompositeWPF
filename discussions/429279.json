[
  {
    "Id": "985395",
    "ThreadId": "429279",
    "Html": "I am using nested regions in a PRISM 4.0 WPF application and having trouble getting the Navigation events of the nested regions views to fire. We have a Region, MainContentRegion, in the Shell.xaml and I have a view, ParentView, that has nested regions\r\n with each containing a view from a different module. Each module's view model has a CompositePresentationEvent called SaveView for handling validation and providing a means for users to correct validation mistakes before navigating away from the view and saving\r\n or, by election, not saving. This event is subscribed to in the OnNavigatedTo implementation of INavigationAware. The root problem seems to be that the OnNavigatedTo, OnNavigatedFrom do not get fired in the nested views. From my research I have determined\r\n that this is related to the fact that the Parent Region has no knowledge of the child regions as all of the regions as considered to be at the same level. Will using scope for the regions cause these events to fire when the parent is navigated away from? If\r\n so then how might I set this up? If not what recommendations are there for working with nested regions in PRISM such that these events can be fired?",
    "PostedDate": "2013-01-11T05:02:13.267-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985524",
    "ThreadId": "429279",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Based on my understanding, when implementing the <strong>INavigationAware </strong>\r\ninterface, the <strong>OnNavigatedTo </strong>and <strong>OnNavigatedFrom </strong>\r\nmethods of the corresponding view (or view model) will only be called when a navigation request is performed on the region containing the this view. Hence, as the inner views inside your &quot;ParentView&quot; are hosted in nested regions, the\r\n<strong>OnNavagitatedTo </strong>and <strong>OnNavigatedFrom </strong>methods of those views won't be called as the navigation request was called in the &quot;MainContentRegion&quot; and not in its inner regions. As far as I know using scoped regions won't change this\r\n behavior as the navigation request will still be called in different regions.</p>\r\n<p>As a possible approach, I believe you could define your &quot;SaveView&quot; <strong>CompositePresentationEvent\r\n</strong>in a shared project consumed by your different modules. This way when each inner view or view model is initialized, it could subscribe to this event like you mentioned. And then when navigating the &quot;MainContentRegion&quot; you could publish to this event,\r\n for example in the <strong>OnNavigatedFrom </strong>method of the &quot;ParentView&quot; in order to notify its subscribed inner views, allowing them to react accordingly with each event handler.</p>\r\n<p>I hope you find this helpful,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2013-01-11T08:55:48.68-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985575",
    "ThreadId": "429279",
    "Html": "\r\n<p>@aadami,</p>\r\n<p style=\"padding-left:30px\">For the moment, against my inner self's&nbsp;best judgement, we are going to pull the information&nbsp;together as a single view and display that within the MainContentRegion.&nbsp; Based on the BRD we want to display the information that is already\r\n available in other modules but in a single view.&nbsp; Using nested regions would have allowed me to prevent duplicating the code.&nbsp; Unfortunately time constraints prevent me from continuing to work on this.&nbsp; Fortunately we are going to be going through a refactoring\r\n effort as part of our next release and the use of nested regions is going to be a part of that effort.&nbsp;</p>\r\n<p style=\"padding-left:30px\">In response to your answer, and for the benefit of others, the only issue I see with your approach is in publishing the event from the parent regions\r\n<strong>OnNavigatedFrom.&nbsp;&nbsp;</strong>Based on my understanding of&nbsp;INavigationAware&nbsp;we would not be able to stop the parent&nbsp;view from navigating&nbsp;once inside the\r\n<strong>OnNavigatedFrom </strong>method.&nbsp; Given that the <strong>SaveView</strong> is being used to&nbsp;provide the opportunity to stop the navigation and correct any errors, or continue navigation without saving the changes, we need the\r\n<strong>SaveView </strong>to fire before reaching the <strong>OnNavigatedFrom</strong>.&nbsp; Since the event would&nbsp;be published from the\r\n<strong>OnNavigatedFrom </strong>method of the parent view we would not be able to stop that navigation if there are errors in the nested views.&nbsp;</p>\r\n<p style=\"padding-left:30px\">I was trying to determine if using <strong>scoped regions</strong> would provide the &quot;awareness&quot; of the nested regions and cause their\r\n<strong>SaveView </strong>methods to fire before getting to the <strong>OnNavigatedFrom\r\n</strong>of the parent view.</p>\r\n<p style=\"padding-left:30px\">There is possibly some form of workaround for all of this, and I could be wrong (not the first time), but as mentioned above, we have to move forward.&nbsp; When we get into refactoring and work through the nested views issues, I will\r\n update the thread.</p>\r\n<p style=\"padding-left:30px\">Thanks Again for taking a look at this.</p>\r\n",
    "PostedDate": "2013-01-11T10:32:05.657-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]