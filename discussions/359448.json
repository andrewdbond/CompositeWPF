[
  {
    "Id": "848441",
    "ThreadId": "359448",
    "Html": "\r\n<p>&nbsp;</p>\r\n<p>If I'm to develop Silverlight applications using Prism 4 with the MVVM approach,&nbsp;am I forced to use Unity and not MEF?</p>\r\n",
    "PostedDate": "2012-06-13T07:00:23.993-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "848567",
    "ThreadId": "359448",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Based on my understanding you should be able to use <strong>MEF </strong>in your application without problems, as the decision on which dependency injection container you use, will depend mostly on your personal preferences and the requirements of your scenario.</p>\r\n<p>As mentioned in the <a href=\"http://msdn.microsoft.com/en-us/library/gg405484%28v=pandp.40%29#sec21\">\r\nPrism documentation</a>, when choosing to use the <strong>MVVM </strong>pattern to construct your application, you may have to make certain design decisions, one of them will be deciding which approach you will use for view and view model construction.</p>\r\n<p>For example, you need to decide whether to use a dependency injection container, such as\r\n<strong>Unity </strong>or <strong>MEF</strong>. For more information about the different approaches you could use, you could check the following sections of the documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg405484%28v=pandp.40%29#sec17\">Construction and Wire-Up</a>\r\n</li><li><a href=\"http://msdn.microsoft.com/en-us/library/gg405494%28v=pandp.40%29#sec15\">Advanced Construction and Wire-Up</a>\r\n<em>(Creating the View and View Model Using MEF / Unity)</em> </li></ul>\r\n<p>Also, if you are interested in application samples using the <strong>MVVM </strong>\r\npattern and <strong>MEF</strong>, I believe you could check for example the <a href=\"http://msdn.microsoft.com/en-us/library/gg405492%28v=pandp.40%29\">\r\nMVVM Reference Implementation</a>, or the <a href=\"http://msdn.microsoft.com/en-us/library/gg430881%28v=pandp.40%29\">\r\nView-Switching Navigation QuickStart</a> provided with <strong>Prism</strong>.</p>\r\n<p>Additionally, for more information on how to implement the <strong>MVVM</strong> pattern, you could find the following resource interesting:</p>\r\n<ul>\r\n<li><a href=\"http://visualstudiogallery.msdn.microsoft.com/3ab5f02f-0c54-453c-b437-8e8d57eb9942\">In the Box &ndash; MVVM Training</a>\r\n</li></ul>\r\n<p>I hope you find this handy,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-06-13T11:26:55.11-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "849302",
    "ThreadId": "359448",
    "Html": "<p>Hi Agustin:</p>\r\n<p>Thank you for answering.</p>\r\n<p>I installed the \"In the Box - MVVM Training\" but I don't know what to do then.</p>\r\n<p>What do I have to do in VS to see it?</p>\r\n<p>Getting back to MEF vs Unity, I read this article <a href=\"http://akashkava.com/blog/391/mef-vs-unity-in-composite-application-prism/\">http://akashkava.com/blog/391/mef-vs-unity-in-composite-application-prism/</a>, it says that \"MEF does not work great with MVVM as it will create singleton objects that will behave strangely in runtime and lead to UI failure\", and \"Unity works best for MVVM, as composing user interface parts can be very easy with unity\", this article seemed very serius, it depicted the pros and cons of each container.</p>\r\n<p>Many writers make their examples using MEF and others use Unity, I know that I have to decide, but I don't have the information to make a good decision. As I read MEF will be included in the NET Framework, it tells me that it may be better to use it, but I'll build applications that use Prism, MVVM, RIA Services, SQL Server, Entity Data Framework, Silverlight and WPF. So I need to make a good decision based on what I'll use to avoid having future troubles.</p>\r\n<p>My best regards,</p>\r\n<p>Rafael</p>",
    "PostedDate": "2012-06-14T17:59:35.97-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "849511",
    "ThreadId": "359448",
    "Html": "\r\n<p>Hi Rafael,</p>\r\n<p>Regarding, how to run the &quot;<em>In the Box - MVVM training</em>&quot;, once you install it, you have to open\r\n<strong>Visual Studio 2010</strong>; <strong>File</strong>, <strong>New Project</strong>,\r\n<strong>Visual C#</strong> and select <strong>In the Box, MVVMTraining</strong>. Basically you will be creating a new project which will contain all the contents of the training.</p>\r\n<p>Also, as mentioned in its <strong>MSDN</strong> article, you could find the full and complete information about this training kit in the following link:</p>\r\n<ul>\r\n<li><a href=\"http://karlshifflett.wordpress.com/2010/11/07/in-the-box-ndash-mvvm-training/\">http://karlshifflett.wordpress.com/2010/11/07/in-the-box-ndash-mvvm-training/</a>\r\n</li></ul>\r\n<p>On the other hand, regarding the choice of the container you should use, take into account that\r\n<strong>Prism </strong>is container agnostic, meaning that you can use any container you want.</p>\r\n<p>I believe, you could find&nbsp; more information which may help you in this decision, to determine which container fits your scenario better, in the following chapter of the\r\n<strong>Prism </strong>documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921140%28v=PandP.40%29.aspx\">Chapter 3: Managing Dependencies Between Components</a>\r\n</li></ul>\r\n<p>Additionally, you could also find the following threads useful, where similar discussions have been addressed in the past:</p>\r\n<ul>\r\n<li><a href=\"http://compositewpf.codeplex.com/discussions/223444\">Why use MEF with Prism?\r\n</a></li><li><a href=\"http://compositewpf.codeplex.com/discussions/228924?ProjectName=compositewpf\">MEF or Unity for Prism v4 &quot;Dependency Injection&quot;?</a>\r\n</li></ul>\r\n<p>Regards,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-06-15T06:00:18.077-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "849537",
    "ThreadId": "359448",
    "Html": "<p>Thank you Agustin.</p>\r\n<p>I guess it shouldn't be a hard decision to make since portability between them is easy.</p>",
    "PostedDate": "2012-06-15T06:53:43.573-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]