[
  {
    "Id": "770631",
    "ThreadId": "318924",
    "Html": "\r\n<p>Hey there, I'm having issues understanding how I should be creating a new view and registering it with a region.</p>\r\n<p>I'm using MEF and the quickstart Shell from David Hill's templates. I have one module which is supposed to beable to create and display data for my PasswordPolicies Table, ValidationGroups Table and ValidationRules Table. ValidationGroup is the junction\r\n for the other two tables, basically many Rules can be used in a Policy and many Policies can use the same rules.<br>\r\n<br>\r\nMy views:<br>\r\nShellView - Holds a region [MainRegion]<br>\r\nPoliciesView - Shows the rows within the Policy Table, has a &quot;Add New Policy&quot; button that should navigate the [MainRegion] view to AddNewPolicyView<br>\r\nAddNewPolicyView - Creates a new row, contains a region [ValidationGroupRegion] (I also want to share the Policy model over to the ValidationGroupView through RegionContext)<br>\r\nValidationGroupView - Shows the associated Rules from a given Policy<br>\r\nValidationRulesView - Shows the rows within the Rule Table</p>\r\n<p>I assume from the <a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28v=pandp.40%29.aspx#sec6\">\r\ndiagram</a> associated with the RegionContext that the RegionContext is what I want to use for sharing the Policy Model, if not then what should I be using?<br>\r\nI have ViewDiscovery on my Module INIT to assign PoliciesView to Region[MainRegion].</p>\r\n<p>&nbsp;</p>\r\n<p>What I'm wondering is whats the normal way of creating a new View and putting it into the region? I've tried simply adding the View to the region but then my ViewModel property within the View's Codebehind is null because the [Import] doesn't seem to fire.<br>\r\n<br>\r\nBtnClickCommand(){<br>\r\nregionManager.Regions[MainRegion].Add(new AddNewPolicyView());<br>\r\n}</p>\r\n",
    "PostedDate": "2012-02-16T12:05:08.807-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "770900",
    "ThreadId": "318924",
    "Html": "<p>Well I figured out that I could use ServiceLocator to get an instance of the View (and since its Non-Shared, it'll create a new one) and after Submitting I'll have to figure out how to tell it to remove itself (part life time I'm guessing and tell it not  to keep it alive).</p>\n<p>_regionManager.RegisterViewWithRegion(RegionNames.MainRegion, () =&gt; ServiceLocator.Current.GetInstance&lt;AddNewPolicyView&gt;());</p>\n<p>But now I run into an issue with my RegionContext. I can't just register my ValidationGroupView with my AddNewPolicyView's region [ValidationGroupRegion] in the [ImportConstructor] because the region hasn't been created on the view yet, and thus not in the  RegionManager.</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre>[ImportingConstructor]\n<span style=\"color: blue;\">public</span> AddNewPolicyViewModel(IRegionManager regionManager)\n{\n    _regionManager = regionManager;\n    _regionManager.RegisterViewWithRegion(RegionNames.ValidationGroupsRegion, () =&gt; ServiceLocator.Current.GetInstance&lt;ValidationGroupView&gt;());\n}\n</pre>\n</div>\n<p><br /> <br /> Then the [ImportingConstructor] gets called on the ValidationGroupViewModel<br /> <br /></p>\n<div style=\"color: black; background-color: white;\">\n<pre>[ImportingConstructor]\n<span style=\"color: blue;\">public</span> ValidationGroupViewModel(IRegionManager regionManager)\n{\n    _regionManager = regionManager;\n    <span style=\"color: blue;\">var</span> RegionContext = _regionManager.Regions[RegionNames.ValidationGroupsRegion].Context <span style=\"color: blue;\">as</span> PasswordPoliciesModel;\n    <span style=\"color: blue;\">this</span>.Policy = RegionContext <span style=\"color: blue;\">as</span> PasswordPoliciesModel;\n}\n</pre>\n</div>\n<p><br /> And within the Regions I only have [MainRegion] not my [ValidationGroupsRegion] since the AddNewPolicyView hasn't finished.</p>\n<p>I assume there has to be a way todo this and I'm just missing it.</p>\n<p>&nbsp;</p>\n<p>Edit:<br />Xaml code for ContentControl on AddNewPolicyView<br /><br />\n<div style=\"color: black; background-color: white;\">\n<pre>&lt;ContentControl\n    prism:RegionManager.RegionName=<span style=\"color: #a31515;\">\"ValidationGroupsRegion\"</span>\n    prism:RegionManager.RegionContext=<span style=\"color: #a31515;\">\"{Binding Path=Policy, Mode=TwoWay}\"</span>\n/&gt;\n</pre>\n</div>\n<br />Further testing I discovered if I have a button to Register the View with the Region then everything  works like I want it to, but then I have to keep track of the fact that  I've registered the view.</p>",
    "PostedDate": "2012-02-16T13:10:51.203-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "796128",
    "ThreadId": "318924",
    "Html": "<p>Hi,</p>\r\n<p>Based on my understanding, the problem seems to be that you are trying to retrieve the context of a region in the view model before the construction of its view is finished. As the region is not available until the view is properly created, the region does not exist during the construction of the view model.</p>\r\n<p>As a possible approach you could subscribe to the <strong>CollectionChanged </strong>event of the <strong>Regions </strong>collection of the <strong>RegionManager </strong>in the view model's constructor. When the <strong>ValidationGroupsRegion </strong>is added to the <strong>RegionManager </strong>this event will be fired and you should be able to retrieve the context of the region. For example, you could do something something similar to this:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>[ImportingConstructor]\r\n<span style=\"color: blue;\">public</span> ValidationGroupViewModel(IRegionManager regionManager)\r\n{\r\n    _regionManager = regionManager;\r\n    _regionManager.Regions.CollectionChanged += Regions_CollectionChanged;<span style=\"color: blue;\"></span>\r\n}\r\n\r\n<span style=\"color: blue;\">void</span> Regions_CollectionChanged(<span style=\"color: blue;\">object</span> sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)\r\n{\r\n    <span style=\"color: blue;\">if</span> (_regionManager.Regions.ContainsRegionWithName(RegionNames.ValidationGroupsRegion))\r\n    {\r\n        _regionManager.Regions.CollectionChanged -= Regions_CollectionChanged;\r\n        <span style=\"color: blue;\">var</span> RegionContext = _regionManager.Regions[RegionNames.ValidationGroupsRegion].Context;\r\n        <span style=\"color: blue;\">this</span>.Policy = RegionContext <span style=\"color: blue;\">as</span> PasswordPoliciesModel;\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>However, take into account that the decision of which approach you should use will depend mostly of your personal preferences and the requirements of your scenario.</p>\r\n<p>You can find more information about the <strong>RegionContext </strong>in the following section of the Prism documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921098%28PandP.40%29.aspx#sec41\">Chapter 7: Composing the User Interface - Sharing Data Between Multiple Regions</a></li>\r\n</ul>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-02-22T12:24:30.303-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "799454",
    "ThreadId": "318924",
    "Html": "<p>Thank you very much! Still forgetting I can do the whole Async callbacks. I'm currently using a button but the above approach is much cleaner for what I want todo.</p>",
    "PostedDate": "2012-02-24T08:33:48.537-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]