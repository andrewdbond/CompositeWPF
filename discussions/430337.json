[
  {
    "Id": "989955",
    "ThreadId": "430337",
    "Html": "\r\n<p>Just getting started, first post.</p>\r\n<p>I've come across the patterns and&nbsp;practices&nbsp;labeled as Prism. &nbsp;Looks interesting.</p>\r\n<p>I am trying to solve a test automation challenge at my work place. &nbsp;Currently there is not a quick and easy win with automation, it is an uphill battle fighting&nbsp;maintenance&nbsp;and speed to market challenges.</p>\r\n<p>I want to solve this&nbsp;differently&nbsp;by creating an application which will simulate the various usages.</p>\r\n<p><br>\r\nHere is my quest: &nbsp;I need to quickly build an application which will be used to test and verify lower level services. &nbsp;In our SOA platform, my application would sit&nbsp;virtually&nbsp;in the same space as other 'application' layers which consume\r\n and run off of internal API's and provide a rich user experience to end users. &nbsp;However my applications purpose is to provide the coverage usage of all the possible variations that end users may put their application through. &nbsp;Rather than providing\r\n a clean useful interface, my application should be suited to provide static cases we have defined and send to the underlying services and report back if the result was expected or not.</p>\r\n<p>&nbsp;</p>\r\n<p>Thoughts on if Prism would be a good tool to use?</p>\r\n<p>Other directions I am considering would be some cloud based application development for mobile applications -&gt; quickest route to consume web services, rest/soap/wcf etc. &nbsp;Or possibly using a much more light weight language like ruby or something\r\n to quickly compose an application which really is doing little more than calling web services in certain logical order.</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks for lending a helping hand!</p>\r\n",
    "PostedDate": "2013-01-21T12:39:52.727-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "990453",
    "ThreadId": "430337",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I am not aware of a case where <strong>Prism </strong>was used to develop a testing application, but if your testing application wouldn't benefit of any of the features provided with\r\n<strong>Prism</strong>, then it might not prove to be useful for it. Among the these features, the main advantages provided by\r\n<strong>Prism </strong>are:</p>\r\n<ul>\r\n<li>Separating the client-side application components in self contained and decoupled\r\n<strong>Modules</strong>. </li><li>Providing support for composing the application's <strong>UI </strong>in a decoupled fashion. (i.e. deciding the composition of the\r\n<strong>UI </strong>at run time and without needing the views to reference each other.)\r\n</li><li>Built in support for <strong>dependency injections</strong> patterns as well as several communication capabilities between the components of the client-side application allowing them to work while being decoupled for each other.\r\n</li></ul>\r\n<p>If any of those features could be useful for your testing application, it could make sense to use\r\n<strong>Prism</strong>. However, I believe that those features do not have an impact in the testing logic part of the application. What's more, as far as I know\r\n<strong>Prism </strong>does not include any specific guidance or capabilities to communicate with\r\n<strong>Web Services</strong> or similar, so it wont provide any help regarding this topic either.</p>\r\n<p>Regards,</p>\r\n<p>Damian Cherubini<br>\r\n<a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>\r\n",
    "PostedDate": "2013-01-22T10:22:43.977-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]