[
  {
    "Id": "906121",
    "ThreadId": "393702",
    "Html": "\r\n<p>Hello!</p>\r\n<p><em>EDIT: Let me correct the title that, VoucherViewModel's constructor only executes when Registering VoucherView.</em></p>\r\n<p>I have a view model that belong to a View like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre style=\"color:black\"><div style=\"color:black; background-color:white\"><pre><span style=\"color:green\">// VoucherView-ViewModel</span>\n_container.RegisterType&lt;VoucherViewModel&gt;(<span style=\"color:blue\">new</span> TransientLifetimeManager());\n<span style=\"color:green\">// Constructor of VoucherViewModel executes here...</span>\n_container.RegisterType&lt;Object, VoucherView&gt;(VoucherViewModel.VoucherViewName, <span style=\"color:blue\">new</span> TransientLifetimeManager(),\n      <span style=\"color:blue\">new</span> InjectionProperty(VoucherView.DataContextProperty.Name, _container.Resolve&lt;VoucherViewModel&gt;()));</pre>\n</div>\n</pre>\r\n<pre style=\"color:black\"><span style=\"background-color:white\"><br></span></pre>\r\n<pre style=\"color:black\"><span style=\"background-color:white\">now when i navigate to &quot;VoucherView&quot;, VoucherViewModel's constructor never executes.</span></pre>\r\n<pre style=\"color:black\"><span style=\"background-color:white\">i need to display new VoucherView each time NewVoucherCommand or EditVoucherCommand execute. So <strong>VoucherViewModel </strong>implement <strong>INavigationAware </strong>like this:</span></pre>\r\n<pre style=\"color:black\"><span style=\"background-color:white\"><br></span></pre>\r\n<pre><span style=\"background-color:white\"><div style=\"color:black; background-color:white\"><pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> VoucherViewModel : NotificationObject, INavigationAware, IRegionMemberLifetime, Core.ITabContent\n    {\n        <span style=\"color:green\">// ...</span>\n        <span style=\"color:blue\">#region</span> INavigationAware Members\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> IsNavigationTarget(NavigationContext navigationContext)\n        {\n            <span style=\"color:green\">// if constructor execution problem solved, uncomment lines below and remove &quot;return false;&quot;.</span>\n            <span style=\"color:green\">//int voucherId = 0;</span>\n            <span style=\"color:green\">//string id = navigationContext.Parameters[VoucherIdKey];</span>\n            <span style=\"color:green\">//if (!string.IsNullOrEmpty(id) &amp;&amp; int.TryParse(id, out voucherId) &amp;&amp; _voucher != null)</span>\n            <span style=\"color:green\">//{</span>\n            <span style=\"color:green\">//    return _voucher.Id != voucherId;</span>\n            <span style=\"color:green\">//}</span>\n            <span style=\"color:green\">//return true;</span>\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">false</span>;\n        }\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> OnNavigatedFrom(NavigationContext navigationContext)\n        {\n\n        }\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> OnNavigatedTo(NavigationContext navigationContext)\n        {\n            <span style=\"color:blue\">int</span> voucherId = 0;\n            <span style=\"color:blue\">string</span> id = navigationContext.Parameters[VoucherIdKey];\n            <span style=\"color:blue\">if</span> (!<span style=\"color:blue\">string</span>.IsNullOrEmpty(id) &amp;&amp; <span style=\"color:blue\">int</span>.TryParse(id, <span style=\"color:blue\">out</span> voucherId))\n            {\n                <span style=\"color:blue\">this</span>._voucher = _voucherRepository.Get(voucherId);\n                <span style=\"color:blue\">this</span>.IsEditMode = <span style=\"color:blue\">true</span>;\n                <span style=\"color:blue\">this</span>.Title = <span style=\"color:blue\">string</span>.Format(<span style=\"color:#a31515\">&quot;Editing Voucher Number {0}&quot;</span>, _voucher.Number);\n            }\n            <span style=\"color:blue\">else</span>\n            {\n                <span style=\"color:blue\">this</span>._voucher = <span style=\"color:blue\">new</span> Voucher();\n                <span style=\"color:blue\">this</span>.VoucherNumber = _voucherRepository.GetUniqueVoucherNumber();\n            }\n        }\n\n        <span style=\"color:blue\">#endregion</span>\n}</pre>\n<pre><br>Result of this problem is, When i call EditVoucherCommand for id=1, A new View appears and shows VoucherId=1 data,&nbsp;and again when i call EditVoucherCommand for id=3, Another View appears and displays data for VoucherId=3, But previously displayed View (VoucherId=1) changes to VoucherId=3!!! I mean, VoucherView's constructor executes, but VoucherViewModel's constructor never called. It seems all VoucherView's share same instance of VoucherViewModel!!!Here it is the code for navigation:<br></pre>\n<pre><br></pre>\n<pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">var</span> uriBuilder = <span style=\"color:blue\">new</span> StringBuilder();\nuriBuilder.Append(VoucherViewModel.VoucherViewName);\n\n<span style=\"color:blue\">var</span> uriQuery = <span style=\"color:blue\">new</span> UriQuery();\nuriQuery.Add(VoucherViewModel.VoucherIdKey, selectedVouchers.First().VoucherId.ToString());\nuriBuilder.Append(uriQuery);\n\n_regionManager.RequestNavigate(RegionNames.MainRagionName, <span style=\"color:blue\">new</span> Uri(uriBuilder.ToString(), UriKind.Relative));</pre>\n</div>\n</pre>\n</div>\n<span style=\"font-family:'Segoe UI','Microsoft Sans Serif',Arial,Geneva,sans-serif\"><span style=\"white-space:normal\"> </span></span></span></pre>\r\n</div>\r\n",
    "PostedDate": "2012-08-29T23:04:29.177-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "906164",
    "ThreadId": "393702",
    "Html": "<p>Hello again,</p>\r\n<p>After debugging prism source code i found this line that (I think) make problem:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: green;\">// RegionNavigationContentLoader.cs, method: object CreateNewRegionItem(string candidateTargetContract)</span>\r\nnewRegionItem = <span style=\"color: blue;\">this</span>.serviceLocator.GetInstance&lt;<span style=\"color: blue;\">object</span>&gt;(candidateTargetContract);\r\n</pre>\r\n</div>\r\n</p>\r\n<p>after executing this line, UnityContainer should create new instance of VoucherView, and then resolve a new instance of VoucherViewModel for it's DataContext. As I say before, VoucherViewModel's constructor never called, so it seems same instance of ViewModels is shared between all VoucherViews! I dont know WHY?</p>",
    "PostedDate": "2012-08-30T01:00:55.3-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "906406",
    "ThreadId": "393702",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Based on my understanding, the cause of this problem is that when you register your\r\n<strong>VoucherView </strong>in the container, you are specifically passing the value to set to the\r\n<strong>DataContextProperty </strong>using the <strong>InjectionProperty </strong>\r\nclass. Although, this values is resolved from the container this will only happen once, at the time of the registration, causing that each resolved instance of the view gets injected with the same instance of the\r\n<strong>VoucherViewModel</strong>.</p>\r\n<p>As an alternative I believe you could try registering your <strong>VoucherView\r\n</strong>for example like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>_container.RegisterType&lt;Object, VoucherView&gt;(VoucherViewModel.VoucherViewName,<br>&nbsp;<span style=\"color:blue\">new</span> TransientLifetimeManager(),\n <span style=\"color:blue\">new</span> InjectionProperty(VoucherView.DataContextProperty.Name));\n</pre>\r\n</div>\r\n<p>This way the value of the property will be resolved through the container, this is similar to the use of the\r\n<strong>Dependency </strong>attribute without further configuration to annotate the property.</p>\r\n<p>For more information about this, I believe you could check the following <strong>\r\nMSDN </strong>article:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff660882%28v=pandp.20%29.aspx\">Registering Injected Parameter and Property Values</a>\r\n</li></ul>\r\n<p>Also, for more information about the different approaches to use property injection with\r\n<strong>Unity</strong>, you could also check the <a href=\"http://unity.codeplex.com/\">\r\nUnity forums</a>.<br>\r\n<br>\r\nOn the other hand, regarding the use of the <strong>ServiceLocator</strong>, take into account that\r\n<strong>Prism </strong>uses the service locator to abstract from the use of an specific container. In the case you mentioned the service locator will end up resolving the instance from the corresponding container, that is\r\n<strong>Unity</strong>.</p>\r\n<p>For more information about the Service Locator you could check the following chapter of the\r\n<strong>Prism </strong>documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921140%28v=pandp.40%29#sec10\">Chapter 3: Managing Dependencies Between Components</a>\r\n</li></ul>\r\n<p>I hope you find this useful,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-08-30T09:37:29.6-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]