[
  {
    "Id": "595326",
    "ThreadId": "253409",
    "Html": "\r\n<p>I have created a custom region adaptor for a SilverLight Docking framework and am able to add Windows into said region adaptor via the RegionManager.RequestNavigate approach.</p>\r\n<p>I have two issues that I can&rsquo;t explain.</p>\r\n<p>The <strong>first issue</strong> is that when I attempt to remove the application I cannot locate the View by its name.</p>\r\n<p>This is how I add the View to the region which creates and displays my view without issue &hellip;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>RegionManager.RequestNavigate(ShellRegionIdentifiers.DockSite, <span style=\"color:blue\">new</span> Uri(<span style=\"color:#a31515\">&quot;OnHoldActionDialogView&quot;</span>, UriKind.Relative));\r\n</pre>\r\n<pre>&nbsp;</pre>\r\n<pre>Later on though, when I attempt to locate the view using this approach it returns a null &hellip;</pre>\r\n</div>\r\n<p><span style=\"color:blue; font-size:9.5pt\"></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> view = RegionManager.Regions[ShellRegionIdentifiers.DockSite].GetView(<span style=\"color:#a31515\">&quot;OnHoldActionDialogView&quot;</span>);\r\n\r\n&nbsp;<br></pre>\r\n</div>\r\n</span>\r\n<p>So instead I resorted to this approach which does find the View;</p>\r\n<p><span style=\"color:blue; font-size:9.5pt\">&nbsp;</span></p>\r\n<p><span style=\"font-size:9.5pt\"></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> view = RegionManager.Regions[ShellRegionIdentifiers.DockSite].ActiveViews.First(); \r\n</pre>\r\n</div>\r\n</span>\r\n<p></p>\r\n<p><span style=\"color:green; font-size:9.5pt\">&nbsp;</span></p>\r\n<p><span style=\"color:green; font-size:9.5pt\">&nbsp;</span></p>\r\n<p>This does get me the view but is not how I wish to leave my code, so&nbsp;why can&rsquo;t I access the View by Name since it opens OK, I would think that I should be able to access the view using the GetView. Within the Visual Studio debugger I am able to\r\n see the View is active. Any ideas?</p>\r\n<p>The <strong>second issue </strong>is using the view location approach of <span style=\"font-size:9.5pt\">\r\nRegionManager.Regions[<span style=\"color:#2b91af\">ShellRegionIdentifiers</span>.DockSite].ActiveViews.First()\r\n</span>to locate my view I get an exception with I call the remove method passing in the view &hellip;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:blue\">var</span> view = RegionManager.Regions[ShellRegionIdentifiers.DockSite].ActiveViews.First();\r\n\r\n <span style=\"color:blue\">if</span>(view != <span style=\"color:blue\">null</span>)\r\n\r\n   RegionManager.Regions[ShellRegionIdentifiers.DockSite].Remove(view);\r\n\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p><span style=\"font-size:9.5pt\">&nbsp;</span></p>\r\nThe interesting part of this is that as I mentioned, I am using my own Custom Region Adapter and when I call Remove it does call through my adapter and does remove the view from the Region. I can see that the exception copied below is actually calling the Remove\r\n twice. Why is that?\r\n<p></p>\r\n<p>&nbsp;&nbsp; <span style=\"font-size:8pt\">at Microsoft.Practices.Prism.Regions.Region.GetItemMetadataOrThrow(Object view)</span></p>\r\n<p><strong><span style=\"font-size:8pt\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Region.Remove(Object view)</span></strong></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.RegionMemberLifetimeBehavior.OnActiveViewsChanged(Object sender, NotifyCollectionChangedEventArgs e)</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at System.Collections.Specialized.NotifyCollectionChangedEventHandler.Invoke(Object sender, NotifyCollectionChangedEventArgs e)</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.ViewsCollection.OnCollectionChanged(NotifyCollectionChangedEventArgs e)</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.ViewsCollection.NotifyRemove(IList items, Int32 originalIndex)</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.ViewsCollection.RemoveFromFilteredList(Object item)</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.ViewsCollection.SourceCollectionChanged(Object sender, NotifyCollectionChangedEventArgs e)</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(NotifyCollectionChangedEventArgs e)</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(Int32 index)</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at System.Collections.ObjectModel.Collection`1.Remove(T item)</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; <strong>at Microsoft.Practices.Prism.Regions.Region.Remove(Object view)</strong></span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at AUBPOS.Assets.QPMControls.Tasks.ViewModel.TaskLogsViewModel.ResumeTaskLogCancel()</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at AUBPOS.Assets.QPMControls.Tasks.ViewCommands.ResumeTaskLogCancelCommand.Execute(Object parameter)</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at System.Windows.Controls.Primitives.ButtonBase.ExecuteCommand()</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at System.Windows.Controls.Primitives.ButtonBase.OnClick()</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at System.Windows.Controls.Button.OnClick()</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(MouseButtonEventArgs e)</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at System.Windows.Controls.Control.OnMouseLeftButtonUp(Control ctrl, EventArgs e)</span></p>\r\n<p><span style=\"font-size:8pt\">&nbsp;&nbsp; at MS.Internal.JoltHelper.FireEvent(IntPtr unmanagedObj, IntPtr unmanagedObjArgs, Int32 argsTypeIndex, Int32 actualArgsTypeIndex, String eventName)</span></p>\r\n<p></p>\r\n",
    "PostedDate": "2011-04-11T07:28:18.83-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "595340",
    "ThreadId": "253409",
    "Html": "<p>I just figured out the <strong>second issue</strong>.. I was implementing the IRegionMemberLifetime KeepAlive in my view but if I remove this interface I am able to remove and navigate back the view as many times as requested. Why is that?</p>\r\n<p><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">\r\n<p>&nbsp;</p>\r\n</span></span></p>",
    "PostedDate": "2011-04-11T07:40:07.813-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "595430",
    "ThreadId": "253409",
    "Html": "<p>Hi,</p>\n<p>The Uri you're specifying in the <strong>RequestNavigate</strong> method is used to determine the contract name that will be used when resolving the view, which in the default <strong>ContentLoader</strong> does not add the view with that name in to a region. It's worth noting that the name of a view inside a region isn't necessarily the same as the contract name it was used to export it.</p>\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-04-11T10:08:25.713-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "595455",
    "ThreadId": "253409",
    "Html": "<p>Hi,</p>\r\n<p>If I am following what you say, then using the default ContentLoader I am not able to retrieve a view by it's name.&nbsp;</p>\r\n<p>How do I get to a point where I can get back my view by name?</p>\r\n<p>ie.</p>\r\n<p><span style=\"color: blue;\">var</span> view = RegionManager.Regions[ShellRegionIdentifiers.DockSite].GetView(<span style=\"color: #a31515;\">\"OnHoldActionDialogView\"</span>);</p>\r\n<p>&nbsp;Do I need to implement my own custom content Loader?&nbsp; I looked at the PRISM developers guide and it shows how to over-ride the GetContractFromNavigationContext.... Is this what I need to implement and if so, how do I wire that into the MEF Bootstraper?</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">string</span> GetContractFromNavigationContext(NavigationContext\r\nnavigationContext)\r\n{\r\n<span style=\"color: blue;\">string</span> contract = <span style=\"color: blue;\">base</span>.GetContractFromNavigationContext(navigationContext);\r\n<span style=\"color: blue;\">...</span></pre>\r\n<pre><span style=\"color: blue;\">return</span> contract;\r\n}</pre>\r\n<pre>\r\n</pre>\r\n</div>\r\n<p><br />&nbsp;</p>",
    "PostedDate": "2011-04-11T10:51:00.83-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "595965",
    "ThreadId": "253409",
    "Html": "<p>Hi,<br /><br />As explained in this <a href=\"http://blogs.msdn.com/b/kashiffl/archive/2010/10/04/prism-v4-region-navigation-pipeline.aspx\">blog post</a> by Karl Shifflett, when performing the navigation request, the Navigation Service will attempt to locate the view in the region in which you're navigating to. If it can't find it, it will ask the ServiceLocator to find the view. This is done in the <strong>RegionNavigationContentLoader.LoadContent</strong> method, as shown in the code below:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">object</span> LoadContent(IRegion region, NavigationContext navigationContext)\r\n        {\r\n\r\n            (...)\r\n\r\n            view = <span style=\"color: blue;\">this</span>.CreateNewRegionItem(candidateTargetContract);\r\n\r\n            region.Add(view);\r\n\r\n            <span style=\"color: blue;\">return</span> view;\r\n        }\r\n</pre>\r\n</div>\r\n<p>If you'd like to add the view to the region with a name, you could create a custom <strong>IRegionNavigationContentLoader</strong> and change the <strong>LoadContent </strong>method so that the call to the <strong>IRegion.Add</strong> method looks like this:</p>\r\n<pre><div style=\"color: black; background-color: white;\"><pre><span style=\"color: blue;\">string</span> name = navigationContext.Uri.OriginalString;\r\nregion.Add(view, name, <span style=\"color: blue;\">false</span>);\r\n</pre>\r\n</div>\r\n</pre>\r\n<p>Also, if you have used the default MEF <strong>Export </strong>tag, which defines the <strong>PartCreationPolicy </strong>as <strong>CreationPolicy.Shared</strong>, or if you have registered your instance as a singleton (by using the <strong>RegisterInstance </strong>method, or passing a <strong>ContainerControlledLifetimeManager </strong>in the <strong>RegisterType </strong>method) in Unity, you can obtain a reference to the view you've navigated to by calling the <strong>ServiceLocator.GetInstance&lt;T&gt;</strong> method, as the instance retrieved by it will be the same that was injected to the view.</p>\r\n<p>You might find the following chapters from the Prism MSDN documentation useful:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921140%28PandP.40%29.aspx\">Chapter 3: Managing Dependencies Between Components</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg430861%28PandP.40%29.aspx\">Chapter 8: Navigation</a></li>\r\n</ul>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-04-12T07:19:30.393-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "905495",
    "ThreadId": "253409",
    "Html": "\r\n<p>I had same problem for closing views. I implemented following extension method:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">bool</span> RemoveViewByViewModel(<span style=\"color:blue\">this</span> IRegion region, <span style=\"color:blue\">object</span> viewModel)\n        {\n            <span style=\"color:blue\">var</span> view = region.Views.Cast&lt;FrameworkElement&gt;().SingleOrDefault(v =&gt; <span style=\"color:blue\">object</span>.ReferenceEquals(v.DataContext, viewModel));\n\n            <span style=\"color:blue\">if</span> (view == <span style=\"color:blue\">null</span>)\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">false</span>;\n\n            region.Remove(view);\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">true</span>;\n        }\n</pre>\r\n</div>\r\n<p>This method use&nbsp;<strong>ViewModel</strong> to identify views. :P</p>\r\n<p>Now everywhere in your ViewModel, if you want to close it's view, call it like this:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>_region.RemoveViewByViewModel(<span style=\"color:blue\">this</span>);\n</pre>\r\n</div>\r\nand your view will be closed. :)\r\n<p></p>\r\n",
    "PostedDate": "2012-08-29T00:30:31.79-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]