[
  {
    "Id": "1051373",
    "ThreadId": "445612",
    "Html": "Hello,\r<br />\nIn my current project I've run into an issue with the RegionManager where I needed to register views with regions, that didn't exist, at the time that the view is created. I tried using RegisterViewWithRegion, but that presented an issue when I wanted to associate multiple views with a region. So then I thought that the best way to approach this issue was to create the regions up front, before any of the wpf views are created, that way the regions would always exist when the views were added to a region. Then I would add the content controls to various views as needed.\r<br />\n<br />\nHowever, while I was able to get this to work, I don't like how I've accomplished this and I was wondering if I have missed a simpler way to accomplish this functionality. Here is my code:<br />\n<pre><code>    public class RegionState\n    {\n        public string strRegionName;\n        public string strActiveViewName;  // The name of the view that is currently in the region.\n        public ContentControl contentControl;   // The content control associated with this view.\n\n        public RegionState()\n        {\n            strRegionName = string.Empty;\n            strActiveViewName = string.Empty;\n            contentControl = new ContentControl();\n        }\n    }\n\n        // This function is located in a much larger class that is separate from the above RegionState class.\n        public void AddRegion(string strRegionName)\n        {\n            RegionState state = null;\n            // Add a new region state if one doesn't already exist.\n            lock (lk_dcRegions)\n            {\n                // Gets the state if it already exists.\n                state = GetUserControlState(strRegionName);\n                // If the manager doesn't exists.\n                if (state == null)\n                {\n                    state = new RegionState();\n                    state.strRegionName = strRegionName;\n                    dcRegions.Add(strRegionName, state);\n                }\n            }\n\n            // Then add the region to the region manager.\n            if (!regionManager.Regions.ContainsRegionWithName(strRegionName) &amp;&amp; state != null)\n            {\n                RegionManager.SetRegionName(state.contentControl, strRegionName);\n                RegionManager.SetRegionManager(state.contentControl, regionManager);\n\n                FieldInfo fieldUpdateRegionListeners = typeof(RegionManager).GetField(&quot;updatingRegionsListeners&quot;, BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);\n                Object oUpdateRegionListeners = fieldUpdateRegionListeners.GetValue(state.contentControl);\n                FieldInfo fieldListeners = oUpdateRegionListeners.GetType().GetField(&quot;listeners&quot;, BindingFlags.NonPublic | BindingFlags.Instance);\n                List&lt;DelegateReference&gt; lsDelgateEvents = (List&lt;DelegateReference&gt; )fieldListeners.GetValue(oUpdateRegionListeners);\n                DelegateReference dr = lsDelgateEvents.SingleOrDefault(e =&gt;\n                    {\n                        if (e.Target.Target is DelayedRegionCreationBehavior)\n                        {\n                            return ((DelayedRegionCreationBehavior)e.Target.Target).TargetElement == state.contentControl;\n                        }\n                        return false;\n                    });\n                ((DelayedRegionCreationBehavior)dr.Target.Target).Detach();\n                lsDelgateEvents.Remove(dr);\n\n                RegionAdapterMappings regionAdapterMappings = ServiceLocator.Current.GetInstance&lt;RegionAdapterMappings&gt;();\n                IRegion region = ccRegionAdapter.Initialize(state.contentControl, strRegionName);\n            }\n        }</code></pre>\n\nThank you for any assistance or suggestions.<br />\n",
    "PostedDate": "2013-05-31T14:03:27.973-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1052294",
    "ThreadId": "445612",
    "Html": "Hi,\r<br />\n<br />\nI have not reviewed your code in deep, but it seems to be a valid approach to address your scenario.\r<br />\n<br />\nPersonally, when I find a scenario where using the <strong>RegisterViewWithRegion</strong> option won't suffice, I first check if the region exists using the <strong>ContainsRegionWithName</strong> method of the <strong>Regions</strong> collection in the <strong>RegionManager</strong>. If it doesn't, I subscribe to the <strong>CollectionChanged</strong> event of the <strong>Regions</strong> property. Each time a <strong>Region</strong> is created and added to the <strong>RegionManager</strong> this event is fired. Hence, you can be notified when a <strong>Region</strong> is available through it and add the corresponding view in it. Perhaps this could also be encapsulated in a service in order to decouple the aforementioned logic from the view models.\r<br />\n<br />\nI hope this helps,\r<br />\n<br />\nDamian Cherubini\r<br />\n<a href=\"http://blogs.southworks.net/dcherubini\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini</a><br />\n",
    "PostedDate": "2013-06-03T11:45:46.387-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]