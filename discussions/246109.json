[
  {
    "Id": "566478",
    "ThreadId": "246109",
    "Html": "\r\n<p>For communication between modules, the event aggregator mechanism is well suited.</p>\r\n<p>However, I was wondering if it would be a good pattern to abstract this into a service, so that modules don't have to care about it, like for example putting the following ApplicationService in the Infrastructure project of a PRISM application:</p>\r\n<pre>    [<span>Export</span>(<span>typeof</span>(<span>IApplicationService</span>))]<br>&nbsp;&nbsp;&nbsp;&nbsp;[<span>PartCreationPolicy</span>(<span>CreationPolicy</span>.Shared)]<br>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span>&nbsp;<span>class</span>&nbsp;<span>ApplicationService</span>&nbsp;:&nbsp;<span>IApplicationService</span><br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span>&nbsp;<span>readonly</span>&nbsp;<span>IEventAggregator</span>&nbsp;_eventAggregator;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<span>ImportingConstructor</span>]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span>&nbsp;ApplicationService(<span>IEventAggregator</span>&nbsp;eventAggregator)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_eventAggregator&nbsp;=&nbsp;eventAggregator;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span>&nbsp;<span>int</span>&nbsp;_currentPatientId;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span>&nbsp;<span>int</span>&nbsp;CurrentPatientId<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>get</span>&nbsp;{&nbsp;<span>return</span>&nbsp;_currentPatientId;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>set</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_currentPatientId&nbsp;=&nbsp;<span>value</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_eventAggregator.GetEvent&lt;<span>PatientChangedEvent</span>&gt;().Publish(<span>value</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span>&nbsp;<span>void</span>&nbsp;OnCurrentPatientIdChanged(<span>Action</span>&lt;<span>int</span>&gt;&nbsp;action)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_eventAggregator.GetEvent&lt;<span>PatientChangedEvent</span>&gt;().Subscribe(action,&nbsp;<span>ThreadOption</span>.UIThread,&nbsp;<span>true</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;</pre>\r\n<p>If one module wants to set the current patient, it uses the ApplicationService:</p>\r\n<pre>applicationService.CurrentPatientId&nbsp;=&nbsp;5;<br></pre>\r\n<p>If another module wants to react on it:</p>\r\n<pre>applicationService.OnCurrentPatientIdChanged(patientId&nbsp;=&gt;&nbsp;{&nbsp;<span>/**&nbsp;Do&nbsp;something&nbsp;**/</span>&nbsp;});<br></pre>\r\n<p>So the modules are still unaware of each other, they only have a reference to the Infrastructure project. But they use the ApplicationService in an easy way without having to worry about event aggregator.</p>\r\n<p>Do you see problems with this approach?</p>\r\n<p>Thanks,<br>\r\nL&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-02-15T06:42:02.177-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "566551",
    "ThreadId": "246109",
    "Html": "<p>Hi,</p>\r\n<p>Based on my understanding, your approach doesn't seem to have any flaw that could pose a threat to your application design. The <strong>EventAggregator </strong>mechanism is useful to communicate between modules, but you don't necessarily have to use it directly. By abstracting it like you've done, you don't need to obtain a reference to the Event Aggregator on each module that needs to use it.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-02-15T08:45:06.89-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]