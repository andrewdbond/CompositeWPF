[
  {
    "Id": "1014444",
    "ThreadId": "436426",
    "Html": "Hi!<br />\n<br />\nNote: I've posted this thread also to Telerik's WPF forum but I thought that I'd would be appropriate to also post it here since I think I can get good support from you guys, hope you don't mind :)<br />\n<br />\nI'm using RadTabControl as a Prism region and Tab items are successfully created. I have a Shell window which has a RadTabControl. Can I somehow get the view/viewmodel of the selected TabItem (tab's content) when TabControl's selected item changes so that I could call a method of that view model (to send an event with current navigation service)?<br />\n<br />\nAll of this is because I'm using PRISM RegionNavigationService in the Shell's viewmodel and I want each tab to be able to publish their NavigationService via EventAggregator event when tab is selected.<br />\n<br />\nBackground: I'm creating a dashboard application that has navigation bar with back/forward buttons and I want to be able to navigate back/forward under each Tab which has a scoped region.<br />\n<br />\nNow I get this navigation service for a Tab when I navigate to it the first time (using NavigatedTo event) but I also need to get navigation service again when selecting tab later.<br />\n<br />\nOther ways of doing this are also accepted of course :)<br />\n<br />\nBr,<br />\n<br />\nKalle<br />\n",
    "PostedDate": "2013-03-13T02:29:42.16-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1014750",
    "ThreadId": "436426",
    "Html": "Hi Kalle,\r<br />\n<br />\nAs a possible approach, I believe you could take advantage of the region in the <strong>RadTabControl</strong> to react when the selected tab changes. The <strong>Region</strong> class has an <strong>ActiveViews</strong> collection containing the active views in the corresponding region. This collection exposes a <strong>CollectionChanged</strong> event to which you can subscribe to be notified of changes:<br />\n<pre><code>this.regionManager.Regions[&quot;TabRegion&quot;].ActiveViews.CollectionChanged += ActiveViews_CollectionChanged;</code></pre>\n\nBased on my understanding, the actives view in the region are in sync with the visible views in the control. Therefore, when a tab is selected in the <strong>TabControl</strong> the previous view will be removed from the <strong>ActiveViews</strong> and the selected one will be added to it (raising the <strong>CollectionChanged</strong> event). Using this, you can check if the new item added to the collection is the view of the subscribed view model (for example by checking the <strong>DataContext</strong> property) and then react accordingly. For example:<br />\n<pre><code>void ActiveViews_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)\n{\n    if (e.Action == NotifyCollectionChangedAction.Add)\n    {\n        foreach (var item in e.NewItems)\n        {\n            FrameworkElement view = item as FrameworkElement;\n            if (view != null &amp;&amp; view.DataContext == this)\n            {\n                // Do work\n            }\n        }\n    }   \n}</code></pre>\n\nI hope you find this useful,\r<br />\n<br />\nDamian Cherubini\r<br />\n<a href=\"http://blogs.southworks.net/dcherubini\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini</a><br />\n",
    "PostedDate": "2013-03-13T11:11:34.053-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1015035",
    "ThreadId": "436426",
    "Html": "Hi Damian,<br />\n<br />\nI'm not sure if I can use this in my case or maybe I didn't understand it completely but I try to describe my problem better (let me know if your suggestion should do the trick):<br />\n<br />\nThe TabItem in the TabRegion is DashboardTabView which has a ContentControl. Now, when I add the tabitem to TabRegion (using navigation) I also navigate another view (MissingMeasurementView) to it's TabContentRegion using scoped region manager:<br />\n<pre><code>            // Navigate to DashboardTabView with a title for the Tab item\n            this.regionManager.Regions[RegionNames.TabRegion].RequestNavigate(\n                new Uri(&quot;DashboardTabView?createRegionManagerScope=true&amp;title=&quot; + TitleText, UriKind.Relative),\n                (result) =&gt;\n                {\n                    // Get scoped region manager and use it to navigate to sub view\n                    var myRegionManager = result.ExtractRegionManager();\n                    myRegionManager.RequestNavigate(RegionNames.TabContentRegion, \n                        new Uri(&quot;MissingMeasurementView?view=1&quot;, UriKind.Relative)\n                        );\n                });</code></pre>\n\nAfter the Tab is opened I can see the MissingMeasurementView and from that view I can navigate to next view, for example, View2. And from View2 I can navigate back to MissingMeasurementView using Shell's navigation back button. This is all working nicely. I publish current navigationContext.NavigationService on each OnNavigatedTo event so that my application's Shell can offer Back/Forward navigation buttons.<br />\n<pre><code>        public override void OnNavigatedTo(NavigationContext navigationContext)\n        {\n            // get navigation service\n            NavigationService = navigationContext.NavigationService;\n\n            // Send event with Navigation service to handle back/forward navigation under this Tab\n            var dashboardEvent = this.eventAggregator.GetEvent&lt;DashboardOpenTabEvent&gt;();\n            DashboardTabOpenParams eventParams = new DashboardTabOpenParams();\n            eventParams.NavigationService = NavigationService;\n            dashboardEvent.Publish(eventParams);\n        }</code></pre>\n\nProblem that I'm facing with this is that if user changes selected Tab and creates another instance of this same Tab (DashboardTabView) the Shell does not get old Tab's navigation service anymore because OnNavigatedTo does not seem to trigger when I change selected Tab but only when I create the Tab and navigate inside the Tab. So basically navigation works only for the most recently created Tab.<br />\n<br />\nThat is why I wanted to somehow know which Tab is open and get that Tab's navigation service published via EventAggregator. One way that I came up with was to use TabItem's IsSelected property and bind it to a property in DashboardTabViewModel. In DashboardTabViewModel I could then send navigation service event in property's Setter but DashboardTabViewModel does not know about scoped region's navigation service. It only knows about TabControl's TabRegion navigation service which is not the one I want to use. I want to use TabContentRegion's navigation service which, I believe, is not available in DashboardTabViewModel.<br />\n<br />\nSo I would need to get scoped region's navigation service in DashboardTabViewModel to go with this IsSelected property binding approach.<br />\n<br />\nHope this makes more clear what I'm trying to accomplish.<br />\n",
    "PostedDate": "2013-03-13T23:58:09.77-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1015097",
    "ThreadId": "436426",
    "Html": "Hi!<br />\n<br />\nIt seems I was able to get it working after all using this IsSelected property binding approach :)<br />\n<br />\nI created a property IsTabSelected to DashboardTabViewModel and bind that to TabItem's IsSelected property and after that get the navigation service from scoped region manager only when IsTabSelected == true and publish it in an event. <br />\n<pre><code>        private bool bIsTabSelected;\n        public bool IsTabSelected\n        {\n            get { return bIsTabSelected; }\n            set\n            {\n                bIsTabSelected = value;\n                RaisePropertyChanged(&quot;IsTabSelected&quot;);\n                if(value == true)\n                    SendNavigationServiceEvent();\n            }\n        }\n\n        private void SendNavigationServiceEvent()\n        {\n            if (this.RegionManager == null) return;\n\n            // Send event with Navigation service to handle back/forward navigation under this Tab\n            var dashboardEvent = this.eventAggregator.GetEvent&lt;DashboardOpenTabEvent&gt;();\n            DashboardTabOpenParams eventParams = new DashboardTabOpenParams();\n            eventParams.NavigationService = this.RegionManager.Regions[RegionNames.TabContentRegion].NavigationService;\n            dashboardEvent.Publish(eventParams);\n        }</code></pre>\n\nI'm still open for other possible solutions for this but for now this is enough for me.<br />\n<br />\nBr,<br />\n<br />\nKalle<br />\n",
    "PostedDate": "2013-03-14T02:55:43.7-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]