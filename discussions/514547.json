[
  {
    "Id": "1184436",
    "ThreadId": "514547",
    "Html": "Hello,<br />\nI am using Prism 4.1.0.0, .NET 4.0 and MVVM pattern.<br />\nI am having a problem with a window that has three usercontrols.<br />\nWhen I close the window, the usercontrols are still alive (even though I have set IsNavigationTarget to return false (from INavigationAware) and KeepAlive return false to (from IRegionMemberLifeTime)).<br />\nSo I tried overriding the OnClosing event from my window, buth this also didn't work.<br />\nWhen I removed the view from the region I get an error:<br />\n&quot;The region does not contain the specified view.<br />\nParamtername: view&quot;<br />\n, when I deactivated the view they just stay alive and keep using up memory.<br />\nIs there a fix or work around for my problem?<br />\nTo be complete, this is what my Code looks like:<br />\nViewModel from one of my three UserControls: (most of my code filtered out, buth important one for this issue is still there)<br />\n<pre><code>public class OverzichtMeldingenViewModel : Catel.MVVM.ViewModelBase, IOverzichtMeldingenViewModel, INavigationAware, IRegionMemberLifetime\n{\n        private readonly IUnitOfWork uow;\n        private readonly IServiceLocator sl;\n\n        public OverzichtMeldingenViewModel(IServiceLocator servicelocator)\n        {\n            uow = new UnitOfWorkFactory();\n            sl = servicelocator;\n        }\n#region INavigationAware Members\n        public bool IsNavigationTarget(NavigationContext navigationContext)\n        {\n            return false;\n        }\n        \n        public void OnNavigatedFrom(NavigationContext navigationContext)\n        {\n            //do nothing\n        }\n        \n        public void OnNavigatedTo(NavigationContext navigationContext)\n        {\n            zoekMeldingen();\n        }\n        #endregion\n#region IRegionMemberLifetime Members\n        public bool KeepAlive\n        {\n            get { return false; }\n        }\n        #endregion\n}</code></pre>\n\nxaml from my parent Window:<br />\n<pre><code>&lt;Window x:Class=&quot;S20_Workflow_MvvM.WPF.ModuleMeldingenView&quot;\n        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n        xmlns:prism=&quot;clr-namespace:Microsoft.Practices.Prism.Regions;assembly=Microsoft.Practices.Prism&quot;\nTitle=&quot;Meldingen&quot;&gt;\n   &lt;Grid Name=&quot;gridRoot&quot;&gt;\n        &lt;Grid.RowDefinitions&gt;\n            &lt;RowDefinition Height=&quot;Auto&quot;/&gt;\n            &lt;RowDefinition Height=&quot;*&quot;/&gt;\n        &lt;/Grid.RowDefinitions&gt;\n        &lt;Grid.ColumnDefinitions&gt;\n            &lt;ColumnDefinition Width=&quot;Auto&quot;/&gt;\n            &lt;ColumnDefinition Width=&quot;*&quot;/&gt;\n        &lt;/Grid.ColumnDefinitions&gt;\n        &lt;ContentControl Grid.Row=&quot;0&quot; Grid.Column=&quot;1&quot; prism:RegionManager.RegionName=&quot;Workflow&quot;/&gt;\n        &lt;ContentControl Grid.Row=&quot;1&quot; Grid.Column=&quot;1&quot; prism:RegionManager.RegionName=&quot;OverzichtView&quot;/&gt;\n        &lt;ContentControl Grid.RowSpan=&quot;2&quot; Grid.Column=&quot;0&quot; prism:RegionManager.RegionName=&quot;NavigatieView&quot;/&gt;\n    &lt;/Grid&gt;\n&lt;/Window&gt;</code></pre>\n\ncode-behind from my window:<br />\n<pre><code>public partial class ModuleMeldingenView : Window\n    {\n        private IModuleMeldingenViewModel vm;\n        private IRegionManager rm;\n\n        public ModuleMeldingenView(IModuleMeldingenViewModel vm,IRegionManager rm)\n        {\n            InitializeComponent();\n            this.vm = vm;\n            DataContext = this.vm;\n            Closing += this.vm.afsluitenMelding;\n            Closing += Scherm_Closing;\n            this.rm = rm;\n        }\n\n        private void Scherm_Closing(object sender, System.ComponentModel.CancelEventArgs e)\n        {\n            List&lt;SchermSettings&gt; settings = null;\n            using (IUnitOfWork UnOfWo = new UnitOfWorkFactory())\n            {\n                var user = LoginClass.getInstance().HuidigeGebruiker;\n                if (user != null)\n                {\n                    var type = this.GetType().ToString();\n                    settings = UnOfWo.Repository&lt;SchermSettings&gt;().GetAll().Where(s =&gt; s.USER_ID == user.USER_ID &amp;&amp; s.Scherm.Equals(type)).ToList();\n\n                    if (settings != null &amp;&amp; settings.Any())\n                    {\n                        UnOfWo.Repository&lt;SchermSettings&gt;().GetAll().FirstOrDefault(s =&gt; s.USER_ID == user.USER_ID &amp;&amp; s.Scherm.Equals(type) &amp;&amp; s.Parameter.Equals(&quot;Height&quot;)).Waarde = this.Height.ToString();\n                        UnOfWo.Repository&lt;SchermSettings&gt;().GetAll().FirstOrDefault(s =&gt; s.USER_ID == user.USER_ID &amp;&amp; s.Scherm.Equals(type) &amp;&amp; s.Parameter.Equals(&quot;Width&quot;)).Waarde = this.Width.ToString();\n                        UnOfWo.Repository&lt;SchermSettings&gt;().GetAll().FirstOrDefault(s =&gt; s.USER_ID == user.USER_ID &amp;&amp; s.Scherm.Equals(type) &amp;&amp; s.Parameter.Equals(&quot;Left&quot;)).Waarde = this.Left.ToString();\n                        UnOfWo.Repository&lt;SchermSettings&gt;().GetAll().FirstOrDefault(s =&gt; s.USER_ID == user.USER_ID &amp;&amp; s.Scherm.Equals(type) &amp;&amp; s.Parameter.Equals(&quot;Top&quot;)).Waarde = this.Top.ToString();\n                        switch (this.WindowState)\n                        {\n                            case WindowState.Minimized:\n                                UnOfWo.Repository&lt;SchermSettings&gt;().GetAll().FirstOrDefault(s =&gt; s.USER_ID == user.USER_ID &amp;&amp; s.Scherm.Equals(type) &amp;&amp; s.Parameter.Equals(&quot;WindowState&quot;)).Waarde = &quot;Minimized&quot;;\n                                break;\n\n                            case WindowState.Maximized:\n                                UnOfWo.Repository&lt;SchermSettings&gt;().GetAll().FirstOrDefault(s =&gt; s.USER_ID == user.USER_ID &amp;&amp; s.Scherm.Equals(type) &amp;&amp; s.Parameter.Equals(&quot;WindowState&quot;)).Waarde = &quot;Maximized&quot;;\n                                break;\n\n                            default:\n                                UnOfWo.Repository&lt;SchermSettings&gt;().GetAll().FirstOrDefault(s =&gt; s.USER_ID == user.USER_ID &amp;&amp; s.Scherm.Equals(type) &amp;&amp; s.Parameter.Equals(&quot;WindowState&quot;)).Waarde = &quot;Normal&quot;;\n                                break;\n                        }\n                        UnOfWo.Save();\n                    }\n                }\n            }\n            Closing -= vm.afsluitenMelding;\n            Closing -= Scherm_Closing;\n        }\n\n        protected override void OnClosing(System.ComponentModel.CancelEventArgs e)\n        {\n            base.OnClosing(e);\n            var view = rm.Regions[&quot;Workflow&quot;].ActiveViews.FirstOrDefault();\n            if (view != null)\n            {\n                rm.Regions[&quot;Workflow&quot;].Deactivate(view);\n            }\n            view = rm.Regions[&quot;OverzichtView&quot;].ActiveViews.FirstOrDefault();\n            if (view != null)\n            {\n                rm.Regions[&quot;OverzichtView&quot;].Remove(view);\n            }\n            view = rm.Regions[&quot;NavigatieView&quot;].ActiveViews.FirstOrDefault();\n            if (view != null)\n            {\n                rm.Regions[&quot;NavigatieView&quot;].Deactivate(view);\n            }\n        }\n    }</code></pre>\n\nThanks in advance for the replies ;)<br />\n",
    "PostedDate": "2014-01-20T06:08:08.3-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1185110",
    "ThreadId": "514547",
    "Html": "Hello DSO, \r<br />\n<br />\nFirst, I would like to say that <strong>Prism</strong> uses a <strong>Garbage Collector</strong> in order to clear and control memory usage of the App. But it would not be possible for developers to know when the collector would run and free memory space like the user controls in this scenario. Therefore, I suggest you to perform some kind of performance test in order to verify this behavior or if there really is a memory leak.\r<br />\n<br />\nHowever, it may happen for the <strong>View</strong> to stay alive for the following reasons:<br />\n<h1></h1>\n<ul>\n<li>The <strong>Views</strong> are saved in the container as <strong>Singletons</strong>, so the container will hold an instance (the Singleton instance) of the <strong>Views</strong> as long as the container itself is kept alive.</li>\n<li>The related <strong>ViewModels</strong> are stored as <strong>Singletons</strong>, and the corresponding <strong>Views</strong> are <em>tight coupled</em> to them with an event subscription for example.</li>\n<li>\nIf using <strong>Interaction Requests</strong>, a strong reference to the <strong>View</strong> could be holded, as there is a <a href=\"https://compositewpf.codeplex.com/workitem/8532\" rel=\"nofollow\">known issue</a> where using <strong>Interaction Requests</strong> creates memory leaks, so the <strong>View</strong> is never destroyed.<br />\n</li>\n</ul>\nIf this does not solve your problem, it would be helpful if you could provide us with a repro-sample application portraying this problem, so we could get a better understanding of your scenario and help you find the cause behind this problem.\r<br />\n<br />\nI hope this helped you, \r<br />\nRegards.\r<br />\n<br />\nGabriel Ostrowsky\r<br />\n<a href=\"https://blogs.southworks.net/gostrowsky\" rel=\"nofollow\">https://blogs.southworks.net/gostrowsky</a><br />\n",
    "PostedDate": "2014-01-20T10:49:31.84-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1187300",
    "ThreadId": "514547",
    "Html": "Hello,<br />\nI know the Carbage Collectors works when it wants, buth I am using a memory profiler to see how maney instances of an object exists in my memory.<br />\nWith this profiler, I can also make the garbage collector do it's job (meaning cleaning up the unused objects).<br />\nButh when I close a window with 2 usercontrols inside, the windowinstance is closed buth the usercontrols stay alive.<br />\nI also made a small example : <a href=\"http://speedy.sh/cd9Vs/TestMemory.zip\" rel=\"nofollow\">TestMemory</a> .<br />\nWhen I click the button (press me) , a new window is opened with 2 usercontrols in it. When I close that window, the usercontrols stay alive.<br />\nIn my current application this means alot of wasted memory use since my viewmodels containt alot of objects.<br />\nIff you are wondering what I use, it's the Memory Profiler from Telerik 's JustTrace.<br />\n<br />\nThanks for the help in advance.<br />\n",
    "PostedDate": "2014-01-21T05:14:14.407-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1203127",
    "ThreadId": "514547",
    "Html": "Hi,\r<br />\n<br />\nI have checked your sample and reproduced the memory leak you are experiencing. I also saw that you are using a modified version of the <strong>DialogActivationBehavior</strong> of the <strong>StockTrader RI</strong> for this sample. As far as I know, this functionality was not prepared to be used in complex scenarios such as popup windows with multiple regions inside and in fact, the popup region doesn't event contains the default prism behaviors that the rest of the regions have as out of the box.\r<br />\n<br />\nThat being said, closing the popup window will not remove the views of the inner regions. You will need to do this manually.\r<br />\nIn the following folder you can find a modified version of your sample where the <strong>ParentViewModel</strong>, <strong>MainViewModel</strong> and <strong>NavigationViewModel</strong> are being garbage collected correctly:<br />\n<ul>\n<li>\n<a href=\"https://skydrive.live.com/redir?resid=99307B6105BC060D%21107\" rel=\"nofollow\">TestMemory_Modified</a><br />\n</li>\n</ul>\nThe main diferences you will find in this modified version are:<br />\n<ul>\n<li>I changed the <strong>DialogActivationBehavior</strong> to be more close to how the original behavior was. As a result, I also needed to convert the ParentView into a UserControl.</li>\n<li>The <strong>RegionPopupBehavior</strong> now populates the region with Prism's behaviors. This is to allow us to use funtionalities like IActiveAware and IRegionMemberLifetime.</li>\n<li>The <strong>ParentViewModel</strong> now implements IActiveAware and deactivates the inner views when it's deativated.</li>\n<li>\nAlso, I needed to make the <strong>MainViewModel</strong> inherit from Prism's NotificationObject. For some reason, inheriting from <strong>Catel's ViewModelBase</strong> was causing the view model to be kept alive.<br />\n</li>\n</ul>\nIn the sample you will also find a &quot;Check alive&quot; button. When clicked an event is fired and if any of the three view models mentioned above is alive, they should print a line in the Output window.\r<br />\n<br />\nI hope this helps,\r<br />\n<br />\nDamian Cherubini\r<br />\n<a href=\"http://blogs.southworks.net/dcherubini\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini</a><br />\n",
    "PostedDate": "2014-02-05T10:07:03.66-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]