[
  {
    "Id": "1096838",
    "ThreadId": "458516",
    "Html": "<pre><code>//ViewModel\n [Export(typeof(IRegisterDetailsViewModel))]\n    [PartCreationPolicy(CreationPolicy.NonShared)]\n    public class RegisterDetailsViewModel : PrincipalViewModelBase, IRegisterDetailsViewModel,IRegionMemberLifetime \n    {\n\n  Boolean IRegionMemberLifetime.KeepAlive\n        {\n            get\n            {\n                return false;\n            }\n        }\n}\n\n//View\n\n[Export(&quot;RegisterDetailsView&quot;, typeof(IRegisterDetailsView))]\n    [PartCreationPolicy(CreationPolicy.NonShared)]\n    public partial class RegisterDetailsView : UserControl, IRegisterDetailsView\n    {\n        [Import]\n        public IRegisterDetailsViewModel ViewModel\n        {\n            get\n            {\n                return this.DataContext as IRegisterDetailsViewModel;\n            }\n            set\n            {\n                DataContext = value;\n                ViewModel.View = this;\n            }\n        }\n\n}\n</code></pre>\n\nHi, <br />\n<br />\nActually When I am implementing the IRegionMemberLifetime for the above viewmodel and view, I am accessing the view in the viewmodel through this code &quot;<strong>ViewModel.View = this;</strong>&quot;<br />\n<br />\n<br />\nAt this scenario IRegionMemberlifetime is not working, the memory of above viewmodel and view remains in the application when it is in the deactivated state.<br />\n<br />\nCan any help me regarding this issue ?<br />\n<br />\n<br />\nThanks and regards,<br />\nSivalingam. <br />\n",
    "PostedDate": "2013-09-20T02:23:43.91-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1097094",
    "ThreadId": "458516",
    "Html": "Hi Sivalingam,\r<br />\n \r<br />\nIf I understood correctly, you want the <strong>View</strong> and <strong>ViewModel</strong> to be destroyed after deactivating it from the region. Although the <strong>KeepAlive</strong> property is needed to free and destroy the Object instance, it also needs the View to donâ€™t have any other strong reference to it.\r<br />\n<br />\nBasically, when a view / view model that implements the <strong>IRegionMemberLifetime</strong> interface is deactivated in a <strong>Region</strong> the <strong>RegionMemberLifetimeBehavior</strong> will check its <strong>KeepAlive</strong> property. If this property returns false, the behavior will automatically remove the view / view model from the <strong>Region</strong>, and as the <strong>Region</strong> will no longer hold a reference to the view / view model, it will be marked to be garbage collected unless another object of your application is holding a strong reference to it.\r<br />\n<br />\nTake into account that even if an object is marked to be garbage collected, it will remain in memory until the <strong>GC</strong> decides to run. What this means is that even if the views / view models are being properly marked to be garbage collected, they would be alive until the garbage collector passes through. You could invoke, however, the <strong>GC.Collect()</strong> method after deactivating the view / view model in order to detect whether the instances are erased or not (remember that the <strong>CG.Collect()</strong> method should only be used with testing purposes as its usage is not recommended in a common application).\r<br />\n<br />\nIf your instances are kept alive even after running the <strong>GC</strong>, it would be useful if you could provide us more information about any reference to the view / view model so we could go through the cause that is keeping them alive in the application.\r<br />\n \r<br />\nI hope this helps.\r<br />\n<br />\nGabriel Ostrowsky\r<br />\n<a href=\"http://blogs.southworks.net/gostrowsky\" rel=\"nofollow\">http://blogs.southworks.net/gostrowsky</a><br />\n",
    "PostedDate": "2013-09-20T10:13:58.253-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]