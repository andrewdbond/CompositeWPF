[
  {
    "Id": "143555",
    "ThreadId": "43197",
    "Html": "What is the differences between the following codes? #1 is not working and #2 is working fine . What is the difference? Why #1 is not working? <br>\r\n<br>\r\n#1. [NOT working]<br>\r\n<br>\r\nthis.eventAggregator.GetEvent&lt;CreatePossessEvent&gt;().Subscribe((accountId) =&gt; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var i = 1;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aa();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<br>\r\nprivate void aa() {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageBox.Show(&quot;d&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n#2. [Working]<br>\r\n<br>\r\nthis.eventAggregator.GetEvent&lt;CreatePossessEvent&gt;().Subscribe((accountId) =&gt; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageBox.Show(&quot;d&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });<br>\r\n<br>\r\n<br>\r\n<br>\r\nWhen I traced the code, I found this function in Prism. If I use #1, this.Action become null always. Why? <br>\r\n<br>\r\npublic virtual Action&lt;object[]&gt; GetExecutionStrategy()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>&nbsp; Action&lt;TPayload&gt; action = this.Action;</strong><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Predicate&lt;TPayload&gt; filter = this.Filter;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (action != null &amp;&amp; filter != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return arguments =&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TPayload argument = default(TPayload);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (arguments != null &amp;&amp; arguments.Length &gt; 0 &amp;&amp; arguments[0] != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; argument = (TPayload)arguments[0];<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (filter(argument))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InvokeAction(action, argument);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return null;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2008-12-30T10:03:07.157-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "143710",
    "ThreadId": "43197",
    "Html": "<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Hi</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">The possible cause you are getting that error could be that the object where you added the subscriber is being garbage collected. The difference between the two options could be caused by compiler optimizations in the different lambda expressions. The <b>Option #2</b> may use method inlining while the <b>Option #1</b> cannot be inlined because it’s calling other methods.</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Nevertheless, it is not very advisable to use lambda expressions with weak references. The reason is that using lambda expressions (or anonymous delegates) create different constructs depending on the expression. In some cases it creates nested classes, whose lifetime is separated from the one of the declaring object, so when using weak references, the subscriber could be still alive, but the nested class object may not be referenced, hence garbage collected.</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">You should consider using either:</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.75in\"><span><span style=\"font-family:calibri\">1.</span><span style=\"font:7pt 'times new roman'\">       </span></span><span style=\"font-family:calibri\">Strong references (by keeping the subscriber reference alive):</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 1.25in\"><span style=\"font-size:10pt;font-family:'courier new'\">this.eventAggregator.GetEvent&lt;CreatePossessEvent&gt;().Subscribe((accountId) =&gt; {</span></p>\r\n<p style=\"margin:0in 0in 0pt 1.25in\"><span style=\"font-size:10pt;font-family:'courier new'\">var i = 1;</span></p>\r\n<p style=\"margin:0in 0in 0pt 1.25in\"><span style=\"font-size:10pt;font-family:'courier new'\">aa();</span></p>\r\n<p style=\"margin:0in 0in 0pt 1.25in\"><span style=\"font-size:10pt;font-family:'courier new'\">}, <b>true</b>);</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 0.75in\"><span style=\"font-family:calibri\"><b>Note</b>: You should not forget to unsubscribe to the event if the object is short lived.</span></p>\r\n<p style=\"margin:0in 0in 0pt -0.25in\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 0.75in\"><span><span style=\"font-family:calibri\">2.</span><span style=\"font:7pt 'times new roman'\">       </span></span><span style=\"font-family:calibri\">Separated named method instead of lambda expressions, and still keep weak references:</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 1.25in\"><span style=\"font-size:10pt;font-family:'courier new'\">fundAddedEvent.Subscribe(aa);</span></p>\r\n<p style=\"margin:0in 0in 0pt 1.25in\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 1.25in\"><span style=\"font-size:10pt;font-family:'courier new'\">// ...</span></p>\r\n<p style=\"margin:0in 0in 0pt 1.25in\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 1.25in\"><span style=\"font-size:10pt;font-family:'courier new'\">private void aa(YourEventArg arge)</span></p>\r\n<p style=\"margin:0in 0in 0pt 1.25in\"><span style=\"font-size:10pt;font-family:'courier new'\">{        </span></p>\r\n<p style=\"margin:0in 0in 0pt 1.75in\"><span style=\"font-size:10pt;font-family:'courier new'\">MessageBox.Show(&quot;d&quot;);</span></p>\r\n<p style=\"margin:0in 0in 0pt 1.25in\"><span style=\"font-size:10pt;font-family:'courier new'\">}   </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Please let me know if this helps.</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Mariano Converti</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><a href=\"http://blogs.southworks.net/mconverti\"><span style=\"font-family:calibri\">http://blogs.southworks.net/mconverti</span></a> </p>\r\n",
    "PostedDate": "2008-12-31T06:48:12.657-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "154330",
    "ThreadId": "43197",
    "Html": "Hi<br>\r\n<br>\r\nActually I had the same problem with either option. Could it be that the Module on which the event is subscribed stopped being referenced after enumeration thus being collected by GC?<br>\r\n<br>\r\nIf I add the module to the container with RegisterInstance the problem is gone.<br>\r\n<br>\r\nRegard,<br>\r\nChristian.<br>\r\n",
    "PostedDate": "2009-02-04T09:59:23.337-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "154641",
    "ThreadId": "43197",
    "Html": "Hi,<br>\r\nIf that is the case, then yes. The CAL does not keep a reference to the instances of the initialized modules, so if you aren't either, they will get garbage-collected.<br>\r\nIf you want to keep the module from ever being GCed, you might want to subscribe to the event with the overload to keep the target object alive (option 1 in Mariano's answer).<br>\r\n<br>\r\nI hope this helps,<br>\r\nJulian Dominguez<br>\r\n<a href=\"http://blogs.southworks.net/jdominguez\">http://blogs.southworks.net/jdominguez</a> \r\n",
    "PostedDate": "2009-02-05T06:15:26.083-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "154811",
    "ThreadId": "43197",
    "Html": "Since we are talking about object lifetimes, <br>\r\n<br>\r\nWhat are the expectations on what we are supposed to do with messages?  I created a simple app to test the eventAggregator.  It has two subscribers to a single publisher.  One of the subscribers uses a lambda expression as a filter, the other uses a method in the subscribers class.  The event uses a DTO object I created which has 4 simple fields.<br>\r\n<br>\r\nThe publisher creates an instance of the DTO, and then publishes the eventtype&lt;DTO&gt;.  The subscribers get the message based on the filters and update simple textblocks in a view with data from the DTO.<br>\r\n<br>\r\nWhat is the lifetime of the DTO?  I assume it is alive until all of the subscribers have processed it and released any references they may have.  Does the EventAggregator hold any references to it?  What is the lifetime of the eventtype&lt;DTO&gt;  does it exist until all subscribers unsubscribe and the publisher does something?  <br>\r\n<br>\r\nThe reason I ask is that if I watch the process in the Task Manager, its mem usage continues to grow.  I assume that this is just free objects waiting on the garbage collector to run at some point.  And for some other process to request some space that causes this process to release unused memory.<br>\r\n<br>\r\nAll of the subscriptions are using strongly referenced delegates, and I am only subscribing in one place in the subscribed class.  <br>\r\n<br>\r\n<span style=\"font-size:13px\">\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px;color:#0000ff\">this</span><span style=\"font-size:13px\">.eventAgg.GetEvent&lt;</span><span style=\"font-size:13px;color:#2b91af\">SimpleEvent</span><span style=\"font-size:13px\">&gt;().Subscribe(OddArrived, </span><span style=\"font-size:13px;color:#2b91af\">ThreadOption</span><span style=\"font-size:13px\">.UIThread, </span><span style=\"font-size:13px;color:#0000ff\">true</span><span style=\"font-size:13px\">, oddMsgFilter);\r\n<p>&nbsp;</p>\r\n<p>and</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#008000\">\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<span style=\"font-size:13px\">\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px;color:#0000ff\">this</span><span style=\"font-size:13px\">.eventAgg.GetEvent&lt;</span><span style=\"font-size:13px;color:#2b91af\">SimpleEvent</span><span style=\"font-size:13px\">&gt;().Subscribe(EvenArrived, </span><span style=\"font-size:13px;color:#2b91af\">ThreadOption</span><span style=\"font-size:13px\">.UIThread, </span><span style=\"font-size:13px;color:#0000ff\">true</span><span style=\"font-size:13px\">, sed =&gt; sed.Field1 % 2 == 0);<br>\r\n<br>\r\nShould I be concerned about a memory leak? \r\n<p>&nbsp;</p>\r\n</span></p>\r\n",
    "PostedDate": "2009-02-05T12:46:24.45-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]