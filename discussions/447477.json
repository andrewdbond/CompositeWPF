[
  {
    "Id": "1058441",
    "ThreadId": "447477",
    "Html": "Hi,<br />\n<br />\nI am again stuck in scoped regions.  I am using Prism 4.1 with MEF and ViewModel-First approach.<br />\nI have a TabControl - regionName is set as &quot;TabRegion&quot; and I add a MainView (with nested regions in it) to my TabItem. <br />\n<br />\nThe structure looks like this:<br />\n<ul>\n<li>ShellView:</li>\n<li>* MenubarRegion</li>\n<li>* * MenubarView(Singleton)</li>\n<li>* TabRegion</li>\n<li>* * MainView(newviewforeverytabItem)</li>\n<li>* TopRegion</li>\n<li>\n<ul>\n<li>\n<ul>\n<li>\nChildView(newviewforeveryMainView)<br />\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\nShellView (Window):<br />\n<pre><code>&lt;DockPanel&gt;\n         &lt;ContentControl DockPanel.Dock=&quot;Top&quot; prism:RegionManager.RegionName=“MENUBAR_REGION“/&gt;\n        &lt;ContentControl DockPanel.Dock=&quot;Bottom&quot; prism:RegionManager.RegionName=&quot;TAB_REGION&quot;/&gt; \n  &lt;/DockPanel&gt;</code></pre>\n\nMainView: (UserControl in MainModule.dll)<br />\n<pre><code>    &lt;DockPanel &gt;\n         &lt;TextBlock Text=&quot;{Binding LocalRegionManagerHashCode}&quot; DockPanel.Dock=&quot;Top&quot; /&gt;\n         &lt;ContentControl prism:RegionManager.RegionName=“TOP_REGION“\n                           prism:ClearChildViewsRegionBehavior.ClearChildViews=&quot;True&quot;    DockPanel.Dock=&quot;Bottom&quot; \n                           prism:RegionManager.RegionManager=&quot;{Binding LocalRegionManager}&quot;/&gt;\n&lt;/DockPanel&gt;</code></pre>\n\nChildView: (UserControl in ChildModule.dll)<br />\n<pre><code>&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;\n                 &lt;TextBlock Text=“My Name: &quot; FontSize=&quot;32&quot;/&gt; \n                &lt;TextBlock Text=&quot;{Binding Name, Mode=OneWay}&quot; FontSize=&quot;32&quot; FontWeight=&quot;Bold&quot;/&gt; \n&lt;/StackPanel&gt;</code></pre>\n\nIn MainViewModel constructor: <br />\n[I can create MainView or Inject it using MEF DI container and I create a new scoped regionManager in the constructor].<br />\n<pre><code>globalRegionManager.Regions[“TAB_REGION”].Add(new MainView(),null true);</code></pre>\n\nI do not do anything in MainViewModule's Initilize() API.<br />\n<br />\nIn ChildView as UserControl<br />\n<pre><code>private static int count=0;\npublic ChildView(){\nInitializeComponent();\ncount++;\nthis.Name=“ChildView:”+count;\n}</code></pre>\n\n<strong>Scenario# 1:</strong><br />\n<br />\nIn ChildViewModule's Initilize():<br />\n<pre><code>globalRegionManager.RegisterViewWithRegion(“TOP_REGION”, GetViewType);\n\nprivate object GetViewType(){\nreturn   ServiceLocator.Current.GetInstance&lt;ChildViewModel&gt;().View;\n}\n</code></pre>\n\n<strong>Output: Working as Expected</strong><br />\n<br />\nWhenever I add a TabItem, new instances of MainView and ChildView are created and have the appropriate ScopedRegionManager property. Hence a new ChildView is shown in all tabItems (I ascertain this by the ChildView.Name, which is different in diff tabs).<br />\n<br />\n<strong>Scenario# 2:</strong><br />\n<br />\nIn ChildViewModule's Initilize(): empty<br />\nIn ChildViewModel constructor:<br />\n(Again, ChildView can be injected or created explicitly)<br />\n<pre><code>globalRegionManager.Regions[“TAB_REGION”].Add(new ChildView(),null true);</code></pre>\n\n<strong>Output: <strong>Failure</strong></strong><br />\n<br />\nWhenever I add a TabItem, new instances of MainView and ChildView are created, but when I switch from current tab to next tab, the new tab's scoped regionmanager somehow adds (in the TOP_REGION) previous tab's childView as well as its own childView, but the active view is previous tab's childView which is eventually displayed.<br />\n<br />\nThis removes the previous tab's childView from its TOP_REGION. Switching back to it would not display it again. And the new childView is no where displayed.<br />\n<br />\n<strong>Requirement:</strong><br />\n<br />\nWe are developing an application where we want to read the regionName and view initialization parameters from a config file, hence we want to register the ChildView through ChildViewModel where we have all the required information from the config rather than from Initialize().<br />\n<br />\n<strong>Question:</strong> <br />\n<br />\nOnly difference between these two approaches is that in scenario#1 I am using overriden Initialize() method to register the view with the region, whereas in scenario#2 I am registering the view in ChildViewModel's constructor (this is called whenever ChildViewModel is created, which happens for every tab).<br />\n<ul>\n<li>Is scenario#2 approach correct? If not, what is getting wrong here?</li>\n<li>\nHow can I dynamically add regions where contentcontrol with a region is not yet added to the visual tree.<br />\n</li>\n</ul>\nPlease let me know if I can provide more information.<br />\n<br />\nThanks,<br />\nRDV<br />\n",
    "PostedDate": "2013-06-18T15:41:14.893-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1058465",
    "ThreadId": "447477",
    "Html": "I understood my mistake in scenario # 2:<br />\n<pre><code>globalRegionManager.RegisterViewWithRegion(“TOP_REGION”, GetViewType);</code></pre>\n\nWill add the said view to the TOP_REGION everytime it is called, hence I am seeing the failure case.\r<br />\n<br />\nBut my requirement remains the same. I want to be able to dynamically add views to the regions where views are first initialized based on a config file.\r<br />\n<br />\nI realized I need View Injection and later View Activation in my ChildViewModel constructor:<br />\n<pre><code>            this.View=new ChildView(); //can get this object via DI Container as well.\n            regionName=getRegionNameFromConfigFile();\n            IRegion region = regionManager.Regions[regionName];\n            region.Add(this.View);\n            region.Activate(this.View);</code></pre>\n\nThe only problem with this approach is that it complains that regionName does not exists in the regionManager which is valid since DelayedRegionCreationBehaviour does not create the region unless the control is added to the visual tree.\r<br />\n<br />\nAs a workaround, I have created a DummyModule which has a DummyView and in DummyModule's ovveride Initialize() API:<br />\n<pre><code>regionManager.RegisterViewWithRegion(&quot;TOP_REGION&quot;, typeof(DummyView));</code></pre>\n\nThis ensures that TOP_REGION exists before view injection in ChildViewModel's constructor. Hence my issue is resolved.\r<br />\n<br />\nI am wondering what could be a better approach to do this? May be remove DelayedRegionCreationBehaviour? Anything else?\r<br />\n<br />\nThanks,\r<br />\nRDV<br />\n",
    "PostedDate": "2013-06-18T19:39:46.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1058839",
    "ThreadId": "447477",
    "Html": "Hi RDV,\r<br />\n<br />\nI'm glad you could find the cause behind your problem.\r<br />\n<br />\nA possible workaround to be able to inject the <strong>ChildView</strong> into the region is to wait for the region to be created before injecting the view. For example, in the constructor of the <strong>ChildViewModel</strong> you could check if the region was created or not (using the <strong>ContainsRegionWithName</strong> method of the region collection). If the region exists you just need to add and activate the view. If not, you can subscribe to the <strong>CollectionChanged</strong> event of the region collection in order to be notified when a region is created and then inject the view.\r<br />\n<br />\nI hope this helps,\r<br />\n<br />\nDamian Cherubini\r<br />\n<a href=\"http://blogs.southworks.net/dcherubini\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini</a><br />\n",
    "PostedDate": "2013-06-19T13:07:33.31-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]