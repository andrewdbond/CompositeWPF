[
  {
    "Id": "588875",
    "ThreadId": "251813",
    "Html": "\r\n<p>I am writing a &quot;Business&quot; UserControl. What this means is that it is a re-usable control that has to contact a server for data. The inputs for the control are properties set from xaml, the outputs for the control are dependency properties that the containing\r\n view can bind values to in xaml.</p>\r\n<p>I want the UserControl to be able to get references to the ExceptionHandlerService, DataService and it's own ViewModel via MEF Imports.</p>\r\n<p>i.e. the xaml file for my view would contain the line:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre style=\"color:black\"><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">uc</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">MyObjectSearch</span> <span style=\"color:red\">Searchstring1</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">objectname</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Searchstring2</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding ObjectMetaData}</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Object</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding SelectedObject}</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span></pre>\r\n</div>\r\n<p>(where ObjectMetaData and SelectedObject are properties the views ViewModel, Object is a DP on the UserControl which gets set after some user interaction with the control).</p>\r\n<p>However, this means that the object is constructed by XAML and so outside of the MEF container, which means none of the imports will be satisfied. What is the best solution for this?</p>\r\n<p>I have found one method that ports the CompositionInitializer for Silverlight MEF&nbsp;<a href=\"http://reedcopsey.com/2010/03/26/mef-compositioninitializer-for-wpf/\">http://reedcopsey.com/2010/03/26/mef-compositioninitializer-for-wpf/<br>\r\n</a>With this, you can call CompositionInitializer.SatisfyImports(this); after your&nbsp;InitializeComponent(); in your UserControl constructor and all property imports will be satisfied. (You also need a&nbsp;CompositionHost.Initialize(AggregateCatalog); in\r\n ConfigureAggregateCatalog in your bootstrapper.</p>\r\n<p>Another method is to use an attached property as described here:&nbsp;<a href=\"http://mef.codeplex.com/discussions/59576\">http://mef.codeplex.com/discussions/59576</a>&nbsp;where you can add a property to your xaml definition like so:</p>\r\n<p></p>\r\n<pre></pre>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">uc</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">MyObjectSearch</span> <span style=\"color:red\">Searchstring1</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">objectname</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Searchstring2</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding ObjectMetaData}</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Object</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding SelectedObject}</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">mef:Composition.Compose</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">True</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>But this method involves some magic in the App.xaml:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">mef</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Composition.Catalog</span><span style=\"color:blue\">&gt;</span>\r\n     <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">mef</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Catalogs</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">mef</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">AssemblyCatalog</span><span style=\"color:blue\">/&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">mef</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">DirectoryCatalog</span> <span style=\"color:red\">Directory</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">.\\Extensions</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n     <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">mef</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Catalogs</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">mef</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Composition.Catalog</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>And so i'm not really sure how this will fit into a prism scenario. If it does at all...</p>\r\n<p>Finally, in the previous post a MEF developer describes a method that they are planning on implementing so that you don't have to do anything and the MEF container will intercept xaml object constructions and inject where necessary. But there have been no\r\n replies since (I have posted to ask).</p>\r\n<p>So, what would you suggest for this? My plan is to use&nbsp;CompositionInitializer, but this isn't ideal as obviously I can't use contructor injection.</p>\r\n<p>Thoughts?</p>\r\n",
    "PostedDate": "2011-03-30T08:24:58.03-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588966",
    "ThreadId": "251813",
    "Html": "<p>Hi,</p>\r\n<p>In the context of the scenario you're describing, and based on my understanding, I would recommend to use <strong>CompositionInitializer</strong>, unless you can avoid adding the lines you've mentioned in the <strong>App.xaml</strong>. While adding the lines to the <strong>App.xaml</strong> that shouldn't cause problems with the use of MEF in Prism, it's not the usual way and could pose additional difficulties.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-03-30T10:48:42.137-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "589146",
    "ThreadId": "251813",
    "Html": "<p>Great to hear a \"thumbs up\" (much appreciated Guido), but I would definitely be interested in other ideas too. If anyone has an alternate way of solving my problem (I have hacked it in the past by injecting a \"control vm\" into the container and passing it to the control from the containers code-behind) then that would certainly be interesting.</p>",
    "PostedDate": "2011-03-30T15:42:06.15-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "595319",
    "ThreadId": "251813",
    "Html": "<p>The CompositionInitializer idea is not bad - but a bit too much code for an existing application.<br />I would just expose your MEF Container SatisfyImports method&nbsp;threw a static class&nbsp;(which you will need to&nbsp;init in your bootstrapper).</p>",
    "PostedDate": "2011-04-11T07:23:27.09-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "595355",
    "ThreadId": "251813",
    "Html": "<p>thebond: As I understand it, that is exactly what the&nbsp;CompositionHost/CompositionInitializer&nbsp;achieves. I think the advantage over doing this rather than writing your own static class is that you are following a pre-existing MEF pattern which could find it's way into the core MEF libraries.</p>\r\n<p>The link I gave provides a simple project that you can compile and include in your shell and any modules that need to use it (something you would have to do if you were writing your own static class anyway). The amount of code should be the same (one line to init in your bootstrapper and then a call to&nbsp;SatisfyImports wherever needed).</p>",
    "PostedDate": "2011-04-11T08:02:50.65-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]