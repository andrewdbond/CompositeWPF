[
  {
    "Id": "494514",
    "ThreadId": "227485",
    "Html": "<p>Hi</p>\r\n<p>Uing&nbsp;the blog post sample</p>\r\n<p><a href=\"http://blog.roboblob.com/2010/01/19/modal-dialogs-with-mvvm-and-silverlight-4/\">http://blog.roboblob.com/2010/01/19/modal-dialogs-with-mvvm-and-silverlight-4/</a></p>\r\n<p>I copied it an created a dialog service for my silverlight project and it all seems to work fine.&nbsp; My problem is I want to close some of my dialogs from the viewmodel ,&nbsp;which would&nbsp;entail&nbsp;using the event aggregator to publish an event to close childwinows in the viewmodel.&nbsp;&nbsp;When this event is published the&nbsp;Suscriber in the dialog service could then close the dialog</p>\r\n<p>the issue i am having is how do&nbsp;I create a delegate&nbsp;sub or function that passes the instance of the dialog&nbsp;that neesd to be closed in the function that intially showed the dialog.&nbsp; My&nbsp;code is below</p>\r\n<pre><span>Namespace</span><span> </span><span>SilverlightPlayground</span><span>.</span><span>DialogManagerService</span><span>.</span><span>Services</span><span>&nbsp;\r\n&nbsp; &nbsp; </span><span>Public</span><span> </span><span>Class</span><span> </span><span>DialogManager</span><span>&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; </span><span class=str>''' &lt;summary&gt;&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; '''</span><span> </span><span>Gets</span><span> </span><span>or</span><span> sets the aggregator</span><span>.</span><span>&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; </span><span class=str>''' &lt;/summary&gt;&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; '''</span><span> </span><span class=str>&lt;value&gt;</span><span>The</span><span> aggregator</span><span>.&lt;/</span><span>value</span><span>&gt;</span><span>&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; </span><span>Private</span><span> </span><span>ReadOnly</span><span> _eventAggregator </span><span>As</span><span> </span><span>IEventAggregator</span><span>&nbsp;\r\n&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; </span><span class=str>''' &lt;summary&gt;&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; '''</span><span> </span><span>Initializes</span><span> a </span><span>new</span><span> instance of the </span><span>&lt;</span><span>see cref</span><span>=</span><span class=str>&quot;DialogManager&quot;</span><span>/&gt;</span><span> </span><span>class</span><span>.</span><span>&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; </span><span class=str>''' &lt;/summary&gt;&nbsp;\r\n&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; Public Sub New()&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _eventAggregator = ServiceLocator.Current.GetInstance(Of IEventAggregator)()&nbsp;\r\n&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; '</span><span>register</span><span> the dialogs </span><span>as</span><span> agregatted events&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _eventAggregator</span><span>.</span><span>GetEvent</span><span>(</span><span>Of</span><span> </span><span>ErrorEvent</span><span>)().</span><span>Subscribe</span><span>(</span><span>AddressOf</span><span> </span><span>ShowErrorDialog</span><span>)</span><span>&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _eventAggregator</span><span>.</span><span>GetEvent</span><span>(</span><span>Of</span><span> </span><span>ConfirmRequestEvent</span><span>)().</span><span>Subscribe</span><span>(</span><span>AddressOf</span><span> </span><span>ShowConfirmDialog</span><span>)</span><span>&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _eventAggregator</span><span>.</span><span>GetEvent</span><span>(</span><span>Of</span><span> </span><span>ChooseColorEvent</span><span>)().</span><span>Subscribe</span><span>(</span><span>AddressOf</span><span> </span><span>ShowColorSelectorDialog</span><span>)</span><span>&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _eventAggregator</span><span>.</span><span>GetEvent</span><span>(</span><span>Of</span><span> </span><span>UploadPhotoRequestEvent</span><span>)().</span><span>Subscribe</span><span>(</span><span>AddressOf</span><span> </span><span>ShowPhotoUploadDialog</span><span>)</span><span>&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _eventAggregator</span><span>.</span><span>GetEvent</span><span>(</span><span>Of</span><span> </span><span>StatusEvent</span><span>)().</span><span>Subscribe</span><span>(</span><span>AddressOf</span><span> </span><span>ShowStatusDialog</span><span>)</span></pre>\r\n<pre><span>&nbsp;</span></pre>\r\n<pre><span>&nbsp; &nbsp; &nbsp; &nbsp; </span><span>End</span><span> </span><span>Sub</span><span>&nbsp;\r\n&nbsp;\r\n&nbsp; &nbsp; &nbsp;&nbsp;\r\n&nbsp;\r\n</span><span class=str>'here is my delegate&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; Private Delegate Sub ClosePhotoUploadDialogDelegate(ByVal myDialog As PhotoUploadDialog)&nbsp;\r\n&nbsp;\r\n&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; '''</span><span> </span><span class=str>&lt;summary&gt;</span><span>&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; </span><span class=str>''' Shows Upload photos dialog and passes the profileID as well to the viewmodel&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; '''</span><span> </span><span>&lt;</span><span class=str>/summary&gt;&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; ''' &lt;param name=&quot;StrProfileID&quot;&gt;The ProfileID.&lt;/</span><span>param</span><span>&gt;</span><span>&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; </span><span>Public</span><span> </span><span>Sub</span><span> </span><span>ShowPhotoUploadDialog</span><span>(</span><span>ByVal</span><span> </span><span>UploadPhoto</span><span> </span><span>As</span><span> </span><span>UploadPhoto</span><span>)</span><span>&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span>Dim</span><span> dialog </span><span>As</span><span> </span><span>New</span><span> </span><span>PhotoUploadDialog</span><span>()</span><span> &nbsp;</span><span class=str>'viewmodel is set in the dialaog &nbsp;\r\n&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dialog.ProfileID = UploadPhoto.ProfileID&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dialog.Show()&nbsp;\r\n&nbsp; &nbsp; &nbsp; &nbsp; End Sub&nbsp;\r\n&nbsp;\r\nEnd Namespace</span></pre>\r\n<p>I can post my&nbsp;the&nbsp;subscrition event is not listed&nbsp;since i cannot figure out to create a delegate for it that knows what dialog to close.</p>\r\n<p>&nbsp;</p>\r\n<p>c# code help is fine as well&nbsp; thanks in advance<br>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div>O lawal<br>Asp.net/Ajax Developer/Freelancer<br>Minneapolis Minnesota</div>",
    "PostedDate": "2010-09-16T08:32:57.66-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "495139",
    "ThreadId": "227485",
    "Html": "<p>Hi O lawal,</p>\r\n<p>I'm not sure what version of Prism you are using, so first of all in Prism v4  is using InteractionRequest and InteractionRequestTrigger for manipulating  dialog boxes. You can find more information in the CHM of the latest drop of  Prism:&nbsp;</p>\r\n<ul>\r\n<li>MVVM Advanced Scenarios (new), see<em> Interaction Request</em> section.&nbsp;</li>\r\n</ul>\r\n<p>Additionally, you could see how it works in the MVVM RI: <strong>&lt;Prismv4InstallationDirectory&gt;\\MVVM RI</strong></p>\r\n<p>The following steps can help you to implement your scenario based on the  aforementioned:</p>\r\n<ol>\r\n<li>Raise an InteractionRequest from the ViewModel. (code)</li>\r\n<li>Capture the request in the view via the InteractionRequestTrigger  (xaml)</li>\r\n<li>Write a CloseWindowAction that attaches to the window. (code)</li>\r\n<li>Call the CloseWindowAction from the InteractionRequestTrigger (xaml)</li>\r\n<li>The caller that initiated the dialog should subscribe to closed event and  clean up as needed. (code)</li>\r\n</ol>\r\n<p>&nbsp;</p>\r\n<p>On the other hand, if you are using a previous version of Prism the following pseudo-code might help with the solution that you  have implemented, you could use a similar code as&nbsp;is shown below  (<strong>important details in bold</strong>):</p>\r\n<p>public class ModalDialogService : IModalDialogService<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <strong>public Dictionary&lt;TDialogViewModel, IModalWindow&gt; activeDialogs =  new Dictionary&lt;TDialogViewModel, IModalWindow&gt;();</strong></p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void ShowDialog&lt;TDialogViewModel&gt;(IModalWindow view,  TDialogViewModel viewModel, Action&lt;TDialogViewModel&gt;  onDialogClose)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view.DataContext = viewModel;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if  (onDialogClose != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view.Closed += (sender, e)  =&gt; onDialogClose(viewModel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view.Show();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <strong>activeDialogs[viewModel] = view;</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public  void ShowDialog&lt;TDialogViewModel&gt;(IModalWindow view, TDialogViewModel  viewModel)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.ShowDialog(view, viewModel,  null);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void  CloseDialog&lt;TDialogViewModel&gt;(TDialogViewModel viewModel)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>activeDialogs[viewModel].Close();</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;<strong> public MyVM : TDialogViewModel<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  IModalDialogService modalService;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CloseView()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; modalService.CloseDialog(this);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;  }</strong></p>\r\n<p>Please let me know if this helps.</p>\r\n<p>Fernando Antivero <br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>",
    "PostedDate": "2010-09-17T11:28:24.77-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]