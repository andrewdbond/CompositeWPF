[
  {
    "Id": "280451",
    "ThreadId": "81672",
    "Html": "<p>Hi, I'm trying to inject an array of IProductModule (from which all of the modules in my application derive) without much success!&nbsp; I've got a ViewModel for my Shell Window which I'm trying to inject an array of IProductModule (which derives from IModule) in order to be able to bind to the screen as &quot;Module Buttons&quot; with their own events which are inherited from IProductModule.&nbsp; Below, I've pasted the code for my Bootstrapper (in order of execution) to give you an idea of what I'm doing (and perhaps not doing):</p>\r\n<div style=\"background-color:white;color:black\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Bootstrapper : UnityBootstrapper\r\n    {\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureContainer()\r\n        {\r\n            Container.RegisterType&lt;IProductModule[]&gt;();\r\n\r\n            <span style=\"color:blue\">base</span>.ConfigureContainer();\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> IModuleCatalog GetModuleCatalog()\r\n        {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> ModuleCatalog()\r\n                .AddModule(<span style=\"color:blue\">typeof</span>(ProductAModule));\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> DependencyObject CreateShell()\r\n        {\r\n            <span style=\"color:blue\">var</span> view = Container.Resolve&lt;ShellView&gt;();\r\n            <span style=\"color:blue\">var</span> viewModel = Container.Resolve&lt;ShellViewModel&gt;();\r\n\r\n            view.DataContext = viewModel;\r\n            view.Show();\r\n\r\n            <span style=\"color:blue\">return</span> view;\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>The following code shows my ShellViewModel's constructor.&nbsp; It's here that I'm attempting to inject the array of IProductModules, however, they never get injected.&nbsp; (I'm not suprised as I'm never actually doing anything special to populate them other than my populating the ModuleCatalog).&nbsp; Is there something that can be done to map my IProductModules into an array which can be injected into my ShellViewModel without having to create or initialize the modules twice?</p>\r\n<div style=\"background-color:white;color:black\">\r\n<pre><span style=\"color:blue\">    public</span> <span style=\"color:blue\">class</span> ShellViewModel : ViewModelBase\r\n    {\r\n        <span style=\"color:blue\">public</span> IProductModule[] Modules { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n        <span style=\"color:blue\">public</span> ShellViewModel(IProductModule[] modules)\r\n        {\r\n            Modules = modules;\r\n        }\r\n    }</pre>\r\n</div>\r\n<p>Many thanks for reading and sorry for potentially asking something thats <em>very</em> easy to solve!!</p>\r\n<p>Rob</p>",
    "PostedDate": "2010-01-22T01:36:55.537-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "280729",
    "ThreadId": "81672",
    "Html": "<p id=13e6af10-e99f-012c-99b1-1231390c8271>Hi Rob,</p>\r\n<p id=13e6bcd0-e99f-012c-99b2-1231390c8271>In the code above you are using the following line to register the IProductModule array:</p>\r\n<p id=13e6d930-e99f-012c-99b4-1231390c8271><span style=\"font-family:Consolas;font-size:x-small\">\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span>Container.RegisterType&lt;IProductModule[]&gt;();\r\n</span></pre>\r\n</div>\r\n</span>However, the line above is not mapped to any particular implementation, as the <a href=\"http://msdn.microsoft.com/en-us/library/dd203172.aspx\">RegisterType method is used to provide a type mapping usually between an interface an one of its implementations</a>. You can check the <strong>RegisterTypeIfMissing</strong> in the <strong>UnityBootstrapper</strong> to see how it works.</p>\r\n<p id=13e6e810-e99f-012c-99b5-1231390c8271>What you need to do is create an instance of IProductModule[] (and fill it with the instances that implement IProductModule), and <a href=\"http://msdn.microsoft.com/en-us/library/dd203134.aspx\">register that instance in the container</a>. A very simple example is shown below:</p>\r\n<p id=13e70810-e99f-012c-99b7-1231390c8271><span style=\"font-family:Consolas;font-size:x-small\">\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span>IProductModule[] modules = <span style=\"color:Blue\">new</span> IProductModule[] { productModuleInstance1, productModuleInstance2, &hellip;};\r\ncontainer.RegisterInstance&lt;IProductModule[]&gt;(modules);\r\n</span></pre>\r\n</div>\r\n</span>Take into account that each of the <strong>IProductModule</strong> instances (which I assume) implements <strong>IModule</strong> belong to different modules, placing them in a single array might be breaking your modules decoupling.</p>\r\n<p id=13e718a0-e99f-012c-99b8-1231390c8271>To check how to &ldquo;translate&rdquo; from <strong>ModuleInfo</strong> to <strong>IModule</strong> instances you can check the <strong>ModuleInitializer</strong> class in the Microsoft.Practices.Composite assembly. If you want to access the <strong>ModuleInfo</strong> of all your modules, you can get the <strong>IModuleCatalog</strong> instance of your application injected and use its Modules property (<strong>IEnumerable&lt;ModuleInfo&gt;</strong>).</p>\r\n<p id=13e72990-e99f-012c-99b9-1231390c8271>Please let me know if this helps.</p>\r\n<p id=13e73a50-e99f-012c-99ba-1231390c8271>Damian Schenkelman    <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2010-01-22T12:55:43.493-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "281299",
    "ThreadId": "81672",
    "Html": "<p>Hey Damian,</p>\r\n<p>I've posted my solution as &quot;answered&quot; on Stack Overflow but someone's informed me that the solution (which I'm using and happy with) is creating each module twice, once for my IProductModule collection and once for the IModuleCatalog.&nbsp; Is there a method you could suggest which would not require the double-creation of my IProductModules but would still allow me to use buttons as a menu for the modules?</p>\r\n<p>Many thanks (and apologies to bother you again!)</p>\r\n<p>&nbsp;</p>\r\n<p>Rob</p>",
    "PostedDate": "2010-01-25T01:47:32.33-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]