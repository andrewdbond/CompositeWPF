[
  {
    "Id": "653811",
    "ThreadId": "268049",
    "Html": "\r\n<p>Hi everyone,</p>\r\n<p>Due some issues I am experiencing I would like to convert Unity to MEF. I have been quite successful so far but got stuck with one case.</p>\r\n<p>How to obtain an instance from the Container when I am still in the MefBootStrapper?</p>\r\n<p>According to this <a href=\"http://blogs.msdn.com/b/bobbrum/archive/2010/11/22/prism-4-in-silverlight-with-mef-compositioninitializer.aspx\">\r\nwebsite</a>, I have to point&nbsp;CompositionInitializer's and PRISM's container first together:</p>\r\n<p><em>Under the covers, the CompositionInitializer is creating its own container and making it available through the CompositionInitializer static interface.&nbsp; Since Prism also creates it&rsquo;s own composition container, both Prism and the CompositionInitializer\r\n static interfaces need to point to the same container to be able to work together well.&nbsp;&nbsp;&nbsp;<span>You can setup this connection in Prism bootstrapper you create for</span>&nbsp;your app by calling CompositionHost.Initialize.&nbsp; This initializes\r\n the CompositionHost with the container that Prism uses of instead of creating a new one.&nbsp; Perhaps the easiest place to do this in the CreateContainer override of your Prism application bootstrapper:</em></p>\r\n<p>&nbsp;</p>\r\n<p><strong>bootstrapper:</strong></p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> CompositionContainer CreateContainer()\r\n{\r\n            <span style=\"color:blue\">var</span> container = <span style=\"color:blue\">base</span>.CreateContainer();\r\n\r\n            <span style=\"color:green\">// Initialize the CompositionHost so we can use CompositionInitializer</span>\r\n            CompositionHost.Initialize(container);\r\n            <span style=\"color:blue\">return</span> container;\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>In the shared Infrastructure project I have this:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Export(<span style=\"color:blue\">typeof</span>(ILookups))]\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Lookups : ILookups\r\n{ .. }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Within Bootstrapper I have also these:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Import(<span style=\"color:blue\">typeof</span>(ILookups))]\r\n<span style=\"color:blue\">public</span> ILookups Lookups { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>And I override my Run like this:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Run(<span style=\"color:blue\">bool</span> runWithDefaultConfiguration)\r\n        {\r\n            <span style=\"color:blue\">#region</span> MEF\r\n\r\n            <span style=\"color:blue\">this</span>.Logger = <span style=\"color:blue\">this</span>.CreateLogger();\r\n            <span style=\"color:blue\">this</span>.ModuleCatalog = <span style=\"color:blue\">this</span>.CreateModuleCatalog();\r\n            <span style=\"color:blue\">this</span>.ConfigureModuleCatalog();\r\n            <span style=\"color:blue\">this</span>.AggregateCatalog = <span style=\"color:blue\">this</span>.CreateAggregateCatalog();\r\n            <span style=\"color:blue\">this</span>.ConfigureAggregateCatalog();\r\n            <span style=\"color:blue\">this</span>.RegisterDefaultTypesIfMissing();\r\n            <span style=\"color:blue\">this</span>.Container = <span style=\"color:blue\">this</span>.CreateContainer();\r\n            <span style=\"color:blue\">this</span>.ConfigureContainer();\r\n            <span style=\"color:blue\">this</span>.ConfigureServiceLocator();\r\n            <span style=\"color:blue\">this</span>.ConfigureRegionAdapterMappings();\r\n            <span style=\"color:blue\">this</span>.ConfigureDefaultRegionBehaviors();\r\n            <span style=\"color:blue\">this</span>.RegisterFrameworkExceptionTypes();\r\n            \r\n            <span style=\"color:blue\">#endregion</span>\r\n            <span style=\"color:green\">//CompositionInitializer.SatisfyImports(this);</span>\r\n            Lookups = <span style=\"color:blue\">this</span>.Container.GetExportedValue&lt;ILookups&gt;();\r\n            Lookups.NotifyLookupsLoadedEvent &#43;= RunLater;\r\n            Lookups.LoadData();\r\n            \r\n        }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Either</p>\r\n<pre><span>CompositionInitializer.SatisfyImports(this);</span></pre>\r\n<pre><span>or</span></pre>\r\n<pre><span><pre>Lookups = <span>this</span>.Container.GetExportedValue&lt;ILookups&gt;();</pre>\r\ncrash on me with the error message:<br><br><br><strong>&nbsp;No valid exports were found that match the constraint '((exportDefinition.ContractName == &quot;SalesContactManagement.Infrastructure.Proxy.ILookups&quot;) AndAlso (exportDefinition.Metadata.ContainsKey(&quot;ExportTypeIdentity&quot;) And</strong><br><strong>Also &quot;SalesContactManagement.Infrastructure.Proxy.ILookups&quot;.Equals(exportDefinition.Metadata.get_Item(&quot;ExportTypeIdentity&quot;))))', invalid exports may have been rejected.</strong></span></pre>\r\n<p>&nbsp;</p>\r\n<p>What shall I do? &nbsp;Please advice,</p>\r\n<p>Many Thanks,</p>\r\n<p>Houman</p>\r\n",
    "PostedDate": "2011-08-06T11:33:03.99-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "654377",
    "ThreadId": "268049",
    "Html": "<p><strong>UPDATE:</strong>:</p>\r\n<p>Using MEF at first is not easy. &nbsp;And I hardly can post the answer here what needed to be done.</p>\r\n<p>The problem is whenever down the hierarchy a type is rejected the whole chain up to the module discovery is affected too. hence the whole module is rejected and it looks like it was not even found.(Misleading)</p>\r\n<p>The only tip I have for people who might have the same problem is to comment everything in Initialize() within the modules and keep them simple.</p>\r\n<p>Run the app and see if it hits those initialze() without breaking. &nbsp;</p>\r\n<p>Then step by step try adding the first [Import] dependency on the first module. If it breaks, it means that that type has also a sub-dependency that got rejected. Go into that class and see if it imports anything.</p>\r\n<p>If it does, comment it out temporarily and see if the App is runable. If it does, you know where to continue.</p>\r\n<p>Taking these baby steps is the only way making a successful conversion from Unity to MEF.</p>\r\n<p>&nbsp;</p>\r\n<p>Good luck,</p>\r\n<p>Houman</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-08-08T02:27:34.583-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]