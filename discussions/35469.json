[
  {
    "Id": "117881",
    "ThreadId": "35469",
    "Html": "hi.<br>\r\n<br>\r\nWe have a main ribbon control that is injected into a region in the main shell.&nbsp; One of the buttons is&nbsp;create.&nbsp; Whether the create button&nbsp;is enabled or disabled depends on the active view.&nbsp; The views are in separate modules that are injected into another region of the shell.&nbsp; What is the best way to communicate up and down the tree?&nbsp; I was planning on using an event aggregator to indicate the create button was pressed and having the view subscribe, but that still leaves whether the button is enabled based on the active view.&nbsp; Any suggestions?<br>\r\n<br>\r\nThanks\r\n",
    "PostedDate": "2008-09-11T09:37:06.017-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "118219",
    "ThreadId": "35469",
    "Html": "Hi John,<br>\r\n<br>\r\nIn your case I would use commands. Just attach a command to each of your buttons, and provide each presenter with the logic to enable/disable the command.<br>\r\n<br>\r\nAnother solution, manage a state of the active views in your common/infrastructure project, and create a binding between the Button.IsEnabled property and the views state. You can also use a Value Converter to decide what value to return.<br>\r\n<br>\r\nBest Regards,<br>\r\n<br>\r\nTomer Shamam<br>\r\n<br>\r\n",
    "PostedDate": "2008-09-12T13:32:40.863-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "119202",
    "ThreadId": "35469",
    "Html": "As Deepforest mentioned, it would be alot easier to use commands, even more so with DelegateCommands, as defined by the CAL.&nbsp; In my case, I created a command service that exposes numerous methods for creation of regular and delegate commands. all deriving from the ICommand interface.&nbsp; I then register my command service with UnityContainer<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-09-17T12:25:27.373-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "119404",
    "ThreadId": "35469",
    "Html": "\r\n<br>That's a nice idea.  Do you have any code you might be willing to share?<br>\r\n<hr>\r\nFrom: notifications@codeplex.com<br>To: wbagel6264@msn.com<br>Date: Wed, 17 Sep 2008 12:25:36 -0700<br>Subject: Re: Main Ribbon Control Communication [CompositeWPF:35469]<br><br>\r\n\r\n\r\n.ExternalClass\r\n{font-family:Verdana;font-size:0.75em;}\r\n.ExternalClass #EC_ThreadNotificationFooter\r\n{border-top:1px solid #ccc;color:gray;}\r\n.ExternalClass #EC_ThreadNotificationPostBody\r\n{margin-bottom:2em;}\r\n\r\n\r\n\r\n.ExternalClass\r\n{font-family:Verdana;font-size:0.75em;}\r\n.ExternalClass #EC_ThreadNotificationFooter\r\n{color:gray;border-top:1px solid #ccc;}\r\n.ExternalClass #EC_ThreadNotificationPostBody\r\n{margin-bottom:2em;}\r\n\r\n\r\nFrom: makaveli_0000<br>\r\n<div id=\"EC_ThreadNotificationPostBody\">As Deepforest mentioned, it would be alot easier to use commands, even more so with DelegateCommands, as defined by the CAL.  In my case, I created a command service that exposes numerous methods for creation of regular and delegate commands. all deriving from the ICommand interface.  I then register my command service with UnityContainer<br><br><br></div>\r\n<div id=\"EC_ThreadNotificationFooter\">\r\nRead the <a href=\"http://www.codeplex.com/CompositeWPF/Thread/View.aspx?ThreadId=35469&ANCHOR#Post119202\">full discussion online</a>.<br>\r\nTo add a post to this discussion, reply to this email (<a href=\"mailto:CompositeWPF@discussions.codeplex.com?subject=[CompositeWPF:35469]\">CompositeWPF@discussions.codeplex.com</a>)<br>\r\nTo start a new discussion for this project, email <a href=\"mailto:CompositeWPF@discussions.codeplex.com\">CompositeWPF@discussions.codeplex.com</a><br>\r\nYou are receiving this email because you subscribed to this discussion on CodePlex. You can <a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/35469\">unsubscribe</a> on codePlex.com.<br>\r\nPlease note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at codeplex.com<br></div>",
    "PostedDate": "2008-09-18T09:46:10.45-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]