[
  {
    "Id": "112616",
    "ThreadId": "33986",
    "Html": "Composite WPF is great and works well for WPF. It seems CAB is dead (or at least nothing new is happening on it and as far as I know, nothing is planned). I think the concepts of how Composite WPF work can be carried over to WinForms. <br>\r\n<br>\r\nSo the question is, is there a plan to revamp Composite WinForms and combining it with WPF or something so we're not forced down a single path for building composite applications? I mean, yes, WPF is a different programming model but like I said, you can take some of the concepts (for example using PresentationModel vs. MVP) and carry them over to WinForms. You could build a &quot;better&quot; CAB for WinForms using some of the principals that Prism uses.<br>\r\n<br>\r\nI just feel in a bit of a lurch since it's wonderful and great using this project for WPF, but you can't use WPF for everything and frankly, it's a hard sell to build business apps using WPF when there's no real special UI needed. Yes, you can pull off a business looking app with WPF (like the Outlook UI clone) and WPF isn't all about the UI. However in discussions with managers, they're focused on the UI and see a few issues using WPF for business apps. Namely a) WPF apps generally *look* like Web 2.0 apps and are more suited to that type of look and feel b) To get some really good looking WPF apps you need to employ a designer and use additional tools (Expression Blend) and c) from a business perspective, WPF apps can look different and are a bit of a hard sell to users who are used to the traditional WinForms look and feel.<br>\r\n<br>\r\nLooking for a discussion on this. I think the framework here is great, but I personally am having a hard time selling WPF and frankly I'm doubtful myself it should be used for business apps (unless the app lends itself well to a visual paradigm) and would like to open a conversation on this. What do we do? Have two paths for building apps (or three if you count web). RYO for WinForms since CAB has it's own set of problems and this project for WPF? Lots of questions in my head but no real answers.\r\n",
    "PostedDate": "2008-08-21T05:22:12.86-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "112678",
    "ThreadId": "33986",
    "Html": "I think you'll find that CAB is not dead (and probably won't be as long as people are still building Winform apps). It might seem that way but the truth is that the framework is close to being complete (and bloated :D) and therefore there isn't much current development activity there. I have used CAB with great success in the past and would definitely still be using it if I was building Winform Apps.<br>\r\n<br>\r\nStick with SCSF/CAB if you want to build a composite client using Winforms. It even has WPF support built in so you can &quot;sneak&quot; a few wpf components in. <br>\r\n",
    "PostedDate": "2008-08-21T08:48:22.757-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "112751",
    "ThreadId": "33986",
    "Html": "<p>[bsimser] looking for a discussion on this.<br>\r\n<br>\r\nI remember in the Foxpro days (we were the orphans), the VB guys had a big playing field (resources) while we had to play in a small box.&nbsp;&nbsp; It was during one of the Foxpro conferences, that we&nbsp;attended every year, that the red flag was raised; .NET was a big topic&nbsp;(in 2003) so I jumped on the C# .NET wagon - I was tired of being an orphan....&nbsp;&nbsp;Imagine my surprise when Microsoft threw it's poster child (VB)&nbsp;off the cliff while Foxpro (which I haven't developed in&nbsp;for years)&nbsp;is still being supported - I can still get it on my MSDN subscription...&nbsp;&nbsp;&nbsp;Microsoft has been burning bridges&nbsp;lately,&nbsp;some times while I'm still on it, i.e. Visio for architects was abandoned for VS2008 and&nbsp; Notification Services for SQL Server 2008 doesn't exists.&nbsp;In 5 years I saw a lot go away (rightfully so); WPF is amazing and when the tools and IDEs are there methinks Winforms will be going on a stroll with Microsoft to the cliff's edge.&nbsp; Odd thing is...&nbsp; LINQ looks a lot like Foxpro&nbsp;;)<br>\r\n<br>\r\nThat is my humble opinion - here is one from a guy who carries far more weight than I do :)<br>\r\n<br>\r\nGlen Block <a href=\"http://blogs.msdn.com/gblock/archive/2007/10/26/wpf-composite-client-guidance-it-s-coming.aspx\">wrote the following </a>when he was&nbsp;part of&nbsp;the P&amp;P team - I found it somewhat reassuring since I had the same impression of SCSF/CAB over a year ago (that it would be dead soon), particularly since it was practically retired with the emergence of Acropolis (and revived when Acropolis folded):<br>\r\n<br>\r\n<br>\r\n<em>4. <strong>Win Forms is not dead. </strong>I've actually had emails from customers saying that Win Forms was being retired this year . This myth must be dispelled. Win Forms&nbsp; is very much alive and there are future investments in Win Forms yet to come. <strong>Win Forms is the recommended breadth solution for LOB application development for the foreseeable future. </strong></em></p>\r\n<p><strong><em></em></strong></p>\r\n<h1><em>What about Migration?</em></h1>\r\n<p><em>I am sure there many who are reading this post and thinking &quot;I need to migrate&nbsp; my existing application to WPF&quot;. </em></p>\r\n<p><em>My first instinct is to ask&nbsp; &quot;Why?&quot;&nbsp; Honestly. I see so many developers moving to WPF&nbsp; for no better reason than that it is the new thing.&nbsp; They are unable to articulate a business need.&nbsp; </em></p>\r\n<p><em>Many&nbsp; developers believe they can take their Win Form development skills into WPF and have a similar development experience with the added benefit of much richer animations, styling, etc.&nbsp; It is not that easy in our experience. We&nbsp; strongly advise that you invest a significant evaluation effort before you commit down&nbsp; this path.&nbsp; If you cannot make this investment, we recommend that you stick with WinForms until the&nbsp; support for&nbsp; WPF&nbsp; development evolves. For more information about using WPF for LOB applications, see David Chappel's whitepaper found </em><a href=\"http://windowsclient.net/sitefiles/1000/tarticles/Introducing_WPF_in_NETFramework_3.5_v1.zip\"><em>here</em></a><em>. </em></p>\r\n",
    "PostedDate": "2008-08-21T13:00:01.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "112872",
    "ThreadId": "33986",
    "Html": "Hi Bil<br>\r\n<br>\r\nThese are good questions. Throughout the development of&nbsp; Prism we had thoughts around whether or not it would be applicable for Winforms. Most of the concepts we think do make sense, though we didn't put&nbsp;a lot of energy into thinking in that direction. We did deliberately not make things depend on WPF unless there was an absolute need. So for example we kept the module loading, event agg and few other things separated. We also had several advisors who have brought up the idea of using Prism bits for Winforms. Though I am no longer on the team, this has not been something we were serious looking at. WPF is definiately the future, while Winforms though supported, is not going to get a lot of new investment. For this reason, we haven't seen a big push to invest back in Winforms. However, if you think this is something we should do, by all means go add a WorkItem, and have others in the community vote on it.\r\n",
    "PostedDate": "2008-08-21T23:31:44.003-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "127532",
    "ThreadId": "33986",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Hi, bsimser</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">You may find interesting Brian Noyes’ blog post </span><a href=\"http://www.softinsight.com/bnoyes/2008/10/13/CompositeExtensionsForWindowsForms.aspx\"><span style=\"color:#0000ff;font-family:Calibri\">Composite Extensions for Windows Forms</span></a><span style=\"font-family:Calibri\">. It provides a set of libraries to use the Composite Application Library in Windows Forms.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Hope it helps.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Ignacio Baumann Fonay</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><a href=\"http://blogs.southworks.net/ibaumann/\"><span><span style=\"color:#0000ff;font-family:Calibri\">http://blogs.southworks.net/ibaumann/</span></span></a> </p>\r\n",
    "PostedDate": "2008-10-24T09:55:16.727-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "128058",
    "ThreadId": "33986",
    "Html": "<p dir=ltr style=\"margin-right:0px\">Regarding the PresentationModel vs MVP example, although you could use this concept in Winforms, it would be very hard to build and mantain.<br>\r\nWinforms does not have a powerful binding mechanism (although it has a very basic one in some controls), so it's not straightforward to provide Presentation Models that you would be able to bind to, without having to fill your view's code-behind with binding code to overcome this limitation. <br>\r\n<br>\r\nFrom Martin Fowler's description of <a href=\"http://martinfowler.com/eaaDev/PresentationModel.html\">Presentation Model</a>:<br>\r\n    <em>Compared to </em><a href=\"http://martinfowler.com/eaaDev/PassiveScreen.html\"><em>Passive View</em></a><em> and </em><a href=\"http://martinfowler.com/eaaDev/SupervisingPresenter.html\"><em>Supervising Controller</em></a><em>, <span>Presentation Model</span> allows you to write logic that is completely independent of the views used for display. You also do not need to rely on the view to store state. <strong>The downside is that you need a synchronization mechanism between the presentation model and the view. This synchronization can be very simple, but it is required</strong>. </em><a href=\"http://martinfowler.com/eaaDev/SeparatedPresentation.html\"><em>Separated Presentation</em></a><em> requires much less synchronization and </em><a href=\"http://martinfowler.com/eaaDev/PassiveScreen.html\"><em>Passive View</em></a><em> doesn't need any at all.<br>\r\n</em><br>\r\nJulian Dominguez<br>\r\n<a href=\"http://blogs.southworks.net/jdominguez\">http://blogs.southworks.net/jdominguez</a></p>\r\n",
    "PostedDate": "2008-10-27T10:52:12.953-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]