[
  {
    "Id": "287065",
    "ThreadId": "83486",
    "Html": "<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">Hello,</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">Someone in&nbsp;<a style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;color:#4a6b82;text-decoration:none;cursor:pointer;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\" rel=nofollow href=\"http://forums.silverlight.net/forums/t/159237.aspx\">Silverlight posted</a>&nbsp;that MVVM currently lacks standardization so that everyone has own favor..</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">That's why Me and a few guys from WPF Disciples are actively discussing about MVVM that everyone agreed. I totally understand that we have implemented the pattern in different ways and we mixed the several patterns or create our own pattern based on our project's need or to make the developers' life easier.. But forget about those difficulties or the special need of your project. Let's discuss about the standard rules of MVVM pattern that everyone agreed. I posted&nbsp;<a style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;color:#0077cc;text-decoration:none;cursor:pointer;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\" rel=nofollow href=\"http://michaelsync.net/2010/02/03/rules-of-mvvm\">some of my thoughts here</a>&nbsp;as well.</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\"><strong>Why MVVM?</strong></p>\r\n<ul style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:30px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;list-style-type:disc;list-style-position:initial;list-style-image:initial;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">Testabiltiy ( ViewModel is easier to unit test than code-behind or event driven code)</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">Clear seperation between UX designer and developer</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">Increases the &ldquo;Blendability&rdquo; of your view</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">Model never needs to be changed to support changes to the view</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">ViewModel rarely needs to be changed to support changes to the view</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">No duplicated code to update views</li>\r\n</ul>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\"><strong>Do and Don&rsquo;t in View</strong></p>\r\n<ul style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:30px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;list-style-type:disc;list-style-position:initial;list-style-image:initial;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">shouldn&rsquo;t contain any logic that you want to test : As Glenn said that MVVM is not code counting exercise, we can write code in code-behind. But you should never write any logic that you want to test. For example: If user select a country then you want to display the list of states or city in your view. This is the business requirement so you should have unit test to test this logic. So, you shouldn&rsquo;t write it in code-behind.</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">can be a control or Data Template</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">Keep the view as simple as possible. : We can still use Data Trigger or Value Converter or Visual State or Blend Behivor in XAML with care.</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">use attached property if something is not bindable :</li>\r\n</ul>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\"><strong>Do and Don&rsquo;t in ViewModel</strong></p>\r\n<ul style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:30px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;list-style-type:disc;list-style-position:initial;list-style-image:initial;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">Connector between View and Model</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">Keep View State, Value Conversion (You can create the data structure that you want to display in ViewModel instead of using ValueConverter. For example: You need to show the Name instead of First Name and Last name. Your Model can have First Name and Last Name but You can create Name property in ViewModel. )</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">No strong or weak (via Interface) reference of View</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">Make VM as testable as possible (e.g. no call to Singleton class)</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">No Control related Stuff in VM ( Because if you are changing the view then you will have to change VM as well. )</li>\r\n</ul>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\"><strong>Model</strong></p>\r\n<ul style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:30px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;list-style-type:disc;list-style-position:initial;list-style-image:initial;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">can be Data Model, DTO, POCO, auto-generated proxy of domain class and UI Model based on how you want to have the separation between Domain Service and Presentation Layer</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">No reference to ViewModel</li>\r\n</ul>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">Do you have any suggestion or comment for that?</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">We have one disagreement in our group. <strong>Some said that it's okay to have the interface of View in ViewModel. But some said that if View Model has the interface of View then it will be MVP pattern</strong>.</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">What do you think about that?</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">Again, I totally understand that we can combine the patterns or modify the pattern or even create our own pattern based on your project's need and to make developer's life easier.</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">But if we are using MVVM then everyone should have same understanding about what we should/shouldn't do in MVVM .&nbsp;</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">One of our MVVM experts say about MVVM Vs MVP</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\"><strong>View =&gt; ViewModel</strong></p>\r\n<ul style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:30px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;list-style-type:disc;list-style-position:initial;list-style-image:initial;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">MVVM the view is directly bound to the ViewModel and talks to the VM through databinding</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">In MVP, the view is bound to a model hanging off the SupervisingController or not bound at all (passive view).</li>\r\n</ul>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\"><strong>ViewModel =&gt; View</strong></p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">MVVM</p>\r\n<ol style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:30px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;list-style-type:decimal;list-style-position:initial;list-style-image:initial;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">INPC / Property binding</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">Events</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">Messages (Event Aggregator/Messenger/RX framework)</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">Through an intermediary such as a service</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">Through an interface</li>\r\n<li style=\"font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;background-position:initial initial;background-repeat:initial initial;padding:0px;margin:0px;border:0px initial initial\">Through delegates (View passes delegates to the VM which it can use to call it back. For example VM might expose a SetActions method which the View calls passing it delegates.</li>\r\n</ol>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">MVP</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">In the MVP case the standard is the Presenter talks back to the view either through an interface, databinding, or through properties in the case of Passive view. With Passive View the properties are not using databinding, instead the view property getters and setters are used to directly set the control value.</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">What do you think about that idea?</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">Do you think that it's okay for ViewModel have the interface of View?</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">If you like to add more then you are welcome to add... :)</p>\r\n<p style=\"margin-top:0px;margin-right:0px;margin-bottom:1em;margin-left:0px;font-size:14px;vertical-align:baseline;background-image:initial;background-attachment:initial;background-color:transparent;clear:both;background-position:initial initial;background-repeat:initial initial;padding:0px;border:0px initial initial\">The whole idea about this post is to get the same understanding of MVVM pattern in Community.</p>",
    "PostedDate": "2010-02-08T02:00:28.783-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "287097",
    "ThreadId": "83486",
    "Html": "<p>You need to be careful with &quot;ViewModel rarely needs to be changed to support changes to the view&quot;.</p>\r\n<p>Since the ViewModel is tailored to fit the needs of the View it is actually quite often that you need to modify the ViewModel to make changes to the View. Going with YAGNI, the ViewModel usually just exposes as little as possible just to satisfy the current requirements for the View. If those requirements change, the ViewModel often needs to change with it.</p>\r\n<p>If I decide, I would like to see the customer's phone number in the View too, I need to get it from the Model and expose it in the ViewModel first. Or if I decipe I would like to be able to split the Display of the customers Adress into separate fields with labels for Street, City etc. the Adress property in the ViewModel can't be a single string anymore.</p>\r\n<p>It is understood that the ViewModel usually does not have to change for cosmetic purposes or lust to to support a different look and feel, but beyond that changing the ViewModel for the View is quite common.</p>",
    "PostedDate": "2010-02-08T04:28:49.36-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "287100",
    "ThreadId": "83486",
    "Html": "<p>&gt;&gt;If I decide, I would like to see the customer's phone number in the View too, I need to get it from the Model and expose it in the ViewModel first. Or if I decipe I would like to be able to split the Display of the customers Adress into separate fields with labels for Street, City etc. the Adress property in the ViewModel can't be a single string anymore</p>\r\n<p>&gt;&gt;It is understood that the ViewModel usually does not have to change for cosmetic purposes or to&nbsp; just to support a different look and feel, but beyond that changing the ViewModel for the View is quite common</p>\r\n<p>yes. you are right. I was talking about that one.. We normally need to change look and feel only because the base layer is already designed when we are getting the requirement. But if there are very big changes then ViewModel will have to change. even Model will have to change..&nbsp;</p>\r\n<p>I will add it as a note in my list.. Thanks a lot for your suggestion..&nbsp;</p>",
    "PostedDate": "2010-02-08T04:36:34.85-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]