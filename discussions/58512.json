[
  {
    "Id": "198004",
    "ThreadId": "58512",
    "Html": "<p>I'm trying to load a catalog from XAML in WPF. &nbsp;I've done this successfully in Silverlight (mainly because the example's in the ref docs were for Silverlight) however when I try to do the equivalent in WPF I get the following error when the Boostrapper trys to load a module from the XAML derived catalog:</p>\r\n<p style=\"padding-left:30px\"><strong><span style=\"color:#ff0000\">ModuleTypeLoaderNotFoundException</span></strong><span style=\"color:#ff0000\"><br>There is currently no moduleTypeLoader in the ModuleManager that can retrieve the specified module.</span></p>\r\n<p style=\"padding-left:30px\">&nbsp;</p>\r\n<p><span style=\"color:#000000\">Here's what I have for the catalog (<strong>Catalog.xaml</strong>): &nbsp;</span></p>\r\n<p style=\"padding-left:30px\"><span style=\"color:#800000\">&lt;Modularity:ModuleCatalog&nbsp;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;xmlns:sys=&quot;clr-namespace:System;assembly=mscorlib&quot;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xmlns:Modularity=&quot;clr-namespace:Microsoft.Practices.Composite.Modularity;assembly=Microsoft.Practices.Composite&quot;&gt;</span></p>\r\n<p style=\"padding-left:30px\"><span style=\"color:#800000\">&nbsp;&nbsp; &nbsp;&lt;Modularity:ModuleInfo&nbsp;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;Ref=&quot;Modules/MyAssembly.dll&quot;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;ModuleName=&quot;ShellModule&quot;&nbsp;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;ModuleType=&quot;MyNamespace.MyModule,&nbsp;MyNamespace&quot; /&gt;</span></p>\r\n<p style=\"padding-left:30px\"><span style=\"color:#800000\">&lt;/Modularity:ModuleCatalog&gt;</span></p>\r\n<p>It's loading OK from here (in the Bootstrapper):</p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;protected override IModuleCatalog GetModuleCatalog()<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var uri = new Uri(&quot;/Catalogs/Catalog.xaml&quot;, UriKind.Relative);<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;var catalog = ModuleCatalog.CreateFromXaml(uri);<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return catalog;<br>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</span></p>\r\n<div>A breakpoint shows that the catalog is actually loaded, and contains one item. &nbsp;The exception is thrown from within&nbsp;</div>\r\n<div><br></div>\r\n<div>\r\n<div style=\"padding-left:30px\"><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;public partial class App : Application</span></div>\r\n<div style=\"padding-left:30px\"><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;{</span></div>\r\n<div style=\"padding-left:30px\"><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;protected override void OnStartup(StartupEventArgs e)</span></div>\r\n<div style=\"padding-left:30px\"><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</span></div>\r\n<div style=\"padding-left:30px\"><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;new Bootstrapper().Run(); <span style=\"color:#008000\">// Exception thrown from here.</span></span></div>\r\n<div style=\"padding-left:30px\"><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</span></div>\r\n<div style=\"padding-left:30px\"><span style=\"color:#0000ff\">&nbsp;&nbsp; &nbsp;}</span></div>\r\n</div>\r\n<div><br></div>\r\n<div>Can someone point out what I'm doing wrong here. &nbsp;Am I not declaring the XAML correctly? &nbsp;Thanks.</div>\r\n<div><br></div>\r\n<div>PS: My module works fine when declared within App.config and bootstrapped via the '<strong>ConfigurationModuleCatalog</strong>'. &nbsp;However I want to do this via XAML so I have more control at time of boostrapping. &nbsp;That is to say I want to decide to load different sets of modules defined in different XAML catalogs based on the startup criteria. &nbsp;Is that a sensible plan? Or is there a better strategy to deal with this kind of behavior? &nbsp;Thanks again.</div>\r\n<div><br></div>\r\n<div><strong>Phil</strong></div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-04T18:09:09.187-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "198406",
    "ThreadId": "58512",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Hi Phil,</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">I have reproduced your issue and found a possible cause for it. The error you are getting requires two different things to happen:</span></span></span></p>\r\n<p style=\"text-indent:-18pt;margin:0cm 0cm 0pt 36pt\"><span style=\"\" lang=EN-US><span style=\"\"><span style=\"font-family:Calibri;font-size:small\">1.</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">For some reason the class that implements <strong>IModule</strong>, is not available for instantiation. &nbsp;The validation for that is the following:</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>protected virtual bool ModuleNeedsRetrieval(ModuleInfo moduleInfo)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (moduleInfo.State == ModuleState.NotStarted)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If we can instantiate the type, that means the module's assembly is already loaded into </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;// the AppDomain and we don't need to retrieve it. </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool isAvailable = Type.GetType(moduleInfo.ModuleType) != null; //This is where the assembly would not be available</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (isAvailable)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; moduleInfo.State = ModuleState.ReadyForInitialization;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return !isAvailable;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p style=\"text-indent:-18pt;margin:0cm 0cm 0pt 36pt\"><span style=\"\" lang=EN-US><span style=\"\"><span style=\"font-family:Calibri;font-size:small\">2.</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">If the aforementioned scenario took place the following would also need to happen to get the exception. The <strong>Ref </strong>attribute in your ModuleInfo does not start with <strong><span style=\"color:black\"><a><span style=\"color:black\">file://</span></a></span></strong>. This is because the validation to check if a module can be loaded by the <strong>FileModuleTypeLoader</strong> is the following.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>public bool CanLoadModuleType(ModuleInfo moduleInfo)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return moduleInfo.Ref != null &amp;&amp; moduleInfo.Ref.StartsWith(&quot;file://&quot;, StringComparison.Ordinal);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Please let me know if this helps.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Damian Schenkelman</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"font-family:Calibri;font-size:small\">http://blogs.southworks.net/dschenkelman</span></a></span></p>",
    "PostedDate": "2009-06-05T13:40:27.28-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "201716",
    "ThreadId": "58512",
    "Html": "<p>Hi Damian,</p>\r\n<p>Thanks a lot for taking the time to look into this and reproduce the error. &nbsp;I'm still a confused from what you've said however. &nbsp;By my reading you're saying I need to prepend the 'REF' attribute with a 'file://' to get something like this:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Modularity</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">ModuleCatalog</span> \r\n               <span style=\"color:Red\">xmlns</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:Black\">&quot;</span>\r\n               <span style=\"color:Red\">xmlns:x</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:Black\">&quot;</span>\r\n                <span style=\"color:Red\">xmlns:sys</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">clr-namespace:System;assembly=mscorlib</span><span style=\"color:Black\">&quot;</span>\r\n               <span style=\"color:Red\">xmlns:Modularity</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">clr-namespace:Microsoft.Practices.Composite.Modularity;assembly=Microsoft.Practices.Composite</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n\r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Modularity</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">ModuleInfo</span> \r\n        <span style=\"color:Red\">Ref</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;<strong><span style=\"color:#0000ff\">file://</span></strong></span><span style=\"color:Blue\">Modules/MyAssembly.dll</span><span style=\"color:Black\">&quot;</span>\r\n        <span style=\"color:Red\">ModuleName</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">ShellModule</span><span style=\"color:Black\">&quot;</span> \r\n        <span style=\"color:Red\">ModuleType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">MyNamespace.MyModule, MyNamespace</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Modularity</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">ModuleCatalog</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>This however is not the absolute path fo the assembly. &nbsp;I'm not sure how I would do this using relative pathing. &nbsp;Are there any samples of WPF apps loading catalogs defined within XAML. &nbsp;It's said to be possible...if I could re-work a code sample I'm sure I'd bypass a lot of confusing questions like these.</p>\r\n<p>Thanks</p>\r\n<p><strong>Phil</strong></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-15T12:47:12.513-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "439363",
    "ThreadId": "58512",
    "Html": "<p>Hi Phill / Damian,</p>\r\n<p>I am implementing prism for a GIS -WPF project.</p>\r\n<p>Questions:</p>\r\n<p>1. I am creating the new modules as C# class library projects, with a view (wpf user control), view model and model implenting a MVVM design pattern. Question is in a WPF application</p>\r\n<p>are the MODULES created as CLASS Library Projects? If yes, then I am ok I think. If no, what is the project type.</p>\r\n<p>2. What is the final solution to the problem stated above? Do I copy the assembly, *.dll, of the module into the shell Module folder and then use 'Ref=&quot;file://.....*.dll&quot; ' &nbsp;?</p>\r\n<p>Jeetu</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-05-05T09:48:22.263-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440413",
    "ThreadId": "58512",
    "Html": "<p id=a376a420-3c26-012d-3e0f-1231390ee991>Hi Jeetu,</p>\r\n<p id=a376b2f0-3c26-012d-3e10-1231390ee991>I will try to answer your questions separately.</p>\r\n<ol>\r\n<li>There is no problem using Class Library project. Take into account that when you create a project with a template, it does not really matter whether it is a class Library, a WPF Control library or anything else. The differences are for example which references are added to your project by default.</li>\r\n<li>I have created a <a href=\"http://blogs.southworks.net/dschenkelman/2009/08/09/how-to-populate-the-module-catalog-from-xaml-in-a-wpf-application-using-the-composite-application-guidance-for-wpf-silverlight-prism-v2/\">blog post</a> talking about the question above and how to achieve that functionality. It does not provide any downloadable source, but I believe it can be useful.</li>\r\n</ol>\r\n<p id=a376c2f0-3c26-012d-3e11-1231390ee991>Please let me know if this helps.</p>\r\n<p id=a376e320-3c26-012d-3e12-1231390ee991>Damian Schenkelman <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2010-05-07T09:52:56.19-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "499640",
    "ThreadId": "58512",
    "Html": "<p>Damian,</p>\r\n<p>&nbsp;&nbsp;I'm having the same issue. My module is defined as such:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>    [ModuleExport(<span style=\"color:#a31515\">&quot;AR&quot;</span>, <span style=\"color:blue\">typeof</span>(AccountsReceivableModule), InitializationMode = InitializationMode.OnDemand)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> AccountsReceivableModule : IModule {\r\n</pre>\r\n</div>\r\n</p>\r\n<p>however when I call LoadModule like this (Key is &quot;AR&quot;):</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>_moduleManager.LoadModule(application.Key);\r\n</pre>\r\n</div>\r\n</p>\r\n<p>I'm getting an exception because ModuleManager.GetTypeLoaderForModule fails. My bootstrapper is loading modules like this:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureAggregateCatalog() {\r\n            <span style=\"color:blue\">base</span>.ConfigureAggregateCatalog();\r\n\r\n            AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span> AssemblyCatalog(<span style=\"color:blue\">typeof</span>(IUserService).Assembly));\r\n            AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span> AssemblyCatalog(<span style=\"color:blue\">typeof</span>(Bootstrapper).Assembly));\r\n            AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span> AssemblyCatalog(<span style=\"color:blue\">typeof</span>(AccountsReceivableModule).Assembly));\r\n        }\r\n</pre>\r\n</div>\r\nThis also leads me to another question. That first Add() is my Infrastructure assembly. &nbsp;I just picked a service out of it to use typeof() on. &nbsp;Is this how I'm supposed to do this?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-09-28T13:40:40.917-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "499647",
    "ThreadId": "58512",
    "Html": "<p>Could you post the full exception message text?&nbsp; There are a couple of things that can cause the module loading to fail.&nbsp;</p>\r\n<p>Also, about that first Add call . . .&nbsp; In the quickstarts and RIs we have used a concrete module type when we add assemblies to the catalog, but any type in the assembly should work.&nbsp; You can also use a directory catalog or use other mechanisms like a config or xaml file to get types into the container.&nbsp; The Modularity quickstarts and docs have more info on this.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-09-28T13:59:05.38-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "500071",
    "ThreadId": "58512",
    "Html": "<p>Here is the full text:</p>\r\n<p>&nbsp;</p>\r\n<pre>There is currently no moduleTypeLoader in the ModuleManager that can retrieve the specified module.</pre>\r\n<p>&nbsp;</p>\r\n<p>This is throw in ModuleManager.GetTypeLoaderForModule(ModuleInfo moduleInfo). I'm following the Modularirty Quickstart for MEF. Looks like my code/structure is the same so not really sure why this is&nbsp;occurring. Also, here is the whole code that loads modules:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> Open() {\r\n\r\n            IsBusy = <span style=\"color:blue\">true</span>;\r\n\r\n            ((MyPrincipal)Thread.CurrentPrincipal).CurrentCompany = SelectedCompanyItem;\r\n\r\n            Dispatcher.CurrentDispatcher.Invoke(\r\n                DispatcherPriority.Background, <span style=\"color:blue\">new</span> Action(() =&gt; {\r\n                    <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> application <span style=\"color:blue\">in</span> <span style=\"color:blue\">from</span> application <span style=\"color:blue\">in</span> SelectedCompanyItem.Applications\r\n                                                <span style=\"color:blue\">where</span> _moduleCatalog.Modules.Any(m =&gt; m.ModuleName == application.Key)\r\n                                                <span style=\"color:blue\">select</span> application) {\r\n                        _moduleManager.LoadModule(application.Key);\r\n                    }\r\n\r\n                    IsBusy = <span style=\"color:blue\">false</span>;\r\n                })\r\n                );\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>So the code wouldn't call to load a module that doesn't exist because I'm only looping modules that match.</p>",
    "PostedDate": "2010-09-29T08:52:12.657-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "500141",
    "ThreadId": "58512",
    "Html": "<p>I believe to have identified the problem. The problem lies in MefModuleManager.ModuleNeedsRetrieval(ModuleInfo moduleInfo). This is from that method:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>                Lazy&lt;IModule, IModuleExport&gt; module =\r\n                    <span style=\"color:blue\">this</span>.ImportedModules.FirstOrDefault(\r\n                        lazyModule =&gt; (lazyModule.Metadata.ModuleType.Name == moduleInfo.ModuleName));\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>what that needs to be is:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>                Lazy&lt;IModule, IModuleExport&gt; module =\r\n                    <span style=\"color:blue\">this</span>.ImportedModules.FirstOrDefault(\r\n                        lazyModule =&gt; (lazyModule.Metadata.ModuleName == moduleInfo.ModuleName));\r\n</pre>\r\n</div>\r\n<p>The Prism code was not comparing ModuleNames but instead was comparing the ModuleName in moduleInfo with the name of the module's _type_ name. In my case since I explicitly set the name of my module, this broke while in the Modularity quickstart, it worked because the ModuleName was the same as the ModuleType.Name.</p>\r\n<p>&nbsp;</p>\r\n<p>Found this as&nbsp;http://compositewpf.codeplex.com/workitem/7274</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-09-29T11:32:15.717-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]