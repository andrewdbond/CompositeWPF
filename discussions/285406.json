[
  {
    "Id": "722217",
    "ThreadId": "285406",
    "Html": "\r\n<p>Hi!</p>\r\n<p>I have a view model that exposes a master-detail scenario. The property that exposes the 'detail' in the VM, wraps it in a new VM that has two states Normal and Edit.</p>\r\n<p>I want to create a DataTemplateSelector that switches between these states accordingly.</p>\r\n<p>Note, I'm using SL5.</p>\r\n<p>Regards</p>\r\n",
    "PostedDate": "2012-01-08T17:50:01.707-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "722657",
    "ThreadId": "285406",
    "Html": "<p>Hi,</p>\r\n<p>As far as I know, the <strong>DataTemplateSelector </strong>class does not have support<strong>&nbsp;</strong> out of the box for using values of properties as keys for its <strong>DataTemplates</strong>. As explained <a href=\"http://msdn.microsoft.com/en-us/library/microsoft.practices.prism.viewmodel.datatemplateselector%28PandP.39%29.aspx\">in MSDN</a>, the <strong>DataTemplateSelector </strong>class determines<span> the template that must be applied to its content </span><span>retrieving it from its             resources using the<strong> name for the type of the content as the key</strong>. This means that the key of each <strong>DataTemplate </strong>must be the name of a type.</span></p>\r\n<p><span>Based on my understanding of your scenario, in order to use the <strong>DataTemplateSelector </strong>class to show the corresponding UI to each state, you would need to implement a view model class for the \"<em>Normal</em>\" state and one for the \"<em>Edit</em>\" state. For example, you could define a <strong>ShowDetailViewModel </strong>and <strong>EditDetailViewModel</strong> view model classes that inherit from a <strong>DetailViewModel </strong>base class. Then, you could define the <strong>Detail </strong>property of the master view model to return a </span><span><strong>DetailViewModel</strong> </span><span>object type, and accordingly to the \"state,\" return a <strong>ShowDetailViewModel </strong>(if the state is <em>Normal</em>) or a <strong>EditDetailViewModel </strong>(if the state is <em>Edit</em>). The resources of the <strong>DataTemplateSelector </strong>for this, could be something like the following:</span></p>\r\n<p><span> </span></p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">prism</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">DataTemplateSelector</span> <span style=\"color: red;\">Content</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding Detail}</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">prism</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">DataTemplateSelector.Resources</span><span style=\"color: blue;\">&gt;</span>\r\n\r\n        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">DataTemplate</span> <span style=\"color: red;\">x:Key</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">ShowDetailViewModel</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n            &lt;..../&gt;\r\n        <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">DataTemplate</span><span style=\"color: blue;\">&gt;</span>\r\n\r\n        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">DataTemplate</span> <span style=\"color: red;\">x:Key</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">EditDetailViewModel</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n            &lt;..../&gt;\r\n        <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">DataTemplate</span><span style=\"color: blue;\">&gt;</span>\r\n\r\n    <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">prism</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">DataTemplateSelector.Resources</span><span style=\"color: blue;\">&gt;</span>\r\n<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">prism</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">DataTemplateSelector</span><span style=\"color: blue;\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>You can find more information regarding <strong>DataTemplateSelectors </strong>in the following blog post:</p>\r\n<ul>\r\n<li> <a href=\"http://briannoyes.net/2011/01/15/Prism4GemsRenderingHeterogeneousCollectionsWithDataTemplateSelector.aspx\">Prism 4 Gems: Rendering Heterogeneous Collections with DataTemplateSelector</a></li>\r\n</ul>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-01-09T10:38:44.617-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "722849",
    "ThreadId": "285406",
    "Html": "<p>Hi Damian and thanks for your quick reply.</p>\r\n<p>In my scenario I am developing a mini CRM app, where I didn't want to waste my time coding separate VMs for each scenario. Hence I decided to go for simple BooleanToVisibility switch based on the 'IsEditing' property on the VM.</p>\r\n<p>Another alternative I considered FYI is the DataForm.</p>\r\n<p>I agree that the DataTemplateSelector is very useful the way it is, but I think it would be even greater if some additional template-switching features will be added to it (boolean switching, enum switching, string switching, type switching - the common to all of these is there should be a common way to switch between templates. Having the type name string representation as type name is somewhat risky and error prone.</p>\r\n<p>Thank you so much for your helpful post,<br />Shimmy&nbsp;</p>",
    "PostedDate": "2012-01-09T17:47:15.813-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "723272",
    "ThreadId": "285406",
    "Html": "<p>Hi Shimmy,</p>\r\n<p>If you believe that the <strong>DataTemplateSelector </strong>should be able to select the corresponding template based on other parameters (for example, the ones that you mentioned above) you could create a work item in the <a href=\"http://compositewpf.codeplex.com/workitem/list/basic\">issue tracker</a> as a suggestion so that the team might have it in consideration for future releases.</p>\r\n<p>Regards,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-01-10T11:05:50.04-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]