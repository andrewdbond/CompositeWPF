[
  {
    "Id": "551885",
    "ThreadId": "242405",
    "Html": "\r\n<p>Hello,</p>\r\n<p>&#65279;I have been investigating the test cases of StockTraderRI and came across an interesting situation.</p>\r\n<p>Within the ObservablePositionFixture unit test class, you would find the test method GeneratesModelFromPositionAndMarketFeeds() Which creates a plain new instance of MockMarketFeedService() (which implements IMarketFeedService) to pass it later on into the\r\n ctor of a different class.</p>\r\n<p>However within WatchlistViewModelFixture test class, you will find that the same interface is rather being mocked by moqu framework directly rather than to use a real mockimplementation.\r\n<br>\r\nMock mockMarketFeedService = new Mock();</p>\r\n<p>So I wonder, why the one approach isn't taken consistently, which way is better? Do I even need to write a MockService that implements the IMarketFeedService in first place, if I could just have utilized the moqu framework instead for the unit test?</p>\r\n<p>Any pro or contra?</p>\r\n<p>Many Thanks for your advice,<br>\r\nHouman</p>\r\n",
    "PostedDate": "2011-01-19T05:30:48.73-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "552091",
    "ThreadId": "242405",
    "Html": "\r\n<p>Hi Houman,</p>\r\n<p>One of the possible reasons why the team could have chosen that approach might be that using a mock implementation could be easier when the mock has to have a complex behavior, while using Moq could simplify and fasten the creation of simpler mocks.</p>\r\n<p>Another possibility would be that the mocks present in the previous versions of Prism (which were made when Moq wasn&rsquo;t being used on Prism) are being reused in this version, since they fulfill the requirement for testing the components in the Reference\r\n Implementation.</p>\r\n<p>There is no guidance on Prism regarding whether to use Moq or a mock implementation when unit testing. For an overview of the capabilities of Moq you could check its\r\n<a href=\"http://moq.codeplex.com/\">Codeplex Project</a>.</p>\r\n<p>I hope you find this information useful.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br>\r\n<a href=\"http://blgos.southworks.net/mbronzovic\">http://blgos.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-01-19T11:33:12.52-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "552470",
    "ThreadId": "242405",
    "Html": "\r\n<p>Thanks Miguel,</p>\r\n<p>&nbsp;</p>\r\n<p>That makes sense. I will look further into Moq and see how to make the testing easier.</p>\r\n<p>Thanks,<br>\r\nHouman</p>\r\n",
    "PostedDate": "2011-01-20T02:55:46.473-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "553000",
    "ThreadId": "242405",
    "Html": "\r\n<p>Let me add a little insight here from the team...</p>\r\n<p>The Prism v4 release built on quite a bit of code that was written over several project cycles.&nbsp; In earlier cycles, hand-written mocks were used extensively.&nbsp; For Prism v4, after working with the MS legal team, it was determined that we could use\r\n Moq for the project.&nbsp; We did so, but we intentionally did not invest the time to convert all unit test projects to use Moq, as there were other pieces of guidance that were much more important (and with time constraints and a small team, these decisions\r\n always get interesting).&nbsp; Instead, when we updated a class in Prism, we selectively converted hand written mocks one test fixture at a time.&nbsp;&nbsp;The idea was that over time, the unit tests would eventually all be converted, but it would take longer\r\n than one release.</p>\r\n<p>The way I see it, both hand written and framework created mocks are valuable in different situations, and if you write your code in a testable way (following a lot of the principles that TDD helps enforce), it should be easy to switch a hand-crafted mock\r\n for a framework generated one easily.</p>\r\n<p>I hope that helps, <br>\r\nMichael Puleio</p>\r\n",
    "PostedDate": "2011-01-20T22:47:35.057-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]