[
  {
    "Id": "270381",
    "ThreadId": "78976",
    "Html": "<p>Hi,</p>\r\n<p>I've started the multi-target process of adding a Silverlight client to my previous WPF only app.&nbsp; Part of that process was getting my data to the Silvelight client via WCF.&nbsp; I only need to share/expose a couple of&nbsp;ObservationCollections that the ViewModel owns/maintains.&nbsp; I started of by creating a interface/ServiceContract with one method called&nbsp;&nbsp;GetFilteredFoo() that returns the ObservationCollection&lt;Foo&gt;.&nbsp;&nbsp;I then&nbsp;slapped the IViewModel interface on the implementation of my ViewModel which already provided the functionality.&nbsp; I then wondered how do I host my ViewModel as this service that exposes my one observation collection.&nbsp; To &quot;start&quot; a service you typically&nbsp;would use ServiceHost, supply the Type and Interface,&nbsp;and then call open.&nbsp; Voila, WCF instantiates the object.&nbsp; How do I get access to it to bind it back to my view and or datamodel.&nbsp; In my WPF only app, the Foo&nbsp;Module&nbsp;created the ViewModel and bind it with the View and Datamodel.&nbsp; Of course I hadn't considered all of the WCF PerCall, PerSesssion, Singleton issues that effect how the service object is created.</p>\r\n<p>I started looking into Unity and then realized perhaps I'm trying to jam to much responsibility onto the ViewModel.&nbsp;</p>\r\n<p>BTW the WPF app is full featured.&nbsp; The silverlight page is going to be a read-only view of&nbsp;a subset of info that is being shown in the WPF views.&nbsp;</p>\r\n<p>My gut is telling me this is getting too complicated and I must be architecting/designing this incorrectly.</p>\r\n<p>Cheers,</p>\r\n<p>John</p>",
    "PostedDate": "2009-12-23T11:15:56.317-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]