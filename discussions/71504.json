[
  {
    "Id": "243894",
    "ThreadId": "71504",
    "Html": "<p>Hi, Admin,</p>\r\n<p>I am sorry to say, how bad the IActiveAware interface is designed. The reason is as follows:</p>\r\n<p>I find IActiveAware occurs in 2 places, one is CompositeCommand, the other is RegionActiveAwareBehavior. Let's talk about it one by one.</p>\r\n<p>1) In CompositeCommand, IsActive&nbsp;has the same function as ICommand's CanExecute method. So it's duplicated, I have&nbsp;successed to&nbsp;use CanExecute method to silulate the same function as IsActive.</p>\r\n<p>But I found there is no mechnism to judge whether the DelegateCommand in the CompositeCommand&nbsp;will be&nbsp;executed. So I must use UnregisterCommand method to remove this command from the CompositeCommand, if I still&nbsp;want to use the CompositeCommand with this command removed before, I should use RegisterCommand method to add this command again. It's not convenient to deal with a CompositeCommand that&nbsp;always updated.</p>\r\n<p>Why don't we use IActiveAware's IsActive property&nbsp;to judge that?</p>\r\n<p>2)&nbsp;In RegionActiveAwareBehavior, each item of the NotifyCollectionChangedEventArgs&nbsp;is an IActiveAware object, it is&nbsp;true for NewItems' IsActive, but false for OldItems' IsActive. But I found no use in the Prism of that. I look through the forum, and find 2 posts to describe its use, which need us to implement it ourselves:</p>\r\n<p><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=66791\">http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=66791</a></p>\r\n<p><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=54953\">http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=54953</a></p>\r\n<p>Both of the issues can be implemented in AttachedBehavior. So no need to use IActiveAware&nbsp;insteadly.</p>\r\n<p>FYI</p>\r\n<p>&nbsp;</p>\r\n<p>Regards</p>\r\n<p>Jianqiang</p>",
    "PostedDate": "2009-10-09T07:09:59.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "243927",
    "ThreadId": "71504",
    "Html": "<p>Hi, Admin,</p>\r\n<p>I check the CompositeCommand class again, look at these two&nbsp;methods:</p>\r\n<pre>        public virtual void Execute(object parameter)\r\n        {\r\n            Queue commands;\r\n            lock (this.registeredCommands)\r\n            {\r\n                commands = new Queue(this.registeredCommands.Where(this.ShouldExecute).ToList());\r\n            }\r\n\r\n            while (commands.Count &gt; 0)\r\n            {\r\n                ICommand command = commands.Dequeue();\r\n                command.Execute(parameter);\r\n            }\r\n        }\r\n\r\n        protected virtual bool ShouldExecute(ICommand command)\r\n        {\r\n            var activeAwareCommand = command as IActiveAware;\r\n\r\n            if (this.monitorCommandActivity &amp;&amp; activeAwareCommand != null)\r\n            {\r\n                return activeAwareCommand.IsActive;\r\n            }\r\n\r\n            return true;\r\n        }\r\n</pre>\r\n<p>I am sure at the beginning, you want to only execute the commands whose IsActive&nbsp;is true. But unfortunately, in the CanExecute method, you doubt, or maybe it is a mistake.</p>\r\n<p>In my option, CanExecute method in the CompositeCommand&nbsp;should be like this:</p>\r\n<pre>        public virtual bool CanExecute(object parameter)\r\n        {\r\n            ICommand[] commandList;\r\n            lock (this.registeredCommands)\r\n            {\r\n                commandList = this.registeredCommands.ToArray();\r\n            }\r\n\r\n            foreach (ICommand command in commandList)\r\n            {\r\n                if (!command.CanExecute(parameter))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }</pre>\r\n<p>Do you undersatnd my code?</p>\r\n<p>I think, in the CompositeCommand,&nbsp;CanExecute is responsible for checking whether all the command in the CompositeCommand can be executed, if one of them cannot, the CompositeCommand can not be executed either.</p>\r\n<p>IsActive is responsible for checking which commands can be executed. All these commands' CanExecute method return true,&nbsp;but I only want get part of them to be executed. I know you can use UnregisterCommand to judge which command to execute. But next time when I want to execute all the command, including the unregister one, I must use RegisterCommand method to add it again. But now if we have a bool&nbsp;property to record which one is executed this time and not executed next time, it is convienet, I think IsActive is the best one to do it.</p>\r\n<p>&nbsp;</p>\r\n<p>FYI</p>\r\n<p>Regards</p>\r\n<p>Jianqiang</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-09T08:41:50.32-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "243959",
    "ThreadId": "71504",
    "Html": "<p>Hi, Admin,</p>\r\n<p>I write a demo to demonsrate my viewpoint.</p>\r\n<p>Please visit&nbsp;this url to download the demo: <a href=\"http://files.cnblogs.com/Jax/CompositeCommandDemo.zip\">http://files.cnblogs.com/Jax/CompositeCommandDemo.zip</a></p>\r\n<p>In&nbsp;this demo, please notice &quot;Common&quot; project, where I rewrite CompositeCommand class's CanExecute method as follows:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">virtual</span> <span style=\"color:Blue\">bool</span> CanExecute(<span style=\"color:Blue\">object</span> parameter)\r\n        {\r\n            ICommand[] commandList;\r\n            <span style=\"color:Blue\">lock</span> (<span style=\"color:Blue\">this</span>.registeredCommands)\r\n            {\r\n                commandList = <span style=\"color:Blue\">this</span>.registeredCommands.ToArray();\r\n            }\r\n\r\n            <span style=\"color:Blue\">foreach</span> (ICommand command <span style=\"color:Blue\">in</span> commandList)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (!command.CanExecute(parameter))\r\n                    <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>;\r\n            }\r\n\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">true</span>;\r\n        }\r\n</pre>\r\n</div>\r\n<p>The demo is to sinulate the visual studio &quot;Save All&quot; function. When you modify the text, a star will show on the left-top corner of the TabItem Header, and when you click &quot;Save All&quot; button, all the stars will not appear agian.</p>\r\n<p>There are 3 &quot;files&quot;, if two of them are modified, there will be 2 stars. When you click &quot;Save All&quot; button, the CompositeCommand will only execute 2 command with stars, not execute the &quot;file&quot; without star. In your old CompositeCommand, you could only use UnregisterCommand method to remove the command not execute.</p>\r\n<p>In my demo, you can click SaveAll again and again, if no change, no command will be executed. But in your old code, you must invoke RegisterCommand and UnregisterCommand again and again to execute the same commands.</p>\r\n<p>&nbsp;</p>\r\n<p>FYI</p>\r\n<p>Regards</p>\r\n<p>Jianqiang</p>",
    "PostedDate": "2009-10-09T10:17:17.8-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "245410",
    "ThreadId": "71504",
    "Html": "<p>Hi, guys,</p>\r\n<p>Anybody else can help me to analyze and resolve it ?</p>\r\n<p>Thank you.</p>",
    "PostedDate": "2009-10-14T00:25:07.453-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "246255",
    "ThreadId": "71504",
    "Html": "<p id=e9c1b460-9af6-012c-99bc-12313b0085f1>Hi Jianqiang,</p>\r\n<p id=e9c1eb60-9af6-012c-99bd-12313b0085f1>The IActiveAware interface is used in the <strong>CompositeCommand</strong> simply to determine if each of the child commands that implement IActiveAware should be executed (this is the ShouldExecuteMethod). On the other side, the CanExecute method of the <strong>CompositeCommand </strong>goes over all its registered commands to determine if it can be executed. You can find the method below:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">virtual</span> <span style=\"color:Blue\">bool</span> CanExecute(<span style=\"color:Blue\">object</span> parameter)\r\n        {\r\n            <span style=\"color:Blue\">bool</span> hasEnabledCommandsThatShouldBeExecuted = <span style=\"color:Blue\">false</span>;\r\n\r\n            ICommand[] commandList;\r\n            <span style=\"color:Blue\">lock</span> (<span style=\"color:Blue\">this</span>.registeredCommands)\r\n            {\r\n                commandList = <span style=\"color:Blue\">this</span>.registeredCommands.ToArray();\r\n            }\r\n            <span style=\"color:Blue\">foreach</span> (ICommand command <span style=\"color:Blue\">in</span> commandList)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (<span style=\"color:Blue\">this</span>.ShouldExecute(command)) <span style=\"color:Green\">//this is only for IActiveAware commands, otherwise it&rsquo;s always true</span>\r\n                {\r\n                    <span style=\"color:Blue\">if</span> (!command.CanExecute(parameter)) <span style=\"color:Green\">//this is for all commands</span>\r\n                    {\r\n                        <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">false</span>;\r\n                    }\r\n\r\n                    hasEnabledCommandsThatShouldBeExecuted = <span style=\"color:Blue\">true</span>;\r\n                }\r\n            }\r\n\r\n            <span style=\"color:Blue\">return</span> hasEnabledCommandsThatShouldBeExecuted;\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p id=e9c30a30-9af6-012c-99c2-12313b0085f1>To determine if a child Delegate or Composite command is to be executed, that should be done in their own <strong>CanExecute</strong> method (without having to register/unregister them, which is not the idea). As the above explains, a CompositeCommand will be executed only if all its child Commands can.</p>\r\n<p id=e9c34510-9af6-012c-99c3-12313b0085f1>You can read more about this topic here:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd458928.aspx\">Commands</a></li>\r\n</ul>\r\n<p id=e9c37f20-9af6-012c-99c4-12313b0085f1>If you believe the current use/implementation of the Prism <strong>CompositeCommand</strong> with the IActiveAware interface is not best suited for you, you can inherit from the <strong>CompositeCommand</strong> class and override the functionality you require to be different. You will notice that this is really straight forward as most <strong>CompositeCommand</strong> methods are virtual.</p>\r\n<p id=e9c37f20-9af6-012c-99c4-12313b0085f1>A possible approach to save a Tab's content, could be adding a statement to check if the Tab's content has changed in the Delegate's command <strong>Execute </strong>method that is in charge of saving. If the content was modified, the command should save, and it shouldn't otherwise.</p>\r\n<p id=e9c3b9f0-9af6-012c-99c5-12313b0085f1>I hope the above helps better understand the scenario.</p>\r\n<p id=e9c3f610-9af6-012c-99c6-12313b0085f1>Damian Schenkelman    <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2009-10-15T14:37:39.96-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "246330",
    "ThreadId": "71504",
    "Html": "<p>Hi, <span style=\"font-size:9pt;color:#444444\">dschenkelman,</span></p>\r\n<p><span style=\"font-size:9pt;color:#444444\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thank you for your reply. </span></p>\r\n<p><span style=\"font-size:9pt;color:#444444\"><span style=\"font-size:9pt;color:#444444\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>All you said in the feedback, including the Prism source code, I had read it before I submit this issue. But I still cannot agree with you.</span></p>\r\n<p><span style=\"font-size:9pt;color:#444444\"><span style=\"font-size:9pt;color:#444444\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Could you please have a look at my demo? I think these two demo illustrate my viewpoint. I strongly suggest you compare which mechanism is better.</span></p>\r\n<p><span style=\"font-size:9pt;color:#444444\"><span style=\"font-size:9pt;color:#444444\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Thank you.</span></p>\r\n<p><span style=\"font-size:9pt;color:#444444\">Regards</span></p>\r\n<p><span style=\"font-size:9pt;color:#444444\">Jianqiang</span></p>",
    "PostedDate": "2009-10-15T18:49:42.373-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]