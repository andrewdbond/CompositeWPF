[
  {
    "Id": "618052",
    "ThreadId": "258960",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I'm using Prism 4 with MEF on a Silverlight application.</p>\r\n<p>One of my Modules has the following imports:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[ModuleExport(<span style=\"color:blue\">typeof</span>(ModuleInit))]\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ModuleInit : IModule\r\n\r\n<span style=\"color:blue\">private</span> IModuleManager _moduleManager;\r\n\r\n[ImportingConstructor]\r\n<span style=\"color:blue\">public</span> ModuleInit(IModuleManager moduleManager)\r\n{\r\n    _moduleManager = moduleManager;\r\n}\r\n\r\n...\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>But it looks like the IModuleManager is not available yet, as I get the following exception (the marked line is bottstrapper.Run()):</p>\r\n<p>GetExportedValue cannot be called before prerequisite import 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager..ctor (Parameter=&quot;moduleInitializer&quot;, ContractName=&quot;Microsoft.Practices.Prism.Modularity.IModuleInitializer&quot;)' has been set.<br>\r\nResulting in: An exception occurred while initializing module 'ModuleInit'.&nbsp;&nbsp; &nbsp; - The exception message was: GetExportedValue cannot be called before prerequisite import 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager..ctor\r\n (Parameter=&quot;moduleInitializer&quot;, ContractName=&quot;Microsoft.Practices.Prism.Modularity.IModuleInitializer&quot;)' has been set.&nbsp; &nbsp; Check the InnerException property of the exception for more information. If the exception occurred&nbsp;&nbsp; &nbsp; while\r\n creating an object in a DI container, you can exception.GetRootException() to help locate the&nbsp;&nbsp; &nbsp; root cause of the problem.&nbsp;<br>\r\nResulting in: An exception occurred while calling the 'OnImportsSatisfied' method on type 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager'.<br>\r\nResulting in: Cannot activate part 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager'.Element: Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager --&gt; &nbsp;Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager\r\n --&gt; &nbsp;AssemblyCatalog (Assembly=&quot;Microsoft.Practices.Prism.MefExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;)<br>\r\nResulting in: Cannot get export 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager (ContractName=&quot;Microsoft.Practices.Prism.Modularity.IModuleManager&quot;)' from part 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager'.Element:\r\n Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager (ContractName=&quot;Microsoft.Practices.Prism.Modularity.IModuleManager&quot;) --&gt; &nbsp;Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager --&gt; &nbsp;AssemblyCatalog (Assembly=&quot;Microsoft.Practices.Prism.MefExtensions,\r\n Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;)</p>\r\n<p>&nbsp;</p>\r\n<p>Removing the IModuleManager import from this Module or setting it as Lazy&lt;IModuleManager&gt; will solve the problem, but I wanted to know the reason for the exception</p>\r\n<p>And perhaps understand what am I doing wrong.</p>\r\n<p>Thanks!</p>\r\n",
    "PostedDate": "2011-05-25T07:14:11.263-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "618747",
    "ThreadId": "258960",
    "Html": "<p>Hi,</p>\r\n<p>We&rsquo;ve been able to reproduce the behavior you&rsquo;re mentioning. The behavior you are experiencing could be caused by a timing issue during the composition in your application. According to the error messages provided, it looks like the <strong>IModuleManager </strong>Import can&rsquo;t be satisfied until the <strong>IModuleInitializer</strong> composable part has been composed.</p>\r\n<p>One possible workaround for this could be to use the <strong>ServiceLocator</strong> to resolve an instance of <strong>IModuleManager</strong>, after your exported component has been fully loaded in order to avoid this unexpected behavior (for example, in reaction to a button in a component of yours).</p>\r\n<p>On the other hand, if you think this timing issue is not desire, you can create an issue in the <a href=\"http://compositewpf.codeplex.com/workitem/list/basic\">Issue Tracker</a>.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br /><a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-05-26T07:59:38.89-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]