[
  {
    "Id": "553946",
    "ThreadId": "242932",
    "Html": "\r\n<p>Hello,</p>\r\n<p>I'm working on an app where I load views into regions when a user logs in.&nbsp; Then I want to unload everything when they log off.</p>\r\n<p>There doesn't appear to be a way to unload modules so I'm just going to unload views for the module.</p>\r\n<p>Here is a snippet of the code that is throwing an exception.</p>\r\n<p>IRegion _rootTab = _regionManager.Regions[RegionNames.RootRibbonTabRegion];<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object _view = _regionManager.Regions[RegionNames.RootRibbonTabRegion].GetView(ReflectionUtility.GetPropertyName(() =&gt; _credentialsRootRibbonTabView));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _rootTab.Remove(_view);</p>\r\n<p>&nbsp;</p>\r\n<p>The credentialsRootRibbonTabView is present in the region and what's funny, even though an exception is being thrown when _rootTab.Remove is called, when I look at the Views for the region, it's actually removed.&nbsp; So it's like the remove is removing\r\n the view correctly but then it's trying to do something else in the View collection at a certain index, however, in this case after the Remove() endpoint, remove's this view, there are no more views in the RegionNames.RootRibbonTabRegion region.&nbsp; So again\r\n behind the scenes there looks as if there is a problem somewhere in Prism that is trying to do something with an index in a collection that has no elements anymore after the remove.</p>\r\n<p>Below is the stack at the time of the crash.&nbsp; It looks like a generic stack you'd expect in a scenario trying to access an element of a collection outside the valid indexes contained in the collection.</p>\r\n<p>Again, the issue is, this view is present before I all Remove() and Remove is actually removing the View from the collection as it should but Remove is excepting for some reason.</p>\r\n<p>Any ideas of how to work around this.&nbsp; FYI, the type of Region is AllActive.</p>\r\n<p>Thanks.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;&nbsp; at System.Windows.PresentationFrameworkCollection`1.GetItemDependencyObject(Int32 index)<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.UIElementCollection.GetItemImplSkipMethodPack(Int32 index)<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.ItemsControl.RemoveContainerForPosition(GeneratorPosition position)<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.ItemsControl.OnItemsChangedHandler(Object sender, ItemsChangedEventArgs args)<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.Primitives.ItemsChangedEventHandler.Invoke(Object sender, ItemsChangedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.ItemContainerGenerator.RemoveItem(Object item, Int32 itemIndex, DependencyObject container, Int32 containerCount, GeneratorPosition position, ItemBlock block, Int32 offsetFromBlockStart, Boolean raiseReplaceInsteadOfRemove)<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.ItemContainerGenerator.OnItemRemoved(Object item, Int32 itemIndex, Boolean raiseReplaceInsteadOfRemove)<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.ItemContainerGenerator.System.Windows.Controls.ICollectionChangedListener.OnCollectionChanged(Object sender, NotifyCollectionChangedEventArgs args)<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.WeakCollectionChangedListener.SourceCollectionChanged(Object sender, NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Collections.Specialized.NotifyCollectionChangedEventHandler.Invoke(Object sender, NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.ItemCollection.NotifyCollectionChanged(NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.ItemCollection.System.Windows.Controls.ICollectionChangedListener.OnCollectionChanged(Object sender, NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.ItemCollection.EnumerableCollectionView.System.Windows.Controls.ICollectionChangedListener.OnCollectionChanged(Object sender, NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.WeakCollectionChangedListener.SourceCollectionChanged(Object sender, NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Collections.Specialized.NotifyCollectionChangedEventHandler.Invoke(Object sender, NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.ViewsCollection.OnCollectionChanged(NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.ViewsCollection.NotifyRemove(IList items, Int32 originalIndex)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.ViewsCollection.RemoveFromFilteredList(Object item)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.ViewsCollection.SourceCollectionChanged(Object sender, NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(Int32 index)<br>\r\n&nbsp;&nbsp; at System.Collections.ObjectModel.Collection`1.Remove(T item)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Region.Remove(Object view)<br>\r\n&nbsp;&nbsp; at AuthenticatorSL.Modules.Credentials.CredentialController.CleanUp(Object o)<br>\r\n&nbsp;&nbsp; at GalaSoft.MvvmLight.Helpers.WeakAction`1.Execute(T parameter)<br>\r\n&nbsp;&nbsp; at GalaSoft.MvvmLight.Helpers.WeakAction`1.ExecuteWithObject(Object parameter)<br>\r\n&nbsp;&nbsp; at GalaSoft.MvvmLight.Messaging.Messenger.SendToList[TMessage](TMessage message, IEnumerable`1 list, Type messageTargetType, Object token)<br>\r\n&nbsp;&nbsp; at GalaSoft.MvvmLight.Messaging.Messenger.SendToTargetOrType[TMessage](TMessage message, Type messageTargetType, Object token)<br>\r\n&nbsp;&nbsp; at GalaSoft.MvvmLight.Messaging.Messenger.Send[TMessage](TMessage message)<br>\r\n&nbsp;&nbsp; at AuthenticatorSL.Infrastructure.GlobalAppCommands.LogoutCommand.Send(LogoutEvent evt)<br>\r\n&nbsp;&nbsp; at AuthenticatorSL.Modules.Credentials.CredentialsRootRibbonQATBVM.&lt;get_LogOffCommand&gt;b__2()<br>\r\n&nbsp;&nbsp; at GalaSoft.MvvmLight.Command.RelayCommand.Execute(Object parameter)<br>\r\n&nbsp;&nbsp; at Telerik.Windows.Controls.RadButton.ExecuteCommand()<br>\r\n&nbsp;&nbsp; at Telerik.Windows.Controls.RadButton.OnClick()<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(MouseButtonEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.Control.OnMouseLeftButtonUp(Control ctrl, EventArgs e)<br>\r\n&nbsp;&nbsp; at MS.Internal.JoltHelper.FireEvent(IntPtr unmanagedObj, IntPtr unmanagedObjArgs, Int32 argsTypeIndex, Int32 actualArgsTypeIndex, String eventName)</p>\r\n",
    "PostedDate": "2011-01-23T07:06:02.027-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "553969",
    "ThreadId": "242932",
    "Html": "\r\n<p>Ok, so you have a region adapter for Telerik RadRibbon control, now when you are removing an object from the region you get an out of index.&nbsp; i see you are using MVVMLight as your mvvm glue.&nbsp; May I ask why you are choosing to use reflection to\r\n find the view name that is to be removed, just seems like alot of overhead to simply pass in a string name. Its not like you don't have knowledge of the view (just have me scratching my head, that is all).&nbsp; Secondly are you sure its passing in the right\r\n name and your sure the object view in question is in the region in question with the name in question.</p>\r\n<p>One thing I do when I getting the View in the manner is to make sure that the view isn't null before I attempt to remove it or deactivate it.</p>\r\n<p>Edit: There might also be something wrong with region adapter not working correctly too on the removals.</p>\r\n<p>Morgan.</p>\r\n",
    "PostedDate": "2011-01-23T09:27:12.29-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "553972",
    "ThreadId": "242932",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>mvermef wrote:</strong><br>\r\n<p>May I ask why you are choosing to use reflection to find the view name that is to be removed, just seems like alot of overhead to simply pass in a string name. Its not like you don't have knowledge of the view (just have me scratching my head, that is all).&nbsp;</p>\r\n</blockquote>\r\n<p>Because that's just the last&nbsp;avenue&nbsp;I've tried to get it to work.&nbsp; I've tried using it with the actual view&nbsp;and changed to that&nbsp;as part of the troubleshooting process.&nbsp;</p>\r\n<p>This is how it would be normally.</p>\r\n<p>_credentialRegionManager.Regions[RegionNames.RootRibbonTabRegion].Remove(_credentialsRootRibbonTabView)</p>\r\n<p>As far as custom RegionAdapters, I have one for the QuickAccessToolBar but not one specifically for the RibbonControl.&nbsp; The RibbonControl contains a lot of different controls such as Tab, Toolbar etc.</p>\r\n<p>Nothing in my code adapter appears to run at the time of the exception.</p>\r\n<p>Here is the xaml for the RibbonBar.</p>\r\n<p>&lt;telerik:RadRibbonBar Grid.Row=&quot;0&quot; ApplicationName=&quot;Authenticator - <a href=\"http://www.n-stech.com\">\r\nwww.n-stech.com</a>&quot; IsMinimized=&quot;False&quot; Margin=&quot;0&quot;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Regions:RegionManager.RegionName=&quot;{Binding RegionNames.RootRibbonTabRegion, Source={StaticResource\r\n ResourceWrapper}}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HorizontalContentAlignment=&quot;Stretch&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VerticalContentAlignment=&quot;Stretch&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HelpButtonVisibility=&quot;Visible&quot;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ApplicationButtonVisibility=&quot;Visible&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;telerik:RadRibbonBar.QuickAccessToolBar&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;telerik:QuickAccessToolBar x:Name=&quot;RootQATBRegion&quot;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n Regions:RegionManager.RegionName=&quot;{Binding RegionNames.RootQATBRegion, Source={StaticResource ResourceWrapper}}&quot;&nbsp;&nbsp;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n &gt;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/telerik:QuickAccessToolBar&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/telerik:RadRibbonBar.QuickAccessToolBar&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;telerik:RadRibbonBar.ApplicationMenu&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;telerik:ApplicationMenu x:Name=&quot;RootApplicationMenuRegion&quot; Regions:RegionManager.RegionName=&quot;{Binding RegionNames.RootApplicationMenuRegion, Source={StaticResource\r\n ResourceWrapper}}&quot; &gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/telerik:ApplicationMenu&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/telerik:RadRibbonBar.ApplicationMenu&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/telerik:RadRibbonBar&gt;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-01-23T09:32:56.847-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "553984",
    "ThreadId": "242932",
    "Html": "\r\n<p>ok.</p>\r\n<p>&nbsp;</p>\r\n<p>Did you write the adapter yourself? Have to you tried trapping for null values before trying to remove the view object?</p>\r\n<p>Here is a snippet of some of my code for deactivation and subsequent removal</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:blue\">var</span> view = regionManager.Regions[RegionNames.PopupRegion].GetView(<span style=\"color:#a31515\">&quot;EditFlightsView&quot;</span>);\r\n            \r\n            <span style=\"color:blue\">if</span> (view != <span style=\"color:blue\">null</span>)\r\n            {                \r\n                regionManager.Regions[RegionNames.PopupRegion].Deactivate(view);\r\n                regionManager.Regions[RegionNames.PopupRegion].Remove(view);\r\n                Flight = <span style=\"color:blue\">null</span>;\r\n                view = <span style=\"color:blue\">null</span>;                \r\n            }\r\n</pre>\r\n</div>\r\nDon't think its a PRISM issue, I would gravitate towards issues with the adapter used.\r\n<p></p>\r\n",
    "PostedDate": "2011-01-23T10:05:32.253-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "553989",
    "ThreadId": "242932",
    "Html": "\r\n<p>Yes I wrote the QATB adapter but it only pertains to one section of the RibbonBar.</p>\r\n<p>I've set break points in my the adapter code I have and nothing fires in it.</p>\r\n<p>Also, I'm never setting the Views to null, I'm just removing them.&nbsp; I have tried to use Deactive as you have above, that causes an exception.</p>\r\n<p>Deactivation is not possible in this type of region.&nbsp; (That's why I mentioned this was an AllActiveRegion earlier.)</p>\r\n<p>&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.AllActiveRegion.Deactivate(Object view)<br>\r\n&nbsp;&nbsp; at AuthenticatorSL.Modules.Credentials.CredentialController.CleanUp(Object o)<br>\r\n&nbsp;&nbsp; at GalaSoft.MvvmLight.Helpers.WeakAction`1.Execute(T parameter)<br>\r\n&nbsp;&nbsp; at GalaSoft.MvvmLight.Helpers.WeakAction`1.ExecuteWithObject(Object parameter)<br>\r\n&nbsp;&nbsp; at GalaSoft.MvvmLight.Messaging.Messenger.SendToList[TMessage](TMessage message, IEnumerable`1 list, Type messageTargetType, Object token)<br>\r\n&nbsp;&nbsp; at GalaSoft.MvvmLight.Messaging.Messenger.SendToTargetOrType[TMessage](TMessage message, Type messageTargetType, Object token)<br>\r\n&nbsp;&nbsp; at GalaSoft.MvvmLight.Messaging.Messenger.Send[TMessage](TMessage message)<br>\r\n&nbsp;&nbsp; at AuthenticatorSL.Infrastructure.GlobalAppCommands.LogoutCommand.Send(LogoutEvent evt)<br>\r\n&nbsp;&nbsp; at AuthenticatorSL.Modules.Credentials.CredentialsRootRibbonQATBVM.&lt;get_LogOffCommand&gt;b__2()<br>\r\n&nbsp;&nbsp; at GalaSoft.MvvmLight.Command.RelayCommand.Execute(Object parameter)<br>\r\n&nbsp;&nbsp; at Telerik.Windows.Controls.RadButton.ExecuteCommand()<br>\r\n&nbsp;&nbsp; at Telerik.Windows.Controls.RadButton.OnClick()<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(MouseButtonEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Windows.Controls.Control.OnMouseLeftButtonUp(Control ctrl, EventArgs e)<br>\r\n&nbsp;&nbsp; at MS.Internal.JoltHelper.FireEvent(IntPtr unmanagedObj, IntPtr unmanagedObjArgs, Int32 argsTypeIndex, Int32 actualArgsTypeIndex, String eventName)</p>\r\n",
    "PostedDate": "2011-01-23T10:16:42.34-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "554003",
    "ThreadId": "242932",
    "Html": "\r\n<p>If nothing fires in your adapter at all for when you add stuff to the region, is it registered.&nbsp; Just trying to see if everything is in place for the adapter to do its work.</p>\r\n<p>yeah wasn't trying to suggest that you use Deactivate on an AllActiveRegion</p>\r\n<p>I have run into situation when I didn't add my infrastructure to the composition (MEF), that had the adapter and was confusing me cause i thought it was registered (tongue in cheek, when I finally figured it out).&nbsp;</p>\r\n",
    "PostedDate": "2011-01-23T11:08:37.667-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "554009",
    "ThreadId": "242932",
    "Html": "\r\n<p>Keep in mind, my adapter is just so I can add buttons to the RibbonBar's QuickAccessToolbar.&nbsp; Most of the other parts of the RibbonBar work with the Prism's built in RegionAdapters.&nbsp; The Region for which I'm trying to remove a view from is using\r\n one of Prism's built in RegionAdapters.</p>\r\n<p>I register the QATB adapter in the boot strapper and yes it works when I add items to it.</p>\r\n<p>My comments are, if it's the adapter that's causing the problem when I run the Remove() method, I would think that code would take me back into my QATB region adapter to where I would see the exception.&nbsp; However, code isn't making it there.</p>\r\n<p>As I mentioned, the Remove call actually works, there's just something afterwards that having the problem.&nbsp;</p>\r\n",
    "PostedDate": "2011-01-23T11:21:46.977-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "621209",
    "ThreadId": "242932",
    "Html": "<p>@kfrasty: I had the exactly the same problem (not with the RibbonBar's QuickAccessToolBar but with my own control), but was eventually able to solve it, apparently I was removing the control twice, once in the target control itself (in OnVisualChildrenChanged) and once in the RegionAdapter ( where the regionTarget is the control in which it was already removed ). So I removed the removal of the visual from the&nbsp;OnVisualChildrenChanged and left the RegionAdapter untouched and now everything works perfectly. I think the removal of the control in OnVisualChildrenChanged was a remnant of the pre prism version of my control where there was no regionAdapter.</p>",
    "PostedDate": "2011-06-01T00:05:57.407-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]