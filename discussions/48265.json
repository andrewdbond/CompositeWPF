[
  {
    "Id": "161050",
    "ThreadId": "48265",
    "Html": "I would like to generate a dynamic module catalog for each user in order to enforce some customization and security features of our application. For example, a user might be a &quot;viewer&quot; in which case they would only get the default modules. But another user might be an &quot;admin&quot; and would receive the admin modules on top of the default modules. <br>\r\n<br>\r\nSo my question is, couldn't I just make my <span style=\"font-size:13px\">GetModuleCatalog method in my Bootstrapper do something like this...<br>\r\n<br>\r\n<span style=\"font-size:13px;color:#0000ff\">return </span><span style=\"font-size:13px;color:#2b91af\">ModuleCatalog</span><span style=\"font-size:13px\">.CreateFromXaml(</span><span style=\"font-size:13px;color:#0000ff\">new</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\">Uri</span><span style=\"font-size:13px\">(</span><span style=\"font-size:13px;color:#a31515\">&quot;https://www.someurl.com/catalog/ModuleCatalog.xaml&quot;</span><span style=\"font-size:13px\">, </span><span style=\"font-size:13px;color:#2b91af\">UriKind</span><span style=\"font-size:13px\">.Absolute));<br>\r\n <br>\r\nOf course, I should mention that I'm talking strictly about a Silverlight app that's already running in a secure context via traditional Silverlight/ASP.NET Membership-style security where the user has already logged in via a login page before launching the silverlight application.<br>\r\n<br>\r\nPlease let me know if anybody has any thoughts or ideas. <br>\r\n<br>\r\nThanks,<br>\r\nChris\r\n<p>&nbsp;</p>\r\n</span></span>\r\n",
    "PostedDate": "2009-02-23T10:38:36.583-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "164852",
    "ThreadId": "48265",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi Chris,</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">You could create different <b>ModuleCatalogs</b> and load a different one based on the user’s role (though you should have a way to map a user's role to a ModuleCatalog url). The problem with this approach is that you would have to maintain several catalog files.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Another possible approach to avoid having multiple files, is having a single ModuleCatalog and setting all modules that are security enforced to load on demand. You would then have a service to query for all available modules for a specific role and would load dynamically all the on demand modules available for that role.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d;font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">For more information about loading modules on demand you can check the following articles from the Prism-v2 documentation:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/dd458932.aspx\"><span style=\"color:#0000ff;font-family:calibri\">How to: Load Modules on Demand</span></a>\r\n<p style=\"margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/dd490828.aspx\"><span style=\"color:#0000ff;font-family:calibri\">Modularity QuickStarts for Silverlight</span></a>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Please let me know if this helps.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\">Damian Schenkelman</span></p>\r\n<span style=\"font-size:11pt;font-family:'calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"color:#0000ff\">http://blogs.southworks.net/dschenkelman</span></a></span></span></p>\r\n</span></p>\r\n",
    "PostedDate": "2009-03-05T07:24:47.89-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "181452",
    "ThreadId": "48265",
    "Html": "Hi Damian,<br>\r\n<br>\r\nLike Chris, I'm also interested in a way to dynamically create the ModuleCatalog. The solution you offered in your response is not a good solution in our case.<br>\r\n<br>\r\nWe are creating a distributed web application. The webserver with the site runs on a server which is located at the customer's location. We have a windows service that checks for updates and downloads what we call modules (ascx controls, dll, images, etc). Each client can have different modules in their application. For instance: Customer A has Module1 and Module2 and Customer B has Module2, Module4 and Module99.<br>\r\nWe would also like to set-up a Silverlight front-end for this app using the Composite Guidance (which is great, btw :) ).<br>\r\n<br>\r\nA possible solution I'm looking for would be to have is a ModuleCatalog which can be retrieved using a webservice, handler, etc.<br>\r\n<br>\r\nIt's impossible for us to know how many, let alone what kind of, modules will be added to the application in the future. If we use the current method it means we have to update the main application including the ModuleCatalog for each module we add/change/remove. This is not the scenario we're after.<br>\r\nIs there a possible solution for this in the current guidance?<br>\r\n<br>\r\nThe only thing I can come up with now is to dynamically create a ModuleCatalog on the server, extract the XAP, replace the ModuleCatalog with the generated one, XAP it again and have the client download it.<br>\r\n<br>\r\nI hope the explanation clarifies the situation. If you need any more info, please contact me by e-mail.<br>\r\n<br>\r\nKind regards,<br>\r\n<br>\r\nRob Houweling\r\n",
    "PostedDate": "2009-04-20T12:01:58.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "181471",
    "ThreadId": "48265",
    "Html": "Rob,<br>\r\n<br>\r\nThrough a series of experiments, I was eventually able to get this working a few different ways:<br>\r\n<br>\r\n1.) ASP-driven ModuleCatalog.xml file, like this<br>\r\n<br>\r\n<span style=\"color:#008000;font-size:13px\">\r\n<p>protected virtual IModuleCatalog GetModuleCatalog() {</p>\r\n<p>string catalogLocation = &quot;/Whatever;component/ModulesCatalog.xaml&quot;;</p>\r\n<p>Modularity.ModuleCatalogBuilder builder = Modularity.ModuleCatalogBuilder.CreateFromXaml(new Uri(catalogLocation, UriKind.Relative));</p>\r\n<p>IModuleCatalog catalog = builder.GetUserCatalog();</p>\r\n<p>return catalog;</p>\r\n<p>}<br>\r\n<br>\r\nThe only problem I had with this approach was that I had to roll my own ModuleCatalogBuilder, and it became a headache to try and keep my version synched up to the (at the time) rapidly changing drops coming from the PRISMv2 dev team. However, this was nice because I could keep all of my custom logic in ASP.NET (which generated the ModulesCatalog.xaml file on the fly) in one place (albeit a bit disconnected from the Silverlight project) - but this might be exactly what you need per your comments.<br>\r\n<br>\r\n2) Web Service - I eventually settled on using a call to a web service to get a list of &quot;roles&quot;for the current user, which I then used to programmatically build the Catalog on the client-side. This works pretty well, and the only trick is that the async nature of the web service call creates the need to re-wire the bootstrapper a little bit.<br>\r\n<br>\r\nChris</p>\r\n</span>\r\n",
    "PostedDate": "2009-04-20T12:32:24.363-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "566910",
    "ThreadId": "48265",
    "Html": "<blockquote style=\"border: solid .1em #ccc; font-style: italic; margin: .25em 1em 0 1em; padding: 0 .25em 0 .25em;\"><strong>dschenkelman wrote:</strong></blockquote>\r\n<blockquote style=\"border: solid .1em #ccc; font-style: italic; margin: .25em 1em 0 1em; padding: 0 .25em 0 .25em;\">\r\n<p style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: calibri;\">Hi Chris,</span></p>\r\n<p style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: calibri;\">&nbsp;</span></p>\r\n<p style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: calibri;\">You could create different <strong>ModuleCatalogs</strong> and load a different one based on the user&rsquo;s role (though you should have a way to map a user's role to a ModuleCatalog url). The problem with this approach is that you would have to maintain several catalog files.</span></p>\r\n<p style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: calibri;\">&nbsp;</span></p>\r\n<p style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: calibri;\">Another possible approach to avoid having multiple files, is having a single ModuleCatalog and setting all modules that are security enforced to load on demand. You would then have a service to  query for all available modules for a specific role and would load dynamically all the on demand modules available for that role.</span></p>\r\n<p style=\"margin: 0cm 0cm 0pt;\"><span style=\"color: #1f497d; font-family: calibri;\">&nbsp;</span></p>\r\n<p style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: calibri;\">For more information about loading modules on demand you can check the following articles from the Prism-v2 documentation:</span></p>\r\n<p style=\"margin: 0cm 0cm 0pt 36pt;\"><span style=\"font-family: symbol;\">&middot;<span style=\"font: 7pt 'times new roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><a href=\"http://msdn.microsoft.com/en-us/library/dd458932.aspx\"><span style=\"color: #0000ff; font-family: calibri;\">How to: Load Modules on Demand</span></a> </span></p>\r\n<p style=\"margin: 0cm 0cm 0pt 36pt;\"><span style=\"font-family: symbol;\">&middot;<span style=\"font: 7pt 'times new roman';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><a href=\"http://msdn.microsoft.com/en-us/library/dd490828.aspx\"><span style=\"color: #0000ff; font-family: calibri;\">Modularity QuickStarts for Silverlight</span></a> </span></p>\r\n<p style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: calibri;\">&nbsp;</span></p>\r\n<p style=\"margin: 0cm 0cm 0pt;\"><span style=\"font-family: calibri;\">Please let me know if this helps.</span></p>\r\n<p style=\"margin: 0cm 0cm 0pt -0.6pt;\"><span style=\"font-family: calibri;\">&nbsp;</span></p>\r\n<p style=\"margin: 0cm 0cm 0pt -0.6pt;\"><span style=\"font-family: calibri;\">Damian Schenkelman</span></p>\r\n<span style=\"font-size: 11pt; font-family: 'calibri','sans-serif';\"><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"color: #0000ff;\">http://blogs.southworks.net/dschenkelman</span></a></span>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</blockquote>\r\n<p>&nbsp;</p>\r\n<p>I prefer your 2nd approach, but I checked \"<strong>PrismV4_Modularity With Mef QuickStart</strong>\" and didn't find a way to map \"roles\" with modules.</p>\r\n<p>I think it's a common requirement but Prism didn't provide.&nbsp;Did I miss something?&nbsp;</p>\r\n<p>Could you give some sample code to implement a customized&nbsp;MefBootstrapper? Thank you in advance.</p>",
    "PostedDate": "2011-02-15T20:57:23.593-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "567221",
    "ThreadId": "48265",
    "Html": "<p>Hi,</p>\r\n<p>The service mentioned in Damain Schenkelman's answer would be responsible for mapping roles to modules. For example, the service could have a dictionary that would map a role to the module's name, and on authentication it could then iterate through the modules that correspond to a certain role and call the <strong>ModuleManager.LoadModule </strong>method, passing the module's name as a parameter. That would load the modules associated to a specific role.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-02-16T08:25:52.387-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "567567",
    "ThreadId": "48265",
    "Html": "<blockquote style=\"border: solid .1em #ccc; font-style: italic; margin: .25em 1em 0 1em; padding: 0 .25em 0 .25em;\"><strong>GuidoMaliandi wrote:</strong><br />\r\n<p>Hi,</p>\r\n<p>The service mentioned in Damain Schenkelman's answer would be responsible for mapping roles to modules. For example, the service could have a dictionary that would map a role to the module's name, and on authentication it could then iterate through the modules  that correspond to a certain role and call the <strong>ModuleManager.LoadModule </strong> method, passing the module's name as a parameter. That would load the modules associated to a specific role.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n</blockquote>\r\n<p>Your answer helps and I got idea:</p>\r\n<p>&nbsp;&nbsp; &nbsp;I must implement a service to&nbsp;query for all available modules for the specific roles that authentication service gives back.</p>\r\n<p>&nbsp;&nbsp; &nbsp;But one possible problem is, <strong>how to call that web service in Shell? and how to handle the results in&nbsp;async nature of the web service?</strong></p>\r\n<p>Thanks for your answer in advance!</p>",
    "PostedDate": "2011-02-16T18:59:52.1-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "567736",
    "ThreadId": "48265",
    "Html": "<blockquote style=\"border: solid .1em #ccc; font-style: italic; margin: .25em 1em 0 1em; padding: 0 .25em 0 .25em;\"><strong>cwiederspan wrote:</strong><br /> Rob,<br /> <br /> Through a series of experiments, I was eventually able to get this working a few different ways:<br /> <br /> 1.) ASP-driven ModuleCatalog.xml file, like this<br /> <br /> <span style=\"color: #008000; font-size: 13px;\">\r\n<p>protected virtual IModuleCatalog GetModuleCatalog() {</p>\r\n<p>string catalogLocation = \"/Whatever;component/ModulesCatalog.xaml\";</p>\r\n<p>Modularity.ModuleCatalogBuilder builder = Modularity.ModuleCatalogBuilder.CreateFromXaml(new Uri(catalogLocation, UriKind.Relative));</p>\r\n<p>IModuleCatalog catalog = builder.GetUserCatalog();</p>\r\n<p>return catalog;</p>\r\n<p>}<br /> <br /> The only problem I had with this approach was that I had to roll my own ModuleCatalogBuilder, and it became a headache to try and keep my version synched up to the (at the time) rapidly changing drops coming from the PRISMv2 dev team. However, this was nice  because I could keep all of my custom logic in ASP.NET (which generated the ModulesCatalog.xaml file on the fly) in one place (albeit a bit disconnected from the Silverlight project) - but this might be exactly what you need per your comments.<br /> <br /> 2) Web Service - I eventually settled on using a call to a web service to get a list of \"roles\"for the current user, which I then used to programmatically build the Catalog on the client-side. This works pretty well, and the only trick is that the async nature  of the web service call creates the need to re-wire the bootstrapper a little bit.<br /> <br /> Chris</p>\r\n</span></blockquote>\r\n<p>&nbsp;</p>\r\n<p>Hi, Chris</p>\r\n<p>You mentioned :</p>\r\n<p style=\"padding-left: 30px;\"><span style=\"color: #888888;\">2) Web Service - I eventually settled on using a call to a web service to get a list of \"roles\"for the current user, which I then used to programmatically build the Catalog on the client-side. This works pretty well, and the only trick is that the async nature of the web service call creates the need to re-wire the bootstrapper a little bit.</span></p>\r\n<p>Could you share the source code of your customized&nbsp;bootstrapper ? Thanks.</p>",
    "PostedDate": "2011-02-17T02:21:06.09-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "567864",
    "ThreadId": "48265",
    "Html": "<p>Hi,</p>\n<p>The service could be included in the module (that is to say, not as a web service). Alternatively, you could check the following resources, which might give you some insight on how to consume WCF or web services in Silverlight:</p>\n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/245929\"><span>WCF service call Async</span></a> </li>\n<li><a href=\"http://forums.silverlight.net/forums/p/189323/435571.aspx\">consuming web service from silverlight-4 application</a> </li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/aa480512.aspx\">Asynchronous Web Service Calls over HTTP with the .NET Framework</a> </li>\n</ul>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-02-17T06:16:47.073-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "579191",
    "ThreadId": "48265",
    "Html": "<p>The links here are off topic from the real issue and do not address the problem.&nbsp;</p>\r\n<p>If I have a login screen (in the Shell).&nbsp;<br />And I only want modules I have access to be present in the ModuleCatalog (for the Bootloader to load)&nbsp;<br />Then how can I authenticate and load a ModuleCatalog.xml (stream or file created on demand, through service or something) using PRISM.</p>\r\n<p>You cannot run the Shell outside the Bootloader and if you run the Bootloader it loads the Module Catalog which does not have scope of who is logged in. &nbsp;It's a Chicken and Egg&nbsp;scenario. &nbsp;Who came first?</p>",
    "PostedDate": "2011-03-11T11:22:01.377-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "580098",
    "ThreadId": "48265",
    "Html": "<p>Hi,</p>\r\n<p>One possibility to achieve what you're mentioning would be to override the <strong>Run </strong>method of your <strong>Bootstrapper </strong>to avoid calling the call the <strong>CreateModuleCatalog </strong>and <strong>Initializemodules </strong>methods. That way, you could call them only when you have loaded your custom <strong>ModulesCatalog</strong>, thus solving the timing issue you're experiencing.</p>\r\n<p>I'm attaching the contents of the Bootstrapper.Run method to illustrate this:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> Run(<span style=\"color: blue;\">bool</span> runWithDefaultConfiguration)\r\n        {\r\n            <span style=\"color: blue;\">this</span>.Logger = <span style=\"color: blue;\">this</span>.CreateLogger();\r\n\r\n            <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.Logger == <span style=\"color: blue;\">null</span>)\r\n            {\r\n                <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> InvalidOperationException(Resources.NullLoggerFacadeException);\r\n            }\r\n\r\n            <span style=\"color: blue;\">this</span>.Logger.Log(Resources.LoggerWasCreatedSuccessfully, Category.Debug, Priority.Low);\r\n\r\n            <span style=\"color: blue;\">this</span>.Logger.Log(Resources.CreatingModuleCatalog, Category.Debug, Priority.Low);\r\n            <span style=\"color: blue;\">this</span>.ModuleCatalog = <span style=\"color: blue;\">this</span>.CreateModuleCatalog();\r\n            <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.ModuleCatalog == <span style=\"color: blue;\">null</span>)\r\n            {\r\n                <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> InvalidOperationException(Resources.NullModuleCatalogException);\r\n            }\r\n\r\n            <span style=\"color: blue;\">this</span>.Logger.Log(Resources.ConfiguringModuleCatalog, Category.Debug, Priority.Low);\r\n            <span style=\"color: blue;\">this</span>.ConfigureModuleCatalog();\r\n\r\n            <span style=\"color: blue;\">this</span>.Logger.Log(Resources.CreatingCatalogForMEF, Category.Debug, Priority.Low);\r\n            <span style=\"color: blue;\">this</span>.AggregateCatalog = <span style=\"color: blue;\">this</span>.CreateAggregateCatalog();\r\n\r\n            <span style=\"color: blue;\">this</span>.Logger.Log(Resources.ConfiguringCatalogForMEF, Category.Debug, Priority.Low);\r\n            <span style=\"color: blue;\">this</span>.ConfigureAggregateCatalog();\r\n\r\n            <span style=\"color: blue;\">this</span>.RegisterDefaultTypesIfMissing();\r\n\r\n            <span style=\"color: blue;\">this</span>.Logger.Log(Resources.CreatingMefContainer, Category.Debug, Priority.Low);\r\n            <span style=\"color: blue;\">this</span>.Container = <span style=\"color: blue;\">this</span>.CreateContainer();\r\n            <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.Container == <span style=\"color: blue;\">null</span>)\r\n            {\r\n                <span style=\"color: blue;\">throw</span> <span style=\"color: blue;\">new</span> InvalidOperationException(Resources.NullCompositionContainerException);\r\n            }\r\n\r\n            <span style=\"color: blue;\">this</span>.Logger.Log(Resources.ConfiguringMefContainer, Category.Debug, Priority.Low);\r\n            <span style=\"color: blue;\">this</span>.ConfigureContainer();\r\n\r\n            <span style=\"color: blue;\">this</span>.Logger.Log(Resources.ConfiguringServiceLocatorSingleton, Category.Debug, Priority.Low);\r\n            <span style=\"color: blue;\">this</span>.ConfigureServiceLocator();\r\n\r\n            <span style=\"color: blue;\">this</span>.Logger.Log(Resources.ConfiguringRegionAdapters, Category.Debug, Priority.Low);\r\n            <span style=\"color: blue;\">this</span>.ConfigureRegionAdapterMappings();\r\n\r\n            <span style=\"color: blue;\">this</span>.Logger.Log(Resources.ConfiguringDefaultRegionBehaviors, Category.Debug, Priority.Low);\r\n            <span style=\"color: blue;\">this</span>.ConfigureDefaultRegionBehaviors();\r\n\r\n            <span style=\"color: blue;\">this</span>.Logger.Log(Resources.RegisteringFrameworkExceptionTypes, Category.Debug, Priority.Low);\r\n            <span style=\"color: blue;\">this</span>.RegisterFrameworkExceptionTypes();\r\n\r\n            <span style=\"color: blue;\">this</span>.Logger.Log(Resources.CreatingShell, Category.Debug, Priority.Low);\r\n            <span style=\"color: blue;\">this</span>.Shell = <span style=\"color: blue;\">this</span>.CreateShell();\r\n            <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.Shell != <span style=\"color: blue;\">null</span>)\r\n            {\r\n                <span style=\"color: blue;\">this</span>.Logger.Log(Resources.SettingTheRegionManager, Category.Debug, Priority.Low);\r\n                RegionManager.SetRegionManager(<span style=\"color: blue;\">this</span>.Shell, <span style=\"color: blue;\">this</span>.Container.GetExportedValue&lt;IRegionManager&gt;());\r\n\r\n                <span style=\"color: blue;\">this</span>.Logger.Log(Resources.UpdatingRegions, Category.Debug, Priority.Low);\r\n                RegionManager.UpdateRegions();\r\n\r\n                <span style=\"color: blue;\">this</span>.Logger.Log(Resources.InitializingShell, Category.Debug, Priority.Low);\r\n                <span style=\"color: blue;\">this</span>.InitializeShell();\r\n            }\r\n\r\n            IEnumerable&lt;Lazy&lt;<span style=\"color: blue;\">object</span>, <span style=\"color: blue;\">object</span>&gt;&gt; exports = <span style=\"color: blue;\">this</span>.Container.GetExports(<span style=\"color: blue;\">typeof</span>(IModuleManager), <span style=\"color: blue;\">null</span>, <span style=\"color: blue;\">null</span>);\r\n            <span style=\"color: blue;\">if</span> ((exports != <span style=\"color: blue;\">null</span>) &amp;&amp; (exports.Count() &gt; 0))\r\n            {\r\n                <span style=\"color: blue;\">this</span>.Logger.Log(Resources.InitializingModules, Category.Debug, Priority.Low);\r\n                <span style=\"color: blue;\">this</span>.InitializeModules();\r\n            }\r\n\r\n            <span style=\"color: blue;\">this</span>.Logger.Log(Resources.BootstrapperSequenceCompleted, Category.Debug, Priority.Low);\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Also, it should be worth noting that, as you can check in the <a href=\"http://msdn.microsoft.com/en-us/library/ff921163%28PandP.40%29.aspx\">Modularity QuickStarts</a>, you can use more than one mechanism of module loading in the same <strong>Bootstrapper</strong>.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-03-14T09:44:22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "656943",
    "ThreadId": "48265",
    "Html": "<p>Hi</p>\r\n<p>This helped me&nbsp;</p>\r\n<p><a href=\"http://forums.silverlight.net/post/566102.aspx\">http://forums.silverlight.net/post/566102.aspx</a></p>\r\n<p>regards</p>\r\n<p>AK</p>",
    "PostedDate": "2011-08-11T21:08:04.84-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]