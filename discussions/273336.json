[
  {
    "Id": "674781",
    "ThreadId": "273336",
    "Html": "\r\n<div>\r\n<p>We use PRISM in our Silverlight application.</p>\r\n<p><br>\r\nOur ModulesCatalog.xaml contains the modules that are to be loaded OnDemand. The ModuleType attribute contains also the version (1.0.0.0) of our modules. This all worked fine.<br>\r\nBut now we have change the AssemblyInfo.cs for all modules and specified 1.0.* as the version number.<br>\r\nHow do we deal with this change in our ModulesCatalog.xaml? I have tried to remove the version part from ModuleType, but that does not work.</p>\r\n<p><br>\r\nOne possible solution I am thinking of is this:<br>\r\nImplement code in post-build event for every module, where the new version number together with the module name, is stored in a shared file.<br>\r\nWhen the BootStrapper in the Shell module starts, it will read this file and construct a ModuleCatalog based on these data.<br>\r\nQuestion is how do we construct such a post-build event script?</p>\r\n<p><br>\r\nThe reason we are trying to dynamically change the version numbers for the modules is to resolve a caching of old Xaps at the browser. I do not know if this will even resolve the caching problem.<br>\r\nDoes anyone have some input on this?</p>\r\n</div>\r\n",
    "PostedDate": "2011-09-21T08:52:34.987-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "675425",
    "ThreadId": "273336",
    "Html": "<p>Hi,</p>\n<p>The approach that you suggest using post-build events seems to be a valid approach to achieve you scenario.</p>\n<p>As a possibility, you could try to create a module catalog in your bootstrapper without needing to register your modules in a <strong>xaml </strong>file. The <strong>AddModule</strong> method of the<strong> ModuleCatalog</strong> (which can be used to register modules) has an overload that accepts a <strong>ModuleInfo</strong> as a parameter. This <strong>ModuleInfo </strong>class requires only the following information (which is the same that would be contained in a <strong>xaml </strong>file):</p>\n<ul>\n<li><strong>Module name:</strong> A string with the \"short\" name of the module. This can be set through the constructor or the <strong>ModuleName </strong>property. (e.g \"<strong>MyModule</strong>\") </li>\n<li><strong>Module type:</strong> A string with the \"complete\" name of the module. This can be set through the constructor or the <strong>ModuleType </strong>property. (e.g. \"<strong>MyModule.MyModule, MyModule, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</strong>\") </li>\n<li><strong>Dependencies:</strong> A collection of strings with the names of the modules that this module depends on. This can be set through parameters in the constructor or through the <strong>DependsOn </strong>property. (e.g. \"<strong>OtherModule</strong>\") </li>\n<li><strong>Initialization mode:</strong> the initialization mode of the module. This has to be set through the <strong>InitializationMode </strong>property. (You need to use the <strong>InitializationMode </strong>enumeration) </li>\n<li><strong>Ref:</strong> A string with the name of the <strong>xap </strong>file of this module. This has to be set through the <strong>Ref </strong>property. (e.g: \"<strong>MyModule.xap</strong>\") </li>\n</ul>\n<p>So, as a possible approach, you could use a post-build event in each module to store the aforementioned information in a file (or various files). Then, in your main module you could have a service that retrieve the information for the file (or files), create  a <strong>ModuleInfo </strong>for each module and return a collection containing those <strong>ModuleInfo</strong>s. Then, the bootstrapper could consume this service and register each <strong>ModuleInfo </strong>in the module catalog.</p>\n<p>For more details you can check the <strong>ModuleInfo </strong>class in the Prism library (inside the Modularity folder of the Prism.Desktop project).</p>\n<p>Based on my understanding, a post-build event is simply a .bat file containing command lines. So it may be possible to run an application that could accept as arguments the aforementioned information for the module. Then, that application would organize  and store the information in one or more files.</p>\n<p>The specifics of how to use build events is out of scope of the Prism guidance. However, you might find some useful information in the following link:</p>\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg405479%28v=PandP.40%29.aspx#sec20\">How to: Specify Build Events (C#)</a> </li>\n</ul>\n<p>I hope you find this useful,</p>\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\" target=\"_blank\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-09-22T11:09:31.027-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "680689",
    "ThreadId": "273336",
    "Html": "<p>Is there not a better solution than this?&nbsp; I have the exact same issue in that locally on my dev box I hard code the version to 1.0.0.0.&nbsp; But once I commit this to TFS the assembly versions are overriden by the TFS build process.&nbsp; Which then means that my catalog is pointing to an assembly with the wrong version.</p>\r\n<p>I have several modules which are placed into a xap file each and then downloaded on demand.&nbsp; I was wondering if it would be possible to download the the xap file which then I assume loads these dlls into the app domain and then do some kind of search based on the information (without version) on the information contained within the module info on the app domain?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks</p>\r\n<p>Phil</p>",
    "PostedDate": "2011-10-06T02:05:48.317-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "680964",
    "ThreadId": "273336",
    "Html": "<p>Hi Phil,</p>\n<p>The module info only contains the metadata necessary to describe a module (inlcuding the URI of the XAP file containing the dlls necessary for the module, i.e. the <strong>Ref </strong>property, and the Module Type, among others, as explained by Damian). However, the <strong>ModuleInfo </strong>is not added to the <strong>AppDomain</strong>; the assemblies corresponding to your module are the ones that get added.<br /> <br /> ModuleInfos describe modules whose assemblies might or might not be loaded at the moment the <strong>ModuleInfo </strong>is created. For example, if your module's assembly is inside the main xap of your application, it should be already added to the <strong>AppDomain </strong>at the moment you build the <strong>ModuleInfo </strong>that describes this module. But if your module is meant to be loaded on demand, the module's assemblies will not be loaded at the time the <strong>ModuleInfo </strong>is builded (they will be downloaded and subsequently loaded into the <strong>AppDomain </strong>at the moment you call the <strong>ModuleManager.LoadModule</strong> method to indicate that you wish to loadd that module).<br /> <br /> With that in mind, it seems that it would be possible to create a module info based on the information you obtain from an assembly that is already loaded into the <strong>AppDomain</strong>. For example, you could obtain the assembly qualified name (which includes the version of the assembly containing your module's type) by doing something like this:</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">var</span> assemblyQualifiedName = Type.GetType(<span style=\"color: #a31515;\">\"MyNamespace.MyModule\"</span>).AssemblyQualifiedName;\n</pre>\n</div>\n<p>where <strong>MyNamespace.MyModule</strong> is the name of the type of the main class in your module (i.e. the one that implements the <strong>IModule </strong>interface).</p>\n<p>To find more information on how to download a xap file and load the assemblies inside it into the app domain, you might find the <strong>XapModuleTypeLoader </strong>class (which you can find in the <strong>Modules </strong>folder inside the <strong>Prism.Silverlight</strong> project of the <strong> Prism Library</strong>).</p>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-10-06T12:21:02.103-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "697927",
    "ThreadId": "273336",
    "Html": "<p>Just letting you guys know...</p>\r\n<p>We've got the same scenario that TFS gives us a build number and all associated modules have the same version number. We need a version number to make sure the last modules are loaded in the browser on a new deployment (cache) and we need to know what version we are working with.</p>\r\n<p>We got rid of the ModuleCatalog and are assigning the modules with the correct version numbers in code. Get the current shell module version and prepare your module catalog with the same version number.</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">class</span> AssemblyExtensions\r\n    {\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> Version ParseVersionNumber(Assembly assembly)\r\n        {\r\n            <span style=\"color: blue;\">var</span> assemblyName = <span style=\"color: blue;\">new</span> AssemblyName(assembly.FullName);\r\n            <span style=\"color: blue;\">return</span> assemblyName.Version;\r\n        }\r\n    }\r\n\r\n\r\n<span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> IModuleCatalog CreateModuleCatalog()\r\n        {\r\n            <span style=\"color: blue;\">var</span> version = AssemblyExtensions.ParseVersionNumber(<span style=\"color: blue;\">typeof</span>(Bootstrapper).Assembly).ToString();\r\n\r\n            <span style=\"color: blue;\">var</span> moduleCatalog = <span style=\"color: blue;\">new</span> ModuleCatalog();\r\n\r\n            <span style=\"color: green;\">//&lt;prism:ModuleInfo Ref=\"x.Main.xap\" ModuleName=\"Main\" ModuleType=\"x.Main.ModuleInit, x.Main, Version=1.2.3.4, Culture=neutral, PublicKeyToken=null\" /&gt;</span>\r\n\r\n            moduleCatalog.AddModule\r\n            (\r\n                <span style=\"color: blue;\">new</span> ModuleInfo\r\n                {\r\n                    InitializationMode = InitializationMode.WhenAvailable,\r\n                    Ref = <span style=\"color: #a31515;\">\"x.Main.xap\"</span>,\r\n                    ModuleName = <span style=\"color: #a31515;\">\"Main\"</span>,\r\n                    ModuleType = String.Format(<span style=\"color: #a31515;\">\"x.Main.ModuleInit, x.Main, Version={0}, Culture=neutral, PublicKeyToken=null\"</span>, version)\r\n                }\r\n            );\r\n<span style=\"color: blue;\">return</span> moduleCatalog;\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-11-14T08:54:35.33-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "698073",
    "ThreadId": "273336",
    "Html": "<p>Hi,</p>\r\n<p>Thanks for sharing this with the rest of the community, as it might be useful for other users pursuing this scenario.</p>\r\n<p>Regards,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\" target=\"_blank\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-11-14T13:02:50.433-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "897221",
    "ThreadId": "273336",
    "Html": "<p>Hi all, I am having the same Issue and I don't know how to get the module version number.</p>\r\n<p>Actually I am doing this (see the code), but is seems that the Bootstrapper assembly version is diferent from the modules version. How I can sync the modules and shell version?</p>\r\n<p>&nbsp;</p>\r\n<p>var version = ParseVersionNumber(typeof(Bootstrapper).Assembly).ToString();<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var moduleCatalog = new ModuleCatalog();<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&lt;prism:ModuleInfo Ref=\"x.Main.xap\" ModuleName=\"Main\" ModuleType=\"x.Main.ModuleInit, x.Main, Version=1.2.3.4, Culture=neutral, PublicKeyToken=null\" /&gt;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; moduleCatalog.AddModule<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ModuleInfo<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializationMode = InitializationMode.WhenAvailable,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ref = \"Import.Module.xap\",<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleName = \"Import.Module\",<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleType = String.Format(\"Import.Module.ModuleInit, Import.Module, Version={0}, Culture=neutral, PublicKeyToken=null\", version)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</p>\r\n<p>return moduleCatalog</p>",
    "PostedDate": "2012-08-08T14:03:45.88-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "897724",
    "ThreadId": "273336",
    "Html": "<p>Hi,<br /><br />First of all, take into account that as far as I know <strong>Prism </strong>does not provide any mechanism to manage the versioning of an application. As it can be seen in the following section of the <strong>Prism </strong>documentation, this is one of the <strong>challenges that are not addressed in Prism</strong>:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921153%28v=pandp.40%29#sec4\">Chapter 1: Introduction - Challenges Not Addressed by Prism</a></li>\r\n</ul>\r\n<p>On the other hand, if your issue is related to to a <strong>caching issue with the module's XAP files</strong> (that is, your application is not downloading modules and is using an old locally cached version instead,) you can find a possible workaround to force your application to always download the <strong>XAP </strong>files from the server in the following work item:</p>\r\n<ul>\r\n<li><a href=\"http://compositewpf.codeplex.com/workitem/7846\">Caching issue with Modules xap files</a></li>\r\n</ul>\r\n<p>By using the aforementioned workaround you would not need to change the versions of your modules.<br /><br />I hope this helps,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\" target=\"_blank\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-08-09T11:57:00.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "897746",
    "ThreadId": "273336",
    "Html": "<p>Thanks for your help...</p>\r\n<p>I have noticed that if I use the workaround you mentioned, the xap module will refresh every time. I don't know if that is the best way to resolve this issue.</p>\r\n<p>I have used another workround found in the web. Here is what I did (I share the code to know if it is a correct way to resolve this, let me know any doubt or suggestion)</p>\r\n<p>1) On the siverlight object in the aspx file I defined the source to get the latest xap's creation date</p>\r\n<p>(http://www.codeproject.com/Articles/143414/Prevent-your-Silverlight-XAP-File-from-Caching-in)</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"background-color: yellow;\">&lt;%</span>\r\n    string strSourceFile = @\"ClientBin/MyApp.xap\";\r\n    string param;\r\n    string xappath;\r\n    DateTime xapCreationDate;\r\n    if (System.Diagnostics.Debugger.IsAttached)\r\n        param = \"&lt;param name=\\\"source\\\" value=\\\"\" + strSourceFile + \"\\\" /&gt;\";\r\n    else\r\n    {\r\n        xappath = HttpContext.Current.Server.MapPath(@\"\") + @\"\\\" + strSourceFile;\r\n        xapCreationDate = System.IO.File.GetLastWriteTime(xappath);\r\n        param = \"&lt;param name=\\\"source\\\" value=\\\"\" + strSourceFile + \"?ignore=\"\r\n                + xapCreationDate.ToString() + \"\\\" /&gt;\";\r\n    }\r\n    Response.Write(param);\r\n<span style=\"background-color: yellow;\">%&gt;</span><br /><br />2) Inside the initParameters I sent the creation date for each module (the ones that are created inside the bootsrapper) <br /></pre>\r\n</div>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>       &lt;param name=\"initParams\" value=\"UserName=<span style=\"background-color: yellow;\">&lt;%=</span>User.Identity.Name<span style=\"background-color: yellow;\">%&gt;</span>,<span style=\"background-color: yellow;\">&lt;%</span> \r\n    strSourceFile = @\"ClientBin/Admin.Module.xap\";\r\n   \r\n        xappath = HttpContext.Current.Server.MapPath(@\"\") + @\"\\\" + strSourceFile;\r\n        xapCreationDate = System.IO.File.GetLastWriteTime(xappath);\r\n    \r\n    Response.Write(\"AdminModuleVersion=\" + xapCreationDate.ToString());\r\n<span style=\"background-color: yellow;\">%&gt;</span>\" /&gt;\r\n</pre>\r\n</div>\r\n</p>\r\n<p>3) Pass the init params to bootsrapper</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre> <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> Application_Startup(<span style=\"color: blue;\">object</span> sender, StartupEventArgs e)\r\n        {\r\n            Bootstrapper bootstrapper = <span style=\"color: blue;\">new</span> Bootstrapper();\r\n            bootstrapper.AdminID = e.InitParams[<span style=\"color: #a31515;\">\"AdminModuleVersion\"</span>];\r\n            bootstrapper.Run();\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>4)Build the module using the xap's creation date</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> IModuleCatalog CreateModuleCatalog()\r\n        {\r\n\r\n           \r\n            <span style=\"color: blue;\">var</span> moduleCatalog = <span style=\"color: blue;\">new</span> ModuleCatalog();\r\n\r\n            moduleCatalog.AddModule\r\n       (\r\n           <span style=\"color: blue;\">new</span> ModuleInfo\r\n           {\r\n               InitializationMode = InitializationMode.WhenAvailable,\r\n               Ref = <span style=\"color: blue;\">string</span>.Format(<span style=\"color: #a31515;\">\"Admin.Module.xap?ignore={0}\"</span>, AdminID),\r\n               ModuleName = <span style=\"color: #a31515;\">\"Admin.Module\"</span>,\r\n               ModuleType = String.Format(<span style=\"color: #a31515;\">\"Admin.Module.ModuleInit, Admin.Module, Version=1.0.0.0\"</span>)\r\n           }\r\n\r\n       );\r\n\r\n            <span style=\"color: blue;\">return</span> moduleCatalog;\r\n\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-08-09T12:34:32.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "897771",
    "ThreadId": "273336",
    "Html": "<p>Hi,</p>\r\n<p>Thanks for sharing your findings with the rest of the community, as they might be helpful for other users with the same problem.</p>\r\n<p>Also, I have added this workaround in the previously mentioned work item.</p>\r\n<p>Thanks,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\" target=\"_blank\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-08-09T13:35:11.347-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]