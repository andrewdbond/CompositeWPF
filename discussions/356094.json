[
  {
    "Id": "837467",
    "ThreadId": "356094",
    "Html": "<p><span style=\"color: #000000;\">I am trying to design a pattern using Prism, MEF, and the composite model to add a dynamic toolbar. I have a TabControl region that \"houses\" the main application tabs. The global toolbar will have its views injected into a global toolbar region  defined in the Shell. Since I need to add/remove views dynamically, I read up on the IActiveAware interface and view injection and I am close to my solution. However, when I have my View implement IActiveAware the IsActive event fires as expected; when the  user clicks on the tab, the event fires, when the user clicks on some other tab, the event fires indicating IsActive equals false. But, if I move the IActiveAware implementation to the ViewModel (in keeping with a bare-bones code-behind file suggested by P&amp;P)  the IsActive event fires once on startup with no change when the user clicks on the tabs.</span></p>\n<p>I thought about using a command that notifies the ViewModel when the View gets an IsActiveChanged event, or using the EventAggregator in a similar fashion - but this seems like a bad way of doing things.</p>\n<p>Is this the normal behavior for ViewModels and the IActiveAware interface, shouldn't the View and ViewModel act similarly when one or the other implements this interface?</p>\n<p>Any feedback would be very welcomed!</p>",
    "PostedDate": "2012-05-16T17:39:59.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "837834",
    "ThreadId": "356094",
    "Html": "<p>Hi,</p>\r\n<p>Based on my understanding, if the <strong>view model</strong> of your <strong>view </strong>implements the <strong>IActiveAware </strong>interface, then the <strong>IsActive </strong>property in the <strong>view model</strong> should be set to the corresponding value automatically thanks to the <strong>RegionActiveAwareBehavior</strong>. However, take into account that the <strong>IsActiveChanged </strong>event won't be raised automatically and it must be raised manually in your view model, like for example, in the <strong>setter </strong>of the <strong>IsActive </strong>property.</p>\r\n<p>If, for example, the <strong>IsActive </strong>property of your view model is not updated automatically or you are experiencing another problem regarding the implementation of the <strong>IActiveAware </strong>interface, it would be helpful if you could provide us with more information about this (like for example, a code snippet of your <strong>view </strong>/ <strong>view model</strong>) or a repro-sample application portraying this problem so that we can help you further with this.</p>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-05-17T12:28:20.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "837871",
    "ThreadId": "356094",
    "Html": "<p>I was trying to figure out why the IsActive property&nbsp;gets set&nbsp;when the View implements IActiveAware (and when the corresponding view has \"focus\" or not). But not when the ViewModel implements the interface.</p>\r\n<p>I have a tab region with several TabViews (that get injected into the tab region)&nbsp;and each tab view contains multiple child views that are displayed when a user clicks on a particular tab. To enable a toolbar that reflects actions a user can perform depending on which TabView is \"active\", I inject views into the Shell toolbar region (which is seperate from the tab region but both are defined in the Shell.xaml file).</p>\r\n<p>I was just wondering why if a View implements IActiveAware (and not the ViewModel), it's IsActive property&nbsp;gets set&nbsp;when the tab is visible or not (when user clicks on other tabs - moving away from current tab), but if the ViewModel implements IActiveAware (and not the View), IsActive fires only once and moving amongst the tabs has no effect on setting IsActive.</p>\r\n<p>I know I'm missing seomthing&nbsp;blatantly obvious, but I'm still a bit muddy on this.</p>\r\n<p>Thanks.</p>",
    "PostedDate": "2012-05-17T13:39:22.217-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "838127",
    "ThreadId": "356094",
    "Html": "<p>Hi,</p>\n<p>I believe you could check the following thread, which contains a sample application that portrays the use of the <strong>IActiveAware </strong>interface in a <strong>View Model</strong>, although the views are injected in a <strong>ListBox </strong>control this can be directly replaced with a <strong>TabControl</strong>:</p>\n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/277463\">Sample prism app using IActiveAware?</a> </li>\n</ul>\n<p>Also take into account that when applying this interface in your <strong>View Model </strong>you will have to notify the <strong>UI</strong> that the <strong>IsActive </strong>property in the <strong>View Model</strong> changed. This can be achieved by calling the <strong>RaisePropertyChanged(\"IsActive\")</strong> method in the setter of your <strong> IsActive </strong>property inside your <strong>View Model</strong>.</p>\n<p>I hope you find this useful,</p>\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-05-18T06:04:17.357-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]