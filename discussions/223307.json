[
  {
    "Id": "479504",
    "ThreadId": "223307",
    "Html": "<p>Hi</p>\r\n<p>I would like to populate my catalog from a xaml file. Unfortunatly nothing is display in the shell.</p>\r\n<p>When i populate in code, everything work fine.</p>\r\n<p>I add a silverlight control file and i delete the code-behind.</p>\r\n<p>I copy the ModuleA.xap in the ClientBin directory.</p>\r\n<p>ModuleCatalog.xaml</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleCatalog</span> \r\n    <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:black\">&quot;</span> \r\n    <span style=\"color:red\">xmlns:x</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:black\">&quot;</span> \r\n    <span style=\"color:red\">xmlns:sys</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">clr-namespace:System;assembly=mscorlib</span><span style=\"color:black\">&quot;</span> \r\n    <span style=\"color:red\">xmlns:Modularity</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">clr-namespace:Microsoft.Practices.Composite.Modularity;assembly=Microsoft.Practices.Composite</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfo</span> \r\n      <span style=\"color:red\">Ref</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ModuleA.xap</span><span style=\"color:black\">&quot;</span> \r\n      <span style=\"color:red\">ModuleName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ModuleA</span><span style=\"color:black\">&quot;</span> \r\n      <span style=\"color:red\">ModuleType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ModuleA.ModuleA, ModuleA, Version=1.0.0.0</span><span style=\"color:black\">&quot;</span>\r\n      <span style=\"color:red\">InitializationMode</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">WhenAvailable</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleCatalog</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n<pre>MEFBootstrapper :</pre>\r\n<pre><div style=\"color:black;background-color:white\"><pre>  <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> IModuleCatalog CreateModuleCatalog()\r\n        {\r\n            <span style=\"color:blue\">return</span> Modularity.ModuleCatalog.CreateFromXaml(<span style=\"color:blue\">new</span> Uri(<span style=\"color:#a31515\">&quot;/HDMSApplication;component/ModuleCatalog.xaml&quot;</span>, UriKind.Relative));\r\n        }\r\n</pre>\r\n<pre>Thanks</pre>\r\n</div>\r\n</pre>\r\n</div>",
    "PostedDate": "2010-08-11T22:39:06.087-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "480333",
    "ThreadId": "223307",
    "Html": "<p id=075611a0-8937-012d-e0d6-12313b100c3a>Hi,</p>\r\n<p id=07562080-8937-012d-e0d7-12313b100c3a>I do not know your exact scenario, but it seems that the problem for initializing your ModuleA resides in the ModuleType specified. You may need to specify a more fully-qualified type name. That said, your ModuleType could look like the following:</p>\r\n<p id=07562f40-8937-012d-e0d8-12313b100c3a><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfo </span><span style=\"color:red\">Ref</span><span style=\"color:blue\">=&quot;ModuleA.xap&quot; </span><span style=\"color:red\">ModuleName</span><span style=\"color:blue\">=&quot;ModuleA&quot; <br></span><span style=\"color:red\"><strong>ModuleType</strong></span><span style=\"color:blue\"><strong>=&quot;ModuleA.ModuleA, ModuleA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;</strong> <br></span><span style=\"color:red\">InitializationMode</span><span style=\"color:blue\">=&quot;WhenAvailable&quot; /&gt;<br><br></span><span style=\"color:blue\"> </span>Additionally it is necessary to decorate your module class initializer as is shown below:</p>\r\n<p>[<span style=\"color:#2b91af\">ModuleExport</span>(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">ModuleA</span>))] <span style=\"color:blue\">public class </span><span style=\"color:#2b91af\">ModuleA </span>: <span style=\"color:#2b91af\">IModule </span><a href=\"http://11011.net/software/vspaste\"></a></p>\r\n<p id=07565fe0-8937-012d-e0db-12313b100c3a>For more information on this topic you could take a look at the MEF Modularity Quickstart (download it <a href=\"http://compositewpf.codeplex.com/releases/view/49963\">here</a>). Please note that this Quickstart contains a log, which shows in run-time the state when loading its modules. Therefore, it might be useful for playing with module loading.</p>\r\n<p id=07567090-8937-012d-e0dc-12313b100c3a>Please let me know if this helps.</p>\r\n<p id=07568110-8937-012d-e0dd-12313b100c3a>Fernando Antivero <br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n<p>&nbsp;</p>\r\n<p id=07563f70-8937-012d-e0d9-12313b100c3a>&nbsp;</p>",
    "PostedDate": "2010-08-13T11:51:38.05-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "480352",
    "ThreadId": "223307",
    "Html": "<p>Also, make sure that the references to the Prism libraries in your module projects have the &quot;Copy Local&quot; flag set to false.&nbsp; Otherwise, due to how MEF loads XAPs, the core Prism libraries get loaded twice, the imports are done twice, and you end up with MEF throwing a number of exceptions.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-08-13T12:26:24.557-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]