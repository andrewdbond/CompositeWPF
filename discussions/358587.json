[
  {
    "Id": "845552",
    "ThreadId": "358587",
    "Html": "\r\n<p>Hello, I am new to Prism and the MVVM architecture. I believe I have written some code where my shell has a ContentControl on it that is made up of a Region. That region has a button on it. When I click the button, nothing is firing. I have attached my code\r\n below. Please let me know what I am doing wrong.</p>\r\n<p><strong>Shell.xaml</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    &lt;Grid&gt;\r\n        &lt;ContentControl x:Name=<span style=\"color:#a31515\">&quot;TestButtonRegion&quot;</span> \r\n                                Regions:RegionManager.RegionName=<span style=\"color:#a31515\">&quot;TestButtonRegion&quot;</span> /&gt;\r\n&lt;/Grid&gt;\r\n</pre>\r\n</div>\r\n<p><strong>Bootstrapper.cs</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Bootstrapper : UnityBootstrapper\r\n    {\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> DependencyObject CreateShell()\r\n        {\r\n            Shell rootShell = <span style=\"color:blue\">new</span> Shell();\r\n            Application.Current.RootVisual = rootShell;\r\n            <span style=\"color:blue\">return</span> rootShell;\r\n        }\r\n\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureModuleCatalog()\r\n        {\r\n            <span style=\"color:blue\">base</span>.ConfigureModuleCatalog();\r\n\r\n            ModuleCatalog moduleCatalog = (ModuleCatalog)<span style=\"color:blue\">this</span>.ModuleCatalog;\r\n            moduleCatalog.AddModule(<span style=\"color:blue\">typeof</span>(Geomentum.MediaReach.Modules.TestButton.TestButtonModule));\r\n        }\r\n    }\r\n</pre>\r\n<pre><strong>TestButtonView.xaml</strong></pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre><div style=\"color:black; background-color:white\"><pre>&lt;UserControl x:Class=<span style=\"color:#a31515\">&quot;Geomentum.MediaReach.Modules.TestButton.View.TestButtonView&quot;</span>\r\n    xmlns=<span style=\"color:#a31515\">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span>\r\n    xmlns:x=<span style=\"color:#a31515\">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span>\r\n    xmlns:d=<span style=\"color:#a31515\">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span>\r\n    xmlns:mc=<span style=\"color:#a31515\">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span>\r\n    mc:Ignorable=<span style=\"color:#a31515\">&quot;d&quot;</span>\r\n    d:DesignHeight=<span style=\"color:#a31515\">&quot;312&quot;</span> d:DesignWidth=<span style=\"color:#a31515\">&quot;408&quot;</span>&gt;\r\n    \r\n    &lt;Grid x:Name=<span style=\"color:#a31515\">&quot;LayoutRoot&quot;</span> Background=<span style=\"color:#a31515\">&quot;White&quot;</span>&gt;\r\n        &lt;Button Height=<span style=\"color:#a31515\">&quot;30&quot;</span> Width=<span style=\"color:#a31515\">&quot;50&quot;</span> Content=<span style=\"color:#a31515\">&quot;Here&quot;</span> Command=<span style=\"color:#a31515\">&quot;{Binding Path=SubmitCommand}&quot;</span> Margin=<span style=\"color:#a31515\">&quot;12,12,338,258&quot;</span> /&gt;\r\n    &lt;/Grid&gt;\r\n&lt;/UserControl&gt;\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</pre>\r\n<pre><strong>TestButton.View.xaml.cs</strong></pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> System.Net;\r\n<span style=\"color:blue\">using</span> System.Windows;\r\n<span style=\"color:blue\">using</span> System.Windows.Controls;\r\n<span style=\"color:blue\">using</span> System.Windows.Documents;\r\n<span style=\"color:blue\">using</span> System.Windows.Input;\r\n<span style=\"color:blue\">using</span> System.Windows.Media;\r\n<span style=\"color:blue\">using</span> System.Windows.Media.Animation;\r\n<span style=\"color:blue\">using</span> System.Windows.Shapes;\r\n\r\n<span style=\"color:blue\">namespace</span> Geomentum.MediaReach.Modules.TestButton.View\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> TestButtonView : UserControl, ITestButtonView\r\n    {\r\n        <span style=\"color:blue\">public</span> TestButtonView()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        <span style=\"color:blue\">#region</span> ILayersView Members\r\n        <span style=\"color:blue\">public</span> ViewModel.ITestButtonViewModel Model\r\n        {\r\n            <span style=\"color:blue\">get</span>\r\n            {\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.DataContext <span style=\"color:blue\">as</span> ViewModel.ITestButtonViewModel;\r\n            }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">this</span>.DataContext = value;\r\n            }\r\n        }\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n\r\n    }\r\n}\r\n</pre>\r\n<pre><strong>ITestButtonView.cs (class library)</strong></pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Net;\r\n<span style=\"color:blue\">using</span> System.Windows;\r\n<span style=\"color:blue\">using</span> System.Windows.Controls;\r\n<span style=\"color:blue\">using</span> System.Windows.Documents;\r\n<span style=\"color:blue\">using</span> System.Windows.Ink;\r\n<span style=\"color:blue\">using</span> System.Windows.Input;\r\n<span style=\"color:blue\">using</span> System.Windows.Media;\r\n<span style=\"color:blue\">using</span> System.Windows.Media.Animation;\r\n<span style=\"color:blue\">using</span> System.Windows.Shapes;\r\n<span style=\"color:blue\">using</span> Geomentum.MediaReach.Modules.TestButton.ViewModel;\r\n\r\n<span style=\"color:blue\">namespace</span> Geomentum.MediaReach.Modules.TestButton.View\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">interface</span> ITestButtonView\r\n    {\r\n        ITestButtonViewModel Model { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    }\r\n}\r\n</pre>\r\n<pre><strong>ITestButtonViewModel.cs (class library)</strong></pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Net;\r\n<span style=\"color:blue\">using</span> System.Windows;\r\n<span style=\"color:blue\">using</span> System.Windows.Controls;\r\n<span style=\"color:blue\">using</span> System.Windows.Documents;\r\n<span style=\"color:blue\">using</span> System.Windows.Ink;\r\n<span style=\"color:blue\">using</span> System.Windows.Input;\r\n<span style=\"color:blue\">using</span> System.Windows.Media;\r\n<span style=\"color:blue\">using</span> System.Windows.Media.Animation;\r\n<span style=\"color:blue\">using</span> System.Windows.Shapes;\r\n<span style=\"color:blue\">using</span> Geomentum.MediaReach.Modules.TestButton.View;\r\n\r\n<span style=\"color:blue\">namespace</span> Geomentum.MediaReach.Modules.TestButton.ViewModel\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">interface</span> ITestButtonViewModel\r\n    {\r\n        ITestButtonView View { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n</pre>\r\n<pre><strong>TestButtonViewModel.cs (class library)</strong></pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Net;\r\n<span style=\"color:blue\">using</span> System.Windows;\r\n<span style=\"color:blue\">using</span> System.Windows.Controls;\r\n<span style=\"color:blue\">using</span> System.Windows.Documents;\r\n<span style=\"color:blue\">using</span> System.Windows.Ink;\r\n<span style=\"color:blue\">using</span> System.Windows.Input;\r\n<span style=\"color:blue\">using</span> System.Windows.Media;\r\n<span style=\"color:blue\">using</span> System.Windows.Media.Animation;\r\n<span style=\"color:blue\">using</span> System.Windows.Shapes;\r\n<span style=\"color:blue\">using</span> System.ComponentModel;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> Geomentum.MediaReach.Modules.TestButton.View;\r\n<span style=\"color:blue\">using</span> Microsoft.Practices.Prism.Events;\r\n<span style=\"color:blue\">using</span> Microsoft.Practices.Prism.Commands;\r\n<span style=\"color:blue\">using</span> System.Collections.ObjectModel;\r\n<span style=\"color:blue\">using</span> System.Diagnostics;\r\n\r\n\r\n<span style=\"color:blue\">namespace</span> Geomentum.MediaReach.Modules.TestButton.ViewModel\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> TestButtonViewModel : ITestButtonViewModel, INotifyPropertyChanged\r\n    {\r\n        <span style=\"color:blue\">#region</span> Private Members\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> IEventAggregator eventAggregator;\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> ITestButtonViewModel Members\r\n            <span style=\"color:blue\">public</span> ITestButtonView View { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Data Members\r\n            <span style=\"color:blue\">public</span> DelegateCommand&lt;<span style=\"color:blue\">object</span>&gt; SubmitCommand { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">private</span> <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Contructors\r\n            <span style=\"color:blue\">public</span> TestButtonViewModel(ITestButtonView view, IEventAggregator eventAggregator)\r\n            {\r\n                View = view;\r\n                View.Model = <span style=\"color:blue\">this</span>;\r\n                <span style=\"color:blue\">this</span>.eventAggregator = eventAggregator;\r\n\r\n                <span style=\"color:blue\">this</span>.SubmitCommand = <span style=\"color:blue\">new</span> DelegateCommand&lt;<span style=\"color:blue\">object</span>&gt;(<span style=\"color:blue\">this</span>.Submit);\r\n                <span style=\"color:blue\">this</span>.SubmitCommand.RaiseCanExecuteChanged();\r\n            }\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Subscribed Events\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> Submit(<span style=\"color:blue\">object</span> parameter)\r\n            {\r\n                <span style=\"color:blue\">return</span>;\r\n            }\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> INotifyPropertyChanged Members\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> OnPropertyChanged(<span style=\"color:blue\">string</span> propertyName)\r\n            {\r\n                PropertyChangedEventHandler handler = <span style=\"color:blue\">this</span>.PropertyChanged;\r\n                <span style=\"color:blue\">if</span> (handler != <span style=\"color:blue\">null</span>)\r\n                {\r\n                    handler(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">new</span> PropertyChangedEventArgs(propertyName));\r\n                }\r\n            }\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n    }\r\n}\r\n</pre>\r\n<pre><strong>TestButtonModule.cs (class library)</strong></pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Net;\r\n<span style=\"color:blue\">using</span> System.Windows;\r\n<span style=\"color:blue\">using</span> System.Windows.Controls;\r\n<span style=\"color:blue\">using</span> System.Windows.Documents;\r\n<span style=\"color:blue\">using</span> System.Windows.Ink;\r\n<span style=\"color:blue\">using</span> System.Windows.Input;\r\n<span style=\"color:blue\">using</span> System.Windows.Media;\r\n<span style=\"color:blue\">using</span> System.Windows.Media.Animation;\r\n<span style=\"color:blue\">using</span> System.Windows.Shapes;\r\n<span style=\"color:blue\">using</span> Microsoft.Practices.Prism.Modularity;\r\n<span style=\"color:blue\">using</span> Microsoft.Practices.Prism.Regions;\r\n<span style=\"color:blue\">using</span> Microsoft.Practices.Unity;\r\n<span style=\"color:blue\">using</span> Geomentum.MediaReach.Modules.TestButton.View;\r\n<span style=\"color:blue\">using</span> Geomentum.MediaReach.Modules.TestButton.ViewModel;\r\n\r\n<span style=\"color:blue\">namespace</span> Geomentum.MediaReach.Modules.TestButton\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> TestButtonModule : IModule \r\n    {\r\n        <span style=\"color:blue\">#region</span> IModule Members\r\n\r\n        <span style=\"color:blue\">public</span> IUnityContainer Container { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">private</span> <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">public</span> IRegionManager RegionManager { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">private</span> <span style=\"color:blue\">set</span>; }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()\r\n        {\r\n            <span style=\"color:blue\">this</span>.RegisterViewsAndServices();\r\n            <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.RegionManager.Regions.ContainsRegionWithName(<span style=\"color:#a31515\">&quot;TestButtonRegion&quot;</span>))\r\n            {\r\n                <span style=\"color:blue\">this</span>.RegionManager.Regions[<span style=\"color:#a31515\">&quot;TestButtonRegion&quot;</span>].Add(\r\n                    <span style=\"color:blue\">this</span>.Container.Resolve&lt;ITestButtonViewModel&gt;().View);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> TestButtonModule(IRegionManager regionManager, IUnityContainer container)\r\n        {\r\n            <span style=\"color:blue\">this</span>.Container = container;\r\n            <span style=\"color:blue\">this</span>.RegionManager = regionManager;\r\n        }        \r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">void</span> RegisterViewsAndServices()\r\n        {\r\n            <span style=\"color:blue\">this</span>.Container.RegisterType&lt;ITestButtonView, TestButtonView&gt;();\r\n            <span style=\"color:blue\">this</span>.Container.RegisterType&lt;ITestButtonViewModel, TestButtonViewModel&gt;();\r\n        }\r\n\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2012-06-06T07:41:54.607-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "845679",
    "ThreadId": "358587",
    "Html": "<p>Hi,</p>\r\n<p>After analyzing the code snippets you provided I believe your problem might be related to the fact that you set the <strong>SubmitCommand </strong>property in your view model after setting it as the <strong>DataContext </strong>of the view. As far as I know, after the <strong>DataContext </strong>of the view is set, all changes in the <strong>DataContext </strong>(in this case the <strong>TestButtonViewModel</strong>) have to be notified to the view by raising the <strong>PropertyChanged </strong>event.</p>\r\n<p>For example, you will see that if you raise the <strong>PropertyChanged</strong> event at the end of the <strong>TestButtonViewModel</strong>'s constructor, the command will be executed properly:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> TestButtonViewModel(ITestButtonView view, IEventAggregator eventAggregator)\r\n{\r\n    View = view;\r\n    View.Model = <span style=\"color: blue;\">this</span>;\r\n    <span style=\"color: blue;\">this</span>.eventAggregator = eventAggregator;\r\n\r\n    <span style=\"color: blue;\">this</span>.SubmitCommand = <span style=\"color: blue;\">new</span> DelegateCommand&lt;<span style=\"color: blue;\">object</span>&gt;(<span style=\"color: blue;\">this</span>.Submit);\r\n    <span style=\"color: blue;\">this</span>.OnPropertyChanged(<span style=\"color: #a31515;\">\"SubmitCommand\"</span>);\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Also, another approach could be to set the <strong>DataContext </strong>of the view at the end of the <strong>TestButtonViewModel</strong>'s constructor:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> TestButtonViewModel(ITestButtonView view, IEventAggregator eventAggregator)\r\n{\r\n    <span style=\"color: blue;\">this</span>.View = view;\r\n    <span style=\"color: blue;\">this</span>.eventAggregator = eventAggregator;\r\n\r\n    <span style=\"color: blue;\">this</span>.SubmitCommand = <span style=\"color: blue;\">new</span> DelegateCommand&lt;<span style=\"color: blue;\">object</span>&gt;(<span style=\"color: blue;\">this</span>.Submit);\r\n\r\n    <span style=\"color: blue;\">this</span>.View.Model = <span style=\"color: blue;\">this</span>;\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>As a side note, the <strong>Prism </strong>library is shipped with a <strong>NotificationObject </strong>class which provides a basic implementation of the <strong>INotifyPropertyChanged</strong>. If you wish, your view models can inherit from the aforementioned class to so you don't need to implement the <strong>INotifyPropertyChanged </strong>interface in each of your view models (of course, this depends mostly on the preferences of each developer.) You can find more information about this in the following chapter of the Prism documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg405484%28v=pandp.40%29\">Chapter 5 - Implementing the MVVM Pattern</a></li>\r\n</ul>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-06-06T11:29:53.787-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]