[
  {
    "Id": "130443",
    "ThreadId": "39319",
    "Html": "Hi all,<br>\r\n<br>\r\nI'm currently working on a service which based on a configuration loads modules dynamically. After retrieving this information I load each module for that specific configuration. The dynamically loaded modules can have dependencies on other already loaded modules. The problem with that is that the ModuleLoaded (or the DependencyResolver) doesn't consider already loaded (initialized) modules and therefore throws and exception saying: <br>\r\n<br>\r\n&quot;A module declared a dependency on another module which is not declared to be loaded. Missing module(s): ...&quot;<br>\r\n<br>\r\nIf I don't specify dependencies it works fine.<br>\r\n<br>\r\nAny ideas, how to get around that?<br>\r\n<br>\r\nThanks,<br>\r\nChris<br>\r\n",
    "PostedDate": "2008-11-06T01:25:56.133-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130788",
    "ThreadId": "39319",
    "Html": "<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Hi Chris,</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">A possible way to solve that issue is by creating an extension method to the <b>Module Enumerator</b> like the following one:</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">using</span><span style=\"font-size:10pt;font-family:'courier new'\"> System.Linq;</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">using</span><span style=\"font-size:10pt;font-family:'courier new'\"> System.Collections.Generic;</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;color:green;font-family:'courier new'\">// The namespace is important to make the extension method work.</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">namespace</span><span style=\"font-size:10pt;font-family:'courier new'\"> Microsoft.Practices.Composite.Modularity</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt 1in\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">public</span><span style=\"font-size:10pt;font-family:'courier new'\"> <span style=\"color:blue\">static</span> <span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">ModuleEnumeratorExtensions</span>\r\n<p style=\"margin:0in 0in 0pt 1in\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt 1.5in\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">public</span><span style=\"font-size:10pt;font-family:'courier new'\"> <span style=\"color:blue\">static</span> <span style=\"color:#2b91af\">ModuleInfo</span>[] GetModuleWithDependencies(<span style=\"color:blue\">this</span> <span style=\"color:#2b91af\">IModuleEnumerator</span> moduleEnumerator, <span style=\"color:blue\">string</span> moduleName)</span></p>\r\n<p style=\"margin:0in 0in 0pt 1.5in\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt 2in\"><span style=\"font-size:10pt;color:#2b91af;font-family:'courier new'\">List</span><span style=\"font-size:10pt;font-family:'courier new'\">&lt;<span style=\"color:#2b91af\">ModuleInfo</span>&gt; moduleInfoList = <span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">List</span>&lt;<span style=\"color:#2b91af\">ModuleInfo</span>&gt;();</span></p>\r\n<p style=\"margin:0in 0in 0pt 2in\"><span style=\"font-size:10pt;color:#2b91af;font-family:'courier new'\">ModuleInfo</span><span style=\"font-size:10pt;font-family:'courier new'\"> module = moduleEnumerator.GetModule(moduleName);</span></p>\r\n<p style=\"margin:0in 0in 0pt 2in\"><span style=\"font-size:10pt;font-family:'courier new'\">moduleInfoList.Add(module);</span></p>\r\n<p style=\"margin:0in 0in 0pt 2in\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">if</span><span style=\"font-size:10pt;font-family:'courier new'\"> (module.DependsOn != <span style=\"color:blue\">null</span>)</span></p>\r\n<p style=\"margin:0in 0in 0pt 2in\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt 2.5in\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">foreach</span><span style=\"font-size:10pt;font-family:'courier new'\"> (<span style=\"color:blue\">string</span> dependencyName <span style=\"color:blue\">in</span> module.DependsOn)</span></p>\r\n<p style=\"margin:0in 0in 0pt 2.5in\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt 3in\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">if</span><span style=\"font-size:10pt;font-family:'courier new'\"> (!moduleInfoList.Exists(existingModule =&gt; existingModule.ModuleName == dependencyName))</span></p>\r\n<p style=\"margin:0in 0in 0pt 3in\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt 3.5in\"><span style=\"font-size:10pt;font-family:'courier new'\">moduleInfoList.AddRange(GetModuleWithDependencies(moduleEnumerator, dependencyName));</span></p>\r\n<p style=\"margin:0in 0in 0pt 3in\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0in 0in 0pt 2.5in\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0in 0in 0pt 2in\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0in 0in 0pt 2in\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">return</span><span style=\"font-size:10pt;font-family:'courier new'\"> moduleInfoList.ToArray();</span></p>\r\n<p style=\"margin:0in 0in 0pt 1.5in\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0in 0in 0pt 1in\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span> </p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">So you could then initialize a module on demand in the following way:</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;font-family:'courier new'\">moduleLoader.Initialize( moduleEnumerator.GetModuleWithDependencies(<span style=\"color:#a31515\">&quot;MyOnDemandModule&quot;</span>));</span> </p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">However, it is not necessary to add dependencies to modules loaded at startup from modules loaded on demand, because they will be loaded always (if one of them fails to be loaded, the <b>ModuleLoader</b> will throw a <b>ModuleLoadException</b> exception).</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt -0.6pt\"><span style=\"font-family:calibri\">Please let me know if this helps.</span></p>\r\n<p style=\"margin:0in 0in 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt -0.6pt\"><span style=\"font-family:calibri\">Mariano Converti</span></p>\r\n<span style=\"font-size:11pt;font-family:'calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/mconverti\">http://blogs.southworks.net/mconverti</a></span></span></p>\r\n",
    "PostedDate": "2008-11-07T05:56:57.073-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "130894",
    "ThreadId": "39319",
    "Html": "Hi <span style=\"font-size:10pt;font-family:calibri\">Mariano,<br>\r\n<br>\r\nyou are right about not setting dependencies on start-up loaded modules it came to my mind after thinking a bit more about the reason why the implementation is done that way. So I went with that and I'm now forcing everyone to have his dependencies on start-up loaded modules stated.<br>\r\n<br>\r\nNice extension to the ModuleEnumerator, I was thinking about creating my own enumerator but that is even better!<br>\r\n<br>\r\nthanks,<br>\r\nChris<br>\r\n<br>\r\n</span>\r\n",
    "PostedDate": "2008-11-07T11:15:23.99-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]