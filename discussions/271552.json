[
  {
    "Id": "667843",
    "ThreadId": "271552",
    "Html": "<p>Hello</p>\n<p>I am working to develop a \"real life\" , teachable, and very simple Prism + \"Ria Services\" Application, to share with the community <br /> (is a work in progress) <br /> <a title=\"http://www.xneterp.com/ima/prism/Prism4RiaServicesMefSolution.zip\" href=\"http://www.xneterp.com/ima/prism/Prism4RiaServicesMefSolution.zip\" target=\"_blank\">http://www.xneterp.com/ima/prism/Prism4RiaServicesMefSolution.zip</a></p>\n<p>When done I plan to release it in the same way I have done here<br /> <a title=\"http://aworks.codeplex.com/\" href=\"http://aworks.codeplex.com/\" target=\"_blank\">http://aworks.codeplex.com/</a><br /> <a title=\"http://medlink.codeplex.com/\" href=\"http://medlink.codeplex.com/\" target=\"_blank\">http://medlink.codeplex.com/</a></p>\n<p><br /> Regards</p>",
    "PostedDate": "2011-09-05T13:13:34.83-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "668187",
    "ThreadId": "271552",
    "Html": "<p>Hi,</p>\r\n<p>Thank you for sharing your experience on the subject. In case you find a specific issue regarding Prism, please create a new thread in the discussions so that we analyze your problem.</p>\r\n<p>As for the samples about Prism, you might find the <a title=\"Prism Training Kit\" href=\"http://prismtk.codeplex.com/\">Prism Training Kit</a> useful, where there are hands on labs with step-by-step guidance to fulfill certain scenarios in Prism.</p>\r\n<p>Additionally, you might find the <a href=\"http://msdn.microsoft.com/en-us/library/gg430879%28PandP.40%29.aspx\">QuickStarts</a> and <a href=\"http://msdn.microsoft.com/en-us/library/gg405483%28PandP.40%29.aspx\">Reference implementations</a> in Prism useful. Finally, you can check some of these blogs, where you might find guidance and How-Tos for specific Prism scenarios:</p>\r\n<ul>\r\n<li><a href=\"http://blogs.southworks.net/aadami\">Agustin Adami</a></li>\r\n<li><a href=\"http://blogs.southworks.net/dcherubini\">Damian Cherubini</a></li>\r\n<li><a title=\"Damian Schenkelman\" href=\"http://blogs.southworks.net/dschenkelman\">Damian Schenkelman</a></li>\r\n<li><a title=\"Guido Maliandi\" href=\"http://blogs.southworks.net/gmaliandi\">Guido Maliandi</a></li>\r\n</ul>\r\n<p>Thanks,</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-09-06T10:16:11.963-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "673123",
    "ThreadId": "271552",
    "Html": "<p><br /> Thank you Guido, Great documentation<br /> <br /> In Module5 / ViewModels / MasterViewModel / line 54<br /> <br /> I try to use that event so when a customer is selected, his/her orders will display in the Grid to the right</p>\n<p><strong>DataItemsCv.CurrentChanged += new EventHandler(SelectedItemChanged);</strong></p>\n<p><strong>My main goal is not going to Complex and keeping the application very simple and teachable<br /> </strong></p>\n<p><a href=\"$clip_image001[4].png\"><img style=\"padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0; vertical-align: top;\" title=\"clip_image001\" src=\"http://www.xneterp.com/ima/prism/PrismRiaV2.png\" border=\"0\" alt=\"Main Page\" width=\"831\" height=\"496\" /></a></p>\n<p><br /> Regards</p>",
    "PostedDate": "2011-09-17T09:29:21.057-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "673922",
    "ThreadId": "271552",
    "Html": "<p>Hi Oscar,</p>\r\n<p>I downloaded your sample, so far I couldn't find an error in your <strong>Event Aggregator </strong>implementation. On the other hand when I uncomment the aforementioned line of code, I get a <strong>NullReferenceException</strong> when trying to subscribe to that event. Is this the error you are mentioning?</p>\r\n<p>Waiting for your answer.</p>\r\n<p>Regards</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2011-09-19T15:38:56.353-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "673940",
    "ThreadId": "271552",
    "Html": "<p>Yes..</p>\n<p>Master /Child.&nbsp;</p>\n<p>Customer/ Orders</p>\n<p>but very simple, and with the minimum amount of code possible.. with the great \"Code Practices\" prism teaches</p>",
    "PostedDate": "2011-09-19T16:25:54.067-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "674208",
    "ThreadId": "271552",
    "Html": "<p>Hi Oscar,</p>\r\n<p>We examined your sample again and found a possible way you could achieve the scenario you've mentioned. As you're probably aware of, you could use the <strong>Event Aggregator</strong> to achieve communication between loosely coupled components; and in this case, it seems to suit your requirements well.</p>\r\n<p>So, in order to be able to use the <strong>Event Aggregator</strong> to notify your <strong>Orders </strong>View Model that the customer in the <strong>Customers </strong>View has changed, you need to have a notion of which is the selected customer. We thought that you could make use of the delegate command you have defined in your <strong>Customers </strong>View Model to pass that information to the View Model, so that you can call an event with such information from there.</p>\r\n<p>We modified the <strong>Command1 </strong>command to be of type <strong>DelegateCommand&lt;Customer&gt;</strong>, and added a <strong>CommandParameter</strong> in the button in the view (as shown in the code snippet below):</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Button</span> <span style=\"color: red;\">Grid.Row</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Grid.Column</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">1</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Content</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Cmd</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Width</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">35</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Margin</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">4</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">HorizontalAlignment</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Right</span><span style=\"color: black;\">\"</span>\r\n                <span style=\"color: red;\">prism:Click.Command</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding Command1}</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">prism:Click.CommandParameter</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding ElementName=CustomersDataGrid, Path=SelectedItem}</span><span style=\"color: black;\">\"</span> <span style=\"color: blue;\">/&gt;</span>\r\n</pre>\r\n</div>\r\n<p>This way, when clicking that button, the execute method of the command will receive the selected customer as a parameter, which you can thus use to obtain the necessary information to publish your event through the <strong>Event Aggregator</strong> (for example, the ID of your customer). The following code snippet illustrates the aforementioned:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> ExecuteCommand1(Customer commandParameter)\r\n        {\r\n            _eventAggregator.GetEvent&lt;CustomerSelectedEvent&gt;().Publish(commandParameter.CustomerID);\r\n        }\r\n</pre>\r\n</div>\r\n<p>Since you should have previously subscribed to that event in your <strong>Orders </strong>View Model (as in the following snippet), you can add the corresponding logic in the orders view to react to that event accordingly (retrieving the appropriate data and updating the orders displayed):</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>[ImportingConstructor]\r\n        <span style=\"color: blue;\">public</span> OrderViewModel( IEventAggregator eventAggregator, IOrderServiceAgent serviceAgent)\r\n        {\r\n           (...)\r\n            eventAggregator.GetEvent&lt;CustomerSelectedEvent&gt;().Subscribe(CustomerSelectionChanged);\r\n        }\r\n</pre>\r\n</div>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-09-20T07:26:43.417-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "675428",
    "ThreadId": "271552",
    "Html": "<p>Hi,</p>\n<p>Based on my understanding of your scenario, after watching your <a href=\"http://www.xneterp.com/vid/Medlink/MedLink.html\"> video</a>, I realize that a better approach to fulfill it, could be to define a <strong> Custom Behavior </strong>in a common project, which will contain the logic for an attached behavior that should bind the DataGrid event in your <strong>CustomersView </strong>with the Command in the ViewModel. You will find samples of this in the End solution of the Communication exercises of the Prism <a href=\"http://prismtk.codeplex.com/releases/56048/download/169718\">Training Kit v4.0</a>.</p>\n<p>Particularly you might take a look at the following code files of Exercise 2:</p>\n<ul>\n<li>&nbsp;&nbsp;&nbsp;&nbsp; Prism.Workshop\\Workshop.Infrastructure\\Behaviors\\<strong>DataGridSelectedItemCommandBehavior.cs</strong> </li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp; Prism.Workshop\\Workshop.Infrastructure\\Behaviors\\<strong>ProductsListView.xaml</strong> </li>\n</ul>\n<ul>\n</ul>\n<p>I hope you find this useful.</p>\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2011-09-22T11:22:22.347-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]