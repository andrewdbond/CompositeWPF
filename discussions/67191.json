[
  {
    "Id": "228406",
    "ThreadId": "67191",
    "Html": "<p>Hey,</p>\r\n<p>I'm still a bit of a novice on this and I'm working on my first Silverlight application that uses the composite WPF and Silverlight framework.</p>\r\n<p>The situation I've run into is this, I have a login screen that looks totally different than the rest of my application. Different logo's, background colour,  totally different layout. So how do I solve this with only one shell? Do I just change the design of the shell dynamically when I load in the usercontrols when a user logs in, or do I put the layout of the entire page in a Module? That would mean I'd need an area that covers the whole page and other area's overlapping this and that doesn't seem like best practise.&nbsp; How is this generally solved? I can imagine that my application might have multiple different layouts, am I supposed to put all area's for all parts of the application in one shell? Won't that get very messy?</p>\r\n<p>Anyway I hope you get my point and I'm sure there's a good solution for this, I just have to find it. Thanks for any feedback you can give me and if there's anything that I didnt make clear enough please feel free to ask.</p>",
    "PostedDate": "2009-08-27T07:40:02.703-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "228492",
    "ThreadId": "67191",
    "Html": "<p>Hi</p>\r\n<p>It is great that you are trying out Prism! Regarding your question, one possible approach could be having this login screen as a view in a particular module. At runtime, you add this view to the <strong>MainRegion</strong> of your application (before adding any other view). The user logs in, and based on his credentials, you can load the different modules you require on demand (which is useful, because you might avoid downloading unnecessary modules if a particular user does not have some functionality enabled).</p>\r\n<p>Once the rest of the modules are loaded, you can simply replace the View in the <strong>MainRegion</strong>, which the main view of your application. This is easily achievable using a <strong>SingleActiveRegion</strong> (attach the region to any <strong>ContentControl</strong> or inherited control). This kind of region only shows one view at a time.<span style=\"color:#1f497d\"> </span>After the different modules are loaded you can show the views you require in other regions you created.</p>\r\n<p>The following articles from the Prism documentation might be useful for you:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd490826.aspx\">How to: Show a View in a Region Using View Discovery UI Composition</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd458899.aspx\">How to: Show a View in a Region Using View Injection UI Composition</a></li>\r\n</ul>\r\n<p>Please let me know if this helps.</p>\r\n<p>Damian Schenkelman<br><span style=\"font-size:11pt\" lang=EN-US><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></span></p>",
    "PostedDate": "2009-08-27T11:32:40.09-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "228615",
    "ThreadId": "67191",
    "Html": "<p>Hey,</p>\r\n<p>thanks for the response. Those links are interresting but I don't know if it totally covers my question. I got far enough with Prism to know how to inject views and that but I was wondering about what happens when you add too many regions to the application.</p>\r\n<p>Lets say my main application has a pretty simple layout and has two regions, a main region and a navigation region. so it'd kinda look like this:<br>____________<br>|&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<br>|&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |</p>\r\n<p>Yeah, pretty simple.</p>\r\n<p>So now I want my login screen, this looks pretty different. I want 1 region in the middle. So should I make a new region for that in the shell page? It would kind of overlap the 2 regions I already have, that's not very nice I think. I guess I could use the main region and try and style it in the middle of the page while it is in that but that'd be a bit of a hassle and it would, I think, defeat the point of regions.</p>\r\n<p>So yeah, I know how to add views to regions, but I don't know I can solve the different layouts of regions. What if I want to have one screen in my application that has 6 regions showing some sort of overview. I can't imagine that when using prism you are bound to one layout throughout the entire application. Also the issue about the page layout. Right now I've set my background to gray for the login, but for the main page I want it to be another colour, do I just change this in the code?</p>\r\n<p>Anyway I'll read through those links and see if I can find an answer myself, but if I could get any pointers towards the correct solution it'd be great.</p>\r\n<p>Thanks for your time.</p>",
    "PostedDate": "2009-08-28T00:28:22.587-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "228618",
    "ThreadId": "67191",
    "Html": "<p>Remember that you can nest regions. So you can have one region being the entire window contents and two regions as &quot;main region&quot; and &quot;navigation region&quot; for a total of three.</p>",
    "PostedDate": "2009-08-28T00:37:30.963-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "228620",
    "ThreadId": "67191",
    "Html": "<p>Hm that doesn't seem like a bad solution, I guess it would solve my login screen issue. But what if I have 4 regions evenly spaced out in part of my application? I guess they could be nested too if I do it properly. I will give it a try, thanks.</p>",
    "PostedDate": "2009-08-28T00:50:58.453-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "443770",
    "ThreadId": "67191",
    "Html": "<p>Tom7, im pulling my hair out for the same reason. I am building a Rich client application but i think i can post here since i am following the Prism frame work and my concern is the same. I have around 6 diffrent screens with diffrent layouts in my application. The Stock Trader Reference Implementation show just one screen and so is neatly divided into some 4 regions. As Tom asks am i bound to one layout if i use prism or is there a nice way. NICE since i want to follow the best practice in this regard and still use the Prism framework. Hope this forum thread has not gone cold and someone would reply. By the way how did u fix it Tom?</p>",
    "PostedDate": "2010-05-17T06:16:15.51-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "443807",
    "ThreadId": "67191",
    "Html": "<p>Hey Mike,</p>\r\n<p>Ah this is from a pretty long time ago. Luckily our team did manage to find a solution eventually. I'm not 100% sure if it's the best solution but it works fine for us. Here's what I did basically.</p>\r\n<p>Basically, our application has only 2 really different layouts. The login, which has one screen in the middle and the main application, which has an outlookbar on the left and other screens on the right.</p>\r\n<p>First I made a fullscreen region in the shell.xaml. This is the only region in the shell.<br>like this:<br>&lt;ContentControl regions:RegionManager.RegionName=&quot;FullScreen&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VerticalContentAlignment=&quot;Stretch&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HorizontalContentAlignment=&quot;Stretch&quot;&gt;<br>&lt;/ContentControl&gt;</p>\r\n<p>When the application starts I register the Welcome view with the fullscreen region:</p>\r\n<p>&nbsp; m_regionManager.RegisterViewWithRegion(Regions.FullScreen.ToString(), () =&gt; m_container.Resolve&lt;ViewWelcome&gt;());</p>\r\n<p>The ViewWelcome has it's own regions for the login screen. (A little screen in the middle, maybe some other stuff like a newsfeed).</p>\r\n<p>Then when the user has logged in successfully I deactivate the welcome screen and activate the Main screen, which contains all the regions for the main application. I do this in the shell.xaml.cs codebehind, subscribing to an event using the eventaggregator like this in the constructor:</p>\r\n<p>m_eventAggregator.GetEvent&lt;SwitchViewsEvent&gt;().Subscribe(switchViewsEventHandler, true);</p>\r\n<p>And this is the method that it uses to switch the views:</p>\r\n<p>&nbsp; private void switchViewsEventHandler(string viewSetName)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (viewSetName.ToLower())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case &quot;login&quot;:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegionViewManager.DeactivateView(m_regionManager.Regions[Regions.FullScreen.ToString()],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(ViewMain));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegionViewManager.AddAndActivateView(m_regionManager.Regions[Regions.FullScreen.ToString()],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(ViewWelcome),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_container);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case &quot;main&quot;:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegionViewManager.DeactivateView(m_regionManager.Regions[Regions.FullScreen.ToString()],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(ViewWelcome));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegionViewManager.AddAndActivateView(m_regionManager.Regions[Regions.FullScreen.ToString()],<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(ViewMain),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_container);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;</p>\r\n<p>The most interresting classes would be the deactivate and activate methods in the RegionViewManager class, so I'll paste them here.</p>\r\n<p>public static class RegionViewManager<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void DeactivateView(IRegion region, Type viewType)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (object view in region.Views)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (view.GetType() == viewType)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; region.Deactivate(view);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void AddAndActivateView(IRegion region, Type viewType, IUnityContainer container)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool found = false;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (var existingView in region.Views)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(existingView.GetType() == viewType)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; region.Activate(existingView);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; found = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!found)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var view = container.Resolve(viewType);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; region.Add(view);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; region.Activate(view);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>So basically to summarise I first activate the welcome view, which is in the fullscreen Region, then when I login I deactivate the welcome view and activate the main view, also in the fullscreen region. These views both have their own regions which makes it possible for me to basically make as many different layouts in the applications as I want.</p>\r\n<p>I hope this helps, if you still have trouble I could always whip up a little sample application for you when I get home from work.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-05-17T07:39:51.867-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "443809",
    "ThreadId": "67191",
    "Html": "<p id=213530b0-43ef-012d-beed-1231390f5151>Hi Mike,</p>\r\n<p id=21353af0-43ef-012d-beee-1231390f5151>Although I don&rsquo;t know the specific of your application, I will try to provide some ideas to achieve your scenario. Let&rsquo;s assume that instead of 6, you have 2 different layouts (this is still valid for 6, but requires more examples). They could be something like:</p>\r\n<p><img src=\"http://blogs.southworks.net/dschenkelman/files/2010/05/layout.png\" alt=\"\"></p>\r\n<p id=21355980-43ef-012d-bef0-1231390f5151>You might be inclined to place all of these regions in the Shell and work really hard to get them to display as you need in different moments. However, this is no necessarily the best approach. Another possible way could be having a <strong>LayoutModule</strong> (or something similar) which provides <strong>LayoutViews</strong>. Each of the above layouts I took as an example could be views with nested regions and your Shell would only have a single <strong>LayoutRegion</strong> which occupies the whole window.</p>\r\n<p id=21357220-43ef-012d-bef1-1231390f5151>With the above mentioned approach you simply change the active layout view to modify the layout of your application. Plus, if you have some common display in all layouts (say a menu at the top), you can make it part of the Shell and simply change all the rest.</p>\r\n<p id=21358c00-43ef-012d-bef2-1231390f5151>I hope the ideas explained above are clear.</p>\r\n<p id=2135a3c0-43ef-012d-bef3-1231390f5151>Please let me know if this helps.</p>\r\n<p id=2135ba80-43ef-012d-bef4-1231390f5151>Damian Schenkelman <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2010-05-17T07:40:06.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "443813",
    "ThreadId": "67191",
    "Html": "<p>Damian,</p>\r\n<p>We did consider doing that, but it basically meant we had to put all the views into the shell.xaml, which we didn't like as it totally messed up our design view for the general application in Visual Studio and Blend and it just feels pretty messy. Still it's an interesting approach, I wouldn't mind getting some feedback on what you think of the approach we used (as described in my post above yours).</p>",
    "PostedDate": "2010-05-17T07:44:17.713-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "460075",
    "ThreadId": "67191",
    "Html": "<p id=98519be0-5211-012d-4872-12313b065a51>Hi,</p>\r\n<p id=9851a620-5211-012d-4873-12313b065a51>Sorry for the delayed response. Your  approach seems right, but you could put the logic for activating and  deactivating views in a <strong>ShellViewModel</strong>, instead of the Shell&rsquo;s  code behind. This would give you some benefits, for example testability. You can  read more about MVVM in <a href=\"http://msdn.microsoft.com/en-us/magazine/dd419663.aspx\">this  article</a>.</p>\r\n<p>Another consideration is that, since you are only deactivating the views and  not actually removing them, they are still loaded, and so they consume memory,  which could be a performance issue.</p>\r\n<p id=985209b0-5211-012d-4878-12313b065a51>I hope you find this helpful.</p>\r\n<p id=98521f90-5211-012d-4879-12313b065a51>Guido Leandro Maliandi <br><a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2010-06-25T13:34:34.05-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "460375",
    "ThreadId": "67191",
    "Html": "<p>Oh My God,</p>\r\n<p>First of all haaaaaats offfffffff to all you awwwwwwwwwsome guys. Something that was left back in August 2009</p>\r\n<p>was brought back to life in May 2010, and with such dedication.</p>\r\n<p>Thankyou Tom, Thankyou Damian, Thankyou Maliandi and &nbsp;Thankyou Tom and Thankyou Damian again.</p>\r\n<p>After that 'request of help' of mine, something went wrong, the one person i am alive for today, was facing a deep distress, that is priority-one for me and</p>\r\n<p>so all coding took the backseat.</p>\r\n<p>Its now that i am coming back to this and i cant but thankyou guys again and again. I am going to try out the suggestions and get back with how it worked</p>\r\n<p>in my specific case (with more details of my specific case) and hopefully give you guys back something for all what you all have given here.</p>\r\n<p>Moderator sorry i do not intend to move off the topic, or be unprofessional.</p>\r\n<p>So next post... all technical...</p>\r\n<p>Thanks to all of you.</p>",
    "PostedDate": "2010-06-27T10:13:04.97-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "462008",
    "ThreadId": "67191",
    "Html": "<p>Hi Damian,</p>\r\n<p>&nbsp;</p>\r\n<p>I am trying to build an App similar to what has been mentioned by OP. If I go with the approach that you mentioned where there is a LayoutRegion in Shell which displays my LayoutView. Can you show an example where LayoutView would contain nested regions? Will it be possible to display a UserControl in different LayoutView nested regions? In my design I need to display modal dialogs that appear as overlays. How can I accomplish that?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks</p>",
    "PostedDate": "2010-06-30T23:00:56.113-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]