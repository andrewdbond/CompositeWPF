[
  {
    "Id": "980839",
    "ThreadId": "427802",
    "Html": "\r\n<p>Hello,&nbsp;</p>\r\n<p>I have ItemsControl as a Region in my Prismv4 WPF app. In this region I want to add multiple instances of the same View... so basicly I do something like this:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>                <span style=\"color:blue\">var</span> id = DateTime.UtcNow.Ticks;\n                <span style=\"color:blue\">var</span> uriQuery = <span style=\"color:blue\">new</span> UriQuery\n                    {\n                        { <span style=\"color:#a31515\">&quot;ID&quot;</span>, id.ToString(CultureInfo.InvariantCulture) },\n                    };\n                <span style=\"color:blue\">this</span>.regionManager.RequestNavigate(\n                    RegionNames.MyRegion, <span style=\"color:blue\">new</span> Uri(ViewNames.MyView &#43; uriQuery.ToString(), UriKind.Relative));\n</pre>\r\n</div>\r\n<p>Now what is the problem... I also want to remove this Views:</p>\r\n<p>In their ViewModels I do this:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>            <span style=\"color:blue\">var</span> views = <span style=\"color:blue\">this</span>.regionManager.Regions[RegionNames.MyRegion].Views;\n\n            <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> view <span style=\"color:blue\">in</span> views)\n            {\n                <span style=\"color:blue\">var</span> myView = (IMyView)view;\n                <span style=\"color:blue\">if</span> (myView.ViewSortHint == <span style=\"color:blue\">this</span>.ID)\n                {\n                    <span style=\"color:blue\">this</span>.regionManager.Regions[RegionNames.MyRegion].Remove(view);\n                }\n            }\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Well it works if there are no more than 2 Views in MyRegion. When I add three the first one is removed and second one throws InvalidOperationException&nbsp;<em>Added item does not appear at given index '0'.\r\n</em>at line&nbsp;</p>\r\n<p>this.regionManager.Regions[RegionNames.MyRegion].Remove(view);</p>\r\n<p>I failed to find the solution. It drives me absolutely crazy!</p>\r\n",
    "PostedDate": "2012-12-27T06:13:23.137-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "980890",
    "ThreadId": "427802",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Based on my understanding, this kind of problems seems to appear when modifying a collection of items, while iterating over it using a\r\n<strong>foreach </strong>statement. In this case, you are iterating over the <strong>\r\nViews </strong>collection of the region using a <strong>foreach</strong> and modifying it inside by removing a view from the region.</p>\r\n<p>This is mentioned in the following MSDN article:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ttw7t8t6%28v=vs.100%29.aspx\">Foreach statement (C#)</a>\r\n</li></ul>\r\n<p>A quick approach to avoid this kind of problems is to &quot;find&quot; what elements you want to remove (in this case a view) from the collection and remove them outside the\r\n<strong>foreach </strong>statement. For example:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> views = <span style=\"color:blue\">this</span>.regionManager.Regions[RegionNames.MyRegion].Views;\r\n<span style=\"color:blue\">object</span> viewToRemove = <span style=\"color:blue\">null</span>;\r\n\r\n<span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> view <span style=\"color:blue\">in</span> views)\r\n{\r\n    <span style=\"color:blue\">var</span> myView = (IMyView)view;\r\n    <span style=\"color:blue\">if</span> (myView.ViewSortHint == <span style=\"color:blue\">this</span>.ID)\r\n    {\r\n        <span style=\"color:green\">// We found the view we want to remove</span>\r\n        viewToRemove = myView;\r\n    }\r\n}\r\n\r\n<span style=\"color:blue\">if</span>(viewToRemove != <span style=\"color:blue\">null</span>)\r\n{\r\n    <span style=\"color:green\">// We remove the view outside the foreach</span>\r\n    <span style=\"color:blue\">this</span>.regionManager.Regions[RegionNames.MyRegion].Remove(viewToRemove);\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Another approach could be to use a <strong>for </strong>loop instead of a <strong>\r\nforeach </strong>loop.</p>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br>\r\n<a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>\r\n",
    "PostedDate": "2012-12-27T09:21:06.68-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "982252",
    "ThreadId": "427802",
    "Html": "\r\n<p>Hi,&nbsp;</p>\r\n<p>Thank you very much for your reply. I am sorry that I react this late. I forgot to mention this, but I also tried</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>            <span style=\"color:blue\">var</span> views = <span style=\"color:blue\">this</span>.regionManager.Regions[RegionNames.MyRegion].Views.Select(v =&gt; (IMyView)v);\n            <span style=\"color:blue\">var</span> viewToRemove = views.SingleOrDefault(v =&gt; v.ViewSortHint == <span style=\"color:blue\">this</span>.ID);\n            \n            <span style=\"color:blue\">if</span> (viewToRemove != <span style=\"color:blue\">null</span>)\n            {\n                <span style=\"color:blue\">this</span>.regionManager.Regions[RegionNames.MyRegion].Remove(viewToRemove);\n            }</pre>\r\n<pre>It's basicly the code you provided. No <strong>foreach</strong>. And it had same result. When I add two views to MyRegion(ItemsControl) it works fine. When&nbsp;there are 3 or more views first is removed and second throws&nbsp;<strong>InvalidOperationException</strong> Added item does not appear at given index '0'. <strong>UPDATE </strong>I also tried your code and it does not work either. Only thing comes to my mind. I did not say that in that region I have custom SortComparison method. i don't know if it's somehow important.</pre>\r\n</div>\r\n",
    "PostedDate": "2013-01-02T02:00:52.277-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "982304",
    "ThreadId": "427802",
    "Html": "\r\n<p>Hi,</p>\r\n<p>So far I couldn't reproduce this behavior, perhaps if you are able to reproduce this undesired behavior in isolation, it would be helpful if you could provide us with a repro sample application; so that we can help you find the underlying cause behind it.</p>\r\n<p>Regards,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2013-01-02T06:08:28.093-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "982687",
    "ThreadId": "427802",
    "Html": "\r\n<p>Hello,</p>\r\n<p><span style=\"white-space:pre\"></span>So <a href=\"http://static.subyho.com/PrismBug/ItemsControlRegion.zip\" target=\"_blank\">\r\nhere</a> it is... It behaves exactly like I described...</p>\r\n<p><span style=\"white-space:pre\"></span>Application have single button and in it's command I navigate to NotificationRegion. (please look at &quot;TestViewModel.cs&quot; and &quot;NotifyCommand&quot;) There is a timer in target View's ViewModel. NotificationView gets removed from\r\n NotificationRegion after 5 seconds. Timer can be easily substituted with command(it's also there, but it's commented out, look into NotificationViewModel.cs) Like I said before... unless I add more than two NotificationViews to NotificationRegion everything\r\n is OK. Thank you very much for your time!</p>\r\n<p>Viktor La Croix</p>\r\n",
    "PostedDate": "2013-01-03T07:52:45.057-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "982819",
    "ThreadId": "427802",
    "Html": "\r\n<p>Hi Viktor,</p>\r\n<p>We have downloaded your repro-sample application and we could reproduce the exception you are mentioning.</p>\r\n<p>After analyzing your sample, we found that indeed the problem is related to your custom\r\n<strong>SortComparison </strong>approach (if this method is not used, the exception does not appear.) However, we are not sure if this problem is only related to the logic behind the sorting method or if it is also a bug in the\r\n<strong>Prism </strong>library where this kind of scenarios are not properly supported.</p>\r\n<p>Basically, the cause behind this exception is this:</p>\r\n<ul>\r\n<li>When a view is added in the <strong>NotificationRequest </strong>the <strong>\r\nRegion </strong>automatically re-sorts its views by using your custom <strong>SortComparison\r\n</strong>method. However, during this operation, the <strong>ViewSortHint </strong>\r\nproperty of the newly added view will return <em><strong>null</strong></em>. Based on my understanding, this happens because the\r\n<strong>OnNavigatedTo</strong> method of the view model (where the <strong>ID </strong>\r\nproperty used for the <strong>ViewSortHint </strong>is set) is invoked after the views are ordered. Hence, during the sorting process the new view has no\r\n<strong>ViewSortHint</strong>, and it would be sorted incorrectly. </li><li>When a <strong><em>second </em></strong>view is added in the region the same happens, with the difference that the\r\n<em><strong>first </strong></em>view now has its corresponding <strong>ViewSortHint\r\n</strong>property set. Hence, for several views, all view are correctly sorted with the exception of the new one.\r\n</li><li>When removing views from a <strong>Region</strong>, <strong>Prism </strong>first obtains the corresponding\r\n<em><strong>index</strong> </em>for the view inside the view collection. Then (for some reason)\r\n<strong>Prism </strong>sort its collection of views again and after that, it removes the views using the\r\n<em><strong>index</strong></em>. Here is where the problem arises. As the views were not completely sorted, due to the behavior described above, the views are re-sorted (as now the last view has its\r\n<strong>ViewSortHint</strong> set) and therefore, their indexes are changed. When trying to remove the view the\r\n<em><strong>index </strong></em>is no longer valid, throwing an exception. </li></ul>\r\n<p>As complex as this may sound, a possible work-around to avoid this behavior could be to re-sort the collection of views before trying to remove a view. However, currently this cannot be done manually, so you will need to force the sorting logic of the\r\n<strong>Region </strong>to execute indirectly. A possible approach to do this is to change the\r\n<strong>SortComparison </strong>property of the <strong>Region </strong>like this:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// In the beginning of the TimerOnTick method of the NotificationViewModel class</span>\r\nregionManager.Regions[RegionNames.NotificationRegion].SortComparison = <span style=\"color:blue\">null</span>;\r\nregionManager.Regions[RegionNames.NotificationRegion].SortComparison = NotificationService.CompareMethod;\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>This will force the <strong>Region </strong>to resort the views, avoiding movements during the removal process.</p>\r\n<p>We will kept analyzing this to see if creating a work item in the issue tracking section is required.</p>\r\n<p>I you find this handy,</p>\r\n<p>Damian Cherubini<br>\r\n<a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>\r\n",
    "PostedDate": "2013-01-03T13:44:45.593-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "983060",
    "ThreadId": "427802",
    "Html": "\r\n<p>Hello,&nbsp;</p>\r\n<p>Thank you! It's great answer... It was really bad idea to use ticks in <em>Message</em> property, because I did not see it myself. First of all my\r\n<strong>SortComparison</strong> method was <strong>wrong&nbsp;</strong>(I wanted the oposite). I modified\r\n<em>Message</em> property of <strong>NotificationViewModel</strong> to be simple int number and it was obvious. Views were sorted wrong. (5 views from top to bottom 5 1 2 3 4)</p>\r\n<p>I did not think of this because there was that animation in<strong> NotificationView</strong>(on Loaded) so it was visible that new View is added to the top so I thought\r\n<strong>SortComparison</strong> is ok. Thanks to those ticks in message it was the only thing I was able to check.&nbsp;</p>\r\n<p>With your work-around I can avoid that Exception. Sadly it's not what I want. What I want is probably clear to you now. I need new view to be added to the top of the ItemsControl and I want to remove from the bottom(<strong>FIFO</strong>) of course those\r\n views have to be sorted correctly&nbsp;<strong>all the time</strong>.</p>\r\n<p>If there is no better solution I will probably use your workaround and modify SortComparison method to take that null value in account :)</p>\r\n<p>Thank you very much.</p>\r\n<p>best regards Viktor La Croix</p>\r\n",
    "PostedDate": "2013-01-04T07:19:48.323-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "983133",
    "ThreadId": "427802",
    "Html": "\r\n<p>Hi Viktor,</p>\r\n<p>I am glad you found this useful.</p>\r\n<p>In my opinion, a possible approach to show the <strong>NotificationViews </strong>\r\nproperly ordered could be to move the workaround from the <strong>TimerOnTick </strong>\r\nmethod, to the end of the <strong>OnNavigatedTo </strong>method in the <strong>NotificationViewModel\r\n</strong>class:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> OnNavigatedTo(NavigationContext navigationContext)\r\n{\r\n    <span style=\"color:blue\">this</span>.ID = navigationContext.Parameters[<span style=\"color:#a31515\">&quot;ID&quot;</span>];\r\n    <span style=\"color:blue\">this</span>.Level = navigationContext.Parameters[<span style=\"color:#a31515\">&quot;Level&quot;</span>];\r\n    <span style=\"color:blue\">this</span>.Message = navigationContext.Parameters[<span style=\"color:#a31515\">&quot;Message&quot;</span>];\r\n\r\n    <span style=\"color:green\">// Workaround</span>\r\n    regionManager.Regions[RegionNames.NotificationRegion].SortComparison = <span style=\"color:blue\">null</span>;\r\n    regionManager.Regions[RegionNames.NotificationRegion].SortComparison = NotificationService.CompareMethod;\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Following the logic described above, when a new view is added first the <strong>\r\nNotificationViews </strong>are ordered incorrectly, then the <strong>OnNavigatedTo\r\n</strong>method of the new view is invoked where the <strong>ID </strong>property is set at then the workaround is applied forcing the views to be re-sorted. This second time the views are ordered correctly as the\r\n<strong>ID </strong>property is now available. The effect is that the views are shown in order from &quot;the beginning.&quot;</p>\r\n<p>I hope this helps,</p>\r\n<p>Damian Cherubini<br>\r\n<a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>\r\n",
    "PostedDate": "2013-01-04T10:50:06.787-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "983672",
    "ThreadId": "427802",
    "Html": "\r\n<p>Thank You All very much... I will do as You suggested. But still I would like to know if there will be something done about this.&nbsp;</p>\r\n<p>Best regards, Viktor La Croix</p>\r\n",
    "PostedDate": "2013-01-07T02:55:30.75-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]