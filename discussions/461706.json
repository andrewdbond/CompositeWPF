[
  {
    "Id": "1105723",
    "ThreadId": "461706",
    "Html": "I'm using Prism to loaded a series of views into a TabControl.  I'm able to get each view to appear as a separate tab by using either the RequestNavigate or RegisterViewWithRegion method, with the TabControl defined as the target region.  However, in both cases, the view and its corresponding viewmodel are instantiated immediately when the application is started.  I'd like the view and its viewmodel to not be instantiated until its corresponding tab is clicked in the main TabControl.\r<br />\n<br />\nI've tried defining the views in separate modules, and loading the modules with the InitializationMode.OnDemand parameter, but this doesn't seem to have any effect; I'm assuming this is because the RequestNavigate and RegisterViewWithRegion methods are enough to activate the module.\r<br />\n<br />\nIs there a way to configure Prism to only instantiate and load a view/viewmodel when its associated tab is activated?\r<br />\n<br />\nHere's a shortened version of my Shell.xaml:<br />\n<pre><code>&lt;Window&gt;\n  &lt;Grid&gt;\n    &lt;TabControl prism:RegionManager.RegionName=&quot;TabRegion&quot; /&gt;\n  &lt;/Grid&gt;\n&lt;/Window&gt;</code></pre>\n\nAnd how I'm currently adding tabs to my TabControl region, in the InitializeShell() method of my Bootstrapper.cs:<br />\n<pre><code>regionManager.Regions[&quot;TabRegion&quot;].RequestNavigate(&quot;FirstTabView&quot;);\nregionManager.Regions[&quot;TabRegion&quot;].RequestNavigate(&quot;SecondTabView&quot;);\nregionManager.Regions[&quot;TabRegion&quot;].RequestNavigate(&quot;ThirdTabView&quot;);</code></pre>\n\nAny help would be much appreciated.<br />\n",
    "PostedDate": "2013-10-09T14:24:19.39-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1106115",
    "ThreadId": "461706",
    "Html": "When using a <strong>TabControl</strong> you would need to Register each <strong>View</strong> on the <strong>TabRegion</strong> in order to be the views available for Navigation. This way, the <strong>Views</strong> and <strong>ViewModels</strong> would get instantiated on the <strong>TabRegion</strong>. <br />\n<br />\nHowever, you can control the load and activation of every view with <strong>View Discovery</strong> or <strong>View Injection</strong>.<br />\n<strong>RequestNavigate()</strong> should not be used for registering <strong>Views</strong> into <strong>Regions</strong>. Doing so, would make the <strong>Region</strong> to navigate the requested <strong>View</strong> as you correctly mentioned.<br />\n<br />\nInstead, you can register the views with the following alternatives:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n    <span style=\"color:Green;\">// View discovery</span>\n    <span style=\"color:Blue;\">this</span>.regionManager.RegisterViewWithRegion(<span style=\"color:#A31515;\">&quot;TabRegion&quot;</span>, <span style=\"color:Blue;\">typeof</span>(FirstTabView));\n\n\n    <span style=\"color:Green;\">// View injection</span>\n    IRegion tabRegion = regionManager.Regions[<span style=\"color:#A31515;\">&quot;TabRegion&quot;</span>];\n    <span style=\"color:Blue;\">var</span> tabView1 = container.Resolve&lt;FirstTabView&gt;();\n    tabRegion.Add(tabView1, <span style=\"color:#A31515;\">&quot;FirstTabView&quot;</span>);\r\n</pre></div>This way, only the <strong>FirstTabView</strong> would become <strong>Active</strong> when your application loads.<br />\nAs I mentioned before, notice that <strong>View</strong> and <strong>ViewModel</strong> instantiation would occur when registered to a <strong>Region</strong>, so the <strong>View</strong> gets available for navigation. <br />\n<br />\n<br />\nYou can find more information on the following <strong>Prism Guide</strong> chapter:<br />\n<h1></h1>\n<ul>\n<li>\n<a href=\"http://msdn.microsoft.com/en-us/library/ff921098%28v=PandP.40%29.aspx#sec24\" rel=\"nofollow\">Composing the User Interface</a><br />\n</li>\n</ul>\nIf you don't want the <strong>Views</strong> get instantiated because somehow they would take a long time to load, but also have tabs available to navigate to, you could think of a custom approach:<br />\nOne possible way would be to register blank views in the <strong>TabRegion</strong>, so you would be instantiating empty views at <strong><em>StartUp</em></strong>. And then, define a <strong>Child Region</strong> on each of these views where you would register your views by the time the corresponding tab is Navigated. You could <em>Register</em> and <em>Activate</em> your views on a <em>CollectionChanged</em> handler on each ViewModel when the active TabRegion View changes by subscribing to it as follows: <br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">this</span>.regionManager.Regions[<span style=\"color:#A31515;\">&quot;TabRegion&quot;</span>].ActiveViews.CollectionChanged += ActiveViews_CollectionChanged;...\n\r\n</pre></div>and verify is the corresponding view is already loaded:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">void</span> ActiveViews_CollectionChanged(<span style=\"color:Blue;\">object</span> sender, NotifyCollectionChangedEventArgs e)\n{\n        <span style=\"color:Blue;\">foreach</span> (<span style=\"color:Blue;\">var</span> item <span style=\"color:Blue;\">in</span> e.NewItems)\n        {\n            FrameworkElement tabview = item <span style=\"color:Blue;\">as</span> FrameworkElement;\n            <span style=\"color:Blue;\">if</span> (tabview != <span style=\"color:Blue;\">null</span> &amp;&amp; tabview.DataContext == <span style=\"color:Blue;\">this</span>)\n            {\n                IRegion subRegion = <span style=\"color:Blue;\">this</span>.regionManager.Regions[RegionNames.SubRegion];\n                <span style=\"color:Blue;\">if</span> (subRegion == <span style=\"color:Blue;\">null</span>) <span style=\"color:Blue;\">return</span>;\n\n                <span style=\"color:Green;\">// Check to see if we need to create an instance of the view.</span>\n                FirstTabView firstTabview = subRegion.GetView(<span style=\"color:#A31515;\">&quot;FirstTabView&quot;</span>) <span style=\"color:Blue;\">as</span> FirstTabView;\n                <span style=\"color:Blue;\">if</span> (firstTabview == <span style=\"color:Blue;\">null</span>)\n                {\n                    <span style=\"color:Green;\">// Create a new instance of the View using the container.</span>\n                    firstTabview = <span style=\"color:Blue;\">this</span>.container.Resolve&lt;FirstTabView&gt;();\n\n                    <span style=\"color:Green;\">// Add the view to the subregion. This automatically activates the view too.</span>\n                    subRegion.Add(firstTabview, <span style=\"color:#A31515;\">&quot;FirstTabView&quot;</span>);\n                }\n                <span style=\"color:Blue;\">else</span>\n                {\n                    <span style=\"color:Green;\">// The view has already been added to the region so just activate it.</span>\n                    subRegion.Activate(firstTabview);\n                }\n            }\n        }\n    }   \n}\r\n</pre></div>I hope this helps,<br />\nGabriel Ostrowsky <br />\n<a href=\"http://blogs.southworks.net/gostrowsky\" rel=\"nofollow\">http://blogs.southworks.net/gostrowsky</a><br />\n",
    "PostedDate": "2013-10-10T10:32:04.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": "2013-10-10T11:03:55.28-07:00"
  },
  {
    "Id": "1106130",
    "ThreadId": "461706",
    "Html": "Thanks for the thorough response.  After reading your explanation, I think I'm going to implement the tab interface as a set of <strong>RadioButton</strong> s and then manually navigate to the appropriate views in a separate region, rather than trying to work around the default behavior of the <strong>TabControl</strong>.<br />\n",
    "PostedDate": "2013-10-10T11:01:41.947-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]