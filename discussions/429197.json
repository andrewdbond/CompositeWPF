[
  {
    "Id": "985130",
    "ThreadId": "429197",
    "Html": "\r\n<p>I need to write a composite desktop application and I am at the stage of investigating technologies to use.</p>\r\n<p>I have been doing some research online and found that MEF is part of .NET framework now meanwhile PRISM is not.</p>\r\n<p>I would like to better understand if Microsoft is planning on stopping supporting/deprecating PRISM in favor of extending MEF to support UI composition classes.</p>\r\n<p>Thanks,</p>\r\n",
    "PostedDate": "2013-01-10T11:58:06.693-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985147",
    "ThreadId": "429197",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I am not aware if there are any plans to &quot;extend&quot; <strong>MEF</strong>, but take into account that\r\n<strong>MEF </strong>and <strong>Prism </strong>addresses very different goals.</p>\r\n<p>Based on my understanding, <strong>MEF </strong>is a composition layer, which provides plugin-like capabilities to compose and populate classes in the application. Due to this,\r\n<strong>MEF</strong> is often used as a dependency injection container allowing to loosely-couple different classes (like views and view model.)</p>\r\n<p><strong>Prism </strong>instead address a wider scope. It provides a framework on which you can develop an application separated in logic decoupled modules, along side with several services which allows you to manage and communicate modules between each other,\r\n as well as providing support for dynamical UI composition. Examples of such services are the\r\n<strong>EventAggregator </strong>(for sub-pub patterns), <strong>RegionManager </strong>\r\n(for decoupled UI composition), <strong>ModuleManager </strong>(to manage the charge of decoupled modules), among many others.</p>\r\n<p>As you can see, <strong>Prism </strong>and <strong>MEF </strong>address very different scenarios. What's more,\r\n<strong>Prism </strong>does not provide dependency injection capabilities on its own and requires an external container in order to work. As out of the box,\r\n<strong>Prism </strong>supports both <strong>MEF </strong>and <strong>Unity </strong>\r\nas dependency injection containers, however it can be configured to use any other third party container. Hence,\r\n<strong>MEF </strong>and <strong>Prism</strong> could be seen as complementary components.</p>\r\n<p>Regards,</p>\r\n<p>Damian Cherubini<br>\r\n<a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>\r\n",
    "PostedDate": "2013-01-10T12:43:15.57-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "985152",
    "ThreadId": "429197",
    "Html": "\r\n<p>Thanks Damian for your prompt response. I understand the difference between MEF and PRISM. My question was more based on the direction Microsoft is going to take regarding composition frameworks as I see that MEF is gaining a whole lot of support. One direction\r\n could be to include MEF based PRISM libraries as part of MEF but it could also be the case that they decide to use something else and it gets deprecated.</p>\r\n<p>Anyways your first phrase already answers that question, too.</p>\r\n<p>I guess I should find out more in MEF discussion forums :)&nbsp;</p>\r\n",
    "PostedDate": "2013-01-10T12:58:30.68-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]