[
  {
    "Id": "204582",
    "ThreadId": "60412",
    "Html": "<p>I have a working Prism V2 app. I am working on a module that has hundreds of visual elements, so I have divided them out into user controls ( within the Module project).</p>\r\n<p>Now I am trying to bind data to them, which is provided from a service that is registered with the IUnityContainer.</p>\r\n<p>How do I pass the container on to the user controls ? I tried adding it to the the constructor, but that causes an error that WPF wants a parameterless constructor.</p>\r\n<p>Alternately, can I pass a resource defined in the main window on to the child?</p>\r\n<p>Thanks.</p>\r\n<p>Larry</p>",
    "PostedDate": "2009-06-23T09:49:08.047-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "204635",
    "ThreadId": "60412",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:12pt\" lang=EN-US>Hi Larry, </span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:12pt\" lang=EN-US>&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:12pt\" lang=EN-US>If I understood you scenario correctly, you want to create a UserControl that binds<strong><em> </em></strong>to data provided by a service. If that is the case, there are 3 approaches that I can think of that might be suitable in your scenario:</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:12pt\" lang=EN-US>&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt;text-indent:-18pt\"><span style=\"font-size:12pt\"><span><span style=\"font-family:Calibri\">1.</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"font-family:Calibri\"><strong><span style=\"text-decoration:underline\"><span style=\"font-size:12pt\" lang=EN-US>Instantiate the UserControl with the container</span></span></strong></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 18pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:12pt\" lang=EN-US>You can achieve this using the Resolve method of the <strong>UnityContainer:</strong></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 53.4pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:12pt\" lang=EN-US>YourUserControl yourControl = unityContainer.Resolve&lt;YourControl&gt;();</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 18pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:12pt\" lang=EN-US>This will allow you to inject dependencies though the User control constructor (this is how views are injected). As you said, the drawback of this approach is that you won't be able to declare the usercontrol in XAML.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:12pt\" lang=EN-US>&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt;text-indent:-18pt\"><span style=\"font-size:12pt\"><span><span style=\"font-family:Calibri\">2.</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"font-family:Calibri\"><strong><span style=\"text-decoration:underline\"><span style=\"font-size:12pt\" lang=EN-US>Create DependencyProperties in the control and bind to them from the view</span></span></strong></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 18pt\"><span style=\"font-size:12pt\" lang=EN-US><span style=\"font-family:Calibri\">When you define a UserControl you can define </span><a href=\"http://msdn.microsoft.com/en-us/library/system.windows.dependencyproperty.aspx\"><span style=\"color:#0000ff;font-family:Calibri\">DependencyProperties</span></a><span style=\"font-family:Calibri\">. DependencyProperties are like .Net usual properties, but support databinding, animation, etc. You can read further here: </span><a href=\"http://msdn.microsoft.com/en-us/library/ms745025.aspx\"><span style=\"color:#0000ff;font-family:Calibri\">Control Authoring Overview</span></a><span style=\"font-family:Calibri\">.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 18pt\"><span style=\"font-size:12pt\" lang=EN-US><span style=\"font-family:Calibri\">So for example, if your service provides a customer which your control needs to bind to, you can create a Customer DependencyProperty in the control and bind that property to the customer returned by the service.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:12pt\" lang=EN-US><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt;text-indent:-18pt\"><span style=\"font-size:12pt\"><span><span style=\"font-family:Calibri\">3.</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"font-family:Calibri\"><strong><span style=\"text-decoration:underline\"><span style=\"font-size:12pt\" lang=EN-US>Create a IUnityContainer property in the control </span></span></strong></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 18pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:12pt\" lang=EN-US>If you define a <strong>public</strong> <strong>IUnityContainer</strong> property in the userControl, you can then set it from the view.&nbsp; This might not be a good idea if you are planning to reuse the control in other scenarios, as you would be coupling the control to the container. It would be better to make the control depend on the service, or if you want a fully reusable control use the 2nd approach.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:12pt\" lang=EN-US>&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:12pt\" lang=EN-US>Hope it helps!</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:Calibri\"><span style=\"font-size:12pt\" lang=EN-US>&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:12pt\"><span style=\"font-family:Calibri\">Matias Bonaventura</span></span></p>\r\n<p><span style=\"font-size:12pt;font-family:'Calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/\">http://blogs.southworks.net/matiasb</a></span></p>",
    "PostedDate": "2009-06-23T13:03:23.557-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "204647",
    "ThreadId": "60412",
    "Html": "<p>Thanks Matias!</p>\r\n<p>Can you show an example of the binding for the IUnityContainer ( #3 ) ?</p>\r\n<p>In #1, I presume that my module needs to register each of the controls,correct ?</p>",
    "PostedDate": "2009-06-23T13:31:46.107-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "204686",
    "ThreadId": "60412",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>Hi Larry,</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>Sure, here is a possible code for #3. Please note that this should be adapted to the presentation pattern you are using:</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>In the <strong>View XAML</strong> (instanciate the UserControl):</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\" lang=EN-US>&lt;</span><span style=\"font-size:10pt;color:#a31515;font-family:'Courier New'\" lang=EN-US>Controls:MyControl</span><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\" lang=EN-US> </span><span style=\"font-size:10pt;color:red;font-family:'Courier New'\" lang=EN-US>x:Name</span><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\" lang=EN-US>=</span><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&quot;<span style=\"color:blue\">MyControl</span>&quot;<span style=\"color:blue\">&gt;&lt;/</span><span style=\"color:#a31515\">Controls:MyControl</span><span style=\"color:blue\">&gt;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>In the <strong>View Codebehind / presenter</strong> (set the value to the property):</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\">this</span><span style=\"font-size:10pt;font-family:'Courier New'\">.MyControl.Container = container;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:Calibri\"><strong><span style=\"font-size:10pt\" lang=EN-US>NOTE:</span></strong><span style=\"font-size:10pt\" lang=EN-US> this need to be done before the InitializeComponent method from the view was called</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>In the <strong>UserControl</strong> <strong>Codebehind </strong>(declare the property):</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\" lang=EN-US>public</span><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">MyControl</span> : <span style=\"color:#2b91af\">UserControl</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> IUnityContainer Container { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\">public</span><span style=\"font-size:10pt;font-family:'Courier New'\"> MyControl()</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:Calibri\"><strong><span style=\"font-size:10pt\" lang=EN-US>NOTE:</span></strong><span style=\"font-size:10pt\" lang=EN-US> because of the Initialization flow, the <strong>Container</strong> property will be null during the UserControl constructor.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>Regarding your question about #1: &nbsp;no, Unity can resolve concrete classes without registration, so you won't need to register controls in #1. You can read futher about Unity registration in:</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 38.1pt;text-indent:-18pt\"><span style=\"font-family:Symbol\"><span style=\"\"><span style=\"font-size:small\">&middot;</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"\" lang=EN-US><a href=\"http://msdn.microsoft.com/en-us/library/dd203234.aspx#api_getreference\"><span style=\"font-size:small;color:#0000ff;font-family:Calibri\">Unity Application Block Methods</span></a></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>Hope it helps!</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>Matias Bonaventura</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><a href=\"http://blogs.southworks.net/\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>http://blog</span>s.southworks.net/matiasb</span></span></a></p>",
    "PostedDate": "2009-06-23T15:22:26.69-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]