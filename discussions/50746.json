[
  {
    "Id": "170145",
    "ThreadId": "50746",
    "Html": "I put my main application menu in a module, so that it is loaded after successful login. I have noticed that this menu stops working after other views are activated in my application, is this correct behaviour? Should menus be in modules, or embedded directly as user controls in the Shell? \r\n",
    "PostedDate": "2009-03-20T03:40:22.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "170806",
    "ThreadId": "50746",
    "Html": "I was having problems similar to this where modules would just stop functioning all the sudden.&nbsp; What you may want to check is that your module isn't being garbage collected because there is no more strong references to it.&nbsp; The simplest way I've found to check for this is just to do something like this in the module class<br>\r\n<pre>#if DEBUG<br>~ModuleClass()<br>{<br>     Debug.WriteLine(String.Format(&quot;{0} object has been garbage collected.&quot;, this.ToString()));<br>}<br>#endif</pre>\r\n<br>\r\nOf course&nbsp; you can substitute a logger or some other way of getting the message but its functional while debugging.&nbsp; The Debug class also doesn't have issues with silverlight.&nbsp; If your module is being disposed early, theres a couple ways to keep the garbage collector off of it.&nbsp; For a small module that you need the whole application lifetime an easy way to handle this is to register it in the Unity Container in the bootstrapper by overriding the ConfigureContainer() method of the bootstrapper like<br>\r\n<pre>protected override void ConfigureContainer()<br>{<br>     Container.RegisterType&lt;Modules.ISomeModule, Modules.SomeModule&gt;(new ContainerControlledLifetimeManager());&nbsp;&nbsp;&nbsp; <br>     base.ConfigureContainer();<br>}</pre>\r\nThe new ContainerControlledLifetimeManager() parameter has the unity container create a singleton reference to the registered type for its lifetime.&nbsp; Which in most cases will be the whole applications lifetime.&nbsp; For larger modules that you didn't want to hold in memory the entire lifetime of the application this probably isn't the best method but for a small menu module that is going to used for most of the applications life anyway its a fairly easy solution.<br>\r\n<br>\r\nHopefully that helps.<br>\r\n",
    "PostedDate": "2009-03-23T04:48:46.29-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "170894",
    "ThreadId": "50746",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:calibri\">As </span><a href=\"http://msdn.microsoft.com/en-us/library/dd458868.aspx\"><span style=\"color:#0000ff;font-family:calibri\">this article</span></a><span style=\"font-family:calibri\"> from the documentation explains: <i>“Composite applications typically compose their user interfaces (UIs) from various loosely coupled visual components, otherwise known as views, that are defined in the application's modules.”</i> </span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">The purpose of defining views in modules and then show them in a <b>Shell</b> (in this case using regions as a <i>placeholder)</i>, is that you can choose what component should be added to the Shell without depending on its content. Therefore, it is not recommended to embed a control directly to the Shell.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:calibri\">In your particular scenario, I believe the best approach is placing your menu in a module’s view and loading your <b>MenuView </b>in a region. The kind of control that should be declared as the region to hold the menu depends on your specific needs (step 3 of </span><a href=\"http://msdn.microsoft.com/en-us/library/dd490823.aspx\"><span style=\"color:#0000ff;font-family:calibri\">this article</span></a><span style=\"font-family:calibri\"> explains this concept better)<b>. </b>The rest of the views in your application should be loaded into other regions, which depend on your application’s specifics.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Perhaps you could check out the <b>Commanding Quickstart for Silverlight </b>source code, which declares an ItemsControl as a region. The example as a single button to the view which simulates a menu.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d;font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">For hierarchical or more complex kind of menus, you may create a MenuService instead of a region, that is in charge of adding menu commands to the UI, and each module uses this service to populate the menu at startup.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Please let me know if this helps.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\">Damian Schenkelman</span></p>\r\n<span style=\"font-size:11pt;font-family:'calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"color:#0000ff\">http://blogs.southworks.net/dschenkelman</span></a></span>\r\n",
    "PostedDate": "2009-03-23T08:58:00.123-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]