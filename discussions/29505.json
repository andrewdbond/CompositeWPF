[
  {
    "Id": "98299",
    "ThreadId": "29505",
    "Html": "Okay, maybe not a question for Composite WPF and more of a general WPF question, but I've found this is the place where most are using the DataTemplate method and thought someone else might have solved this.<br>\r\n<br>\r\nIf I have a DataTemplate in a resource file, how in the world do you bind the double click to either the list box itself or the list box item?<br>\r\n<br>\r\nFirst I thought I could do something like<br>\r\n<br>\r\n<code>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ListBox ItemsSource=&quot;{Binding Path=Items}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ListBox.InputBindings&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;MouseBinding<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Command=&quot;{x:Static v:ModuleCommands.ItemDoubleClickedCommand}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MouseAction=&quot;LeftDoubleClick&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ListBox.InputBindings&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ListBox&gt;<br>\r\n</code><br>\r\nBut the event doesn't get fired when I double click an item, just the control itself.<br>\r\n<br>\r\nThen I thought about creating a data template for the actual item, but that doesn't work either because you can't create input bindings for a DataTemplate itself.<br>\r\n<br>\r\nNow I've just discovered <code>DataTemplate.Triggers</code>, maybe I should be looking more towards this instead?<br>\r\n<br>\r\n-Brett<br>\r\n",
    "PostedDate": "2008-06-11T17:02:52.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "98489",
    "ThreadId": "29505",
    "Html": "Okay, still not there, but this is the best I've got so far:<br>\r\n<br>\r\n<code>\r\n&nbsp;&nbsp;&nbsp; &lt;DataTemplate x:Key=&quot;xTmpl&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ListBoxItem Content=&quot;{Binding .}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HorizontalContentAlignment=&quot;Stretch&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HorizontalAlignment=&quot;Stretch&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Background=&quot;LightBlue&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ListBoxItem.InputBindings&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;MouseBinding Command=&quot;{x:Static v:ModuleCommands.ItemDoubleClickedCommand}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MouseAction=&quot;LeftDoubleClick&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ListBoxItem.InputBindings&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ListBoxItem&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/DataTemplate&gt;<br>\r\n&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp; &lt;DataTemplate DataType=&quot;{x:Type v:ListBoxModuleItem}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DockPanel&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ListBox ItemsSource=&quot;{Binding Items}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ItemTemplate=&quot;{StaticResource xTmpl}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ListBox&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/DockPanel&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/DataTemplate&gt;<br>\r\n</code>\r\n<br>\r\nI do have a couple of problems however.<br>\r\n<br>\r\n1). I can't bind within an input binding, I want to bind the CommandParamater to Self but that's not working.<br>\r\n2). My ListBoxItem isn't the width of the list box itself, is this an oversight on my behalf? Have I done something wrong there?<br>\r\n<br>\r\nI tried a trick where I put a Button into the item template and used the &quot;Command&quot; and &quot;CommandParameter&quot; properties with a completely restyled button, this works, however it gets fired whenever I click <em>once</em> on an item, which is not the desired behaviour. Replace the <code>&lt;ListViewItem&gt;</code> in the above with the following to see what I've done:<br>\r\n<br>\r\n<code>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Button Command=&quot;{x:Static v:ModuleCommands.ItemDoubleClickedCommand}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CommandParameter=&quot;{Binding .}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Button.Template&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ControlTemplate&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ContentPresenter<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HorizontalAlignment=&quot;Left&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VerticalAlignment=&quot;Center&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Content=&quot;{Binding .}&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ControlTemplate&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Button.Template&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Button&gt;</code><br>\r\n<br>\r\nCan anyone tell me if I'm heading even remotely close to the right direction? I'm starting to think that DataTemplate's are a hell of a lot of work where you need to capture events or commands and it may just be much easier to stick to UserControl's. What is everyones take on this?<br>\r\n<br>\r\n-Brett<br>\r\n",
    "PostedDate": "2008-06-12T09:49:41.283-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "124644",
    "ThreadId": "29505",
    "Html": "Hi Brett, <br>\r\n<br>\r\nThis problem stems from the fact that ListViewItem does not implement the ICommandSource interface (which in all honestly just plain sucks). Kent Boogaart has a solution to this issue, detailed <a href=\"http://kentb.blogspot.com/2006/12/listviewitemactivated-event-in-wpf.html\">here</a>. It's the best solution I could find to this exact same problem.<br>\r\n<br>\r\nCheers<br>\r\n<br>\r\nJustin<br>\r\n",
    "PostedDate": "2008-10-13T00:25:59.773-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "124771",
    "ThreadId": "29505",
    "Html": "<p>Hello Brett,</p>\r\n<p>This really is not a Prism issue, but I understand your obstacle. I resolved this issue by implementing my own custom ListBoxItem. </p>\r\n<p>&nbsp; public class <strong>SampleListBoxItem</strong> : ListBoxItem<br>\r\n&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; public static readonly DependencyProperty <strong>MouseDoubleClickCommandProperty</strong> =<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DependencyProperty.Register(&quot;MouseDoubleClickCommand&quot;, typeof(ICommand), typeof(SampleListBoxItem));</p>\r\n<p>&nbsp;&nbsp;&nbsp; public static readonly DependencyProperty <strong>MouseDoubleClickCommandParameterProperty</strong> =<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DependencyProperty.Register(&quot;MouseDoubleClickCommandParameter&quot;, typeof(object), typeof(SampleListBoxItem));</p>\r\n<p>&nbsp;&nbsp;&nbsp; protected override void OnMouseDoubleClick(MouseButtonEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.OnMouseDoubleClick(e);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (MouseDoubleClickCommand != null)<br>\r\n<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MouseDoubleClickCommand.Execute(MouseDoubleClickCommandParameter);</strong><br>\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp; public ICommand MouseDoubleClickCommand<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return (ICommand) GetValue(MouseDoubleClickCommandProperty); }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { SetValue(MouseDoubleClickCommandProperty, value); }<br>\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp; public object MouseDoubleClickCommandParameter<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return GetValue(MouseDoubleClickCommandParameterProperty); }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { SetValue(MouseDoubleClickCommandParameterProperty, value); }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp; }</p>\r\n<p>I did this so that I can create my own binding implementation. This will allow me to send a parameter value when the command is executed.</p>\r\n<p>&lt;Window <br>\r\n&nbsp; <strong>x:Name=&quot;root&quot;<br>\r\n</strong>&nbsp; x:Class=&quot;SampleApp.Shell4&quot;<br>\r\n&nbsp; xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>\r\n&nbsp; xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>\r\n&nbsp; xmlns:self=&quot;clr-namespace:SampleApp&quot;<br>\r\n&nbsp; Title=&quot;Shell4&quot; Height=&quot;300&quot; Width=&quot;300&quot;<br>\r\n&nbsp; &gt;<br>\r\n&nbsp; &lt;Window.Resources&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;DataTemplate x:Key=&quot;xTmpl&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;self:SampleListBoxItem <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HorizontalContentAlignment=&quot;Stretch&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HorizontalAlignment=&quot;Stretch&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Background=&quot;LightBlue&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Content=&quot;{Binding DisplayName}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>MouseDoubleClickCommand=&quot;{Binding ItemDoubleClickedCommand, ElementName=root}&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MouseDoubleClickCommandParameter=&quot;{Binding DisplayName}&quot;<br>\r\n</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/self:SampleListBoxItem&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/DataTemplate&gt;<br>\r\n&nbsp; &lt;/Window.Resources&gt;<br>\r\n&nbsp; &lt;DockPanel DataContext=&quot;{Binding ElementName=root}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;ListBox ItemsSource=&quot;{Binding Items}&quot; ItemTemplate=&quot;{StaticResource xTmpl}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/ListBox&gt;<br>\r\n&nbsp; &lt;/DockPanel&gt;<br>\r\n&lt;/Window&gt;</p>\r\n<p>I also moved the command into the Window for ease of sampling;&nbsp;DelegateCommand could&nbsp;live anywhere as long as you have access to it.&nbsp;The Items property&nbsp;and a custom data model I will leave up to you.</p>\r\n<p>&nbsp; using System.Collections;<br>\r\n&nbsp; using System.Windows;<br>\r\n&nbsp; using System.Windows.Controls;<br>\r\n&nbsp; using System.Windows.Input;<br>\r\n&nbsp; using Microsoft.Practices.Composite.Wpf.Commands;</p>\r\n<p>&nbsp; /// &lt;summary&gt;<br>\r\n&nbsp; /// Interaction logic for Shell4.xaml<br>\r\n&nbsp; /// &lt;/summary&gt;<br>\r\n&nbsp; public partial class Shell4 : Window<br>\r\n&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; public Shell4()<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ItemDoubleClickedCommand = new DelegateCommand&lt;object&gt;(ExecuteCommand);&nbsp;</em><strong>// Initialize command</strong><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br>\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp; public DelegateCommand&lt;object&gt; ItemDoubleClickedCommand { get; set; }</p>\r\n<p>&nbsp;&nbsp;&nbsp; public IEnumerable Items<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return ItemDisplayCollection.GetItems(); } </em><strong>//&nbsp;Implement items retrieval<br>\r\n</strong>&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp; void ExecuteCommand(object value)<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var message = &quot;Value is {0}&quot;;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageBox.Show(string.Format(message, value ?? &quot;null&quot;));&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n<p>This is just an approach, and possibly not the final implementation of a solution, but serves as a good starting point.<br>\r\n<br>\r\nHopes this helps,<br>\r\n<br>\r\nAndres Olivares</p>\r\n",
    "PostedDate": "2008-10-13T10:42:26.27-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "135859",
    "ThreadId": "29505",
    "Html": "There is a far easier approach to address this issue that lets you bind to InputBindings directly.<br>\r\n<br>\r\nTry this:<br>\r\n<br>\r\n<a href=\"http://wpfmentor.blogspot.com/2008/11/adding-bindings-to-clr-properties-in.html\">http://wpfmentor.blogspot.com/2008/11/adding-bindings-to-clr-properties-in.html</a><br>\r\n",
    "PostedDate": "2008-11-27T07:17:21.913-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]