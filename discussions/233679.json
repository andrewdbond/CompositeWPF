[
  {
    "Id": "517890",
    "ThreadId": "233679",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I have been looking all over the net to find a good example on how I can use Prism 4(drop 10) with a MVVM approach and have data&#65279; paged on the screen. Most of the example I found would result in bringing the complete data on to the client and then have it\r\n paged on client when we go the MVVM way. is there any example on the net I can use to understand how to build it?</p>\r\n<p>Regards, Kiran</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-05T12:35:22.827-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "517939",
    "ThreadId": "233679",
    "Html": "\r\n<p>Hi,</p>\r\n<p>There is not guidance on this topic in Prism out-of-the-box. But you can find the following forum thread interesting:</p>\r\n<ul>\r\n<li><a href=\"http://forums.silverlight.net/forums/p/189563/436281.aspx\">using datapager with MVVM</a>\r\n</li></ul>\r\n<p>Hope this helps.</p>\r\n<p>Fernando Antivero <br>\r\n<a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n",
    "PostedDate": "2010-11-05T14:13:38.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "518104",
    "ThreadId": "233679",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Thanks for the link, I tried to follow all these discussions but closest I found for the topic was here&nbsp;\r\n<a href=\"http://blogs.msdn.com/b/brada/archive/2009/09/07/business-apps-example-for-silverlight-3-rtm-and-net-ria-services-july-update-viewmodel.aspx\">\r\nhttp://blogs.msdn.com/b/brada/archive/2009/09/07/business-apps-example-for-silverlight-3-rtm-and-net-ria-services-july-update-viewmodel.aspx</a>. but looks like this post is not out of date and I was ubable to find the class PagedEntityCollectionView. any idea\r\n if this is renamed or replaced with another class that I can use?</p>\r\n<p>Thanks, Kiran</p>\r\n",
    "PostedDate": "2010-11-06T02:53:04.7-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "520185",
    "ThreadId": "233679",
    "Html": "\r\n<p>Hi Kiran,</p>\r\n<p>As I mentioned, there is no guidance on this topic in Prism out-of-the-box. If you need to to provide paging capabilities to a collection, you could take a look at the following documentation section on MSDN:\r\n<a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.ipagedcollectionview%28VS.95%29.aspx\">\r\nIPagedCollectionView</a>.</p>\r\n<p>Additionally, you can find the following John Papa's post interesting: <a href=\"http://johnpapa.net/silverlight/wcf-ria-services-hands-on-lab/\">\r\nWCF RIA Services - Hands On Lab</a>. Although it is not strictly related to MVVM, the proposed application implements paging.</p>\r\n<p>Hope this helps.</p>\r\n<p>Fernando Antivero <br>\r\n<a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n",
    "PostedDate": "2010-11-10T12:40:10.023-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "520499",
    "ThreadId": "233679",
    "Html": "\r\n<p>You can do something like that</p>\r\n<p>1 - MVVM Class:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MyMVVM\r\n{\r\n  <span style=\"color:blue\">protected</span> ObservableCollection&lt;TEntity&gt; _entities;\r\n  <span style=\"color:blue\">protected</span> PagedEntityView&lt;TEntity&gt; _entitiesView;\r\n\r\n  <span style=\"color:blue\">public</span> MyMVVM()\r\n  {\r\n     _entities = <span style=\"color:blue\">new</span> ObservableCollection&lt;TEntity&gt;();\r\n     _entitiesView = <span style=\"color:blue\">new</span> PagedEntityView&lt;TEntity&gt;(_entities);  \r\n  }\r\n{\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>2 - The Paged EntityView Class</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> PagedEntityView&lt;TEntity&gt; : NotificationObject,\r\n        IPagedCollectionView,\r\n        ICollectionView,\r\n        IEditableCollectionView,\r\n        INotifyCollectionChanged,\r\n        IEnumerable&lt;TEntity&gt;\r\n        <span style=\"color:blue\">where</span> TEntity : Entity, IEditableObject, <span style=\"color:blue\">new</span>()\r\n    {\r\n\r\n        <span style=\"color:blue\">#region</span> Fields and properties\r\n        \r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> ObservableCollection&lt;TEntity&gt; _itens;\r\n        <span style=\"color:blue\">private</span> TEntity _currentAddItem;\r\n        <span style=\"color:blue\">private</span> TEntity _currentEditItem;\r\n\r\n        <span style=\"color:blue\">private</span> SortDescriptionCollection _sortDescriptions;\r\n\r\n        <span style=\"color:blue\">private</span> IEnumerable&lt;TEntity&gt; Enumerable\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _itens; }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Retorna a quantidade da cole��o</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> Count\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _itens.Count; }\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Constructors\r\n\r\n        <span style=\"color:blue\">public</span> PagedEntityView(ObservableCollection&lt;TEntity&gt; itens)\r\n        {\r\n            _itens = itens;\r\n            _itens.CollectionChanged &#43;= (sender, args) =&gt;\r\n                                        {\r\n                                            RaiseCollectionChangedEvent(args);\r\n                                            <span style=\"color:blue\">if</span> ((!IsCurrentBeforeFirst ||\r\n                                                 args.Action != NotifyCollectionChangedAction.Add) &amp;&amp;\r\n                                                 args.Action != NotifyCollectionChangedAction.Reset) <span style=\"color:blue\">return</span>;\r\n                                            MoveCurrentToFirst();\r\n                                            RaisePropertyChanged(() =&gt; IsCurrentBeforeFirst);\r\n                                        };\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> IPagedCollectionView\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> MoveToFirstPage()\r\n        {\r\n            <span style=\"color:blue\">return</span> (MoveToPage(0));\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> MoveToLastPage()\r\n        {\r\n            <span style=\"color:blue\">return</span> (MoveToPage(TotalItemCount / PageSize));\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> MoveToNextPage()\r\n        {\r\n            <span style=\"color:blue\">return</span> (MoveToPage(PageIndex &#43; 1));\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> MoveToPreviousPage()\r\n        {\r\n            <span style=\"color:blue\">return</span> (MoveToPage(PageIndex - 1));\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> MoveToPage(<span style=\"color:blue\">int</span> pageIndex)\r\n        {\r\n            <span style=\"color:blue\">if</span> (pageIndex == PageIndex || pageIndex &lt; 0 || pageIndex &gt; TotalItemCount / PageSize) <span style=\"color:blue\">return</span> <span style=\"color:blue\">false</span>;\r\n\r\n            <span style=\"color:blue\">var</span> args = <span style=\"color:blue\">new</span> PageChangingEventArgs(PageIndex);\r\n\r\n            <span style=\"color:blue\">try</span>\r\n            {\r\n                IsPageChanging = <span style=\"color:blue\">true</span>;\r\n                RaisePageChangingEvent(args);\r\n\r\n                <span style=\"color:blue\">if</span> (!args.Cancel)\r\n                {\r\n                    _pageIndex = pageIndex;\r\n                    RaiseLoadDataEvent(EventArgs.Empty);\r\n\r\n                    RaisePropertyChanged(() =&gt; PageIndex);\r\n                    RaisePageChangedEvent(args);\r\n\r\n                    <span style=\"color:blue\">return</span> (<span style=\"color:blue\">true</span>);\r\n                }\r\n                <span style=\"color:blue\">return</span> (<span style=\"color:blue\">false</span>);\r\n            }\r\n            <span style=\"color:blue\">finally</span>\r\n            {\r\n                IsPageChanging = <span style=\"color:blue\">false</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> CanChangePage\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">true</span>); }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> _isPageChanging;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> IsPageChanging\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_isPageChanging); }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (_isPageChanging == value) <span style=\"color:blue\">return</span>;\r\n                _isPageChanging = value;\r\n                RaisePropertyChanged(() =&gt; IsPageChanging);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">int</span> _itemCount;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> ItemCount\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_itemCount); }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (_itemCount == value) <span style=\"color:blue\">return</span>;\r\n                _itemCount = value;\r\n                RaisePropertyChanged(() =&gt; ItemCount);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">int</span> _pageIndex;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> PageIndex\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_pageIndex); }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (_pageIndex == value) <span style=\"color:blue\">return</span>;\r\n                _pageIndex = value;\r\n                RaisePropertyChanged(() =&gt; PageIndex);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">int</span> _pageSize = 10; <span style=\"color:green\">// Default page size = 10</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> PageSize\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_pageSize); }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (_pageSize == value) <span style=\"color:blue\">return</span>;\r\n                _pageSize = value;\r\n                RaisePropertyChanged(() =&gt; PageSize);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">int</span> _totalItemCount;\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> TotalItemCount\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_totalItemCount); }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (_totalItemCount == value) <span style=\"color:blue\">return</span>;\r\n                _totalItemCount = value;\r\n                RaisePropertyChanged(() =&gt; TotalItemCount);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> EventHandler&lt;EventArgs&gt; PageChanged;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> EventHandler&lt;PageChangingEventArgs&gt; PageChanging;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> EventHandler&lt;EventArgs&gt; LoadData;\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RaisePageChangedEvent(PageChangingEventArgs args)\r\n        {\r\n            <span style=\"color:blue\">var</span> handler = PageChanged;\r\n            <span style=\"color:blue\">if</span> (handler != <span style=\"color:blue\">null</span>)\r\n                handler(<span style=\"color:blue\">this</span>, args);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RaiseLoadDataEvent(EventArgs args)\r\n        {\r\n            <span style=\"color:blue\">var</span> handler = LoadData;\r\n            <span style=\"color:blue\">if</span> (handler != <span style=\"color:blue\">null</span>)\r\n                handler(<span style=\"color:blue\">this</span>, args);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RaisePageChangingEvent(PageChangingEventArgs args)\r\n        {\r\n            <span style=\"color:blue\">var</span> handler = PageChanging;\r\n            <span style=\"color:blue\">if</span> (handler != <span style=\"color:blue\">null</span>)\r\n                handler(<span style=\"color:blue\">this</span>, args);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RaiseCollectionChangedEvent(NotifyCollectionChangedEventArgs args)\r\n        {\r\n            <span style=\"color:blue\">var</span> handler = CollectionChanged;\r\n            <span style=\"color:blue\">if</span> (handler != <span style=\"color:blue\">null</span>)\r\n                handler(<span style=\"color:blue\">this</span>, args);\r\n        }\r\n\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Implementation of IEnumerable\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Returns an enumerator that iterates through the collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> A &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot;/&gt; that can be used to iterate through the collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> IEnumerator&lt;TEntity&gt; GetEnumerator()\r\n        {\r\n            <span style=\"color:blue\">return</span> (_itens.GetEnumerator());\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Returns an enumerator that iterates through a collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot;/&gt; object that can be used to iterate through the collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        IEnumerator IEnumerable.GetEnumerator()\r\n        {\r\n            <span style=\"color:blue\">return</span> GetEnumerator();\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Implementation of INotifyCollectionChanged\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> NotifyCollectionChangedEventHandler CollectionChanged;\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Implementation of ICollectionView\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Indicates whether the specified item belongs to this collection view. </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if the item belongs to this collection view; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;item&quot;&gt;</span><span style=\"color:green\">The object to check. &lt;/param&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> Contains(<span style=\"color:blue\">object</span> item)\r\n        {\r\n            <span style=\"color:blue\">return</span> (Enumerable.Contains((TEntity)item));\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Recreates the view.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Refresh()\r\n        {\r\n            Refreshed(<span style=\"color:blue\">this</span>, EventArgs.Empty);\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh. </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> The typical usage is to create a using scope with an implementation of this method and then include multiple view-changing calls within the scope. The implementation should delay automatic refresh until after the using scope exits. </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> IDisposable DeferRefresh()\r\n        {\r\n            <span style=\"color:blue\">return</span> (<span style=\"color:blue\">new</span> DeferRefreshHelper(Refresh));\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Sets the first item in the view as the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt;.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; is an item in the view; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> MoveCurrentToFirst()\r\n        {\r\n            <span style=\"color:blue\">return</span> (MoveCurrentToPosition(0));\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Sets the last item in the view as the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt;.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; is an item in the view; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> MoveCurrentToLast()\r\n        {\r\n            <span style=\"color:blue\">return</span> (MoveCurrentToPosition(Count - 1));\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Sets the item after the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; in the view as the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt;.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; is an item in the view; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> MoveCurrentToNext()\r\n        {\r\n            <span style=\"color:blue\">if</span> (CurrentPosition &lt; Count - 1)\r\n            {\r\n                <span style=\"color:blue\">return</span> (MoveCurrentToPosition(CurrentPosition &#43; 1));\r\n            }\r\n            <span style=\"color:blue\">return</span> (<span style=\"color:blue\">false</span>);\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Sets the item before the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; in the view to the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt;.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; is an item in the view; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> MoveCurrentToPrevious()\r\n        {\r\n            <span style=\"color:blue\">if</span> (CurrentPosition &gt; 0)\r\n            {\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.MoveCurrentToPosition(<span style=\"color:blue\">this</span>.CurrentPosition - 1);\r\n            }\r\n\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">false</span>;\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Sets the specified item in the view as the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt;.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; is an item in the view; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;item&quot;&gt;</span><span style=\"color:green\">The item to set as the current item.&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> MoveCurrentTo(<span style=\"color:blue\">object</span> item)\r\n        {\r\n            <span style=\"color:blue\">if</span> (IsEmpty || Equals(CurrentItem, item)) <span style=\"color:blue\">return</span> (<span style=\"color:blue\">false</span>);\r\n\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">var</span> i = 0; i &lt; Count; &#43;&#43;i)\r\n            {\r\n                <span style=\"color:blue\">if</span> (Enumerable.ElementAt(i).Equals(item))\r\n                {\r\n                    <span style=\"color:blue\">var</span> args = <span style=\"color:blue\">new</span> CurrentChangingEventArgs();\r\n                    RaiseCurrentChangingEvent(args);\r\n\r\n                    <span style=\"color:blue\">if</span> (!args.Cancel)\r\n                    {\r\n                        CurrentItem = item;\r\n                        CurrentPosition = i;\r\n\r\n                        RaisePropertyChanged(() =&gt; CurrentPosition);\r\n                        RaiseCurrentChangedEvent(EventArgs.Empty);\r\n\r\n                        <span style=\"color:blue\">return</span> (<span style=\"color:blue\">true</span>);\r\n                    }\r\n                    <span style=\"color:blue\">return</span> (<span style=\"color:blue\">false</span>);\r\n                }\r\n            }\r\n            <span style=\"color:blue\">return</span> (<span style=\"color:blue\">false</span>);\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Sets the item at the specified index to be the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; in the view.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; is an item in the view; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;position&quot;&gt;</span><span style=\"color:green\">The index to set the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; to.&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> MoveCurrentToPosition(<span style=\"color:blue\">int</span> position)\r\n        {\r\n            <span style=\"color:blue\">if</span> (IsEmpty) <span style=\"color:blue\">return</span> (<span style=\"color:blue\">false</span>);\r\n\r\n\r\n            <span style=\"color:blue\">var</span> args = <span style=\"color:blue\">new</span> CurrentChangingEventArgs(<span style=\"color:blue\">true</span>);\r\n            RaiseCurrentChangingEvent(args);\r\n\r\n            <span style=\"color:blue\">if</span> (args.Cancel) <span style=\"color:blue\">return</span> <span style=\"color:blue\">false</span>;\r\n\r\n            <span style=\"color:blue\">if</span> (position == -1)\r\n            {\r\n                CurrentItem = <span style=\"color:blue\">null</span>;\r\n            }\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                CurrentItem = Enumerable.ElementAt(position);\r\n            }\r\n\r\n            CurrentPosition = position;\r\n\r\n            RaisePropertyChanged(() =&gt; CurrentItem);\r\n            RaisePropertyChanged(() =&gt; CurrentPosition);\r\n            RaiseCurrentChangedEvent(EventArgs.Empty);\r\n\r\n            <span style=\"color:blue\">return</span> (<span style=\"color:blue\">true</span>);\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the cultural information for any operations of the view that may differ by culture, such as sorting.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> The culture information to use during culture-sensitive operations. </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> CultureInfo Culture\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotSupportedException(); }\r\n            <span style=\"color:blue\">set</span> { <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotSupportedException(); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets the underlying collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> The underlying collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> IEnumerable SourceCollection\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_itens); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets a callback that is used to determine whether an item is appropriate for inclusion in the view. </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> A method that is used to determine whether an item is appropriate for inclusion in the view.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> Predicate&lt;<span style=\"color:blue\">object</span>&gt; Filter\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotSupportedException(); }\r\n            <span style=\"color:blue\">set</span> { <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotSupportedException(); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets a value that indicates whether this view supports filtering by way of the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.Filter&quot;/&gt; property.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if this view supports filtering; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> CanFilter\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">false</span>); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets a collection of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot;/&gt; instances that describe how the items in the collection are sorted in the view.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> A collection of values that describe how the items in the collection are sorted in the view.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> SortDescriptionCollection SortDescriptions\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _sortDescriptions ?? (_sortDescriptions = <span style=\"color:blue\">new</span> SortDescriptionCollection()); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets a value that indicates whether this view supports sorting by way of the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.SortDescriptions&quot;/&gt; property.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if this view supports sorting; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> CanSort\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">true</span>); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets a value that indicates whether this view supports grouping by way of the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.GroupDescriptions&quot;/&gt; property.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if this view supports grouping; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> CanGroup\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">false</span>); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets a collection of &lt;see cref=&quot;T:System.ComponentModel.GroupDescription&quot;/&gt; objects that describe how the items in the collection are grouped in the view. </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> A collection of objects that describe how the items in the collection are grouped in the view. </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> ObservableCollection&lt;GroupDescription&gt; GroupDescriptions\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">null</span>); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets the top-level groups.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> A read-only collection of the top-level groups or null if there are no groups.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> ReadOnlyObservableCollection&lt;<span style=\"color:blue\">object</span>&gt; Groups\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">null</span>); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets a value that indicates whether the view is empty.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if the view is empty; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> IsEmpty\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_itens.Count == 0); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets the current item in the view.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> The current item in the view or null if there is no current item.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">object</span> CurrentItem\r\n        {\r\n            <span style=\"color:blue\">get</span>;\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">set</span>;\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets the ordinal position of the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; in the view.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> The ordinal position of the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; in the view.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> CurrentPosition\r\n        {\r\n            <span style=\"color:blue\">get</span>;\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">set</span>;\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets a value that indicates whether the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; of the view is beyond the end of the collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; of the view is beyond the end of the collection; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> IsCurrentAfterLast\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">false</span>); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets a value that indicates whether the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; of the view is beyond the start of the collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot;/&gt; of the view is beyond the start of the collection; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> IsCurrentBeforeFirst\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (CurrentItem == <span style=\"color:blue\">null</span>); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> CurrentChangingEventHandler CurrentChanging;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> EventHandler CurrentChanged;\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RaiseCurrentChangedEvent(EventArgs args)\r\n        {\r\n            <span style=\"color:blue\">var</span> handler = CurrentChanged;\r\n            <span style=\"color:blue\">if</span> (handler != <span style=\"color:blue\">null</span>)\r\n                handler(<span style=\"color:blue\">this</span>, args);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RaiseCurrentChangingEvent(CurrentChangingEventArgs args)\r\n        {\r\n            <span style=\"color:blue\">var</span> handler = CurrentChanging;\r\n            <span style=\"color:blue\">if</span> (handler != <span style=\"color:blue\">null</span>)\r\n                handler(<span style=\"color:blue\">this</span>, args);\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Implementation of IEditableCollectionView\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Adds a new item to the underlying collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> The new item that is added to the collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">object</span> AddNew()\r\n        {\r\n            CommitNew();\r\n            CommitEdit();\r\n\r\n            _currentAddItem = <span style=\"color:blue\">new</span> TEntity();\r\n            _itens.Add(_currentAddItem);\r\n\r\n            _currentAddItem.BeginEdit();\r\n            MoveCurrentToFirst();\r\n\r\n            <span style=\"color:blue\">return</span> (_currentAddItem);\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Ends the add transaction and saves the pending new item.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> CommitNew()\r\n        {\r\n            <span style=\"color:blue\">if</span> (IsAddingNew)\r\n            {\r\n                _currentAddItem.EndEdit();\r\n                _currentAddItem = <span style=\"color:blue\">null</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Ends the add transaction and discards the pending new item.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> CancelNew()\r\n        {\r\n            <span style=\"color:blue\">if</span> (IsAddingNew)\r\n            {\r\n                _currentAddItem.CancelEdit();\r\n                MoveCurrentToLast();\r\n\r\n                Remove(_currentAddItem);\r\n                _currentAddItem = <span style=\"color:blue\">null</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Removes the item at the specified position from the collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;index&quot;&gt;</span><span style=\"color:green\">Index of item to remove.&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> RemoveAt(<span style=\"color:blue\">int</span> index)\r\n        {\r\n            <span style=\"color:blue\">if</span> (index &lt; 0 || index &gt;= <span style=\"color:blue\">this</span>._itens.Count)\r\n            {\r\n                <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> IndexOutOfRangeException(<span style=\"color:#a31515\">&quot;index must be at least 0 and less than the Count&quot;</span>);\r\n            }\r\n\r\n            Remove(_itens.ElementAt(index));\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Removes the specified item from the collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;item&quot;&gt;</span><span style=\"color:green\">The item to remove.&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Remove(<span style=\"color:blue\">object</span> item)\r\n        {\r\n            <span style=\"color:blue\">var</span> entity = item <span style=\"color:blue\">as</span> TEntity;\r\n\r\n            <span style=\"color:blue\">if</span> (entity != <span style=\"color:blue\">null</span>)\r\n            {\r\n                _itens.Remove(entity);\r\n\r\n                <span style=\"color:blue\">if</span> (IsEmpty)\r\n                {\r\n                    CurrentItem = <span style=\"color:blue\">null</span>;\r\n                    CurrentPosition = -1;\r\n\r\n                    RaiseCurrentChangingEvent(<span style=\"color:blue\">new</span> CurrentChangingEventArgs(<span style=\"color:blue\">false</span>));\r\n\r\n                    RaisePropertyChanged(() =&gt; CurrentItem);\r\n                    RaisePropertyChanged(() =&gt; CurrentPosition);\r\n                    RaisePropertyChanged(() =&gt; IsCurrentBeforeFirst);\r\n\r\n                    RaiseCurrentChangedEvent(EventArgs.Empty);\r\n                }\r\n                <span style=\"color:blue\">else</span>\r\n                {\r\n                    MoveCurrentTo(CurrentPosition);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Begins an edit transaction on the specified item.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;item&quot;&gt;</span><span style=\"color:green\">The item to edit.&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> EditItem(<span style=\"color:blue\">object</span> item)\r\n        {\r\n            CommitNew();\r\n            CommitEdit();\r\n\r\n            _currentEditItem = item <span style=\"color:blue\">as</span> TEntity;\r\n            MoveCurrentTo(item);\r\n\r\n            <span style=\"color:blue\">if</span> (_currentEditItem != <span style=\"color:blue\">null</span>)\r\n            {\r\n                _currentEditItem.BeginEdit();\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Ends the edit transaction and saves the pending changes.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> CommitEdit()\r\n        {\r\n            <span style=\"color:blue\">if</span> (IsEditingItem)\r\n            {\r\n                _currentEditItem.EndEdit();\r\n                _currentEditItem = <span style=\"color:blue\">null</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Ends the edit transaction and, if possible, restores the original value of the item.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> CancelEdit()\r\n        {\r\n            <span style=\"color:blue\">if</span> (IsEditingItem)\r\n            {\r\n                _currentEditItem.CancelEdit();\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the position of the new item placeholder in the collection view.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> An enumeration value that specifies the position of the new item placeholder in the collection view.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> NewItemPlaceholderPosition NewItemPlaceholderPosition\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (NewItemPlaceholderPosition.None); }\r\n            <span style=\"color:blue\">set</span> { <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotSupportedException(); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets a value that indicates whether a new item can be added to the collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if a new item can be added to the collection; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> CanAddNew\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">true</span>); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets a value that indicates whether an add transaction is in progress.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if an add transaction is in progress; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> IsAddingNew\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_currentAddItem != <span style=\"color:blue\">null</span>); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets the item that is being added during the current add transaction.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> The item that is being added if &lt;see cref=&quot;P:System.ComponentModel.IEditableCollectionView.IsAddingNew&quot;/&gt; is true; otherwise, null.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">object</span> CurrentAddItem\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_currentAddItem); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets a value that indicates whether an item can be removed from the collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if an item can be removed from the collection; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> CanRemove\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">true</span>); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets a value that indicates whether the collection view can discard pending changes and restore the original values of an edited object.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if the collection view can discard pending changes and restore the original values of an edited object; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> CanCancelEdit\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (<span style=\"color:blue\">true</span>); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets a value that indicates whether an edit transaction is in progress.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> true if an edit transaction is in progress; otherwise, false.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> IsEditingItem\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_currentEditItem != <span style=\"color:blue\">null</span>); }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets the item in the collection that is being edited.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> The item that is being edited if &lt;see cref=&quot;P:System.ComponentModel.IEditableCollectionView.IsEditingItem&quot;/&gt; is true; otherwise, null.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">object</span> CurrentEditItem\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_currentEditItem); }\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Public Events\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> EventHandler Refreshed = <span style=\"color:blue\">delegate</span> { };\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Private class DeferRefreshHelper\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">class</span> DeferRefreshHelper : IDisposable\r\n        {\r\n            <span style=\"color:blue\">private</span> Action _callback;\r\n\r\n            <span style=\"color:blue\">public</span> DeferRefreshHelper(Action callback)\r\n            {\r\n                _callback = callback;\r\n            }\r\n\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Dispose()\r\n            {\r\n                _callback();\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n    }\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-11T04:24:39.053-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "521467",
    "ThreadId": "233679",
    "Html": "\r\n<p>lucianotcorreia,</p>\r\n<p>Thanks for the solution. I have one question if you can help me understand.</p>\r\n<p>in your ViewModel there is this code</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp; _entities = <span style=\"color:blue\">new</span> ObservableCollection&lt;TEntity&gt;();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; _entitiesView = <span style=\"color:blue\">new</span> PagedEntityView&lt;TEntity&gt;(_entities);&nbsp;</p>\r\n<p>It looks to me that we firstload all the entities and then let it page, is this correct? would it not be a lot of unnesery fetching of data upfront?</p>\r\n<p>Regards, Kiran</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-13T04:55:19.213-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "521584",
    "ThreadId": "233679",
    "Html": "\r\n<p>You need a LoadData Methods in your viewmodel, something lije that:</p>\r\n<p>&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> LoadData()\r\n{\r\n  <span style=\"color:blue\">var</span> data = GETDATA;\r\n\r\n  <span style=\"color:blue\">foreach</span>(<span style=\"color:blue\">var</span> item <span style=\"color:blue\">in</span> data)\r\n  {\r\n     _entities.Add(item);\r\n   }\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>You need to bind the DataGrid and and The DataPager to the _entitiesView</p>\r\n",
    "PostedDate": "2010-11-13T13:34:51.38-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "521658",
    "ThreadId": "233679",
    "Html": "\r\n<p>I understand that, my question is that we are loading all the data upfront and loos the benifit of using the DomainDataSource. suppose if my table has 100,000 records, this would mean I have to load all the data in my LoadData method.</p>\r\n<p>Is that correct, or is&nbsp; there a way we can make it smarter and load only pages we need.</p>\r\n<p>Regards, Kiran</p>\r\n",
    "PostedDate": "2010-11-13T22:08:11.12-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "522695",
    "ThreadId": "233679",
    "Html": "\r\n<p>that class is a &quot;DomainDataSource&quot; u dont need to use that DomainDataSource Anymor.</p>\r\n<p>If u configure the Paged to load only 10 itens, it will load only 10 itens...</p>\r\n<p>I ll put my View Model Base Class:</p>\r\n<p>1 - this is my view model base:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">class</span> ViewModelBase : NotificationObject\r\n    {\r\n\r\n        <span style=\"color:blue\">#region</span> Fields\r\n \r\n        <span style=\"color:blue\">protected</span> IDataService _dataService;\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Constructors\r\n\r\n        [ImportingConstructor]\r\n        <span style=\"color:blue\">protected</span> ViewModelBase(IDataService dataService)\r\n        {\r\n            _dataService = dataService;\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Properties and fields\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> _isLoading;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> IsLoading\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_isLoading); }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (_isLoading == value) <span style=\"color:blue\">return</span>;\r\n                _isLoading = value;\r\n                RaisePropertyChanged(() =&gt; IsLoading);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> _busyContent;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> BusyContent\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_busyContent); }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (_busyContent == value) <span style=\"color:blue\">return</span>;\r\n                _busyContent = value;\r\n                RaisePropertyChanged(() =&gt; BusyContent);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Abstract methods\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">void</span> LoadData();\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>2 - this a Generic ViewModel:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>  <span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">class</span> ViewModelBase&lt;TEntity&gt; : ViewModelBase, IViewModel, ISecurityPermission\r\n        <span style=\"color:blue\">where</span> TEntity : Entity, IEditableObject, <span style=\"color:blue\">new</span>()\r\n    {\r\n\r\n        <span style=\"color:blue\">#region</span> Protected fields\r\n\r\n        <span style=\"color:blue\">protected</span> ObservableCollection&lt;TEntity&gt; _entities;\r\n        <span style=\"color:blue\">protected</span> PagedEntityView&lt;TEntity&gt; _entitiesView;\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Constructors\r\n\r\n        [ImportingConstructor]\r\n        <span style=\"color:blue\">public</span> ViewModelBase(IDataService dataService)\r\n            : <span style=\"color:blue\">base</span>(dataService)\r\n        {\r\n            _entities = <span style=\"color:blue\">new</span> ObservableCollection&lt;TEntity&gt;();\r\n            _entitiesView = <span style=\"color:blue\">new</span> PagedEntityView&lt;TEntity&gt;(_entities);\r\n\r\n            _entitiesView.LoadData &#43;= (sender, args) =&gt; LoadData();\r\n            _entitiesView.Refreshed &#43;= (sender, args) =&gt; LoadData();\r\n\r\n            <span style=\"color:green\">// Todo: Pegar o &quot;PageSize&quot; de par�metros</span>\r\n            _entitiesView.PageSize = 10;\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Properties\r\n\r\n        <span style=\"color:blue\">public</span> PagedEntityView&lt;TEntity&gt; Entities\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_entitiesView); }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> TEntity _selectedEntity;\r\n        <span style=\"color:blue\">public</span> TEntity SelectedEntity\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (_entitiesView.CurrentItem <span style=\"color:blue\">as</span> TEntity); }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (_selectedEntity != value)\r\n                {\r\n                    _entitiesView.MoveCurrentTo(value);\r\n                    _selectedEntity = value;\r\n                    RaisePropertyChanged(() =&gt; SelectedEntity);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Private fields\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> _entityName;\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> IViewModel implementation\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> ScreenDescriptionPlural { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> ScreenDescriptionSingular { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> SubmitChanges()\r\n        {\r\n            _dataService.Context.SubmitChanges((submitOperation) =&gt;\r\n                                               {\r\n                                                   <span style=\"color:blue\">if</span> (submitOperation.HasError) <span style=\"color:blue\">return</span>;\r\n\r\n                                                   MessageBoxDialog.Show(submitOperation.Error.Message, <span style=\"color:#a31515\">&quot;Erro&quot;</span>,\r\n                                                       MessageBoxDialogButtons.OK,\r\n                                                       MessageBoxDialogIcons.Critical,\r\n                                                       (s, e) =&gt; { });\r\n                                                   submitOperation.MarkErrorAsHandled();\r\n                                                   LoadData();\r\n                                               }, <span style=\"color:blue\">null</span>);\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> RejectChanges()\r\n        {\r\n            _dataService.Context.RejectChanges();\r\n            IsLoading = <span style=\"color:blue\">false</span>;\r\n        }\r\n\r\n    \r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> _canSubmitChanges;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> CanSubmitChanges\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _canSubmitChanges; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (_canSubmitChanges == value) <span style=\"color:blue\">return</span>;\r\n                _canSubmitChanges = value;\r\n                RaisePropertyChanged(() =&gt; CanSubmitChanges);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> _idFilter;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> IdFilter\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _idFilter; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (_idFilter == value) <span style=\"color:blue\">return</span>;\r\n                _idFilter = value;\r\n                RaisePropertyChanged(() =&gt; IdFilter);\r\n                _entitiesView.PageIndex = 0;\r\n                LoadData();\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> _textFilter;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> TextFilter\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _textFilter; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (_textFilter == value) <span style=\"color:blue\">return</span>;\r\n                _textFilter = value;\r\n                RaisePropertyChanged(() =&gt; TextFilter);\r\n                _entitiesView.PageIndex = 0;\r\n                LoadData();\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> _textFilterField;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> TextFilterField\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _textFilterField; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (_textFilterField == value) <span style=\"color:blue\">return</span>;\r\n                _textFilterField = value;\r\n                RaisePropertyChanged(() =&gt; TextFilterField);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Public abstract methods\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">void</span> AddEntity(TEntity entity);\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">void</span> DeleteEntity(TEntity entity);\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> EntityQuery&lt;TEntity&gt; OrderBy(EntityQuery&lt;TEntity&gt; query, <span style=\"color:blue\">bool</span> isFirst, <span style=\"color:blue\">string</span> propertyName, <span style=\"color:blue\">bool</span> <span style=\"color:blue\">descending</span>);\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> Expression&lt;Func&lt;TEntity, <span style=\"color:blue\">bool</span>&gt;&gt; BuildWhere(<span style=\"color:blue\">string</span> textFilterField, <span style=\"color:blue\">string</span> textFilter);\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">abstract</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> LoadData();\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>3- thats is a implementation of the view model (my table name is Linhas)</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Export]\r\n    [PartCreationPolicy(CreationPolicy.Shared)]\r\n    [RegionMemberLifetime(KeepAlive = <span style=\"color:blue\">false</span>)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> LinhasViewModel : ViewModelBase&lt;Linha&gt;\r\n    {\r\n\r\n        <span style=\"color:blue\">#region</span> Costructors\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">int</span> count = 0;\r\n        \r\n        [ImportingConstructor]\r\n        <span style=\"color:blue\">public</span> LinhasViewModel(IDataService dataService) : <span style=\"color:blue\">base</span>(dataService)\r\n        {\r\n            LinhasViewModel.count&#43;&#43;;\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Override methods\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> AddEntity(Linha entity)\r\n        {\r\n            <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotImplementedException();\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> DeleteEntity(Linha entity)\r\n        {\r\n            <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotImplementedException();\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> EntityQuery&lt;Linha&gt; OrderBy(EntityQuery&lt;Linha&gt; query, <span style=\"color:blue\">bool</span> isFirst, <span style=\"color:blue\">string</span> propertyName, <span style=\"color:blue\">bool</span> <span style=\"color:blue\">descending</span>)\r\n        {\r\n            <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotImplementedException();\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> Expression&lt;Func&lt;Linha, <span style=\"color:blue\">bool</span>&gt;&gt; BuildWhere(<span style=\"color:blue\">string</span> textFilterField, <span style=\"color:blue\">string</span> textFilter)\r\n        {\r\n            <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> NotImplementedException();\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> LoadData()\r\n        {\r\n            IsLoading = <span style=\"color:blue\">true</span>;\r\n\r\n            <span style=\"color:blue\">var</span> query = _dataService.Context.GetLinhasQuery();\r\n\r\n            query = query.OrderBy(linha =&gt; linha.Descricao);\r\n\r\n            <span style=\"color:blue\">if</span> (_entitiesView.PageSize &gt; 0)\r\n            {\r\n                query = query.Skip(_entitiesView.PageSize * _entitiesView.PageIndex);\r\n                query = query.Take(_entitiesView.PageSize);\r\n            }\r\n\r\n            query.IncludeTotalCount = <span style=\"color:blue\">true</span>;\r\n\r\n            _dataService.Context.Load(query,\r\n                                     (linhasLoadOpe) =&gt;\r\n                                     {\r\n                                         <span style=\"color:blue\">if</span> (linhasLoadOpe.HasError)\r\n                                         {\r\n                                             <span style=\"color:green\">// Todo: Mostrar erro numa tela padr�o</span>\r\n                                             MessageBox.Show(linhasLoadOpe.Error.ToString());\r\n                                             <span style=\"color:blue\">return</span>;\r\n                                         }\r\n\r\n                                         _entities.Clear();\r\n                                         <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> entity <span style=\"color:blue\">in</span> linhasLoadOpe.Entities)\r\n                                         {\r\n                                             _entities.Add(entity);\r\n                                         }\r\n                                         \r\n                                         _entitiesView.MoveCurrentToFirst();\r\n\r\n                                         _entitiesView.TotalItemCount = linhasLoadOpe.TotalEntityCount;\r\n                                         _entitiesView.ItemCount = linhasLoadOpe.TotalEntityCount;\r\n                                         \r\n                                         IsLoading = <span style=\"color:blue\">false</span>;\r\n                                     }, <span style=\"color:blue\">null</span>);\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Look at the LoadData Method, it does de paging.</p>\r\n<p>&nbsp;</p>\r\n<p>You need to bind your controls (datagrid and datapager) to the property called: 'Entities&quot;</p>\r\n",
    "PostedDate": "2010-11-16T06:53:46.947-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "522800",
    "ThreadId": "233679",
    "Html": "\r\n<p>lucianotcorreia,</p>\r\n<p>Now I understand, sound like a good way to handle it, I espically like the generic ViewModel base. I am going to give this a try first thing tomorrow.</p>\r\n<p>Thanks, Kiran</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-16T09:52:07.963-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1287883",
    "ThreadId": "233679",
    "Html": "Hi lucianotcorreia &amp; Kiran\r<br />\nIs this only work with Silverlight ? I tried this in WPF. When I set the reference to 'System.Windows.Data.dll' in Silverlight SDK folder (for IPagedCollectionView) It gives following compilation error.\r<br />\n<em>Unknown build error, 'Cannot resolve dependency to assembly 'System.Windows, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e' because it has not been preloaded. When using the ReflectionOnly APIs, dependent assemblies must be pre-loaded or loaded on demand through the ReflectionOnlyAssemblyResolve event.</em>\r<br />\n<br />\nI'm using Visual Studio 2010 Ultimate. If it is not possible with WPF is there any other solution for loading data dynamically in WPF ?\r<br />\n<br />\nThanks<br />\n",
    "PostedDate": "2014-08-07T22:14:57.6-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]