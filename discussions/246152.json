[
  {
    "Id": "566608",
    "ThreadId": "246152",
    "Html": "\r\n<p>Hi,</p>\r\n<p>&nbsp;</p>\r\n<p>I have a ContactView that contains a TabControl. &nbsp;By default there are always three tabs on this tab control. Each tab item would contain a different View.</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span> <span style=\"color:red\">x:Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">LayoutRoot</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">&gt;</span>\r\n\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">sdk</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">TabControl</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ContactTabControl</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">sdk</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">TabItem</span> <span style=\"color:red\">Header</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Contact</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">CustomerTabItem</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Views</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">CustomerView</span><span style=\"color:blue\">/&gt;</span>\r\n\t\t\t\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">sdk</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">TabItem</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">sdk</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">TabItem</span> <span style=\"color:red\">Header</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Calls</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Calls</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Views</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">CallsView</span> <span style=\"color:blue\">/&gt;</span>\r\n\t\t\t\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">sdk</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">TabItem</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">sdk</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">TabItem</span> <span style=\"color:red\">Header</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Info</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Info</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Views</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">InfoView</span> <span style=\"color:blue\">/&gt;</span>\r\n\t\t\t\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n\t\t\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">sdk</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">TabItem</span><span style=\"color:blue\">&gt;</span>\r\n\t\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">sdk</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">TabControl</span><span style=\"color:blue\">&gt;</span>\r\n\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n<pre>Nonetheless all three Views would represent a subset of the Contact Model. And here lies the challenge, the plan is to pass a contact from a collection into this viewmodel so it can be displayed. &nbsp;</pre>\r\n<pre>Now I could be passing the contact object to the ctor of the Contact Module by utilizing an event aggregator. </pre>\r\n<pre>But here I am stuck, generally I would apply the view first approach by creating my ContactView like this:</pre>\r\n<pre><pre><br><div style=\"color:black; background-color:white\"><pre>_regionManager.RequestNavigate(Constants.MainRegion, <span style=\"color:blue\">new</span> Uri(Constants.ContactView, UriKind.Relative));\r\n</pre>\r\n</div>\r\n</pre>\r\n</pre>\r\n<p>Or the classic way like this:<br>\r\n&nbsp;<br>\r\n<span style=\"font-family:Consolas,'Courier New',Courier,monospace\"><span style=\"white-space:pre\"></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>  _regionManager.RegisterViewWithRegion(Constants.MainRegion, () =&gt; _container.Resolve&lt;ContactView&gt;());\r\n</pre>\r\n</div>\r\n<br>\r\n</span></span>\r\n<p></p>\r\n<p><br>\r\nHowever how would I pass in there my Contact object if I am utilizing the IoC for resolving it in first place? &nbsp;<br>\r\n<br>\r\nBut even if I got the contact object passed in, I still need to pass it down further to the three sub views in each tab as shown previously. As you might guess each of the three views has its own ViewModel which might need the contact to be passed in as well.\r\n How would I achieve this, especially since those three views are&nbsp;instantiated&nbsp;automatically as soon as the Contact View is created (in xaml), which doesn't leave me any room to inject in anything.<br>\r\n<br>\r\nMany Thanks for your advice,<br>\r\nHouman&nbsp;</p>\r\n<p><span style=\"font-family:Consolas,'Courier New',Courier,monospace; white-space:pre\"><br>\r\n</span></p>\r\n",
    "PostedDate": "2011-02-15T10:29:50.707-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "566627",
    "ThreadId": "246152",
    "Html": "<p>Hi Houman,</p>\r\n<p>One possibility would be to create an <strong>UriQuery</strong> object, append it to the Uri used in the <strong>RequestNavigate </strong>method and pass the information you need from your Contact object, which could be retrieved in the Parameters property of the Region Navigation Context in the <strong>OnNavigatedTo</strong> method. For example:</p>\r\n<p><span id=\"ctl00_MTCS_main_ctl27\">\r\n<pre id=\"ctl00_MTCS_main_ctl27_code\" class=\"libCScode\">Contact contact= Contacts.CurrentItem as Contact;<br /><span style=\"color: blue;\">if</span> (contact != <span style=\"color: blue;\">null</span>)<br />{<br />    UriQuery query = <span style=\"color: blue;\">new</span> UriQuery();<br />    query.Add(<span style=\"color: maroon;\"><span style=\"color: maroon;\">\"ID\"</span></span>, contact.Id);<br />    _regionManager.RequestNavigate(RegionNames.TabRegion,<br />         <span style=\"color: blue;\">new</span> Uri(<span style=\"color: maroon;\"><span style=\"color: maroon;\">\"ContactView\"</span></span> + query.ToString(), UriKind.Relative));<br />}</pre>\r\n</span></p>\r\n<p>Since passing an object as a parameter for a navigation request isn't supported out of the box (as you can read in <a href=\"http://compositewpf.codeplex.com/discussions/236475\">this thread</a>), in case you need to pass the full object, you could use other mechanism for constructing the view to be navigated to. For example, one possibility would be not to use Inversion of Control to obtain a reference to the ContactView, and pass the entire Contact object to the view's constructor instead.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-02-15T10:59:25.69-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "566781",
    "ThreadId": "246152",
    "Html": "<p>Hi Guido,</p>\r\n<p>&nbsp;</p>\r\n<p>Many Thanks for your help. &nbsp;The idea of passing in the object into View/VM ctor directly and not utilizing the IoC is possible.</p>\r\n<p>However I am facing a side effect.</p>\r\n<p>In the example above, as you see my three sub views are created in XAML (with empty ctor) and therefore blendable. I can see the Designer. &nbsp;However if i was to inject the Contact object first into the parent View, which needs then to pass the object further down to all three child views, I have a problem.<br />The only way I know how to do it, is to remove the view entries from XAML and add them in the code behind directly with the Contact object injected into their ctor. &nbsp;However the Blendability is gone, I wont be able to see my views in the Designer.&nbsp;</p>\r\n<pre><div style=\"color: black; background-color: white;\"><pre><span style=\"color: blue;\"><strong>ParentView:</strong><br />&nbsp;</span></pre>\r\n<pre><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">sdk</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">TabItem</span> <span style=\"color: red;\">Header</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Contact</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Name</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">CustomerTabItem</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n\t\t\t\t<span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Grid</span> <span style=\"color: red;\">Name</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">GridCustomer</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Background</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{StaticResource BlueGradientBackgroundColor}</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n\r\n\t\t                <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Grid</span><span style=\"color: blue;\">&gt;</span>\r\n\t\t\t<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">sdk</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">TabItem</span><span style=\"color: blue;\">&gt;</span>\r\n\r\n</pre>\r\n</div>\r\n<br /></pre>\r\n<pre><strong>   Code behind of ParentView:</strong></pre>\r\n<pre><span><pre><div style=\"color: black; background-color: white;\"><pre>GridCustomer.Children.Add(<span style=\"color: blue;\">new</span> CustomerView(contact));\r\n\r\n</pre>\r\n</div>\r\n<br /></pre>\r\n</span></pre>\r\n<p>&nbsp;</p>\r\n<p>I was wondering if there is a better way of doing it. &nbsp;Perhaps instead of the View-First approach, I should be using the ViewModel first approach. &nbsp;Do you have any example how to do this? And is this approach blendable? (Probably not either I take it, but might still be cleaner)</p>\r\n<p>Many Thanks,<br />Houman</p>",
    "PostedDate": "2011-02-15T15:03:09.19-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "567231",
    "ThreadId": "246152",
    "Html": "<p>Hi Houman,</p>\n<p>As explained in <a href=\"http://compositewpf.codeplex.com/discussions/225637\"> this thread</a>, the ViewModel-First approach could bring some difficulties to blendability. From Brian Noyes' answer in the aforementioned thread:</p>\n<p>\"<em>The real downside to the view model first approach that the docs should be pointing out is a lack of Blendability - the view doesn't know about the properties exposed by its data context, so you can't leverage the VS and Blend design time data tools  as well. Additionally, it locks a view model into supporting only a single view contract, and it is not infrequent that a single view model may be able to support more than one view type (i.e. a summary and a details view). It is also one more dependency that  needs to be mocked out when testing the view model, whereas you usually don't write unit tests against the view so there is not the same concern of substitutability when the view has a ref to the view model as there is when the roles are reversed.</em>\"</p>\n<p>You might find the following threads useful to achieve blendability in Prism:</p>\n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/240359\">Design time support for Prism 4</a> </li>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/237265\">Blendability in PRISM v4</a> </li>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/221972\">Views in Design view/Design time (controls not showing up)</a> </li>\n</ul>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-02-16T08:36:49.36-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "570002",
    "ThreadId": "246152",
    "Html": "<p>Hi Houman,</p>\r\n<p>I think you could use the RegionContext to share objects between the views in the region.</p>\r\n<p>Cheers</p>",
    "PostedDate": "2011-02-21T21:07:49.457-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]