[
  {
    "Id": "659166",
    "ThreadId": "269336",
    "Html": "<p>Dear All,</p>\n<p>I was looking for a way to validate properties on my viewmodel untill I found a solution that did the job very well.</p>\n<p>I then read a few posts about the PRISM implementation, since I am using PRISM 4 I am intrested to know what are the differences between&nbsp; the two approachs (if any) here is implementation for the INotifyDataErrorInfo:</p>\n<div style=\"background-color: white; color: black;\">\n<pre>\t\t<span style=\"color: blue;\">#region</span> Implementation of INotifyDataErrorInfo\r\n\t\t<span style=\"color: blue;\">public</span> IEnumerable GetErrors(<span style=\"color: blue;\">string</span> propertyName)\r\n\t\t{\r\n\t\t\t<span style=\"color: blue;\">if</span> (_errors.ContainsKey(propertyName))\r\n\t\t\t{\r\n\t\t\t\tIList&lt;<span style=\"color: blue;\">string</span>&gt; propertyErrors = _errors[propertyName]; \r\n\t\t\t\t<span style=\"color: blue;\">foreach</span> (<span style=\"color: blue;\">string</span> propertyError <span style=\"color: blue;\">in</span> propertyErrors)\r\n\t\t\t\t{\r\n\t\t\t\t\t<span style=\"color: blue;\">yield</span> <span style=\"color: blue;\">return</span> propertyError;\r\n\t\t\t\t}\r\n\t\t\t} <span style=\"color: blue;\">yield</span> <span style=\"color: blue;\">break</span>;\r\n\t\t} \r\n\t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">bool</span> HasErrors\r\n\t\t{\r\n\t\t\t<span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> _errors.Count &gt; 0; }\r\n\t\t}\r\n\t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">event</span> EventHandler&lt;DataErrorsChangedEventArgs&gt; ErrorsChanged;\r\n\t\t\r\n\t\t<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> NotifyErrorsChanged(<span style=\"color: blue;\">string</span> propertyName)\r\n\t\t{\r\n\t\t\t<span style=\"color: blue;\">if</span> (ErrorsChanged != <span style=\"color: blue;\">null</span>) \r\n\t\t\t\tErrorsChanged(<span style=\"color: blue;\">this</span>, <span style=\"color: blue;\">new</span> DataErrorsChangedEventArgs(propertyName));\r\n\t\t}\r\n\t\t<span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">void</span> ValidateProperty(<span style=\"color: blue;\">string</span> propertyName, <span style=\"color: blue;\">object</span> value)\r\n\t\t{\r\n\t\t\tDailyUnPostedDetailsViewModel objectToValidate = <span style=\"color: blue;\">this</span>; \r\n\t\t\t<span style=\"color: blue;\">var</span> results = <span style=\"color: blue;\">new</span> List&lt;ValidationResult&gt;(); \r\n\t\t\t<span style=\"color: blue;\">bool</span> isValid = Validator.TryValidateProperty(value, <span style=\"color: blue;\">new</span> ValidationContext(objectToValidate, <span style=\"color: blue;\">null</span>, <span style=\"color: blue;\">null</span>) { MemberName = propertyName }, results); \r\n\t\t\t<span style=\"color: blue;\">if</span> (isValid)             \r\n\t\t\t\tRemoveErrorsForProperty(propertyName); \r\n\t\t\t<span style=\"color: blue;\">else</span>            \r\n\t\t\t\tAddErrorsForProperty(propertyName, results); \r\n\t\t\tNotifyErrorsChanged(propertyName);\r\n\t\t}\r\n\t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">bool</span> ValidateObject()\r\n\t\t{\r\n\t\t\tDailyUnPostedDetailsViewModel objectToValidate = <span style=\"color: blue;\">this</span>;\r\n\t\t\t_errors.Clear();\r\n\t\t\tType objectType = objectToValidate.GetType();\r\n\t\t\tPropertyInfo[] properties = objectType.GetProperties();\r\n\t\t\t<span style=\"color: blue;\">foreach</span> (PropertyInfo property <span style=\"color: blue;\">in</span> properties)\r\n\t\t\t{\r\n\t\t\t\t<span style=\"color: blue;\">if</span> (property.GetCustomAttributes(<span style=\"color: blue;\">typeof</span>(ValidationAttribute), <span style=\"color: blue;\">true</span>).Any())\r\n\t\t\t\t{\r\n\t\t\t\t\t<span style=\"color: blue;\">object</span> value = property.GetValue(objectToValidate, <span style=\"color: blue;\">null</span>);\r\n\t\t\t\t\tValidateProperty(property.Name, value);\r\n\t\t\t\t}\r\n\t\t\t} <span style=\"color: blue;\">return</span> !HasErrors;\r\n\t\t}\r\n\t\t<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> AddErrorsForProperty(<span style=\"color: blue;\">string</span> propertyName, IEnumerable&lt;ValidationResult&gt; validationResults)\r\n\t\t{\r\n\t\t\tRemoveErrorsForProperty(propertyName); \r\n\t\t\t_errors.Add(propertyName, validationResults.Select(vr =&gt; vr.ErrorMessage).ToList());\r\n\t\t}\r\n\t\t<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> RemoveErrorsForProperty(<span style=\"color: blue;\">string</span> propertyName)\r\n\t\t{\r\n\t\t\t<span style=\"color: blue;\">if</span> (_errors.ContainsKey(propertyName))             \r\n\t\t\t\t_errors.Remove(propertyName);\r\n\t\t}\r\n\t\t<span style=\"color: blue;\">#endregion</span>\r\n</pre>\n</div>\n<p>I can call&nbsp;<span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\"><strong>ValidateObject()</strong>&nbsp;</span></span>&nbsp;to check the whole VM before submitting data to the server, also I can call&nbsp;<span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">ValidateProperty(</span></span></span><span style=\"font-family: Consolas; color: #a31515; font-size: x-small;\"><span style=\"font-family: Consolas; color: #a31515; font-size: x-small;\"><span style=\"font-family: Consolas; color: #a31515; font-size: x-small;\">\"properityName\"</span></span></span><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">, </span></span><span style=\"font-family: Consolas; color: #0000ff; font-size: x-small;\"><span style=\"font-family: Consolas; color: #0000ff; font-size: x-small;\"><span style=\"font-family: Consolas; color: #0000ff; font-size: x-small;\">value</span></span></span><span style=\"font-family: Consolas; font-size: x-small;\"> <span style=\"font-family: Consolas; font-size: x-small;\">)</span></span>&nbsp;in the setter of each properity decorated with CustomValidation method.</p>\n<p>Is this still valid under PRISM 4 implementation.</p>\n<p>Please advice</p>\n<p>Regards</p>\n<p>Waleed</p>",
    "PostedDate": "2011-08-16T18:36:10.217-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "659565",
    "ThreadId": "269336",
    "Html": "<p>Hi Waleed,</p>\r\n<p>Prism provides proven patterns and practices, however, you are free to implement those patterns and practices as you see fit for your scenario.</p>\r\n<p>So far, based on my understanding of your implementation, it seems to be a valid possibility to implement the <strong>INotifyDataErrorInfo </strong>interface as you describe above.</p>\r\n<p>Regards,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\" target=\"_blank\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-08-17T11:42:21.89-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]