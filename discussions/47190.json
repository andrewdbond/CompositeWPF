[
  {
    "Id": "157870",
    "ThreadId": "47190",
    "Html": "Hi all,<br>\r\n<br>\r\nI have been having a strange problem with static Commands and DataTemplates.&nbsp; I used the code from the StockTraderRI sample for creating a globally available command:<br>\r\nIn the infrastructure project I have:<br>\r\n<blockquote>namespace Infrastructure<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp; public static class NexNeuroCommands<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static CompositeCommand openModuleCommand;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>public static CompositeCommand OpenModuleCommand<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (openModuleCommand == null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; openModuleCommand = new CompositeCommand();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return openModuleCommand;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</strong><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static CompositeCommand CloseModuleCommand = new CompositeCommand();<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; public class NexNeuroCommandProxy ...<br>\r\n}<br>\r\n</blockquote>I created the OpenModuleCommand as a property so that I could break on the openModuleCommand = new CompositeCommand(); line.&nbsp; Other than that, the code is &quot;by the book&quot;.<br>\r\n<br>\r\nNext, there is a class that registers for the command:<br>\r\n&nbsp;&nbsp;&nbsp; public class NexNeuroModuleHandler : INexNeuroModuleHandler<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private readonly IRegionManager _regionManager;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private NexNeuroCommandProxy commandProxy;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public NexNeuroModuleHandler(IRegionManager regionManager, NexNeuroCommandProxy commandProxy)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _regionManager = regionManager;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.commandProxy = commandProxy;<br>\r\n<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OpenModuleCommand = new DelegateCommand&lt;string&gt;(OnOpenModule);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; commandProxy.OpenModuleCommand.RegisterCommand(OpenModuleCommand);<br>\r\n</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void OnOpenModule(string str)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Windows.MessageBox.Show(&quot;Womp here I am&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region INexNeuroModuleHandler Members<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion<br>\r\n<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public DelegateCommand&lt;string&gt; OpenModuleCommand { get; private set; }<br>\r\n</strong>&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\nAgain, this is by the book, straight from the OrderController in the StockTraderRI sample.<br>\r\n<br>\r\nFinally, here is the DataTemplate that sends the command and the initialization code:<br>\r\n&nbsp;&nbsp;&nbsp; &lt;DataTemplate x:Key=&quot;ModuleListBarItem&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Button <strong>Command=&quot;src:NexNeuroCommands.OpenModuleCommand&quot; </strong>CommandParameter=&quot;Hello&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;StackPanel&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Image Name=&quot;MainButton&quot; Source=&quot;{Binding Path=ModuleBarImageResource}&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TextBlock Text=&quot;{Binding Path=Title}&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/StackPanel&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Button&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/DataTemplate&gt;<br>\r\n<br>\r\nThis template is loaded and attached to the ItemsControl in the following code:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void RegisterViews()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IRegion moduleSelectionRegion = _regionManager.Regions[RegionNames.ModuleSelectionRegion];<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleListBar view = new ModuleListBar();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Binding b = new Binding(&quot;Modules&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.Source = _unityContainer.Resolve&lt;INexNeuroModuleHandler&gt;();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BindingOperations.SetBinding(view, ModuleListBar.ItemsSourceProperty, b);<br>\r\n<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ResourceDictionary rd = new ResourceDictionary();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rd.Source = new Uri(&quot;NexNeuroControls;component/NexNeuroResources.xaml&quot;, UriKind.Relative);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application.Current.Resources.MergedDictionaries.Add(rd);<br>\r\n</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view.Template = (ControlTemplate)Application.Current.Resources[&quot;ModuleListBar&quot;];<br>\r\n<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view.ItemTemplate = (DataTemplate)Application.Current.Resources[&quot;ModuleListBarItem&quot;];<br>\r\n</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view.ItemsPanel = (ItemsPanelTemplate)Application.Current.Resources[&quot;ModuleListBarItemsPanelTemplate&quot;];<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view.ItemContainerStyle = (Style)Application.Current.Resources[&quot;ModuleListBarItemContainerStyle&quot;];<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view.Height = 100;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; moduleSelectionRegion.Add(view);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; moduleSelectionRegion.Activate(view);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\nThe problem that I am having is that the <strong>openModuleCommand = new CompositeCommand();</strong> line (way up top) is being executed twice!&nbsp; <em>So, the controls have a different instance of the static command than the NexNeuroModuleHandler that registers for the command</em>.&nbsp; I am confused as to how this could happen, but mostly, I am looking for a workaround.<br>\r\n<br>\r\nAny ideas out there?<br>\r\n<br>\r\nThanks for your help.<br>\r\n<br>\r\nRegards,<br>\r\nWayne.<br>\r\n",
    "PostedDate": "2009-02-15T14:23:42.99-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "158019",
    "ThreadId": "47190",
    "Html": "Hi Wayne,<div>Doing the new up in the getter might be causing concurrency issues, where the getter might be being called twice at the same time, and causing a race condition when reading and writing the field.</div><div>The ieasiest way to solve it if this is the issue, is by having a static field that is autoinitialized, but you won't be able to put a breakpoint as you suggested (you might put it in the static constructor though.</div><div>Another way is to put a locking mechanism, but that would be more unnecesarily complex than you probably want in your code, if you can avoid it:</div><div><br></div><div><span style=\"font-family:'segoe ui';font-size:13px;color:rgb(48, 51, 45)\">namespace Infrastructure<br>{<br>    public static class NexNeuroCommands<br>    {</span></div><div><span style=\"font-family:'segoe ui';font-size:13px;color:rgb(48, 51, 45)\">        <span style=\"font-weight:bold\">static lockObject = new object();</span><br>        static CompositeCommand openModuleCommand;<br>        <strong><span style=\"font-weight:normal\">public static CompositeCommand OpenModuleCommand<br>        {<br>            get<br>            {<br>                if (openModuleCommand == null)</span></strong></span></div><div><span style=\"font-family:'segoe ui';font-size:13px;color:rgb(48, 51, 45)\"><strong>                    lock (lockObject)</strong></span></div><div><span style=\"font-family:'segoe ui';font-size:13px;color:rgb(48, 51, 45)\"><strong>                    {</strong></span></div><div><span style=\"font-family:'segoe ui';font-size:13px;color:rgb(48, 51, 45)\"><strong>                             if (openModuleCommand == null)<br>                                     openModuleCommand = new CompositeCommand();</strong></span></div><div><span style=\"font-family:'segoe ui';font-size:13px;color:rgb(48, 51, 45)\"><strong><span style=\"font-weight:normal\"><span style=\"font-weight:bold\">                     }</span><br>                return openModuleCommand;<br>            }<br>        }</span></strong><br>    }<br>}</span><br></div><div><span style=\"color:rgb(48, 51, 45);font-family:'segoe ui';font-size:13px\"><br></span></div><div><span style=\"color:rgb(48, 51, 45);font-family:'segoe ui';font-size:13px\">Hope this helps,</span></div><div><span style=\"color:rgb(48, 51, 45);font-family:'segoe ui';font-size:13px\">Julian Dominguez</span></div><div><span style=\"color:rgb(48, 51, 45);font-family:'segoe ui';font-size:13px\"><a href=\"http://blogs.southworks.net/jdominguez\">http://blogs.southworks.net/jdominguez</a></span></div><div><span style=\"color:rgb(48, 51, 45);font-family:'segoe ui';font-size:13px\"><br></span></div>",
    "PostedDate": "2009-02-16T04:26:35.043-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "158042",
    "ThreadId": "47190",
    "Html": "Thanks for the answer, Julian.<br>\r\n<br>\r\nAfter banging my head for several hours and getting a massive headache, I finally figured out that the Infrastructure assembly was being loaded twice: once from my modules directory (I am using the ConfigurationModuleEnumerator, with the config file pointing to modules\\Infrastructure.dll), and once from the current directory.&nbsp; So, each time I referenced NexNeuroCommands.OpenModuleCommand, it was from a different assembly, therefore the type was reinitialized.<br>\r\n<br>\r\nI pointed the config file to the current directory version of Infrastructure.dll and it works now.<br>\r\n<br>\r\nBest regards,<br>\r\nWayne.<br>\r\n",
    "PostedDate": "2009-02-16T05:22:53.87-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]