[
  {
    "Id": "205043",
    "ThreadId": "60538",
    "Html": "<p>I'm writing some code that does dynamic module loading. The IModuleManager.LoadModule API can load modules asynchronously which is all good, but there is no async pattern to let me know when this operation is complete. I can't find any event that provides this information.</p>\r\n<p>The code I'm trying to write is to implement an internal uri based navigation scheme within my app. So imagine I have a uri that looks something like:</p>\r\n<p>/{app stuff}/{module_id}/{stuff for module}</p>\r\n<p>And I have some parsing code that walks down this path handing components the next part of the uri they are responsible for. When I get to the 'module_id' part I load the module and then I want to hand it (or some object implemented inside it) the rest of the path.</p>\r\n<p>I saw another post where it was suggested that this data get stored off somewhere and the IModule::Initialize code would then look for it. The idea being that this keeps things losely coupled. I could do something like this, but I also have a use case where the above url parsing scheme comes a long and the module has already been loaded so its Initialize won't (and can't) be called again.</p>\r\n<p>Ideally I would want some kind of callback when module loading is complete or fails. Is there something like that available that I'm just not seeing? Or is there a design reason why the module loading API doesn't provide this? I was also looking for something that could tell me if a module has been loaded, or is in the process of being loaded and all I could come up with is a query:</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>\r\n<p><span style=\"font-size:x-small\">&lt;font size=&quot;2&quot;&gt;\r\n<p>&nbsp;</p>\r\n&lt;/font&gt;</span>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#008000;font-size:x-small\"><span style=\"color:#008000;font-size:x-small\">// See if module is already loaded.</span></span></p>\r\n<span style=\"font-size:x-small\">&lt;font size=&quot;2&quot;&gt;\r\n<p>&nbsp;</p>\r\n&lt;/font&gt;</span>\r\n<p>&nbsp;</p>\r\n<span style=\"color:#2b91af;font-size:x-small\"><span style=\"color:#2b91af;font-size:x-small\">ModuleInfo</span></span><span style=\"font-size:x-small\"> moduleInfo = </span><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#0000ff;font-size:x-small\">this</span></span><span style=\"font-size:x-small\">.moduleCatalog.Modules.Where(m =&gt; (m.State == </span><span style=\"color:#2b91af;font-size:x-small\"><span style=\"color:#2b91af;font-size:x-small\">ModuleState</span></span><span style=\"font-size:x-small\">.NotStarted &amp;&amp; m.ModuleName == id)).FirstOrDefault();</span></p>\r\n</p>\r\n<p>Thanks!!</p>\r\n<p>-John</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-24T08:46:52.22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "205138",
    "ThreadId": "60538",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">Hi John,</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">Currently, there is no functionality that allows you to receive a callback in your application (an implementation of this might be a useful idea for some situations) when a particular module has been loaded<span style=\"color:#1f497d\"> or </span>failed to be. I do not know your exact scenario, but in a </span><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=60127\"><span style=\"font-family:Calibri;font-size:small\">similar thread</span></a><span style=\"font-family:Calibri\"><span style=\"font-size:small\"> we discussed how to pass startup args to the module (perhaps this was the one you mentioned). As you said, once the module has been loaded its execute method is not executed again. </span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">When you say &ldquo;<em>I also have a use case where the above url parsing scheme comes a long&rdquo;, </em>I understand that another call is performed in which you need some data from this shared service to be able parse the URL. In this case, you could also access the Service&rsquo;s instance (mentioned in the link above) through your container and get the required information from it where you need to perform this parsing.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">As I said before, I do not know the specifics of your application, but always remember that when sharing information globally (for all modules) in your application you should check that you are keeping it loosely coupled.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">To check if a module has been loaded the way you are using is correct. You could also get the state of the Module directly and check its status to make a particular decision (through an if or switch statement).</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">The following post provides some more information about the Module Initialization Lifecycle. You might find it useful:</span></span></p>\r\n<p style=\"text-indent:-18pt;margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:Symbol\" lang=EN-US><span style=\"\"><span style=\"font-size:small\">&middot;</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"\" lang=EN-US><a href=\"http://www.ctrl-shift-b.com/2009/05/enhancing-prism-module-initialization.html\"><span style=\"font-family:Calibri;font-size:small\">Enhancing the Prism Module Initialization Lifecycle</span></a></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Please let me know if this helps.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Damian Schenkelman</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"font-family:Calibri;font-size:small\">http://blogs.southworks.net/dschenkelman</span></a></span></p>",
    "PostedDate": "2009-06-24T13:09:31.92-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "208409",
    "ThreadId": "60538",
    "Html": "<p>Thanks Damian! Sorry it took me a bit to get back to you...</p>\r\n<p>The thread you linked to is what I was referring to. My plan for implementing this will be to save the paramters I want to pass to the module (or an object inside it). Then when the module loads it will fire an event indicating that it has initialized. The responder of that event will then obtain a reference to the module (perhaps the module can pass this as the event payload) and call a method on the interesting object in the module to tell it what it needs to finish initializing.</p>\r\n<p>Imagine a scenario where a module can present data in different modes and I want to load it and tell it to present in a particular mode. I think that the above plan will work.</p>\r\n<p>However, I do think that it is a major deficiency in the API that there is no way to find out that a module has failed to load. I'm planning on loading the dll dynamically from my host web site and we all know that this could fail for a client at any moment.&nbsp;Applications need to know this so that it can try to recover. I may create a patch myself to provide this functionality for my app because I think it is important.</p>\r\n<p>Thanks again for your help.</p>\r\n<p>-John</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-03T12:45:48.47-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]