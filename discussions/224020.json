[
  {
    "Id": "482080",
    "ThreadId": "224020",
    "Html": "Hi Experts, \r\n\r\nmany articles and some sample apps showed me how interesting PRISM is. My monolitic MVVM Application is fascinating complex ;-) Therefore i try to understand PRISM 4. The Documentation is very good, i only miss PRISM MEF specifics. Since two days i fail with a simple 'Hello World' with MEF. A basic MEF knowledge and some study on the PRISM Examples were helpful to import and intialize the module, but i fail at the last steps (RegionManager).\r\n\r\nI am sure you work hard and the PRISM 4 Version will be nice and smart. But, please dont forget the PRISM Newbies with a Hands-On Lab for PRISM with MEF.\r\n\r\nThank you,\r\nmarc",
    "PostedDate": "2010-08-18T15:54:39.43-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "482294",
    "ThreadId": "224020",
    "Html": "<p>Hi All,</p>\r\n<p>for anyone who try to figure out a PRISM MEF Hello World Example, this work for me after i fight a lot with the CTP Hands-On Lab :</p>\r\n<p>\r\n<hr>\r\n<strong>bootstrapper.cs</strong></p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">class</span> Bootstrapper : MefBootstrapper\r\n    {\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span><span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;remarks&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/remarks&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> DependencyObject CreateShell()\r\n        {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.Container.GetExportedValue&lt;Shell&gt;();   \r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;remarks&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/remarks&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> InitializeShell()\r\n        {\r\n            <span style=\"color:green\">//  Rufe InitializeShell aus MefBootstrapper auf</span>\r\n            <span style=\"color:blue\">base</span>.InitializeShell(); \r\n            <span style=\"color:green\">//  Setze this.Shell als MainWindow</span>\r\n            App.Current.MainWindow = (Window)<span style=\"color:blue\">this</span>.Shell; \r\n            <span style=\"color:green\">//  Stelle MainWindow dar</span>\r\n            App.Current.MainWindow.Show();\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;remarks&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/remarks&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureContainer()\r\n        {\r\n            <span style=\"color:blue\">base</span>.ConfigureContainer();\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Creates the &lt;see cref=&quot;IModuleCatalog&quot;/&gt; used by Prism.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;remarks&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/remarks&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> IModuleCatalog CreateModuleCatalog()\r\n        {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> ConfigurationModuleCatalog();\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;remarks&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/remarks&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureModuleCatalog()\r\n        {\r\n            <span style=\"color:blue\">base</span>.ConfigureModuleCatalog();\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;remarks&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/remarks&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureAggregateCatalog()\r\n        {\r\n            <span style=\"color:blue\">base</span>.ConfigureAggregateCatalog();  \r\n            <span style=\"color:green\">// HelloWorldModule is referenced in in the project and directly in code.</span>\r\n            <span style=\"color:blue\">this</span>.AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span> AssemblyCatalog(<span style=\"color:blue\">typeof</span>(HelloWorldModule).Assembly));\r\n            <span style=\"color:blue\">this</span>.AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span> AssemblyCatalog(<span style=\"color:blue\">typeof</span>(Shell).Assembly));\r\n            \r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>\r\n<hr>\r\n<strong>shell.xaml.cs</strong></p>\r\n<p><strong>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><strong><span style=\"text-decoration:underline\">[Export]\r\n</span>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> Shell : Window\r\n    {\r\n        <span style=\"color:blue\">public</span> Shell()\r\n        {\r\n            <span style=\"color:blue\">this</span>.InitializeComponent();\r\n        }\r\n    }\r\n</strong></pre>\r\n</div>\r\n</strong></p>\r\n<p>\r\n<hr>\r\n<strong>HelloWorldModule.cs</strong></p>\r\n<p><strong>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><strong> [ModuleExport(<span style=\"color:blue\">typeof</span>(HelloWorldModule))]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> HelloWorldModule : IModule\r\n    {\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> IRegionManager regionManager;\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> </span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;regionManager&quot;&gt;</span><span style=\"color:gray\">&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;remarks&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Modify the constructor of the HelloWorldModule class to obtain a region manager instance through constructor dependency injection</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> and store it in the regionManager instance variable. To do this, the constructor has to take a parameter of type </span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Microsoft.Practices.Composite.Regions.IRegionManager.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/remarks&gt;</span>\r\n        [ImportingConstructor]\r\n        <span style=\"color:blue\">public</span> HelloWorldModule(IRegionManager regionManager)\r\n        {\r\n            <span style=\"color:blue\">this</span>.regionManager = regionManager;\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Notifies the module that it has be initialized.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()\r\n        {\r\n            <span style=\"color:green\">// In the Initialize method, invoke the RegisterViewWithRegion method on the RegionManager instance. This method registers a region </span>\r\n            <span style=\"color:green\">// name with its associated view type in the region view registry; the registry is responsible for registering and retrieving of </span>\r\n            <span style=\"color:green\">// these mappings. The RegisterViewWithRegion method has two overloads. When you want to register a view directly, you use the first</span>\r\n            <span style=\"color:green\">// overload that requires two parameters, the region name and the type of the view. This is shown in the following code.</span>\r\n\r\n            regionManager.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;MainRegion&quot;</span>, <span style=\"color:blue\">typeof</span>(HelloWorldView));\r\n\r\n            <span style=\"color:green\">// The UI composition approach used in the preceding code is known as View Discovery. When using this approach, you specify the views</span>\r\n            <span style=\"color:green\">// and the region where the views will be loaded. When a region is created, it asks for its associated views and automatically loads them.</span>\r\n\r\n        }\r\n    }\r\n<br></strong></pre>\r\n</div>\r\n<hr>\r\nHelloWorldView.xaml.cs</strong></p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>[Export]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> HelloWorldView : UserControl\r\n    {\r\n        <span style=\"color:blue\">public</span> HelloWorldView()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-08-19T05:54:25.51-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "482633",
    "ThreadId": "224020",
    "Html": "<p>Hi marckraemer, your example looks very good, &quot;I Like it&quot; - Cheers Harry</p>",
    "PostedDate": "2010-08-20T01:19:39.05-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1259651",
    "ThreadId": "224020",
    "Html": "Thank you so much for this example. I was missing the [Export] attribute on my module view .cs :-)<br />\n",
    "PostedDate": "2014-06-25T06:19:20.723-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]