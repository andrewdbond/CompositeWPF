[
  {
    "Id": "220675",
    "ThreadId": "64799",
    "Html": "<p>Hi,</p>\r\n<p>I often need to get EventArgs as CommandParameter of DelegateCommand.</p>\r\n<p>Currenlty I assign it inside custom command behavior. But I think it is very dirty solution because command parameter should be bindable.</p>\r\n<p>What is the best practice to pass eventargs with command.</p>\r\n<p>I'm using Silverlight 3.</p>\r\n<p>Thanks,</p>\r\n<p>Alexey Zakharov.</p>",
    "PostedDate": "2009-08-07T01:32:26.107-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "220876",
    "ThreadId": "64799",
    "Html": "<p>Hi Alexey,</p>\r\n<p>I assume you are executing a command when a particular event is taking place. If this is the case you can use <a href=\"http://blogs.southworks.net/jdominguez/2008/08/icommand-for-silverlight-with-attached-behaviors/\">commands with attached behaviors</a>. If your behavior inherits from Prism&rsquo;s <strong>CommandBehaviorBase</strong> class, you can set the CommandParameter with the event args right before executing the command. You can take the <strong>ButtonBaseClickCommandBehavior </strong>class that comes with the CAL as an example and do something like:</p>\r\n<p><span style=\"font-size:10pt\" lang=EN-US>&nbsp;</span></p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre> <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> OnClick(<span style=\"color:Blue\">object</span> sender, System.Windows.RoutedEventArgs e)\r\n\r\n        {\r\n\r\n            CommandParameter = e;<br>            ExecuteCommand();\r\n\r\n        }</pre>\r\n<pre>You can also check this post that provides <a href=\"http://blogs.southworks.net/dschenkelman/2009/04/18/commands-with-attached-behavior-for-silverlight-3-dataform/\">another Command with Attached Behavior for the Silverlight 3 DataForm</a>.</pre>\r\n</div>\r\n<p>Please let me know if this helps.</p>\r\n<p>Damian Schenkelman<br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2009-08-07T11:18:06.307-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "220901",
    "ThreadId": "64799",
    "Html": "<pre>---&gt;&gt;&gt; CommandParameter = e;<br><br>This is what I'm talking about. After this operation u cannot no longer bind CommandParameter. That is why I say that is dirty solution.<br><br>I also think that implementing thousands of custom command behavior for each new event you need is bad.<br><br>Currently I bind delegate command to my custom triggeraction of Silverlight interaction API. In this case I have no need to implemnt behavior for new events (ex: ListBox SelectedItemChanged etc)<br><br>&lt;Button&gt;<br>  &lt;i:Interaction.Triggers&gt;<br>     &lt;i:EventTrigger EventName=&quot;Click&quot; /&gt;<br>          &lt;i:InvokeDelegateCommandAction Command={Binding ...} CommandParameter={Biniding ...}   /&gt;<br>     &lt;/i:EventTrigger /&gt;<br>  &lt;/i:Interaction.Triggers&gt;<br>&lt;/Button&gt;<br><br>Have you look at Expression Interaction API? If you are interested in it. I can share some sources to u.<br><br>But in this approach I have still the same problem with setting of EventArgs as commandParameter.</pre>",
    "PostedDate": "2009-08-07T12:12:07.537-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "221082",
    "ThreadId": "64799",
    "Html": "<p>I would be interested in more information on the Expression Interaction API!&nbsp;&nbsp; What steps did you comply with (in Blend) to generate your code?</p>\r\n<p><strong>What about something like the following?</strong></p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>            IDemoPresentationModel model = \r\n                container.Resolve&lt;IDemoPresentationModel&gt;();\r\n\r\n            model.DemoDelegateCommand = \r\n                <span style=\"color:Blue\">new</span> DemoDelegateCommand&lt;EventArgs&gt;(OnDemoExecuted, OnCanExecute);\r\n            \r\n            model.DemoEventArgs = \r\n                <span style=\"color:Blue\">new</span> DemoEventArgs { MyText = <span style=\"color:#A31515\">&quot;Hello World!&quot;</span> };\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> OnDemoExecuted(EventArgs e)\r\n        {\r\n            MessageBox.Show(((DemoEventArgs)e).MyText);\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">bool</span> OnCanExecute(EventArgs e)\r\n        {\r\n            DemoEventArgs arg = e <span style=\"color:Blue\">as</span> DemoEventArgs;\r\n            <span style=\"color:Blue\">if</span> (arg != <span style=\"color:Blue\">null</span>)\r\n                arg.MyText += <span style=\"color:#A31515\">&quot; again!&quot;</span>;\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">true</span>;\r\n        }\r\n</pre>\r\n<pre><strong>Where DemoDelegateCommand looks as follows:</strong></pre>\r\n<pre style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Windows.Input;\r\n\r\n<span style=\"color:Blue\">namespace</span> Module.Client.Commands\r\n{\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> DemoDelegateCommand&lt;T&gt; : ICommand\r\n        where T : EventArgs\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> EventHandler CanExecuteChanged;\r\n\r\n        <span style=\"color:Blue\">private</span> Action&lt;T&gt; executeMethod;\r\n        <span style=\"color:Blue\">private</span> Func&lt;T, <span style=\"color:Blue\">bool</span>&gt; canExecuteMethod;\r\n\r\n        <span style=\"color:Blue\">public</span> DemoDelegateCommand(Action&lt;T&gt; executeMethod, Func&lt;T, <span style=\"color:Blue\">bool</span>&gt; canExecuteMethod)\r\n        {\r\n            <span style=\"color:Blue\">this</span>.executeMethod = executeMethod;\r\n            <span style=\"color:Blue\">this</span>.canExecuteMethod = canExecuteMethod;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">bool</span> CanExecute(<span style=\"color:Blue\">object</span> parameter)\r\n        {\r\n            <span style=\"color:Blue\">return</span> canExecuteMethod((T)parameter);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> Execute(<span style=\"color:Blue\">object</span> parameter)\r\n        {\r\n            executeMethod((T)parameter);\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n<pre>With the DataContext set to the Presentation Model the XAML looks as follows:</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre>        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Button</span> <span style=\"color:Red\">Width</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">100</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Height</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">25</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">DetailsView_ClickMe</span><span style=\"color:Black\">&quot;</span>\r\n                <span style=\"color:Red\">VerticalAlignment</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Top</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">HorizontalAlignment</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Left</span><span style=\"color:Black\">&quot;</span> \r\n                <span style=\"color:Red\">Content</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Click ME</span><span style=\"color:Black\">&quot;</span>\r\n                <span style=\"color:Red\">Command</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding DemoDelegateCommand}</span><span style=\"color:Black\">&quot;</span>\r\n                <span style=\"color:Red\">CommandParameter</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding DemoEventArgs}</span><span style=\"color:Black\">&quot;</span>\r\n                <span style=\"color:Blue\">/&gt;</span>\r\n\r\n</pre>\r\n</div>\r\n</pre>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-08T06:32:32.887-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]