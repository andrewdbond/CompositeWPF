[
  {
    "Id": "557050",
    "ThreadId": "243726",
    "Html": "\r\n<p>I have a region in a Dialog window</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Window</span> <span style=\"color:red\">x:Class</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">CDS.Services.Options.OptionsView</span><span style=\"color:black\">&quot;</span>\r\n        <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:black\">&quot;</span>\r\n        <span style=\"color:red\">xmlns:x</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:black\">&quot;</span>\r\n        <span style=\"color:red\">xmlns:prism</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://www.codeplex.com/CompositeWPF</span><span style=\"color:black\">&quot;</span> \r\n        <span style=\"color:red\">Title</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Options</span><span style=\"color:black\">&quot;</span> \r\n        <span style=\"color:red\">SizeToContent</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">WidthAndHeight</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n  <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span> <span style=\"color:red\">Height</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">300</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Width</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">550</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n      <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ContentControl</span> <span style=\"color:red\">prism:RegionManager.RegionName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">OptionsPageRegion</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Margin</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">10</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n  <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Window</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>I've tried:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>      OptionsView ov = <span style=\"color:blue\">new</span> OptionsView();\r\n      RegionManager.SetRegionContext(ov, _RegionManager);\r\n      RegionManager.UpdateRegions();\r\n      <span style=\"color:blue\">bool</span> b = _RegionManager.Regions.ContainsRegionWithName(<span style=\"color:#a31515\">&quot;OptionsPageRegion&quot;</span>);\r\n</pre>\r\n</div>\r\n<p>But the region is not found.</p>\r\n<p>&nbsp;</p>\r\n<p>The other thing I found, was the <a href=\"http://compositewpfcontrib.codeplex.com/wikipage?title=Windows%20Region%20Adapter&referringTitle=Documentation&ProjectName=compositewpfcontrib\" target=\"_blank\">\r\ncomposite contrib</a> but that seems like it's more complex than a simple action like this should be.</p>\r\n<p>What is the correct way to do this in V4, MEF &amp; WPF?</p>\r\n",
    "PostedDate": "2011-01-28T11:52:01.867-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "557123",
    "ThreadId": "243726",
    "Html": "\r\n<p>well reference the StockTrader RI and look for the SecondaryRegion tag in the XAML.&nbsp; The way you're attempting it will likely get an error related to there can only be one Window as the root.&nbsp; Also the code for the SecondaryRegion is located in\r\n the Infrastructure in the Behavior folder, works just fine for me at this point.&nbsp; I am able to get model validation to bubble thru no problem.</p>\r\n",
    "PostedDate": "2011-01-28T14:03:27.653-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "557210",
    "ThreadId": "243726",
    "Html": "\r\n<p>Wow, that looks like a lot of work to just have a region in another window!</p>\r\n<p>In looking through the code, it looks like what they do is create a new region, assign it a custom behavior to it and then add that new region to the Region Manager. (see RegionPopupBehaviors.RegisterNewPopupRegion)</p>\r\n<p>The custom behavior (DialogActivationBehavior) listens for it's Region.ActiveViews.CollectionChanged event to fire.&nbsp; When it sees one, it the take e.NewItems[0] which is the constructed view and creates a window, and sets the Window.Contents to that\r\n view via a wrapper around the window.</p>\r\n<p>OK... I think I see how I could use that for this.&nbsp; What has me wondering if there isn't an easier way, is the comments at the start of RegionPopupBehaviors:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:gray\">///</span><span style=\"color:green\"> Although the fastest way is to create a RegionAdapter for a Window and register it with the RegionAdapterMappings,</span>\r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> this would be conceptually incorrect because we want to create a new popup window everytime a view is added </span>\r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> (instead of having a Window as a host control and replacing its contents everytime Views are added, as </span>\r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> other adapters do).  This is why we have a different class for this behavior, instead of reusing the </span>\r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> RegionManager.RegionNameProperty attached property.</span>\r\n</pre>\r\n</div>\r\n<p>I don't want a new window every time, I want to replace the contents of my region every time.&nbsp; So I guess I'm off to look at RegionAdapters and how to map them next.&nbsp; Anyone have a good example for me?</p>\r\n<p>Edit: oh... wait, that takes me back to <a href=\"http://compositewpfcontrib.codeplex.com/wikipage?title=Windows%20Region%20Adapter&referringTitle=Documentation&ProjectName=compositewpfcontrib\" target=\"_blank\">\r\ncomposite contrib</a> and the WindowRegionAdapter.&nbsp; So I guess I need to finish converting that to 4.0 and see what I get.</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-01-28T21:02:20.957-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "557220",
    "ThreadId": "243726",
    "Html": "\r\n<p>OK... Stocktrader RI creates a single window and changes it's contents each time RequestNavigate is called.&nbsp;</p>\r\n<p>The WindowRegionAdapter&nbsp; project creates a new window every time you click the button.&nbsp;</p>\r\n<p>Both methods attach themselves to the MainWindow of the application.&nbsp; Why that's needed... I haven't delved that deep.</p>\r\n<p>Both examples inject the views that are added to their region into the Content property of the window.&nbsp;</p>\r\n<p>My problem, is my region is buried deep within the Window, and I don't want this behavior to be the behavior for all Windows.&nbsp;</p>\r\n<p>So... I think the Stocktrader RI method is the way for me to go on this.&nbsp; I'm thinking of a new attached property that somehow allows me to register my dialog window region with my custom behavior.&nbsp; Sound right?&nbsp; Anyone got an easier solution?</p>\r\n",
    "PostedDate": "2011-01-28T22:26:45.457-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "557391",
    "ThreadId": "243726",
    "Html": "\r\n<p>Here's what I came up with, this is for a modal dialog only:</p>\r\n<p>First I had to create a custom region manager:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Windows;\r\n<span style=\"color:blue\">using</span> CDS.Prism.Behaviors;\r\n<span style=\"color:blue\">using</span> Microsoft.Practices.Prism.Regions;\r\n<span style=\"color:blue\">using</span> Microsoft.Practices.ServiceLocation;\r\n\r\n<span style=\"color:blue\">namespace</span> CDS.Prism\r\n  {\r\n  <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">class</span> ExternalRegionManager\r\n    {\r\n\r\n    <span style=\"color:blue\">#region</span> Region Property\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">string</span> GetRegion(DependencyObject obj)\r\n      {\r\n      <span style=\"color:blue\">return</span> (<span style=\"color:blue\">string</span>)obj.GetValue(RegionProperty);\r\n      }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> SetRegion(DependencyObject obj, <span style=\"color:blue\">string</span> value)\r\n      {\r\n      obj.SetValue(RegionProperty, value);\r\n      }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty RegionProperty =\r\n        DependencyProperty.RegisterAttached(<span style=\"color:#a31515\">&quot;Region&quot;</span>, <span style=\"color:blue\">typeof</span>(<span style=\"color:blue\">string</span>), <span style=\"color:blue\">typeof</span>(ExternalRegionManager),\r\n        <span style=\"color:blue\">new</span> PropertyMetadata(<span style=\"color:blue\">string</span>.Empty, RegionChanged));\r\n\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> RegionChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)\r\n      {\r\n      ActiveRegion = <span style=\"color:blue\">new</span> WeakReference(sender);\r\n      ActiveRegionName = (<span style=\"color:blue\">string</span>)e.NewValue;\r\n      }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">string</span>        ActiveRegionName  { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">private</span> <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> WeakReference ActiveRegion      { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">private</span> <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">#endregion</span> Region Property\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> RegisterNewExternalRegion(<span style=\"color:blue\">string</span> regionName)\r\n      {\r\n      IRegionManager regionManager = ServiceLocator.Current.GetInstance&lt;IRegionManager&gt;();\r\n      <span style=\"color:blue\">if</span> (regionManager != <span style=\"color:blue\">null</span>)\r\n        {\r\n        IRegion region = <span style=\"color:blue\">new</span> SingleActiveRegion();\r\n        ExternalRegionActivationBehavior behavior = <span style=\"color:blue\">new</span> ExternalRegionActivationBehavior();\r\n        <span style=\"color:green\">//behavior.HostControl = owner;</span>\r\n        region.Behaviors.Add(ExternalRegionActivationBehavior.BehaviorKey, behavior);\r\n        regionManager.Regions.Add(regionName, region);\r\n        }\r\n      }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> RemoveExternalRegion(<span style=\"color:blue\">string</span> regionName)\r\n      {\r\n      IRegionManager regionManager = ServiceLocator.Current.GetInstance&lt;IRegionManager&gt;();\r\n      <span style=\"color:blue\">if</span> (regionManager != <span style=\"color:blue\">null</span>)\r\n        {\r\n        regionManager.Regions.Remove(regionName);\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n</pre>\r\n</div>\r\n<p>The attached Region property, is the one I use in the dialog box, there can be only one with this code.&nbsp; But I will likely extend it so that I can use this for more than just my one modal dialog.</p>\r\n<p>Then the custom behavior:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System.Collections.Specialized;\r\n<span style=\"color:blue\">using</span> System.Windows;\r\n<span style=\"color:blue\">using</span> System.Windows.Controls;\r\n<span style=\"color:blue\">using</span> Microsoft.Practices.Prism.Regions;\r\n\r\n<span style=\"color:blue\">namespace</span> CDS.Prism.Behaviors\r\n  {\r\n  \r\n  <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ExternalRegionActivationBehavior : RegionBehavior\r\n    {\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> The key of this behavior</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">const</span> <span style=\"color:blue\">string</span> BehaviorKey = <span style=\"color:#a31515\">&quot;ExternalRegionActivation&quot;</span>;\r\n\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> Performs the logic after the behavior has been attached.</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> OnAttach()\r\n      {\r\n      <span style=\"color:blue\">this</span>.Region.ActiveViews.CollectionChanged &#43;= <span style=\"color:blue\">this</span>.ActiveViews_CollectionChanged;\r\n      }\r\n\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> ActiveViews_CollectionChanged(<span style=\"color:blue\">object</span> sender, NotifyCollectionChangedEventArgs e)\r\n      {\r\n      <span style=\"color:blue\">if</span> (e.Action == NotifyCollectionChangedAction.Add)\r\n        {\r\n        <span style=\"color:blue\">this</span>.InjectView(e.NewItems[0]);\r\n        }\r\n      }\r\n\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> InjectView(<span style=\"color:blue\">object</span> view) \r\n      {\r\n      DependencyObject eregion = ExternalRegionManager.ActiveRegion.Target <span style=\"color:blue\">as</span> DependencyObject;\r\n      <span style=\"color:blue\">if</span> (eregion != <span style=\"color:blue\">null</span>)\r\n        {\r\n        <span style=\"color:blue\">if</span> (eregion <span style=\"color:blue\">is</span> ContentControl)\r\n          {\r\n          ((ContentControl)eregion).Content = view;\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n\r\nNow my service opens the dialog like this:<br><br><div style=\"color:black; background-color:white\"><pre>      OptionsView ov = <span style=\"color:blue\">new</span> OptionsView();\r\n      ExternalRegionManager.RegisterNewExternalRegion(<span style=\"color:#a31515\">&quot;OptionsPageRegion&quot;</span>);\r\n      ov.DataContext = ovm;\r\n      ov.Owner = Application.Current.MainWindow;\r\n      ov.ShowDialog();\r\n      ExternalRegionManager.RemoveExternalRegion(<span style=\"color:#a31515\">&quot;OptionsPageRegion&quot;</span>);\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n<p>I can then use standard navigation for it:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>_RegionManager.RequestNavigate(<span style=\"color:#a31515\">&quot;OptionsPageRegion&quot;</span>, page);\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>page being the URI being navigated to.</p>\r\n<p>I would love some feed back on this.&nbsp; I frankly have no clue if this is the best way to do it.</p>\r\n",
    "PostedDate": "2011-01-29T13:17:43.677-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]