[
  {
    "Id": "1034126",
    "ThreadId": "441195",
    "Html": "Hi Prism Experts,<br />\nI have TextBox resides in DataGridColumnHeader in style Resource Dictionary, the TextBox used as a Filter so i need to trigger TextChanged event and handle it in View Model to implement filteration process.The point is i need to commit to followinh requirements:<br />\n 1.I use Prism+MEF<br />\n 2.No Code Behind<br />\n 3.Event handeling in View Model<br />\n 4.USe style to be able to apply it for all DataGrids consistently<br />\n 5.Pass the Event arguments to the View Model to use in filteration process<br />\n<br />\nSo i tried to use MVVM Light: EventToCommand  in the DataGrideStyle ResourceDictionary<br />\nlike this<br />\n<pre><code>&lt;ResourceDictionary \n xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n xmlns:dg=&quot;http://schemas.microsoft.com/wpf/2008/toolkit&quot;\n xmlns:i=&quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&quot;      \n xmlns:cmd=&quot;clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Extras.WPF4&quot;                   \n xmlns:local=&quot;clr-namespace:PreCommissioning.Infrastructure.Filter;assembly=PreCommissioning.Infrastructure&quot;\n xmlns:localx=&quot;clr-namespace:PreCommissioning.Module.Subsystem.ViewModel;assembly=PreCommissioning.Module.Subsystem&quot;    \n xmlns:my=&quot;http://schemas.microsoft.com/wpf/2008/toolkit&quot;\n&gt;\n\n    &lt;local:HeaderFilterConverter x:Key=&quot;headerConverter&quot;/&gt;\n\n    &lt;Style x:Key=&quot;ColumnHeaderTextBoxStyle&quot; TargetType=&quot;{x:Type TextBox}&quot;&gt;\n        &lt;Setter Property=&quot;Template&quot;&gt;\n            &lt;Setter.Value&gt;\n                &lt;ControlTemplate TargetType=&quot;{x:Type TextBox}&quot;&gt;\n                    &lt;Border x:Name=&quot;Bd&quot; SnapsToDevicePixels=&quot;true&quot; BorderBrush=&quot;{TemplateBinding BorderBrush}&quot; BorderThickness=&quot;{TemplateBinding BorderThickness}&quot; Background=&quot;{TemplateBinding Background}&quot;&gt;\n                        &lt;ScrollViewer x:Name=&quot;PART_ContentHost&quot; SnapsToDevicePixels=&quot;{TemplateBinding SnapsToDevicePixels}&quot;&gt;\n                            __&lt;i:Interaction.Triggers&gt;\n                                &lt;i:EventTrigger EventName=&quot;TextChanged&quot;&gt;\n\n                                    &lt;cmd:EventToCommand  Command=&quot;{Binding local:TextChangedBehavior.TextChangedCommand, ElementName=filterTextBox}&quot;\n                                                         PassEventArgsToCommand=&quot;True&quot;\n                                                         CommandParameter=&quot;{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}, Path=Name}&quot;/&gt;\n                                &lt;/i:EventTrigger&gt;\n                            &lt;/i:Interaction.Triggers&gt;\n__                        &lt;/ScrollViewer&gt;\n                    &lt;/Border&gt;\n                &lt;/ControlTemplate&gt;\n            &lt;/Setter.Value&gt;\n        &lt;/Setter&gt;\n    &lt;/Style&gt;\n\n   \n    &lt;!-- --&gt;\n    &lt;Style TargetType=&quot;{x:Type DataGridColumnHeader}&quot;&gt;\n        &lt;!--xaml code removed to cut it short--&gt;    \n                            &lt;ContentPresenter x:Name=&quot;contentPresenter&quot;\n                                    HorizontalAlignment=&quot;{TemplateBinding HorizontalContentAlignment}&quot; \n                                    VerticalAlignment=&quot;{TemplateBinding VerticalContentAlignment}&quot; \n                                    SnapsToDevicePixels=&quot;{TemplateBinding SnapsToDevicePixels}&quot; \n                                    ContentStringFormat=&quot;{TemplateBinding ContentStringFormat}&quot; \n                                    ContentTemplate=&quot;{TemplateBinding ContentTemplate}&quot;&gt;\n                                &lt;ContentPresenter.Content&gt;\n                                    &lt;MultiBinding Converter=&quot;{StaticResource headerConverter}&quot;&gt;\n                                        &lt;MultiBinding.Bindings&gt;\n                                            &lt;Binding ElementName=&quot;filterTextBox&quot; Path=&quot;Text&quot; /&gt;\n                                            &lt;Binding RelativeSource=&quot;{RelativeSource TemplatedParent}&quot; Path=&quot;Content&quot; /&gt;\n                                        &lt;/MultiBinding.Bindings&gt;\n                                    &lt;/MultiBinding&gt;\n                                &lt;/ContentPresenter.Content&gt;\n                            &lt;/ContentPresenter&gt;\n                            \n                            __&lt;!--Filter Text Box--&gt;\n                            &lt;TextBox x:Name=&quot;filterTextBox&quot; HorizontalAlignment=&quot;Right&quot; \n                                         MinWidth=&quot;25&quot; Height=&quot;Auto&quot; OpacityMask=&quot;Black&quot; Visibility=&quot;Collapsed&quot; \n                                         Text=&quot;{Binding Path=DataContext.FilterText, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}} ,Mode=TwoWay,UpdateSourceTrigger=Explicit}&quot;                                                                              \n                                         Style=&quot;{StaticResource ColumnHeaderTextBoxStyle}&quot;\n                                         TextWrapping=&quot;Wrap&quot; Grid.Column=&quot;0&quot; Grid.ColumnSpan=&quot;1&quot;&gt;                                \n                            &lt;/TextBox&gt;\n__\n                        &lt;/Grid&gt;\n                    &lt;/my:DataGridHeaderBorder&gt;\n                    &lt;ControlTemplate.Triggers&gt;\n                        &lt;Trigger Property=&quot;IsMouseOver&quot; Value=&quot;True&quot;&gt;\n                      &lt;!--rest of xaml code--&gt;</code></pre>\n\nAnd here is my Attached Behavior class:<br />\n<pre><code>\npublic static class TextChangedBehavior\n    {\n        #region TextChangedCommand-----------------------------------------------------------\n\n        static ICommand command; //1\n\n        public static ICommand GetTextChangedCommand(TextBox target)\n        {\n\n            return (ICommand)target.GetValue(TextChangedCommandProperty);\n\n        }\n\n        public static void SetTextChangedCommand(TextBox target, ICommand value)\n        {\n\n            target.SetValue(TextChangedCommandProperty, value);\n\n        }\n\n\n        public static readonly DependencyProperty TextChangedCommandProperty =\n            DependencyProperty.RegisterAttached(&quot;TextChangedCommand&quot;,\n                                                 typeof(ICommand),\n                                                 typeof(TextChangedBehavior),\n                                                 new PropertyMetadata(TextChangedCommandChanged));\n                                                 //new UIPropertyMetadata(new PropertyChangedCallback(TextChangedCommandChanged)));\n\n\n        static void TextChangedCommandChanged(DependencyObject target, DependencyPropertyChangedEventArgs e)\n        {\n\n            TextBox element = target as TextBox;\n\n            if (element != null)\n            {\n                if (e.NewValue != null)\n                {\n                    element.TextChanged += Element_TextChanged;\n                }\n                else\n                {\n                    element.TextChanged -= Element_TextChanged;\n                }\n            }\n\n        }\n\n        static void Element_TextChanged(object sender, TextChangedEventArgs e)\n        {\n\n            // Get the textbox\n            //TextBox filterTextBox = e.OriginalSource as TextBox;\n\n            // Get the header of the textbox\n            //DataGridColumnHeader header = TryFindParent&lt;DataGridColumnHeader&gt;(filterTextBox);\n            //if (header != null)\n            //{\n                \n            //}\n        }\n        #endregion\n    }</code></pre>\n\nThe problems are: When i enter filter text in the text box in one of the columns headers of the data grid nothing happen and break points at following points not hit:<br />\n<br />\n1-GetTextChangedCommand SetTextChangedCommand<br />\n<br />\n2-The TextChangedChanged() method. (not Called)<br />\n<br />\n 3- The Attached Property statement <br />\n<br />\ni don't know if i have errors in the code or the problem between MVVM Light and Prism+MEF<br />\nSo i need your help fix this.<br />\n<br />\nThanks in advance<br />\n",
    "PostedDate": "2013-04-22T12:34:57.86-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1034943",
    "ThreadId": "441195",
    "Html": "Help [:(]<br />\n",
    "PostedDate": "2013-04-23T23:31:58.147-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1035286",
    "ThreadId": "441195",
    "Html": "Hi Jivara,\r<br />\n<br />\nIn the last few days we tried to implement the functionality you are describing using the code snippets you posted but without any success...\r<br />\nHowever, we tried to implement something similar from scratch and we were able to set an style to a <strong>TextBox</strong> control that could be reused in different views to execute a <strong>Command</strong> in the view model of the view when the text is changed:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">Style</span> <span style=\"color:Red;\">TargetType</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{x:Type TextBox}</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">Setter</span> <span style=\"color:Red;\">Property</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">Template</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>\n        <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">Setter.Value</span><span style=\"color:Blue;\">&gt;</span>\n                \n            <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">ControlTemplate</span> <span style=\"color:Red;\">TargetType</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{x:Type TextBox}</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>\n                <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">TextBox</span><span style=\"color:Blue;\">&gt;</span>\n                    <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">i</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">Interaction.Triggers</span><span style=\"color:Blue;\">&gt;</span>\n                        <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">i</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">EventTrigger</span> <span style=\"color:Red;\">EventName</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">TextChanged</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">&gt;</span>\n\n                            <span style=\"color:Blue;\">&lt;</span><span style=\"color:#A31515;\">cmd</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">EventToCommand</span> <span style=\"color:Red;\">Command</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">{Binding Mode=OneWay, Path=TextChangedCommand}</span><span style=\"color:Black;\">&quot;</span> <span style=\"color:Red;\">PassEventArgsToCommand</span><span style=\"color:Blue;\">=</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">True</span><span style=\"color:Black;\">&quot;</span><span style=\"color:Blue;\">/&gt;</span>\n\n                        <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">i</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">EventTrigger</span><span style=\"color:Blue;\">&gt;</span>\n                    <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">i</span><span style=\"color:Blue;\">:</span><span style=\"color:#A31515;\">Interaction.Triggers</span><span style=\"color:Blue;\">&gt;</span>\n                <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">TextBox</span><span style=\"color:Blue;\">&gt;</span>\n            <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">ControlTemplate</span><span style=\"color:Blue;\">&gt;</span>\n\n        <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">Setter.Value</span><span style=\"color:Blue;\">&gt;</span>\n    <span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">Setter</span><span style=\"color:Blue;\">&gt;</span>\n<span style=\"color:Blue;\">&lt;/</span><span style=\"color:#A31515;\">Style</span><span style=\"color:Blue;\">&gt;</span>\r\n</pre></div>Where <strong>TextChangedCommand</strong> is simply a command in the view model of the view containing the <strong>TextBox</strong>. I hope this helps as a starting point to implement the feature you are describing.\r<br />\n<br />\nAlso, as topic doesn't seem to be related to <strong>Prism</strong> but to <strong>WPF</strong>, I believe you might find better support regarding how to implement such features in the following forums:<br />\n<ul>\n<li><a href=\"https://mvvmlight.codeplex.com/discussions\" rel=\"nofollow\">MVVM Light Forums in Codeplex</a></li>\n<li>\n<a href=\"http://social.msdn.microsoft.com/forums/en-US/wpf/threads/\" rel=\"nofollow\">WPF Forums in MSDN</a><br />\n</li>\n</ul>\nRegards,\r<br />\n<br />\nDamian Cherubini\r<br />\n<a href=\"http://blogs.southworks.net/dcherubini\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini</a><br />\n",
    "PostedDate": "2013-04-24T12:56:01.173-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1035674",
    "ThreadId": "441195",
    "Html": "Hi Damian,\r<br />\nI'm grateful for tying to help, knowing that i already sent same question to forums you mentioned but w/o response. So i'm gratefull for your commitment to help us .\r<br />\nI already started another approach similar to the one you advised beacuse the Attached Behavior is not working but the point now is: how to pass the event sender and eventArgs to the command in the view model.\r<br />\nSorry if i'm asking agin but truly i didn't find response from the other froums.\r<br />\nThanks.<br />\n",
    "PostedDate": "2013-04-25T07:47:42.75-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1035791",
    "ThreadId": "441195",
    "Html": "Hi,\r<br />\n<br />\nI am not sure it this is what you need, but I believe you can obtain the control who fired the event trough the <strong>Source</strong> property of the <strong>TextChangedEventArgs</strong> received as the parameter of the command (thanks to the <strong>PassEventArgsToCommand</strong> property).\r<br />\n<br />\nI hope this helps,\r<br />\n<br />\nDamian Cherubini\r<br />\n<a href=\"http://blogs.southworks.net/dcherubini\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini</a><br />\n",
    "PostedDate": "2013-04-25T12:27:47.627-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]