[
  {
    "Id": "134897",
    "ThreadId": "40678",
    "Html": "<br>\r\nRefer: Prism Drop 6<br>\r\nGreat work. Few suggestions...<br>\r\n<br>\r\nSolution in general uses DI container to register and leverage many services.<br>\r\nThere are also many additional interfaces defined, but consumed internally by individual implementation (Modularity, Logging, Events, Regions, etc.)<br>\r\n<br>\r\nSuggestion #1:<br>\r\nIt will be helpful to use a naming convention to differentiate those interfaces primarilty intended for registering (and leveraging) using DI container.<br>\r\nExample: IModuleLoaderService as against IModuleLoader<br>\r\n<br>\r\n-- --------------------------<br>\r\n<br>\r\nThe design (and consistent implementation) allows us to replace a given service with alternate implementation.<br>\r\nNevertheless, the default service implementation is packaged in Microsoft.Practices.Composite.Silverlight assembly.<br>\r\nWith this, if a given application chose NOT to use Regions, will have to touch the source to remove unwanted implementation.<br>\r\n<br>\r\nSuggestion #2:<br>\r\nWould it be possible to organize individual service implementation as independent assemblies?<br>\r\n",
    "PostedDate": "2008-11-24T13:35:51.38-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "135186",
    "ThreadId": "40678",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-family:'calibri','sans-serif'\">If you consider that these suggestions would be helpful for the community, feel free to add them to the </span><a href=\"http://www.codeplex.com/CompositeWPF/WorkItem/List.aspx\"><span style=\"color:#0000ff;font-family:'calibri','sans-serif'\">Issue Tracker</span></a> <span style=\"font-family:'calibri','sans-serif'\">so people can vote and they might be taken into account for future releases.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-family:'calibri','sans-serif'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-family:'calibri','sans-serif'\">Regarding your second suggestion, the reason that some interfaces and implementations remain in the same assembly is to keep a simpler usage and avoid you having to add more references to your projects, or if you prefer to consume the library as source code, avoid having several projects in your solution. Having separate assemblies for interface would trigger an assembly explosion that goes against the <i>simple first</i> principle.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-family:'calibri','sans-serif'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"><b>Keep in mind: </b>This is not necessarily the final design of the assemblies. The drops will most likely undergo modifications until the official release.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Please let me know if this helps.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\">Damian Schenkelman</span></p>\r\n<span style=\"font-size:11pt;font-family:'calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></span>\r\n",
    "PostedDate": "2008-11-25T09:22:08.22-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]