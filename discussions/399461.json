[
  {
    "Id": "926980",
    "ThreadId": "399461",
    "Html": "\r\n<p><strong>Adding Module Dependency and addressing</strong><br>\r\n<br>\r\nThe Project contains some Modules and a Domain<br>\r\nHere I'm using Unity DirectoryModuleCatalog.</p>\r\n<p><br>\r\nWe Need ModuleX (Entity Data) to be a dependency of Domain Module.<br>\r\nThe first strategy I've used is Registering Modules via Directory.<br>\r\nDon't know whether should I change it or not:<br>\r\n<br>\r\n<strong>Code :</strong></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> IModuleCatalog CreateModuleCatalog()\n        {\n            <span style=\"color:blue\">var</span> moduleCatalog = <span style=\"color:blue\">new</span> DirectoryModuleCatalog();\n\n            <span style=\"color:blue\">string</span> stPathStartup = Environment.CurrentDirectory; <span style=\"color:green\">// Shell Project Dir</span>\n            <span style=\"color:blue\">string</span> stPathModules = Directory.GetParent(stPathStartup).Parent.Parent.Parent.FullName &#43; <span style=\"color:#a31515\">&quot;\\\\Build\\\\Modules&quot;</span>;\n\n            moduleCatalog.ModulePath = stPathModules;\n            <span style=\"color:blue\">return</span> moduleCatalog;\n        }\n</pre>\r\n</div>\r\n<p><br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>\r\n</p>\r\n<hr>\r\n<p><br>\r\nNot sure but as an alternative to solve this via App.Config :<br>\r\n<br>\r\n</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">configuration</span><span style=\"color:blue\">&gt;</span>\n  <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">modules</span><span style=\"color:blue\">&gt;</span>\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">module</span> <span style=\"color:red\">assemblyFile</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">../Modules/Xz.Domain.dll</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">moduleType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Xz.Domain,Xz.Domain</span><span style=\"color:black\">&quot;</span>\n            <span style=\"color:red\">moduleName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Xz.Domain</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\n      <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">dependencies</span><span style=\"color:blue\">&gt;</span>\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">dependency</span> <span style=\"color:red\">moduleName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Xz.Data</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\n      <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">dependencies</span><span style=\"color:blue\">&gt;</span>     \n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">module</span><span style=\"color:blue\">&gt;</span>\n  <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">modules</span><span style=\"color:blue\">&gt;</span> \n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">configuration</span><span style=\"color:blue\">&gt;</span>    \n</pre>\r\n</div>\r\n<p><br>\r\nIs it the only solution ?<br>\r\nDid I do it right ?<br>\r\nYet I didn't remove the &quot;CreateModuleCatalog&quot;.<br>\r\nAssembly Name and Namespace : <strong>Xz.Domain&nbsp;&nbsp;</strong>&nbsp; <br>\r\nProject Name shown in the Solution List : <strong>Domain</strong></p>\r\n<hr>\r\n<p><br>\r\n<strong>Questions :</strong><br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; How can I Set the Domain Module's Dependency to ModuleX ?<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; And be sure the ModuleX were loaded before the Domain Module.<br>\r\n<br>\r\n------------<br>\r\n<span style=\"text-decoration:underline\"><strong>The Folder and Project structure is as below:</strong></span><br>\r\n<br>\r\nModules &gt; ModuleX<br>\r\nDomain --&gt; The App.Xaml shown is here<br>\r\nShell<br>\r\n--<br>\r\nThe Build Folder is one Level up from these<br>\r\nThe solution file (sln) is 3 Levels up from these</p>\r\n<p>Thanks for any help.</p>\r\n",
    "PostedDate": "2012-10-15T14:07:42.94-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "927443",
    "ThreadId": "399461",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Based on my understanding if you want to ensure that you modules are loaded and initialized in the right order, you should define the corresponding Module Dependencies, which will depend on which approach you used to registered your modules.</p>\r\n<p>In my opinion using the <strong>Registering Modules Using a Configuration File</strong> approach seems to suit best your needs, as you could define the different specific locations of each of the modules there and also the corresponding dependencies for\r\n each of the defined modules. This way similarly like in the<strong> App.Config </strong>\r\nyou posted you could also define the additional modules you have with its corresponding location and dependencies.</p>\r\n<p>Regarding the code you posted, one thing I found in your posted<strong> App.Config</strong> file, is that when defining the\r\n<strong>AssemblyQualifiedName </strong>for the<strong> Xz.Domain</strong> module in the\r\n<strong>moduleType&nbsp; </strong>your defined only the module namespace (Xz.Domain) and you should also define the class of the module or you will receive a\r\n<strong>moduleType</strong> exception, for example this could be changed to:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>moduleType=&quot;Xz.Domain.ModuleClass,Xz.Domain&quot;\n</pre>\r\n</div>\r\n<p>On the other hand, as far as I know using the <strong>Discovering Modules in a Directory</strong> approach, will portray the limitation that your modules may have to be placed in the same folder location defined when creating the\r\n<strong>DirectoryModuleCatalog</strong>, when following this approach dependencies can be defined by using declarative attributes.</p>\r\n<p>Finally the other approach provided by <strong>Prism </strong>for registering your modules, is to do this directly in code, which requires having a reference to them by the application instead of being loaded at run time.</p>\r\n<p>For more information and examples about this different approaches you could check the following resources provided with\r\n<strong>Prism</strong>:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg405479(v=pandp.40).aspx\">4: Modular Application Development</a>\r\n</li><li><a href=\"http://msdn.microsoft.com/en-us/library/ff921068%28v=pandp.40%29.aspx\">Modularity QuickStarts for WPF</a>\r\n</li></ul>\r\n<p>I hope you find this handy,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-10-16T07:59:03.147-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "928958",
    "ThreadId": "399461",
    "Html": "\r\n<p>Thanks for the info it could be&nbsp; a good general answer on it.</p>\r\n<p>I solved it earlier and my problem could be a bit different, I want to share it and get your consulting on it.</p>\r\n<p>hopefully get helped.</p>\r\n",
    "PostedDate": "2012-10-18T12:19:36.717-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]