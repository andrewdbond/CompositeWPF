[
  {
    "Id": "115429",
    "ThreadId": "34763",
    "Html": "I am trying to programmatically create a view and its window to display on screen. It looks something like the following code below.In the code the module is already loaded, a request to&nbsp;display this view was invoked and captured and now to display the window:<br>\r\n<br>\r\n<br>\r\n<strong>// Module</strong><br>\r\n<p>Window GetModuleShell()<br>\r\n{<br>\r\n&nbsp; Window window = container.Resolve&lt;Window&gt;(&quot;WindowFolder&quot;);<br>\r\n&nbsp; return window;<br>\r\n}</p>\r\n<p>void DisplayPatientFolder()<br>\r\n{<br>\r\n&nbsp; Window window = GetModuleShell();<br>\r\n<strong>&nbsp; window.SetValue(RegionManager.RegionNameProperty, &quot;FolderArea&quot;);</strong><br>\r\n&nbsp; <strong>// Regionalize FolderView</strong><br>\r\n&nbsp; FolderView myFolder = container.Resolve&lt;FolderView&gt;();<br>\r\n<strong>&nbsp;&nbsp;//Fails&nbsp;on the next line&nbsp;because the region&nbsp;is not discovered<br>\r\n</strong>&nbsp; IRegion folderRegion = container.Resolve&lt;IRegionManager&gt;().Regions[&quot;FolderArea&quot;];&nbsp;<br>\r\n&nbsp; folderRegion.Add(myFolder);<br>\r\n&nbsp; folderRegion.Activate(myFolder);<br>\r\n<strong>&nbsp; // Regionalize ContentView</strong><br>\r\n&nbsp; ContentView myContent = container.Resolve&lt;ContentView&gt;();<br>\r\n&nbsp; IRegion contentRegion = container.Resolve&lt;IRegionManager&gt;().Regions[&quot;ContentArea&quot;];<br>\r\n&nbsp; contentRegion.Add(myContent);<br>\r\n&nbsp; contentRegion.Activate(myContent);<br>\r\n&nbsp; // Dispose views<br>\r\n&nbsp; window.Closing +=&nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delegate&nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;container.Teardown(myContent);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;container.Teardown(myFolder);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>\r\n&nbsp; window.Display();<br>\r\n}<br>\r\n<br>\r\nI tried <strong>container.BuildUp(window)</strong> after i assigned the RegionName property but the Region is still not discovered. Can anyone spread some love on this issue?<br>\r\n<br>\r\nThanks in advance,<br>\r\n<br>\r\nAndres Olivares</p>\r\n",
    "PostedDate": "2008-09-02T10:44:47.39-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115436",
    "ThreadId": "34763",
    "Html": "I have updated the following code:<br>\r\n<br>\r\nwindow.SetValue(RegionManager.RegionNameProperty, &quot;FolderArea&quot;);<br>\r\n...<br>\r\n&nbsp; window.Closing +=&nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delegate&nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;container.Teardown(myContent);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;container.Teardown(myFolder);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>\r\n<br>\r\nto&nbsp;<br>\r\n<br>\r\n<strong>regionManager.AttachNewRegion(window, &quot;FolderArea&quot;);<br>\r\n...<br>\r\n</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; window.Closing += <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delegate<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; folderRegion.Deactivate(myFolder);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; folderRegion.Remove(myFolder);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; regionManager.Regions.Remove(&quot;FolderArea&quot;);<br>\r\n</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container.Teardown(patientContent);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container.Teardown(patientFolder);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };<br>\r\n<br>\r\nThis works fine. RegionManager should be, in my opiniion, a little smarter with it's regions. A developer should not have to do so much clean up in this aspect.<br>\r\n<br>\r\nAndres.<br>\r\n<br>\r\n",
    "PostedDate": "2008-09-02T11:09:19.68-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115441",
    "ThreadId": "34763",
    "Html": "Hi Andrew,&nbsp; I find the Unit Test to be a great starting point when trying to code dynamically (or simply to learn).<br>\r\n<br>\r\nCompositeWPF\\Source\\CAL\\<strong>CompositeApplicationLibrary.sln</strong><br>\r\n<br>\r\nRegionManagerFixture.cs has the following test:<br>\r\n<br>\r\n<br>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [TestMethod]<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void CanAddRegion()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IRegion region1 = new MockRegion();</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegionManager regionManager = new RegionManager();<br>\r\n<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; regionManager.Regions.Add(&quot;MainRegion&quot;, region1);</strong></p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IRegion region2 = regionManager.Regions[&quot;MainRegion&quot;];<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Assert.AreSame(region1, region2);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<br>\r\nIf you'll examine Region.cs you'll find a lot of wiring-up occurs during .Add().&nbsp; If this doesn't help you I trust your answer lies in one of the many test fixtures associated with regions.<br>\r\n",
    "PostedDate": "2008-09-02T11:25:51.28-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]