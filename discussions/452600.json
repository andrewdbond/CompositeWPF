[
  {
    "Id": "1077406",
    "ThreadId": "452600",
    "Html": "Hi,\r<br />\n<br />\nNeed help trying to get my custom splash screen working based on this example from <strong>Channel 9</strong> &quot;<a href=\"http://channel9.msdn.com/blogs/keydet/improving-perceived-wpf-app-startup-performance-with-mef-and-a-splash-screen\" rel=\"nofollow\">Improving perceived WPF app startup performance with MEF and a Splash Screen</a>&quot;.\r<br />\n<br />\nI can't get any of the <strong>Storyboards</strong> to work nor display text in a <strong>TextBlock</strong>, creating the splash screen during <em>InitializeModules()</em> in my <strong>MefBootstrapper</strong>:<br />\n<pre><code>public class NatsarBootstrapper : MefBootstrapper\n{\n    #region Private Properties\n    private IEventAggregator EventAggregator\n    {\n        get { return ServiceLocator.Current.GetInstance&lt;IEventAggregator&gt;(); }\n    }\n    #endregion\n\n    protected override void InitializeModules()\n    {\n        IModuleManager manager = ServiceLocator.Current.GetInstance&lt;IModuleManager&gt;();\n\n        Loading loading = this.Container.GetExportedValue&lt;Loading&gt;();\n        Shell shellMain = this.Container.GetExportedValue&lt;Shell&gt;();\n\n        loading.WindowStartupLocation = WindowStartupLocation.CenterScreen;\n        loading.WindowState = WindowState.Normal;\n\n        Application.Current.MainWindow = loading;\n        Application.Current.MainWindow.Show();\n\n        EventAggregator.GetEvent&lt;MessageUpdateEvent&gt;().Publish(new MessageUpdateEvent { Message = &quot;Loading TurahStudyUIModule&quot; });\n        manager.LoadModule(&quot;TurahStudyUIModule&quot;);\n\n        Application.Current.MainWindow.Hide();\n\n        TurahStudyUIView view = ServiceLocator.Current.GetInstance&lt;TurahStudyUIView&gt;();\n\n        shellMain.Height = 768;\n        shellMain.Width = 1024;\n        shellMain.WindowStartupLocation = WindowStartupLocation.CenterScreen;\n        shellMain.WindowState = WindowState.Maximized;\n        shellMain.Activate();\n\n        Application.Current.MainWindow = shellMain;\n        Application.Current.MainWindow.Content = view;\n        Application.Current.MainWindow.Show();\n    }\n\n    protected override void ConfigureAggregateCatalog()\n    {\n        try\n        {\n            this.AggregateCatalog.Catalogs.Add(new AssemblyCatalog(typeof(NatsarBootstrapper).Assembly));\n            this.AggregateCatalog.Catalogs.Add(new AssemblyCatalog(typeof(NatsarCommonModule).Assembly));\n            this.AggregateCatalog.Catalogs.Add(new AssemblyCatalog(typeof(TurahStudyUIModule).Assembly));\n        }\n        catch (Exception msg)\n        {\n            .....\n        }\n    }\n\n    protected override DependencyObject CreateShell()\n    {\n        DependencyObject shell = null;\n\n        return shell;\n    }\n}</code></pre>\n\n<strong>Loading.xaml Window</strong>:<br />\n<pre><code>&lt;Window \n    x:Class=&quot;NatsarTurahStudyMaster.Views.Loading&quot;\n    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n    AllowsTransparency=&quot;True&quot; WindowStyle=&quot;None&quot; &gt;\n    &lt;Window.Background&gt;\n        &lt;ImageBrush ImageSource=&quot;habakkuk-paleo-hebrew.png&quot;  Stretch=&quot;UniformToFill&quot;/&gt;\n    &lt;/Window.Background&gt;\n    &lt;Window.Resources&gt;\n        &lt;Storyboard  x:Key=&quot;InTransition&quot;&gt;\n\n                &lt;!-- Create an animation that repeats indefinitely. --&gt;\n                &lt;DoubleAnimation \n                  Storyboard.TargetName=&quot;foreverRepeatingRectangle&quot; Storyboard.TargetProperty=&quot;(Rectangle.Width)&quot; \n                  From=&quot;50&quot; To=&quot;300&quot; Duration=&quot;0:0:2&quot; RepeatBehavior=&quot;Forever&quot; /&gt;\n\n                &lt;!-- Create an animation that repeats for four seconds. As a result, the\n                     animation repeats twice. --&gt;\n                &lt;DoubleAnimation Storyboard.TargetName=&quot;fourSecondsRepeatingRectangle&quot; Storyboard.TargetProperty=&quot;(Rectangle.Width)&quot;\n                  From=&quot;50&quot; To=&quot;300&quot; Duration=&quot;0:0:2&quot; RepeatBehavior=&quot;0:0:4&quot; /&gt;\n\n                &lt;!-- Create an animation that repeats twice. --&gt;\n                &lt;DoubleAnimation Storyboard.TargetName=&quot;twiceRepeatingRectangle&quot; Storyboard.TargetProperty=&quot;(Rectangle.Width)&quot; \n                  From=&quot;50&quot; To=&quot;300&quot; Duration=&quot;0:0:2&quot; RepeatBehavior=&quot;2x&quot; /&gt;\n\n                &lt;!-- Create an animation that repeats 0.5 times. The resulting animation\n                     plays for one second, half of its Duration. It animates from 50 to 150. --&gt;\n                &lt;DoubleAnimation Storyboard.TargetName=&quot;halfRepeatingRectangle&quot; Storyboard.TargetProperty=&quot;(Rectangle.Width)&quot; \n                  From=&quot;50&quot; To=&quot;300&quot; Duration=&quot;0:0:2&quot; RepeatBehavior=&quot;0.5x&quot; /&gt;\n\n                &lt;!-- Create an animation that repeats for one second. The resulting animation\n                     plays for one second, half of its Duration. It animates from 50 to 150. --&gt;\n                &lt;DoubleAnimation Storyboard.TargetName=&quot;oneSecondRepeatingRectangle&quot; Storyboard.TargetProperty=&quot;(Rectangle.Width)&quot; \n                  From=&quot;50&quot; To=&quot;300&quot; Duration=&quot;0:0:2&quot; RepeatBehavior=&quot;0:0:1&quot; /&gt;\n            &lt;/Storyboard&gt;\n    &lt;/Window.Resources&gt;\n\n    &lt;Window.Triggers&gt;\n        &lt;EventTrigger RoutedEvent=&quot;FrameworkElement.Loaded&quot;&gt;\n            &lt;BeginStoryboard Storyboard=&quot;{StaticResource InTransition}&quot;/&gt;\n        &lt;/EventTrigger&gt;\n    &lt;/Window.Triggers&gt;\n    &lt;Grid&gt;\n        &lt;Border HorizontalAlignment=&quot;Stretch&quot;&gt;\n            &lt;StackPanel Margin=&quot;20&quot; &gt;\n                &lt;TextBlock&gt;RepeatBehavior=&quot;Forever&quot;&lt;/TextBlock&gt;\n                &lt;Rectangle Name=&quot;foreverRepeatingRectangle&quot; Fill=&quot;#AA3333FF&quot; Width=&quot;50&quot; Height=&quot;20&quot; HorizontalAlignment=&quot;Left&quot; /&gt;\n                &lt;TextBlock Margin=&quot;0,20,0,0&quot;&gt;RepeatBehavior=&quot;0:0:4&quot;&lt;/TextBlock&gt;\n                &lt;Rectangle Name=&quot;fourSecondsRepeatingRectangle&quot; Fill=&quot;#AA3333FF&quot; Width=&quot;50&quot; Height=&quot;20&quot; HorizontalAlignment=&quot;Left&quot; /&gt;\n                &lt;TextBlock Margin=&quot;0,20,0,0&quot;&gt;RepeatBehavior=&quot;2x&quot;&lt;/TextBlock&gt;\n                &lt;Rectangle Name=&quot;twiceRepeatingRectangle&quot; Fill=&quot;#AA3333FF&quot; Width=&quot;50&quot; Height=&quot;20&quot; HorizontalAlignment=&quot;Left&quot; /&gt;\n                &lt;TextBlock Margin=&quot;0,20,0,0&quot;&gt;RepeatBehavior=&quot;0.5x&quot;&lt;/TextBlock&gt;\n                &lt;Rectangle Name=&quot;halfRepeatingRectangle&quot; Fill=&quot;#AA3333FF&quot; Width=&quot;50&quot; Height=&quot;20&quot; HorizontalAlignment=&quot;Left&quot; /&gt;\n                &lt;TextBlock Margin=&quot;0,20,0,0&quot;&gt;RepeatBehavior=&quot;0:0:1&quot;&lt;/TextBlock&gt;\n                &lt;Rectangle Name=&quot;oneSecondRepeatingRectangle&quot; Fill=&quot;#AA3333FF&quot; Width=&quot;50&quot; Height=&quot;20&quot; HorizontalAlignment=&quot;Left&quot; /&gt;\n            &lt;/StackPanel&gt;\n        &lt;/Border&gt;\n\n        &lt;TextBlock Text=&quot;{Binding Status}&quot; Margin=&quot;10,0&quot; Grid.Row=&quot;2&quot; Grid.ColumnSpan=&quot;2&quot; \n                   TextAlignment=&quot;Right&quot;&gt;\n            &lt;TextBlock.Effect&gt;\n                &lt;DropShadowEffect ShadowDepth=&quot;1&quot; Color=&quot;#99ffffff&quot;/&gt;\n            &lt;/TextBlock.Effect&gt;\n        &lt;/TextBlock&gt;\n    &lt;/Grid&gt;\n&lt;/Window&gt;\n[/code]</code></pre>\n\nLoading.xaml.cs:<br />\n<pre><code>[Export(typeof(Loading))]\n[PartCreationPolicy(CreationPolicy.NonShared)]\npublic partial class Loading : Window, IPartImportsSatisfiedNotification\n{\n    public Loading()\n    {\n        InitializeComponent();\n    }\n\n    [Import]\n    public LoadingModel ViewModel\n    {\n        set\n        {\n            this.DataContext = value;\n        }\n        get\n        {\n            return DataContext as LoadingModel;\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// Called when a part's imports have been satisfied and it is safe to use.\n    /// &lt;/summary&gt;\n    public void OnImportsSatisfied()\n    {\n        // IPartImportsSatisfiedNotification is useful when you want to coordinate doing some work\n        // with imported parts independent of when the UI is visible.\n        Debug.WriteLine(&quot;Loading OnImportsSatisfied instantiation&quot;);\n    }\n}</code></pre>\n\n<strong>LoadingModel.cs is where I'm just sending test text</strong>:<br />\n<pre><code>[Export(typeof(LoadingModel))]\n[PartCreationPolicy(CreationPolicy.NonShared)]\npublic class LoadingModel : NotificationObject\n{\n    [ImportingConstructor]\n    public LoadingModel(IEventAggregator eventAggregator)\n    {\n        Debug.WriteLine(&quot;LoadingModel instantiation&quot;);\n        eventAggregator.GetEvent&lt;MessageUpdateEvent&gt;().Subscribe(e =&gt; UpdateMessage(e.Message));\n    }\n\n    private string _status;\n    public string Status\n    {\n        get { return _status; }\n        set\n        { \n            _status = value; \n            RaisePropertyChanged(() =&gt; this.Status); \n        }\n    }\n\n    private void UpdateMessage(string message)\n    {\n        if (string.IsNullOrEmpty(message))\n        {\n            return;\n        }\n\n        int maxRecords = 1000;\n        for (int x = 1; x &lt; maxRecords; x++)\n        {\n            System.Threading.Thread.Sleep(10);\n            Status = string.Format(&quot;{0}: {1} {2}&quot;,message ,Convert.ToInt32( ((decimal)x / (decimal)maxRecords) * 100), &quot;...&quot;);\n        }\n    }\n}</code></pre>\n\nBut, nothing is working?<br />\n",
    "PostedDate": "2013-08-06T12:41:47.117-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1077477",
    "ThreadId": "452600",
    "Html": "Well, I couldn't get it to work as I wanted, so I had to result to doing it this way:<br />\n<pre><code>protected override void InitializeModules()\n{\n    Shell shellMain = this.Container.GetExportedValue&lt;Shell&gt;();\n \n    shellMain.InitializeMainWindow();\n \n    TurahStudyUIView view = ServiceLocator.Current.GetInstance&lt;TurahStudyUIView&gt;();\n \n    shellMain.Height = 768;\n    shellMain.Width = 1024;\n    shellMain.WindowStartupLocation = WindowStartupLocation.CenterScreen;\n    shellMain.WindowState = WindowState.Maximized;\n    shellMain.Activate();\n \n    Application.Current.MainWindow = shellMain;\n    Application.Current.MainWindow.Content = view;\n    Application.Current.MainWindow.Activate();\n}</code></pre>\n\nand put the splash screen in my main window <strong>Shell.xaml.cs</strong>:<br />\n<pre><code>[Export(typeof(Shell))]\n[PartCreationPolicy(CreationPolicy.NonShared)]\npublic partial class Shell : Window, IPartImportsSatisfiedNotification\n{\n    private readonly BackgroundWorker _compositionBackgroundWorker = new BackgroundWorker();\n    Loading loading;\n \n    public Shell()\n    {\n        InitializeComponent();\n \n        _compositionBackgroundWorker.DoWork += CompositionBackgroundWorker_DoWork;\n        _compositionBackgroundWorker.RunWorkerCompleted += CompositionBackgroundWorkerRunWorker_Completed;\n    }\n \n    public void InitializeMainWindow()\n    {\n        // Set the Window.Content to the &quot;Loading UI&quot; UserControl\n        loading = ServiceLocator.Current.GetInstance&lt;Loading&gt;();\n        loading.Show();\n \n        _compositionBackgroundWorker.RunWorkerAsync();\n    }\n \n    private void CompositionBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)\n    {\n        this.InitializeModules();\n    }\n \n    private void InitializeModules()\n    {\n        IModuleManager manager = ServiceLocator.Current.GetInstance&lt;IModuleManager&gt;();\n \n        int maxRecords = 1000;\n        for (int x = 1; x &lt; maxRecords; x++)\n        {\n            System.Threading.Thread.Sleep(5);\n            System.Windows.Application.Current.Dispatcher.Invoke((Action)(() =&gt; { loading.ViewModel.Status = string.Format(&quot;{0}: {1} {2}&quot;, &quot;Loading&quot;, Convert.ToInt32(((decimal)x / (decimal)maxRecords) * 100), &quot;...&quot;); }));\n        }\n    }\n \n    private void CompositionBackgroundWorkerRunWorker_Completed(object sender, RunWorkerCompletedEventArgs e)\n    {\n        loading.Hide();\n        loading.Close();\n        this.Show();\n    }\n \n    [Import]\n    public ShellModel ViewModel\n    {\n        set\n        {\n            this.DataContext = value;\n        }\n        get\n        {\n            return DataContext as ShellModel;\n        }\n    }\n \n    /// &lt;summary&gt;\n    /// Called when a part's imports have been satisfied and it is safe to use.\n    /// &lt;/summary&gt;\n    public void OnImportsSatisfied()\n    {\n        // IPartImportsSatisfiedNotification is useful when you want to coordinate doing some work\n        // with imported parts independent of when the UI is visible.\n        Debug.WriteLine(&quot;Shell OnImportsSatisfied instantiation&quot;);\n    }\n}</code></pre>\n\nAll development from here will be in <strong>TurahStudyUIView</strong>.<br />\n",
    "PostedDate": "2013-08-06T16:08:50.067-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1077778",
    "ThreadId": "452600",
    "Html": "Hi,\r<br />\n<br />\nBased on the code snippets you provided, I couldn't find anything that could be causing the issue, since the code seems to be correct. Nevertheless, I couldn't reproduce your issue since I don't fully understand how your application is designed based on the example (<strong>Loading.xaml</strong> is defined as a <strong>Window</strong> where in the example it is a <strong>UserControl</strong>). Therefore, it would be useful if you can provide us the error messages you are receiving (if you are getting any) and a sample of your application so we can analyze deeper the root of your problem.\r<br />\n<br />\nNevertheless, I'm glad you found a workaround to make it work somehow.\r<br />\n<br />\nRegards,\r<br />\n<br />\nFederico Martinez \r<br />\n<a href=\"http://blogs.southworks.net/fmartinez\" rel=\"nofollow\">http://blogs.southworks.net/fmartinez</a> <br />\n",
    "PostedDate": "2013-08-07T07:58:14.847-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]