[
  {
    "Id": "124840",
    "ThreadId": "37643",
    "Html": "Hi guys, <br>\r\n<br>\r\nI have been trying to find a simple solution but to no avail. There are hints here and there but nothing solid, almost bothers me that how come Prism just left that little part out, or maybe its me who is totally dumb! Here is the scenario:<br>\r\n<br>\r\n<ol>\r\n    <li>Main SHELL App</li>\r\n    <li>Three regions, for simpilicty &quot;MenuRegion&quot;, &quot;MainRegion&quot;, and &quot;FooterRegion&quot;</li>\r\n    <li>Multiple modules like &quot;ModuleA&quot;, ModuleB&quot;, &quot;ModuleC&quot;, &quot;Module(n)&quot;...</li>\r\n    <li>In the &quot;MenuRegion&quot;, I have three Buttons that are associated to unique modules &quot;ButtonA&quot;, &quot;ButtonB&quot;, and &quot;ButtonC&quot; etc.</li>\r\n    <li>When pressed, each button loads a corresponding Module(x) in the region &quot;MainRegion&quot;, and the previously loaded Module disappears.</li>\r\n    <li>Previously loaded Module should be able to reappear when the corresponding Button(x) is pressed etc.</li>\r\n</ol>\r\n<p>Simple? Sure... but how to do and what Control Container to use?<br>\r\n<br>\r\nCurrently I have a working project with this setup. Loads each module Dynamically and that's how I want to keep it. The only part I dont get is how to make these Modules Appear/Dissappear with &quot;Menu&quot; Buttons in the same region (&quot;MainRegion&quot;)?<br>\r\n<br>\r\nWhat I am looking for is:<br>\r\n<br>\r\nSimple and elegant solution to enable this scenario. Anyone?<br>\r\n<br>\r\nCheers!</p>\r\n",
    "PostedDate": "2008-10-13T16:11:37.333-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "124892",
    "ThreadId": "37643",
    "Html": "O.k.&nbsp; I've been struggling with this - I think I want to do the same you do.&nbsp; I created an ApplicationServicesModule, with a XAML with a toolbar with&nbsp;2 buttons for ModuleA, ModuleB.<br>\r\n<br>\r\nI create the ApplicationPresenter with a View that has RegionManager and Container properties:<br>\r\n<br>\r\n<span style=\"font-size:13px\">\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">public</span></span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">class</span></span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">ApplicationPresenter</span></span><span style=\"font-size:13px\">: </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">IApplicationPresenter </span></span>\r\n<p>&nbsp;</p>\r\n<span style=\"font-size:13px\">\r\n<p>{</p>\r\n</span>\r\n<blockquote style=\"margin-right:0px\" dir=ltr>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">public</span></span><span style=\"font-size:13px\"> ApplicationPresenter(</span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">IApplicationView</span></span><span style=\"font-size:13px\"> view, </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">IRegionManager</span></span><span style=\"font-size:13px\"> regionManager, </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">IUnityContainer</span></span><span style=\"font-size:13px\"> container)\r\n<p>&nbsp;</p>\r\n<p>{</p>\r\n</span></p>\r\n<p>&nbsp;</p>\r\n<blockquote style=\"margin-right:0px\" dir=ltr>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">this</span></span><span style=\"font-size:13px\">.View = view; </span>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">this</span></span><span style=\"font-size:13px\">.View.RegionManager = regionManager; </span>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">this</span></span><span style=\"font-size:13px\">.View.Container = container;\r\n<p>&nbsp;</p>\r\n<blockquote></blockquote>\r\n<p>}</p>\r\n<blockquote></blockquote></span></p>\r\n</blockquote></blockquote>\r\n<p>&nbsp;</p>\r\n<blockquote style=\"margin-right:0px\" dir=ltr>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">public</span></span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">IApplicationView</span></span><span style=\"font-size:13px\"> View { </span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">get</span></span><span style=\"font-size:13px\">; </span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">set</span></span><span style=\"font-size:13px\">; }\r\n<p>&nbsp;</p>\r\n<blockquote></blockquote>\r\n<p>}<br>\r\n<br>\r\nThe View then has the following code in click events (I haven't properly used commands, I wanted to get this out as a PoC before I spent too much time refining my approach):<span style=\"font-size:13px\">\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">public</span></span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">partial</span></span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">class</span></span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">ApplicationView</span></span><span style=\"font-size:13px\"> : </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">UserControl</span></span><span style=\"font-size:13px\">, </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">IApplicationView </span></span><span style=\"font-size:13px\">\r\n<p>\r\n<p>{</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">public</span></span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">IRegionManager</span></span><span style=\"font-size:13px\"> RegionManager { </span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">get</span></span><span style=\"font-size:13px\">; </span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">set</span></span><span style=\"font-size:13px\">; } </span>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">public</span></span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">IUnityContainer</span></span><span style=\"font-size:13px\"> Container { </span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">get</span></span><span style=\"font-size:13px\">; </span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">set</span></span><span style=\"font-size:13px\">; } </span>\r\n<p>&nbsp;</p>\r\n<div><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">public</span></span><span style=\"font-size:13px\"> ApplicationView()\r\n<p>{</p>\r\n<blockquote style=\"margin-right:0px\" dir=ltr>\r\n<p>InitializeComponent();</p>\r\n</blockquote>\r\n<p>}&nbsp;</p>\r\n</span></div>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">private</span></span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">void</span></span><span style=\"font-size:13px\"> button1_Click(</span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">object</span></span><span style=\"font-size:13px\"> sender, </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">RoutedEventArgs</span></span><span style=\"font-size:13px\"> e)&nbsp;&nbsp;\r\n<p>{</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">IRegion</span></span><span style=\"font-size:13px\"> mainRegion = RegionManager.Regions[</span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">RegionNames</span></span><span style=\"font-size:13px\">.MainRegion]; </span>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">var</span></span><span style=\"font-size:13px\"> clientView = RegionManager.Regions[</span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">RegionNames</span></span><span style=\"font-size:13px\">.MainRegion].GetView(</span><span style=\"color:#a31515;font-size:13px\"><span style=\"color:#a31515;font-size:13px\">ViewNames.ClientView</span></span><span style=\"font-size:13px\">);&nbsp;&nbsp;</span>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">if</span></span><span style=\"font-size:13px\"> (clientView != </span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">null</span></span><span style=\"font-size:13px\">)\r\n<p>{</p>\r\n<p>mainRegion.Remove(clientView);</p>\r\n<p>}&nbsp;</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">var</span></span><span style=\"font-size:13px\"> dashboardView = RegionManager.Regions[</span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">RegionNames</span></span><span style=\"font-size:13px\">.MainRegion].GetView(ViewNames.DashBoardView</span><span style=\"font-size:13px\">); </span>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">if</span></span><span style=\"font-size:13px\"> (dashboardView == </span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">null</span></span><span style=\"font-size:13px\">)\r\n<p>{</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">IModule</span></span><span style=\"font-size:13px\"> dashboardModule = </span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">this</span></span><span style=\"font-size:13px\">.Container.Resolve&lt;PACProto.Modules.Dashboard.</span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">DashboardModule</span></span><span style=\"font-size:13px\">&gt;();\r\n<p>dashboardModule.Initialize();</p>\r\n<p>}</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">else</span></span><span style=\"font-size:13px\">\r\n<p>{</p>\r\n<p>mainRegion.Activate(dashboardView);</p>\r\n<p>}</p>\r\n<p>}</p>\r\n<p>So if you click on a button for ModuleA (here it is DashboardView), we remove the ModuleB view (ClientView) and check for DashboardView and initialize.&nbsp; I don't if there is a cleaner way, but this works.<br>\r\n<br>\r\nBootstrapper only loads the ApplicationServicesModule.</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n</blockquote>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2008-10-13T22:28:19.183-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "124978",
    "ThreadId": "37643",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Hi,</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Remember that modules are not loaded into regions, views are. If each module contains one “main view”, what you could do is place a <b>ContentControl</b> for the MainRegion, which allows just one view to be the active (thus displayed) view. Then, when the button of a module is clicked, you could try to retrieve the view of that module from the region and show it, but if it is not present, you should create it. The code of the click handler should look like this:</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d\"><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\">void</span><span style=\"font-size:10pt;font-family:'Courier New'\"> buttonA_Click(<span style=\"color:blue\">object</span> sender, System.Windows.<span style=\"color:#4bacc6\">RoutedEventArgs</span> e)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; <span style=\"color:#4bacc6\">ViewModuleA</span> view = _regionManager.Regions[<span style=\"color:#c00000\">&quot;MainRegion&quot;</span>].GetView(<span style=\"color:#c00000\">&quot;ModuleAMainView&quot;</span>) <span style=\"color:blue\">as</span> <span style=\"color:#4bacc6\">ViewModuleA</span>;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">if</span> (view == <span style=\"color:blue\">null</span>)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;view = _container.Resolve&lt;<span style=\"color:#4bacc6\">ViewModuleA</span>&gt;();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;_regionManager.Regions[<span style=\"color:#c00000\">&quot;MainRegion&quot;</span>].Add(view, <span style=\"color:#c00000\">&quot;ModuleAMainView&quot;</span>);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; _regionManager.Regions[<span style=\"color:#c00000\">&quot;MainRegion&quot;</span>].Activate(view);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Hope it helps.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Ignacio Baumann Fonay</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><a href=\"http://blogs.southworks.net/ibaumann/\"><span><span style=\"color:#0000ff;font-family:Calibri\">http://blogs.southworks.net/ibaumann/</span></span></a> </p>\r\n",
    "PostedDate": "2008-10-14T06:25:37.56-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "124992",
    "ThreadId": "37643",
    "Html": "<p>So does using another Module to manage the application make sense?&nbsp; In my bootstrapper, I only initialize the ApplicationModule, whose constructor takes the IUnityContainer and IRegionManager.&nbsp; Then in my ApplicationView I have a MenuToolbarView which has a MenuToolBarPresenter that uses the Container and RegionManager to activate/deactivate views now.&nbsp; In my ApplicationModule I’m dynamically loading the modules on first menu click (I don’t know of a way to get the RegionManager object in the main app project&nbsp;–&nbsp;maybe make it a&nbsp;property on the shell?)&nbsp;I will make this more DI once I get this technique for loading/unloading views.</p>\r\n<p>The ContentControl does the trick.&nbsp; I gave up on&nbsp;Deactivate b/c Region.Deactivate threw an exception with ItemsControl, and I thought it was not implemented yet.&nbsp; Deactivate on a ContentControl region&nbsp;does work though:</p>\r\n<pre class=code><span style=\"color:#2b91af\">IRegion </span>mainRegion = RegionManager.Regions[<span style=\"color:#2b91af\">RegionNames</span>.MainRegion];\r\n<span style=\"color:blue\">var </span>clientView = RegionManager.Regions[<span style=\"color:#2b91af\">RegionNames</span>.MainRegion].GetView(<span style=\"color:#a31515\">&quot;ClientView&quot;</span>);\r\n<span style=\"color:blue\">if </span>(clientView != <span style=\"color:blue\">null</span>)\r\n{\r\n    mainRegion.Deactivate(clientView);\r\n}\r\n\r\n\r\n<span style=\"color:blue\">var </span>dashboardView = RegionManager.Regions[<span style=\"color:#2b91af\">RegionNames</span>.MainRegion].GetView(<span style=\"color:#a31515\">&quot;DashboardView&quot;</span>);\r\n<span style=\"color:blue\">if </span>(dashboardView == <span style=\"color:blue\">null</span>)\r\n{\r\n    <span style=\"color:#2b91af\">IModule </span>dashboardModule = <span style=\"color:blue\">this</span>.Container.Resolve&lt;PACProto.Modules.Dashboard.<span style=\"color:#2b91af\">DashboardModule</span>&gt;();\r\n    dashboardModule.Initialize();\r\n}\r\n<span style=\"color:blue\">else\r\n</span>{\r\n    mainRegion.Activate(dashboardView);\r\n}</pre>\r\n",
    "PostedDate": "2008-10-14T07:10:23.267-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "125087",
    "ThreadId": "37643",
    "Html": "Hey thanks guys....<br>\r\n<br>\r\nBoth and all solutions up there&nbsp;work. Afterall I was doing a dumb thing to begin with, as&nbsp;<a id=\"ctl00_ctl00_MasterContent_TabContentPanel_Content_PostRepeater_ctl04_UserNameLink\" href=\"http://www.codeplex.com/site/users/view/ibaumann\"><span style=\"color:#3e62a6\">ibaumann</span></a>&nbsp;says: &quot;<span><span style=\"font-family:Calibri\"><strong>Remember that modules are not loaded into regions, views are</strong>&quot; was my problem all along... <br>\r\n<br>\r\nInstead of loading Views into the region, I was loading Module instead! Duh! Wrong type ;)</span></span> <br>\r\n<br>\r\nLesson learned: When tired and frustrated while coding, take a break and go for a stroll or a long drive...\r\n",
    "PostedDate": "2008-10-14T12:44:11.33-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "125092",
    "ThreadId": "37643",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Hi, drive</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:Calibri\"><span>In case you are going to deactivate views, it is fine to use the ContentControl, as in the ItemsControl, the <b>Deactivate</b> method throws an <b>InvalidOperationException</b> exception because the <b>ItemsControlRegionAdapter</b> uses an instance of the <b>AllActiveRegion</b> class, which states that <i>all views</i> shown in the region are active <i>always</i>. Therefore, you cannot deactivate a view.</span> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Having a module to control the application can be useful in some scenarios. Depending on the complexity, you may resolve a custom class via the container in the Shell project in order to get the RegionManager and the UnityContainer for the same controlling purpose. Another valid approach would be to provide the <b>Shell</b> with a <b>Presenter</b> (as shown in the </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707869.aspx\"><span style=\"color:#0000ff;font-family:Calibri\">Stock Trader Reference Implementation</span></a><span style=\"font-family:Calibri\">) or with a <b>PresentationModel</b> (as shown in the blog post </span><a href=\"http://blogs.southworks.net/jdominguez/2008/09/presentation-model-with-datatemplates-in-compositewpf-prism-sample/\"><span style=\"color:#0000ff;font-family:Calibri\">Presentation Model with DataTemplates in CompositeWPF (Prism) Sample</span></a><span style=\"font-family:Calibri\"><span style=\"color:#1f497d\">). </span>In that way, you will be able to get the RegionManager via Dependency Injection.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Please, let me know if this helps.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Ignacio Baumann Fonay</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><a href=\"http://blogs.southworks.net/ibaumann/\"><span><span style=\"color:#0000ff;font-family:Calibri\">http://blogs.southworks.net/ibaumann/</span></span></a> </p>\r\n",
    "PostedDate": "2008-10-14T12:55:49.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "125094",
    "ThreadId": "37643",
    "Html": "True. Also in my case I am using ContentControl, which is what I want. For this Deactiveate(view) works. But wont work for ItemsControl. For removing Views from ItemsControl, I loop through Views Items, and then Remove(view) them as needed, or for all.<br>\r\n<br>\r\nCheers...\r\n",
    "PostedDate": "2008-10-14T13:08:25.73-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]