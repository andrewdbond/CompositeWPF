[
  {
    "Id": "943687",
    "ThreadId": "403723",
    "Html": "\r\n<p>Hi.</p>\r\n<p>I'm currently working on a Silverlight 4 application, that's using Prism 2.0.1.0 to load modules on application startup. I'm using a modules catalog, and the application is hosted in IIS (server via an aspx page).</p>\r\n<p>I'm currently attempting a demo version of the application that does not require hosting by a webserver (such that a simple basic installer may be distrubuted to those performing the demo), so I'm using a html page rather than aspx. However, the modules\r\n do not load when using the html page (they load fine in the hosted aspx).</p>\r\n<p>Any reason why modules will work fine when hosted, but fall part when used statically ?</p>\r\n",
    "PostedDate": "2012-11-18T16:17:48.923-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "944136",
    "ThreadId": "403723",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I believe this is related to how <strong>Silverlight </strong>works.</p>\r\n<p>Based on my understanding, when opening a web page containing a <strong>Silverlight\r\n</strong>application it &quot;downloads&quot; the<strong> .xap</strong> file containing the\r\n<strong>Silverlight </strong>application and executes it. This is also true for a\r\n<strong>Silverlight-Prism</strong> application.</p>\r\n<p>Then when <strong>Prism </strong>tries to load modules in a <strong>Silverlight\r\n</strong>application and those modules are stored in a different <strong>.xap</strong> file than the one containing the main project, they need to be &quot;downloaded&quot; as only the main\r\n<strong>.xap</strong> file was retrieved by the web page. In order to do this, <strong>\r\nPrism </strong>uses <strong>Silverlight</strong>'s capabilities to obtain those .<strong>xap\r\n</strong>files and, based on my understanding, if the .<strong>xap </strong>files are not present if your browser's cache\r\n<strong>Silverlight </strong>will request them to its hosting server.</p>\r\n<p>This seems to be where your application is failing. The main .<strong>xap </strong>\r\nfile is loaded by the browser when the html page is opened. However, when the modules need to be loaded\r\n<strong>Silverlight </strong>tries to reach its hosting server to obtain them, but there is no server to respond its requests (in the hosted version, the requests are answered by the\r\n<strong>IIS </strong>server).</p>\r\n<p>As a workaround, you could change your application for the demo version to have a reference to your modules' projects so that their assemblies are included in the main .<strong>xap\r\n</strong>file of your application. Take into account that you will also need to change your\r\n<strong>ModuleCatalog </strong>(specifically the <strong>Ref </strong>property of each module) as the assemblies will now be in the main .<strong>xap\r\n</strong>and not in their original ones.</p>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br>\r\n<a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>\r\n",
    "PostedDate": "2012-11-19T10:36:27.687-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "944257",
    "ThreadId": "403723",
    "Html": "\r\n<p>I've already implement that workaround.</p>\r\n<p>I was hoping to maintain the original architecture though, such that the demo software is no different to the release software.</p>\r\n<p>Is it at all possible to use file references, or relative paths in the module catalog ? You can in WPF land ...</p>\r\n",
    "PostedDate": "2012-11-19T14:44:53.79-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "944790",
    "ThreadId": "403723",
    "Html": "\r\n<p>Hi,</p>\r\n<p>As far as I know by default <strong>Prism </strong>does not provide this kind of functionality, as you may find the module retrieval strategy is defined by the\r\n<strong>XapModuleTypeLoader </strong>and the <strong>MefXapModuleTypeLoader </strong>\r\nclasses provided with <strong>Prism</strong>. Both of these implementations achieve the downloading of\r\n<strong>XAP </strong>files by using a <strong>WebClient </strong>(which requires the\r\n<strong>Silverlight </strong>control to be hosted in a web page), in the case of <strong>\r\nUnity </strong>this logic is defined in the <strong>FileDownloader </strong>class and in\r\n<strong>MEF </strong>the <strong>DeploymentCatalog </strong>class is used to download .xap files and discover the assemblies and types within those .xap files.</p>\r\n<p>Hence, as a possible approach, you could try extending this behavior by implementing your custom\r\n<strong>IModuleTypeLoader</strong>. For more information about this and how to achieve extending\r\n<strong>Prism'</strong>s functionalities, you could check the following chapter of the documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg430866(v=pandp.40).aspx\">Appendix E: Extending Prism</a>\r\n</li></ul>\r\n<p>However, take into account that unlike <strong>WPF</strong>, the <strong>Silverlight\r\n</strong>security model does not allow you to load assemblies from the file system, in which case in my opinion the workaround suggested by Damian Cherubini seems like a plausible approach.</p>\r\n<p>I hope you find this handy,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-11-20T12:42:58.617-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]