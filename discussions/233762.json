[
  {
    "Id": "518264",
    "ThreadId": "233762",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I'm using Prism v4 with MEF and MVVM.<br>\r\nI have a <strong>CommandBarModule</strong>, that has a <strong>CommandBarView </strong>\r\nand a <strong>CommandBarViewModel</strong>. The goal of this module is to display a number of command buttons, loaded from the database.<br>\r\nIn the shell view I have 4 regions (left, right, top, and bottom).</p>\r\n<p>The goal is that there are <strong>4 instances of the CommandBarModule</strong>, each instance being displayed in its own region. Each instance also has its own CommandBarViewModel, on which there's a Type property that indicates what kind of command bar\r\n type it is (left, right, top or bottom), so that the view model can correctly load the buttons that have to be displayed in it.</p>\r\n<p>They all have to be initialized when the application starts, so it's not on demand.</p>\r\n<p>I was thinking of implementing the Initialize method of the CommandBarModule, and for each region I would:</p>\r\n<p>- resolve a CommandBarView instance<br>\r\n- resolve a CommandBarViewModel instance and set Type propery, when the model is constructed it loads the data needed to display its command buttons<br>\r\n- set the datacontext of the view to the model<br>\r\n- add the view to the correct region</p>\r\n<p>But is this the correct way of achieving this?&nbsp;</p>\r\n",
    "PostedDate": "2010-11-06T16:47:24.02-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "518369",
    "ThreadId": "233762",
    "Html": "\r\n<p>Ok, I implemented a working solution, I believe it's an OK solution but feedback is welcome :)</p>\r\n<p>First, in the bootstrapper of the shell I export the composition container:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Export]\r\n<span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> CompositionContainer _container { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n</pre>\r\n</div>\r\n<p>Of course in the bootstapper the _container has to be initialized, I think that COnfigureContainer method is the best place:</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureContainer()\r\n{            \r\n            <span style=\"color:blue\">base</span>.ConfigureContainer();\r\n            _container = Container;\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>In the CommandBarModule, I use a controller to delegate the view injection work:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>  [ModuleExport(<span style=\"color:blue\">typeof</span>(CommandBarModule), InitializationMode = InitializationMode.WhenAvailable)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> CommandBarModule : IModule\r\n    {        \r\n        <span style=\"color:blue\">private</span> ICommandBarRegionController _commandBarRegionController;\r\n\r\n        [ImportingConstructor]\r\n        <span style=\"color:blue\">public</span> CommandBarModule(ICommandBarRegionController commandBarRegionController)\r\n        {            \r\n            _commandBarRegionController = commandBarRegionController;\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Notifies the module that it has to be initialized.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()\r\n        {\r\n            <span style=\"color:green\">// Initialize the CommandBarRegionController, which programmatically displays views in the Main region (using View Injection).</span>\r\n            _commandBarRegionController.InitializeInstances();\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>And in the controller, I can use the container to resolve instances of the view model and view for each region in the view:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Export(<span style=\"color:blue\">typeof</span>(ICommandBarRegionController))]\r\n    [PartCreationPolicy(CreationPolicy.Shared)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> CommandBarRegionController : ICommandBarRegionController\r\n    {\r\n        <span style=\"color:blue\">private</span> IRegionManager _regionManager;        \r\n\r\n        [ImportingConstructor]\r\n        <span style=\"color:blue\">public</span> CommandBarRegionController(IRegionManager regionManager)\r\n        {\r\n            _regionManager = regionManager;           \r\n        }\r\n\r\n        [Import(AllowRecomposition = <span style=\"color:blue\">true</span>)]\r\n        <span style=\"color:blue\">private</span> CompositionContainer _container { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> InitializeInstances()\r\n        {\r\n            ICommandBarViewModel commandBarViewModel = _container.GetExportedValue&lt;ICommandBarViewModel&gt;();\r\n            ICommandBarView commandBarView = _container.GetExportedValue&lt;ICommandBarView&gt;();\r\n            commandBarView.ViewModel = commandBarViewModel;\r\n            _regionManager.Regions[RegionNames.NorthRegion].Add(commandBarView);\r\n\r\n            ICommandBarViewModel commandBarViewModel2 = _container.GetExportedValue&lt;ICommandBarViewModel&gt;();\r\n            ICommandBarView commandBarView2 = _container.GetExportedValue&lt;ICommandBarView&gt;();\r\n            commandBarView2.ViewModel = commandBarViewModel2;\r\n            _regionManager.Regions[RegionNames.SouthRegion].Add(commandBarView2);            \r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-07T06:33:41.467-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "518379",
    "ThreadId": "233762",
    "Html": "\r\n<p>Ah and maybe little improvement by using constructor injection:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> [Export(<span style=\"color:blue\">typeof</span>(ICommandBarRegionController))]\r\n    [PartCreationPolicy(CreationPolicy.Shared)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> CommandBarRegionController : ICommandBarRegionController\r\n    {\r\n        <span style=\"color:blue\">private</span> readonly IRegionManager _regionManager;\r\n        <span style=\"color:blue\">private</span> readonly ICommandBarViewModel _northCommandBarViewModel;\r\n        <span style=\"color:blue\">private</span> readonly ICommandBarViewModel _southCommandBarViewModel;\r\n        <span style=\"color:blue\">private</span> readonly ICommandBarView _northCommandBarView;\r\n        <span style=\"color:blue\">private</span> reaonly ICommandBarView _southCommandBarView;\r\n        <span style=\"color:blue\">private</span> CompositionContainer _container;\r\n\r\n        [ImportingConstructor]\r\n        <span style=\"color:blue\">public</span> CommandBarRegionController(\r\n            [Import(AllowRecomposition = <span style=\"color:blue\">true</span>)]IRegionManager regionManager,\r\n            [Import(AllowRecomposition = <span style=\"color:blue\">true</span>, RequiredCreationPolicy=CreationPolicy.NonShared)] ICommandBarViewModel northCommandBarViewModel,\r\n            [Import(AllowRecomposition = <span style=\"color:blue\">true</span>, RequiredCreationPolicy = CreationPolicy.NonShared)] ICommandBarViewModel southCommandBarViewModel,\r\n            [Import(AllowRecomposition = <span style=\"color:blue\">true</span>, RequiredCreationPolicy = CreationPolicy.NonShared)] ICommandBarView northCommandBarView,\r\n            [Import(AllowRecomposition = <span style=\"color:blue\">true</span>, RequiredCreationPolicy = CreationPolicy.NonShared)] ICommandBarView southCommandBarView,\r\n            [Import(AllowRecomposition = <span style=\"color:blue\"><span style=\"color:#0000ff\">true, </span><span style=\"color:#000000\">RequiredCreationPolicy = CreationPolicy.Shared)]</span><span style=\"color:#0000ff\"> </span></span>CompositionContainer container\r\n            )\r\n        {\r\n            _regionManager = regionManager;\r\n            _northCommandBarViewModel = northCommandBarViewModel;\r\n            _southCommandBarViewModel = southCommandBarViewModel;\r\n            _container = container;\r\n            _northCommandBarView = northCommandBarView;\r\n            _southCommandBarView = southCommandBarView;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> InitializeInstances()\r\n        {                                    \r\n            _northCommandBarView.ViewModel = _northCommandBarViewModel;\r\n            _regionManager.Regions[RegionNames.NorthRegion].Add(_northCommandBarView);\r\n                                   \r\n            _southCommandBarView.ViewModel = _southCommandBarViewModel;\r\n            _regionManager.Regions[RegionNames.SouthRegion].Add(_southCommandBarView);            \r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-07T07:01:02.757-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]