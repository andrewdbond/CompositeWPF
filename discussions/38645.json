[
  {
    "Id": "128193",
    "ThreadId": "38645",
    "Html": "Hi all,<br>\r\n<br>\r\nI'm trying to load a module on demand (ie not during app start-up). <br>\r\n<br>\r\nI've read a few posts here, and this article;<br>\r\n<br>\r\n<a href=\"http://msdn.microsoft.com/en-us/library/cc707860.aspx\">http://msdn.microsoft.com/en-us/library/cc707860.aspx</a><br>\r\n<br>\r\nbut... I can't get it to work.<br>\r\n<br>\r\nI've;<br>\r\n<br>\r\n1) used a StaticModuleEnumerator in my bootstrapper (me thinks this is the cause of my problems!)<br>\r\n2) added the StartupLoaded attribute to my module<br>\r\n<br>\r\nbut the module is still loaded when the app starts up.<br>\r\n<br>\r\nWhen I run the DirectoryLookupModularity quickstart, its ModuleC does NOT load on app start-up. I can't see any difference between my app and that quickstart other than it uses the DirectoryLookupModuleEnumerator.<br>\r\n<br>\r\n<br>\r\nAny tips? Thanks in advance!<br>\r\n<br>\r\nhere's some of my code;<br>\r\n<hr>\r\n<br>\r\n<span style=\"font-size:13px\">\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"color:#0000ff;font-size:13px\">class</span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\">Bootstrapper</span><span style=\"font-size:13px\"> : </span><span style=\"color:#2b91af;font-size:13px\">UnityBootstrapper\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<span style=\"font-size:13px\">\r\n<p>{</p>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"color:#0000ff;font-size:13px\">protected</span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\">override</span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\">DependencyObject</span><span style=\"font-size:13px\"> CreateShell()\r\n<p>&nbsp;</p>\r\n<p>{</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"color:#2b91af;font-size:13px\">Shell</span><span style=\"font-size:13px\"> shell = Container.Resolve&lt;</span><span style=\"color:#2b91af;font-size:13px\">Shell</span><span style=\"font-size:13px\">&gt;();\r\n<p>&nbsp;</p>\r\n<p>shell.Show();</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"color:#0000ff;font-size:13px\">return</span><span style=\"font-size:13px\"> shell;\r\n<p>&nbsp;</p>\r\n<p>}</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"color:#0000ff;font-size:13px\">protected</span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\">override</span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\">IModuleEnumerator</span><span style=\"font-size:13px\"> GetModuleEnumerator()\r\n<p>&nbsp;</p>\r\n<p>{</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"color:#0000ff;font-size:13px\">return</span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\">new</span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\">StaticModuleEnumerator</span><span style=\"font-size:13px\">()\r\n<p>&nbsp;</p>\r\n<p>.AddModule(</p>\r\n</span></p>\r\n<p><span style=\"color:#0000ff;font-size:13px\">typeof</span><span style=\"font-size:13px\">(TestModule01.</span><span style=\"color:#2b91af;font-size:13px\">TestModule01Module</span><span style=\"font-size:13px\">));\r\n<p>&nbsp;</p>\r\n<p>}</p>\r\n<p>}</p>\r\n</span></p>\r\n<hr>\r\n<br>\r\n<span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">\r\n<p>namespace</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px\"> TestModule01\r\n<p>&nbsp;</p>\r\n<p>{</p>\r\n<p>[</p>\r\n</span></p>\r\n<p><span style=\"color:#2b91af;font-size:13px\">Module</span><span style=\"font-size:13px\">(ModuleName = </span><span style=\"color:#a31515;font-size:13px\">&quot;TestModule01Module&quot;</span><span style=\"font-size:13px\">, StartupLoaded = </span><span style=\"color:#0000ff;font-size:13px\">false</span><span style=\"font-size:13px\">)]\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"color:#0000ff;font-size:13px\">public</span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\">class</span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\">TestModule01Module</span><span style=\"font-size:13px\"> : </span><span style=\"color:#2b91af;font-size:13px\">IModule\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<span style=\"font-size:13px\">\r\n<p>{</p>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"color:#0000ff;font-size:13px\">private</span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\">readonly</span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\">IRegionManager</span><span style=\"font-size:13px\"> _regionManager;\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"color:#0000ff;font-size:13px\">public</span><span style=\"font-size:13px\"> TestModule01Module(</span><span style=\"color:#2b91af;font-size:13px\">IRegionManager</span><span style=\"font-size:13px\"> regionManager)\r\n<p>&nbsp;</p>\r\n<p>{</p>\r\n<p>_regionManager = regionManager;</p>\r\n<p>}</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"color:#0000ff;font-size:13px\">public</span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\">void</span><span style=\"font-size:13px\"> Initialize()\r\n<p>&nbsp;</p>\r\n<p>{</p>\r\n<p>_regionManager.Regions[</p>\r\n</span></p>\r\n<p><span style=\"color:#a31515;font-size:13px\">&quot;MainRegion&quot;</span><span style=\"font-size:13px\">].Add(</span><span style=\"color:#0000ff;font-size:13px\">new</span><span style=\"font-size:13px\"> Views.</span><span style=\"color:#2b91af;font-size:13px\">UC02</span><span style=\"font-size:13px\">());\r\n<p>&nbsp;</p>\r\n<p>}</p>\r\n<p>}</p>\r\n<p>}</p>\r\n</span></p>\r\n<hr>\r\n<br>\r\n",
    "PostedDate": "2008-10-27T22:28:42.093-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "128280",
    "ThreadId": "38645",
    "Html": "<span style=\"font-family:symbol\">\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi,</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">As you have stated, the reason why your module is loaded at startup is the <b>StaticModuleEnumerator</b> class. When adding a module, it uses a constructor of the <b>ModuleInfo</b> class that sets the <b>StartUpLoaded</b> to <i>true</i> by default and sends the name of the type of the module as its module name, so it does not allow you to establish when your module gets loaded nor a custom name for it.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Regarding the <b>Module</b> <b>attribute</b>, it is only used by the <b>DirectoryLookupModuleEnumerator</b> class, that’s why the module is not loaded at startup when you use this module enumerator.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">If you want to set both, name and StartUpLoaded properties of the module, I recommend you to use the <b>DirectoryLookupModuleEnumerator</b> with the <b>Module</b> <b>attribute</b> or the ConfigurationModuleEnumerator with a configuration file.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d;font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Perhaps you may find useful the following articles that explains the Module concept and the different types of Module Loading.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><span style=\"color:#1f497d\"><a href=\"http://msdn.microsoft.com/en-us/library/cc707880.aspx\"><span style=\"color:#0000ff;font-family:calibri\">Module</span></a></span>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><span style=\"color:#1f497d\"><a href=\"http://msdn.microsoft.com/en-us/library/cc707834.aspx\"><span style=\"color:#0000ff;font-family:calibri\">How to: Dynamically Load Modules</span></a></span>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d;font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Please, let me know if this helps.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Ignacio Baumann Fonay</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><a href=\"http://blogs.southworks.net/ibaumann/\"><span style=\"color:#0000ff;font-family:calibri\">http://blogs.southworks.net/ibaumann/</span></a> </p>\r\n</span></p>\r\n</span></p>\r\n</span>\r\n",
    "PostedDate": "2008-10-28T06:08:56.51-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "128293",
    "ThreadId": "38645",
    "Html": "Thanks Ignacio, your post did help. To clarify, that is. <br>\r\n<br>\r\nI must admit, though, that I find the whole thing a little strange. <br>\r\n<br>\r\nThe StaticModuleEnumerator has so many benefits, all listed in the documentation, but it 'now' (from my POV) has a pretty serious flaw - every single module in my app has to be initialized when the app starts... and I lose the ability to dynamically load modules. <br>\r\n<br>\r\nI'm sure this will change in the future - it's just a pity this release didn't have it.<br>\r\n<br>\r\nthanks again\r\n",
    "PostedDate": "2008-10-28T07:17:21.793-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "128339",
    "ThreadId": "38645",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi,</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">If you need to statically load some modules at startup and some others dynamically on demand, what you could do is override the <b>InitializeModules() </b>method of the <b>Bootstrapper</b>. Then, you should call the <b>base.InitializeModules()</b> method, so that it uses the module enumerator (in your case, a ConfigurationModuleEnumerator, for example, to load the other modules on demand) and the module loader classes. I.e.:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">public</span><span style=\"font-size:10pt;font-family:'courier new'\"> <span style=\"color:blue\">class</span> <span style=\"color:#4bacc6\">Bootstrapper</span> : <span style=\"color:#4bacc6\">UnityBootstrapper</span>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:#4bacc6\">DependencyObject</span> CreateShell()  {    <span style=\"color:#00b050\">//…</span>        }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> InitializeModules()</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        <span style=\"color:#4bacc6\">IModule</span> myModule = Container.Resolve&lt;<span style=\"color:#4bacc6\">MyModule</span>&gt;();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        <span style=\"color:#4bacc6\">IModule</span> myOtherModule = Container.Resolve&lt;<span style=\"color:#4bacc6\">MyOtherModule</span>&gt;();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        myModule.Initialize();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        myOtherModule.Initialize();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        <span style=\"color:blue\">base</span>.InitializeModules();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:#4bacc6\">IModuleEnumerator</span> GetModuleEnumerator()</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> <span style=\"color:#4bacc6\">ConfigurationModuleEnumerator</span>();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:calibri\">Another possible approach would be to combine the module enumerators as shown in Willem Meint’s blog post </span><a href=\"http://blogs.infosupport.com/blogs/willemm/archive/2008/07/08/Combining-module-enumerators-in-CompositeWPF.aspx\"><span style=\"color:#0000ff;font-family:calibri\">Combining module enumerators in CompositeWPF</span></a><span style=\"font-family:calibri\">.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hope it helps.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Ignacio Baumann Fonay</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><a href=\"http://blogs.southworks.net/ibaumann/\"><span style=\"color:#0000ff;font-family:calibri\">http://blogs.southworks.net/ibaumann/</span></a> </p>\r\n</span></p>\r\n",
    "PostedDate": "2008-10-28T09:30:34.54-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "128452",
    "ThreadId": "38645",
    "Html": "Hi gfdarcy,<br>\r\n<br>\r\nThe reasoning behind it is that if you have a static reference to the type (to be able to do typeof when adding the module), then it means that your assemblies for that module are already loaded in the AppDomain.<br>\r\nYou could potentially still want to delay the instantation of the class that implements IModule, but another way to see it, is that the class that implements IModule is extremelly lightweight, and all the Initialize() method does is register some types in the container (optional), and adds a command somewhere in order to be called &quot;on demand&quot; (or this could be a subscription to an event in the EventAggregator), and until then the module is loaded but standing by (therefore very lightwight until needed).<br>\r\nThe reasoning behind the &quot;startup loaded&quot; piece, is that for those modules that are on demand, their assemblies may not be even loaded in the AppDomain until trying to initialize them, which is where you may see some gain in the application footprint or load time, where you could for example have lots and lots of modules sitting in a directory.<br>\r\n<br>\r\nI hope this helps clarifying the reasoning behind the decision of not having that option in the StaticModuleEnumerator class. Of course feedback is always welcomed.<br>\r\n<br>\r\nJulian Dominguez<br>\r\n<a href=\"http://blogs.southworks.net/jdominguez\">http://blogs.southworks.net/jdominguez</a>\r\n",
    "PostedDate": "2008-10-28T17:46:17.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "128529",
    "ThreadId": "38645",
    "Html": "Thank you both, your answers have helped plenty. <br>\r\n<br>\r\nI think I panicked a little thinking that 'initialize all modules' was the same as 'initialize all VIEWS'. That's obviously not the case. <br>\r\n",
    "PostedDate": "2008-10-29T01:30:37.227-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]