[
  {
    "Id": "563953",
    "ThreadId": "245448",
    "Html": "\r\n<p>So I went through the <a title=\"Prism TK\" href=\"http://prismtk.codeplex.com\" target=\"_blank\">\r\nPrism Training Kit</a>'s&nbsp;MEF examples (adjusting them to work with WPF). I got a WPF application to load the shell using an MEFBootstrapper, and I was able to load a view into a region.</p>\r\n<p>I did this by overriding the Bootstrapper's<strong><span style=\"color:#0000ff\"> ConfigureAggregateCatalog()</span></strong> method. The Training Kit's code was as follows:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureAggregateCatalog()\r\n{\r\n    <span style=\"color:green\">// Modules are added / registered in the aggregate catalog</span>\r\n    <span style=\"color:green\">// More info: http://msdn.microsoft.com/en-us/library/ff921163(PandP.40).aspx</span>\r\n    <span style=\"color:blue\">base</span>.ConfigureAggregateCatalog();\r\n\r\n    <span style=\"color:green\">// Add neccesary classes to the catalog                        </span>\r\n    <span style=\"color:blue\">this</span>.AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span> TypeCatalog(<span style=\"color:blue\">new</span>[] {\r\n        <span style=\"color:blue\">typeof</span>(Shell),  <span style=\"color:green\">// Add the shell to the catalog so that it can be retrieved afterwards in the CreateShell method. </span>\r\n        <span style=\"color:blue\">typeof</span>(AutoPopulateExportedViewsBehavior), <span style=\"color:green\">// Region behavior for finding viewExports</span>\r\n        <span style=\"color:blue\">typeof</span>(ModuleAView) <span style=\"color:green\">// View of Module A.</span>\r\n        }));\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Which was fine for the training/demo. However, is it possible to add Views or Modules AFTER the Shell is created and initialized without referencing them? I guess I'm just curious how this would be done.</p>\r\n",
    "PostedDate": "2011-02-10T06:46:16.693-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "563996",
    "ThreadId": "245448",
    "Html": "\r\n<p>yes,&nbsp; DirectoryCatalog its part of MEF and it will get all modules that are in it and attributed correctly and add them to the AggregateCatalog once you....</p>\r\n<p>Reference at <a href=\"http://msdn.microsoft.com/en-us/library/gg405479(v=PandP.40).aspx\">\r\nhttp://msdn.microsoft.com/en-us/library/gg405479(v=PandP.40).aspx</a>&nbsp;and look near the bottom of the page for &quot;Discovering Modules in a Directory Using MEF&quot;</p>\r\n<p>As for add modules &quot;AFTER&quot; shell creation,&nbsp;you would need to look into Recomposition which is part of MEF and build it into your shell.&nbsp; MEF\r\n<a href=\"mef.codeplex.com\">docs</a>.&nbsp; Also look into module initialization.</p>\r\n<p>&nbsp;</p>\r\n<p>What you had in your previous code snip for the AggregateCatalog was correct, you didn't need to mess with TypeCatalog.&nbsp; Part of it was the InitilizationMode you set (don't need it unless you were going to manually load it).&nbsp;</p>\r\n",
    "PostedDate": "2011-02-10T07:49:53.967-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "564056",
    "ThreadId": "245448",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Prism provides you with a mechanism to load modules on demand, without reference them on your project.</p>\r\n<p>As documentation shows: &ldquo;&hellip;<em>In WPF, it is possible to specify your modules information in the App.config file. The advantage of this approach is that this file is not compiled into the application. This makes it very easy to add or remove\r\n modules at run time without recompiling the application.</em>&rdquo;</p>\r\n<p>When your modules are registered in the <strong>ModuleCatalog</strong>, you can resolve an instance of the\r\n<strong>ModuleManager</strong> and finally you can load the modules on demand like this:</p>\r\n<p><span lang=\"EN-US\" style=\"color:blue; font-size:10pt\"></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> OnLoadModuleClick(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n{   \r\n   moduleManager.LoadModule(<span style=\"color:#a31515\">&quot;MyModule&quot;</span>);\r\n}\r\n</pre>\r\n</div>\r\n</span>\r\n<p></p>\r\n<p>Additionally, you can read more about modularity in <a href=\"http://msdn.microsoft.com/en-us/library/gg405479(v=PandP.40).aspx\">\r\nChapter 4: Modular Application Development</a> and also you can check the <a href=\"http://msdn.microsoft.com/en-us/library/ff921068(v=PandP.40).aspx\">\r\nModularity QuickStart for WPF</a> (using MEF).</p>\r\n<p>I hope you find this information useful.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br>\r\n<a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-02-10T09:17:22.42-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]