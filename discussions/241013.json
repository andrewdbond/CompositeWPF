[
  {
    "Id": "546174",
    "ThreadId": "241013",
    "Html": "\r\n<p>Since days I am reading and researching and still struggling how to create the perfect infrastructure. Since there are no Prism 4.0 templates as such, I came up with a strategy, but I need to be sure this is the right strategy and I would appreciate an advice\r\n from experienced PRISM/RIA developers.</p>\r\n<p><em>I use PRISM 4.0, RIA Services 1.0 Sp1 Beta, Silverlight 4.0, Entity Framework 4.0</em></p>\r\n<p><strong>1) Client side</strong></p>\r\n<p>I created first a &quot;Silverlight Business Application&quot;, which creates a Web.host and a Silverlight client application with implemented RIA authorization. The initially created Silverlight client application shall be used as the Shell project.</p>\r\n<p><strong>2) Infrastructure project (Common)</strong></p>\r\n<p>This project would contain some common Prism MEF attributes and perhaps the entity models that are auto generated by RIA as well as the Service Interface. The idea is to create a simple Silverlight Class Library, and under Properties of the project, I would\r\n select for the dropdown &lsquo;WCF Ria Services Link &rsquo; to point to the host.Web project that contains the Ria Services. Then after the rebuilding, I am able to see the entity models within the Class Library and these could then be shared between the\r\n prism modules to feed their ViewModels etc.</p>\r\n<p><strong>3) Service layer</strong></p>\r\n<p>Should I create the EF4 Model on the Web.host project and add the Domain Service in there? Then I would extract an interface from the Domain Service and put the interface into the Infrastructure (Common) project. The Web.Host therefore needs to reference\r\n the Infrastructure (common) project to get access to the interface. On the client side the interface may be used by MEF to retrieve or mock the service . However I am concerned about the service referencing a common project that contains also the client-side\r\n generated entities.</p>\r\n<p><strong>4) Authorization</strong></p>\r\n<p>Also a bit concerned about the authorization, shall I leave everything on the Shell project? Or do I have to move anything to the Infrastructure (common) project to share it?</p>\r\n<p>Since this is my first time designing with PRISM, I might have misunderstood or forgotten some aspects. Please feel free to improve my suggestions.</p>\r\n<p>Your help is highly appreciated</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-01-09T03:07:57.193-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "546854",
    "ThreadId": "241013",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I'm glad that you've started using prism. You might find the <a href=\"http://msdn.microsoft.com/en-us/library/gg430879%28PandP.40%29.aspx\">\r\nQuickStarts</a> and <a href=\"http://msdn.microsoft.com/en-us/library/gg405483%28PandP.40%29.aspx\">\r\nReference Implementations</a> useful, especially the <a href=\"http://msdn.microsoft.com/en-us/library/gg405483%28PandP.40%29.aspx\">\r\nStock Trader Reference Implementation</a>, which portrays a full application, so it could be a good example of how to manage the infrastructure.</p>\r\n<p>I'll add some feedback to your concerns:</p>\r\n<p>1) Note that you must have a bootstrapper in order to initialize your application. You can read more about it in\r\n<a href=\"http://msdn.microsoft.com/en-us/library/gg405483%28PandP.40%29.aspx\">this article</a> from the Prism MSDN documentation.</p>\r\n<p>2 &amp; 3) What you're mentioning seems a valid approach. You could also add different infrastructure projects, one for the entities from the domain services, and another one for other aspects. You might find the following resources useful for this:</p>\r\n<ul>\r\n<li><a href=\"http://telecosystems.codeplex.com/\"><span id=\"x_x_ctl00_ctl00_MasterContent_ProjectTitleControl1_TitleLabel\">WCF RIA Services (&#43; PRISM &#43; MVVM) LoB Application</span></a>\r\n</li><li><a href=\"http://blogs.msdn.com/b/dphill/archive/2009/11/24/prism-wcf-ria-services.aspx\">Prism &amp; WCF RIA Services</a>\r\n</li></ul>\r\n<p>4) That depends on whether you will need to use authorization from within different modules, or just from the shell. Another possibility would be to create an authorization module, and make other modules have dependencies on that module. You can read more\r\n about it in the <a href=\"http://msdn.microsoft.com/en-us/library/gg405479%28PandP.40%29.aspx\">\r\nModularity chapter</a> from the Prism MSDN documentation.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2011-01-10T10:29:15.133-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "547885",
    "ThreadId": "241013",
    "Html": "\r\n<p>Hi Guido,</p>\r\n<p>You&nbsp;are my life saver. The second link (David Hill's blog) is putting the last pieces of this puzzle together for me.&nbsp;I had my solution very close to his but was running into some issues that he has solved in his blog. Only one drawback has his\r\n solution. His RIA Service-proxy doesn't use any Interface, hence&nbsp;through PRISM he&nbsp;isn't injecting the Service through an Interface but rather directly on the Service type.&nbsp; I am not sure how he would be able to mock the service in such case\r\n for unit testing.&nbsp;&nbsp;It is great that RIA provides generated code for client access, but since there is no generated&nbsp;interface for the service, this&nbsp;would be&nbsp;indeed a big problem for mocking. Unless I don't see the wood for trees.</p>\r\n<p>Otherwise I like his idea of encapsulating everything related&nbsp;into a module.&nbsp; Previously I thought I needed to feed the&nbsp;data through an external service library into the module&nbsp;(classic n-tier approach). But since Prism is meant to keep\r\n everything encapsulated and loosely coupled, the module itself should contain everything it needs.&nbsp; eg. view, viewmodel, and service-proxy in order to get its data directly from the webservice. I think thats pretty neat.</p>\r\n<p>Regarding the authorization you have a valid point.&nbsp; I think having a Shell authorization isn't that secure hence creating a security module to make other modules depend on makes more sense. However I am not very familiar how the security is done.&nbsp;\r\n I need to observe what logic is created on the client project when I making a &quot;Silverlight Business Application&quot;, and move those bits into an own module. In case you know a magic&nbsp;blog from top of your head that has already attempted this, please share.\r\n ;-)</p>\r\n<p>Thanks Guido, its getting very exciting.<br>\r\nHouman</p>\r\n",
    "PostedDate": "2011-01-12T02:21:30.04-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "548135",
    "ThreadId": "241013",
    "Html": "\r\n<p>Hi Houman,</p>\r\n<p>I'm glad that my answer has been helpful for you!</p>\r\n<p>In order to achieve the testability requirement that you need, one possiblility would be to create a service inside your module, which could act as a wrapper to the client generated RIA Service, and then mock that service instead when you unit test your\r\n application. Another benefit of this would be that, in case you needed to obtain a reference to that service outside the module that contains it, you could use the Shared Services approach described in\r\n<a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28PandP.40%29.aspx\">this chapter</a> from the Prism documentation. By following that approach, you could register a type mapping that would export your service implementation with an interface as the\r\n contract type, and then when you resolve that interface, you would obtain an instance of your service implementation. That way, you could aid testability in your application, while using WCF RIA Services.</p>\r\n<p>As for authorization and security, there isn't guidance on Prism regarding that, but you could leverage your own mechanism, or use something like\r\n<a href=\"http://msdn.microsoft.com/en-us/library/ff664771%28PandP.50%29.aspx\">EntLib's Security Application Block</a>. Additionally, you could check some of the following authorization-related threads, which might be helpful for your scenario (especially if\r\n you plan to show a login page before loading the main portion of your application):</p>\r\n<ul>\r\n<li><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=212991\"><span>Login / Logout View Switching</span></a>\r\n</li><li><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=237886\"><span>Initiating a module from different module</span></a>\r\n</li><li><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=235143\"><span>How to show a view at application startup</span></a>\r\n</li><li><a href=\"View.aspx?ThreadId=84031\">Prism &#43; login page</a> </li><li><a href=\"View.aspx?ThreadId=65777\">Best practice to launch login modal before the shell</a>\r\n</li><li><a href=\"View.aspx?ThreadId=83910\">Login Page with Prism(CAG)</a> </li><li><a href=\"View.aspx?ThreadId=84032\">prism &#43; login page prior shell load or bootstaper run</a>\r\n</li><li><a href=\"View.aspx?ThreadId=58292\">Show login modal form before</a> </li><li><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=213269\"><span>Membership in Prism</span></a>\r\n</li></ul>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2011-01-12T09:59:39.587-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "549258",
    "ThreadId": "241013",
    "Html": "\r\n<p>Hi Guido,</p>\r\n<p>First of all I greatly appreciate the sources you have sent to me regarding the logging scenarios. I will definitely dig into that.</p>\r\n<p>I have investigated further into your suggestion of creating a Service wrapper inside the module. The first thing that came up to my mind was, where do I put the interface? It should be somewhere where the whole application would be able to access it. Hence\r\n I have created it on the Infrastructure project, which is referenced by all modules anyway to get the MEFattributes such as [ViewExport] etc.</p>\r\n<p>But then when I wrote the first method inside the interface, I realized I don't have access from the infrastructure assembly to the models.&nbsp; Therefore a simple void ContactModel GetContact(int id); wouldn't even be compiling anymore since&nbsp;the interface\r\n has no reference to the Generated_Code from RIA.&nbsp; Now where do I put the interface, inside the module has little use, since I need the contract to be visible to every module in order to mock it with a MockService later on.</p>\r\n<p>And here I am back to square one. :-(</p>\r\n<p>Do you have any idea how to design this better?</p>\r\n<p><strong>Update:</strong> I came up with a solution and would like to discuss it. I have removed the Ria-Link from the Module project. Instead I have made the Infrastructure project linking to RIA services. So the Generated_Code lies now inside the infrastructure\r\n project, hence the interface can see the metadata for the classes.<br>\r\nThis would imply that all the services including their respective interfaces must reside also inside the Infrastructure project.&nbsp; Since all Modules and the Shell reference the infrastructure project, they all would have access to the metadata and the interfaces.&nbsp;\r\n So that works but...<br>\r\n<br>\r\n<strong>Drawbacks:</strong> <br>\r\n1) All modules have access to all services inside the infrastructure project. The services aren't encapsulated inside the Modules respectively. Now it looks more like the traditional n-Tier architecture.</p>\r\n<p>2) Since all modules have access to all services, Services could be mistakenly instantiated instead of injected by Bootstrapper. (Shift of responsibility)&nbsp; This might have endangered the loose-coupling concept of Prism.<br>\r\n<br>\r\n3) Utilizing the ServiceLocator makes little sense now that everything can see&nbsp;all&nbsp;the services anyway.</p>\r\n<p><br>\r\nWhat are your thoughts?</p>\r\n<p>Many Thanks,<br>\r\nHouman</p>\r\n",
    "PostedDate": "2011-01-14T03:49:46.257-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "549429",
    "ThreadId": "241013",
    "Html": "\r\n<p>Hi Houman,</p>\r\n<p>The approach of putting the service interfaces in the Infrastructure project of your solution is appropriate, since as you've mentioned, it should be available throughout all your modules. You can check the\r\n<a href=\"http://msdn.microsoft.com/en-us/library/ff921074(v=PandP.40).aspx\">Stock Trader Reference Implementation</a>, in which you can see an example of the service interfaces being placed in the&nbsp;Infrasrtucture project.</p>\r\n<p>As for the RIA Services, one possible workaround would be to include the RIA Service reference in your Infrastructure project, so that you can access the client generated code in all your modules. That way, you could access the types defined in your RIA&nbsp;Service\r\n across your modules.</p>\r\n<p>Another possiblity would be not to return the client generated classes in your service wrapper. That is to say, you could define your own classes that represent the data obtained from the WCF RIA service calls, and have that class defined in the infrastructure\r\n service. That way you would only need a reference to the WCF RIA Service in the concrete implementation of the service, not in the interface, which would also allow the service interface to be decoupled of the WCF RIA Service.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2011-01-14T08:28:01.06-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "549440",
    "ThreadId": "241013",
    "Html": "\r\n<p>Hi Guido,</p>\r\n<p>I&nbsp;was updating my former post, while at the same time you&nbsp;were replying to the original post. In fact I went the first path you had suggested and it works fine. But it introduces some concerns that shared above, but if you approve it, I am happy\r\n with it.</p>\r\n<p>Your second suggestion regarding having to create extra classes to represent the RIA generated classes, while tempting, would create a new problem that I tried to&nbsp;avoid&nbsp;in first place &#65279;&#65279;by using RIA -&gt; State Change Tracking. Perhaps one of the\r\n most painful tasks. :)</p>\r\n<p>I think I will stick to putting the Services and IServices into the Infrastructure project and be careful to use DI container for retrieving instances. That should be clean enough. :)</p>\r\n<p>Thanks for sharing,<br>\r\n<br>\r\nHouman</p>\r\n",
    "PostedDate": "2011-01-14T08:44:42.567-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "549460",
    "ThreadId": "241013",
    "Html": "\r\n<p>Hi Houman,</p>\r\n<p>Please note that the first path I've suggested involves placing the RIA Service Reference and the Interface for your wrapper service in the infrastructure project, but the actual implementation of your wrapper service would be in your Module, which would\r\n act as the provider for that service, consuming the RIA Service to expose the operations that involve it. If you later wish to modify the way you expose that operations, you would then be able to modify the implementation in that module, or replace it by other&nbsp;module\r\n that has a different implementation, and so forth.</p>\r\n<p>I&nbsp;hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2011-01-14T09:00:17.833-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "549470",
    "ThreadId": "241013",
    "Html": "\r\n<p>You are right Guido,</p>\r\n<p>While I was developing it I realized I could just leave the actual Service implmentation inside the module. Hence the services won't be exposed to all modules (draw back 1 and 2&nbsp;are now solved).</p>\r\n<p>And since the actual service implemention is again encapsulated inside the module, making use of ServiceLocator becomes again attractive.&nbsp; (drawback 3 also retracted)</p>\r\n<p>Fantastic :)</p>\r\n<p>Thanks for your help,<br>\r\nHouman</p>\r\n",
    "PostedDate": "2011-01-14T09:28:32.943-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "556378",
    "ThreadId": "241013",
    "Html": "\r\n<p>Hi Guido,</p>\r\n<p>&nbsp;</p>\r\n<p>Sorry for asking so many questions. I am working on several topics of Prism simultenously.&nbsp; I need some more information regarding the Shared Services you had mentioned earlier, as its not very clear in the documentation to me.</p>\r\n<p><strong>Case:</strong><br>\r\nIf I have my IService in the infrastructure project and the service implementation inside ContactModule. I would also like to use the same service implementation in NavigationModule. These modules have no reference to each other.<br>\r\n<br>\r\nFrom what I understood,&nbsp;I still register my Service like any other type with the interface inside my ContactModule:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">protected</span> <span style=\"color:blue\">void</span> RegisterViewsAndServices()\r\n{\r\n   _container.RegisterType&lt;IService, IContactService&gt;(<span style=\"color:blue\">new</span> ContainerControlledLifetimeManager());\r\n\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>Now in order to resolve it inside the&nbsp;NavigationModule&nbsp;all I have to do is to get the&nbsp;same instance correct? Actually since services are state-less I could as well get a new instance, shouldn't really make a difference, right?<br>\r\n<br>\r\nvar service = &#65279;ServiceLocator.Current.GetInstance(IService);<br>\r\n<br>\r\nWouldn't it be the same as if I did a _container.Resolve&lt;IService&gt;();&nbsp;\r\n<br>\r\nThe only difference would be that the former gets the same instance while the latter instantiate a new one from the interface, correct?\r\n<br>\r\n<br>\r\nThere is also a ServiceLocator.Current.GetService() ??&nbsp; :)<br>\r\n<br>\r\n&#65279;&#65279;What is the best strategy in your opinion?</p>\r\n<p>Many thanks,<br>\r\nHouman</p>\r\n",
    "PostedDate": "2011-01-27T09:44:04.36-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "556449",
    "ThreadId": "241013",
    "Html": "\r\n<p>Hi Houman,</p>\r\n<p>The <a href=\"http://commonservicelocator.codeplex.com/\">Common Service Locator</a> provides an abstraction over Inversion of Control containers and service locators. For example in Prism, there is a\r\n<strong>MefServiceLocatorAdapter </strong>and a <strong>UnityServiceLocatorAdapter</strong> that provide a means to access the respective functionality from the containers to acheive service location. Therefore, there shouldn't be a difference between calling</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>ServiceLocator.Current.GetInstance(IService);\r\n</pre>\r\n</div>\r\n<p>and</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>_container.Resolve&lt;IService&gt;();\r\n</pre>\r\n</div>\r\n<p>since the <strong>IUnityContainer.Resolve</strong> method is mapped to the <strong>\r\nIServiceLocator.GetInstance</strong> method (and their generic counterparts).</p>\r\n<p>Both of them will return a new instance or a singleton instance of your service, depending on whether you have registered your service as a singleton or not.</p>\r\n<p>As you've mentioned, in case your service doesn't hold any state, registering it as a non-singleton wouldn't cause problems in the functionality of your application.</p>\r\n<p>I&nbsp;hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2011-01-27T11:44:00.357-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "649067",
    "ThreadId": "241013",
    "Html": "<p>Hey Guido,</p>\r\n<p>I am not sure I follow the entire solution of this issue, is there a way you can provide a skeleton project of what you mean when you say create the service wrapper in infrastructure project. &nbsp;</p>\r\n<p>Not sure how to do that. &nbsp;Can you help please.</p>",
    "PostedDate": "2011-07-28T09:56:51.513-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "649086",
    "ThreadId": "241013",
    "Html": "<p>Hi,</p>\n<p>I've created a sample that portrays what I've mentioned previously in this thread. In the sample you will find a WCF service, and a Prism application which consumes that service, through the use of a wrapper that is registered in the container via an interface  mapping, acting as a shared service. Modules that consume that service don't have to reference the module that contains the actual service reference and the implementation for the wrapper service; they only have to reference the Infrastructure project which  contains the interface for this service wrapper.</p>\n<p>You can find the sample (named <strong>WCFServiceWrapperSample</strong>) <a href=\"https://skydrive.live.com/#!/?cid=12a8b70137345033&amp;sc=documents&amp;id=12A8B70137345033!149\">here</a>.</p>\n<p>I&nbsp;hope you find this helpful.</p>\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-07-28T10:53:02.823-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "649203",
    "ThreadId": "241013",
    "Html": "<p>Hey Guido,</p>\r\n<p>I can follow the logic in your sample fine. &nbsp;My confusion lay with RIA Services. &nbsp;I have created a Silverlight Application foreach module in my application. &nbsp;In addition, I created a RIA Service Library foreach module, and I have them linked to the module. &nbsp;Obviously, as mentioned above, that will make testing not possible.</p>\r\n<p>My confusion is how do I create an interface foreach module service so I can call RIA Services. &nbsp;Does my question makes sense?</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-07-28T14:17:24.883-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "649219",
    "ThreadId": "241013",
    "Html": "<p>What I would like to see is a sample of using PRISM, SL 4, RIA Services, and MVVM.</p>\r\n<p>All the examples provided by PRISM do not necessary support all 4 features, and all the&nbsp;discussions&nbsp;around RIA Services and PRISM, do not really show you a good example.</p>\r\n<p>I would love it if you can provide a very simple&nbsp;skeleton&nbsp;project with the \"optimal\" solution structure for this.</p>\r\n<p>Even \"Stock Trader RI\" does not use RIA Services, it used hard coded data which is not really a very good example, or helpful to me. &nbsp;</p>\r\n<p>Can you provide such an example.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-07-28T14:40:28.583-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "649220",
    "ThreadId": "241013",
    "Html": "<p>Hi Bishman,</p>\r\n<p>&nbsp;</p>\r\n<p>Getting RIA Services in a proper service utilizing PRISM is &nbsp;not a sprint but a marathon. &nbsp;It needs some time to really grasp it.</p>\r\n<p>One example how to create proper Client side Services that wraps the RIA DataContext, is John Papa's execellent example:</p>\r\n<p><a href=\"http://channel9.msdn.com/Series/Silverlight-Firestarter/Silverlight-Firestarter-2010-Session-4-MVVM-Why-and-How-Tips-and-Patterns-using-MVVM-and-Service-Pat\">http://channel9.msdn.com/Series/Silverlight-Firestarter/Silverlight-Firestarter-2010-Session-4-MVVM-Why-and-How-Tips-and-Patterns-using-MVVM-and-Service-Pat</a></p>\r\n<p>&nbsp;</p>\r\n<p>You can also download the code there and get started. Your auto generated client code shall live in your Infrastructure (common) module. &nbsp;That way all your modules have access to the entities (models) + your custom created IService/Service.</p>\r\n<p>Regards,</p>\r\n<p>Houman</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-07-28T14:41:05.247-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "649222",
    "ThreadId": "241013",
    "Html": "<p>Regarding your second post, I started with Prism in November 2010. It is not easy, but it is the most powerful composite/MVVM framework you may find. &nbsp;You need patience and have to do each sample one-by-one to grasp it further.</p>\r\n<p>Also download&nbsp;<a href=\"http://prismtk.codeplex.com/\">http://prismtk.codeplex.com/</a>&nbsp; . This training kit helps you to understand the framework much better.</p>\r\n<p>RIA Services is outside the responsibility of PRISM. &nbsp;You need to take care of your service yourself. Follow the link from John papa and learn how Ria works. Once you have done all these bits you start understanding the whole picture piece by piece.</p>\r\n<p>&nbsp;</p>\r\n<p>Regards,</p>\r\n<p>Houman</p>",
    "PostedDate": "2011-07-28T14:46:17.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "649776",
    "ThreadId": "241013",
    "Html": "<p>Thanks so much for taking the time to respond Houmie.</p>\r\n<p>I understand what you are trying to say. &nbsp; I downloaded the Training Tool kit and I am working my way through the examples.</p>\r\n<p>All I am trying to figure out is how to structure the application, and use Repository Pattern in PRISM.</p>\r\n<p>I am not sure how to create the IService/Service from my RIA Services in the infrastructure project.</p>\r\n<p>That is the only area I am struggling with. &nbsp;</p>\r\n<p>Any help you can provide will be greatly appreciated.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-07-29T13:57:21.543-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "654596",
    "ThreadId": "241013",
    "Html": "<p>Hi everyone!</p>\r\n<p>Looking through your discussion and progression so far, this might come a bit late, but still, the good news is, that in the mean time Templates to get started with Prism/MVVM/MEF are available from here:</p>\r\n<p><a href=\"http://blogs.msdn.com/b/dphill/archive/2011/03/04/prism-template-pack-1-4-now-with-mef-support.aspx\">http://blogs.msdn.com/b/dphill/archive/2011/03/04/prism-template-pack-1-4-now-with-mef-support.aspx</a></p>\r\n<p>I thought it is a good idea to publish this, it really took me some time to get to the right place.</p>",
    "PostedDate": "2011-08-08T08:27:24.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "655902",
    "ThreadId": "241013",
    "Html": "<p>@Bishman have you checked out that Firestarter link I had sent you above? Go there and download the example by John papa. &nbsp;He also has a video and talks through it. &nbsp;His example is often taken as the lead example in RIA forums. &nbsp;He has a bookstore and has encapsulated the DataContext into a proper Service and IService.</p>\r\n<p>@Peter, thats great news. It was about time for a template. &nbsp;But I see loads of people have issues with path-too-long problem, is this sorted by now?</p>",
    "PostedDate": "2011-08-10T07:33:27.4-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "683169",
    "ThreadId": "241013",
    "Html": "<p>Hi,</p>\n<p>For those concerned with this issue, you could check the following blog post, which provides guidance on how to use WCF services with Prism in Silverlight:</p>\n<p><a href=\"http://blogs.southworks.net/gmaliandi/2011/10/using-wcf-services-in-prism-silverlight-applications/\">Using WCF services in Prism Silverlight applications</a></p>\n<p>Also, you might find the following blog post by David Hill useful, as it provides insight on how to use WCF RIA Services with Prism:</p>\n<p><a href=\"http://blogs.msdn.com/b/dphill/archive/2009/08/17/prism-and-net-ria-services.aspx\">Prism And .Net RIA Services</a></p>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-10-12T07:50:06.21-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]