[
  {
    "Id": "984289",
    "ThreadId": "428949",
    "Html": "\r\n<p>We are building an application that has a lot of very specific requirements regarding View - User interaction. We are using MVVM &#43; Prism & Unity, but we are seeing a lack of Command features & Binding expressions to facilitate most of our (even basic) requirements\r\n relating to taking action on the UI from code/logic in our ViewModels. We have entertained raising events from the ViewModel and interfaces to allow for abstracted communication to the View to do any number of very specific (basic) things from Focusing a certain\r\n control to Selecting text in a TextBox.</p>\r\n<p>We have settled on creating an Interface over events due to the event subscription overhead/liability.</p>\r\n<p>I know that many people on any given forum will claim that events and interfaces are a &quot;no-no&quot; while proclaiming that &quot;zero code-behind&quot; is the way. The number of additional ViewModel properties and extra work to add attached/dependency\r\n properties for each and every View feels less maintainable than allowing an interface to abstract any given UI implementation that needs to be invoked by code/logic/events in the ViewModel.</p>\r\n<p>Are interfaces acceptable for this use case? Discuss in general.</p>\r\n<p>Thanks</p>\r\n",
    "PostedDate": "2013-01-08T19:51:57.88-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "984293",
    "ThreadId": "428949",
    "Html": "\r\n<p>To follow - It appears that this has already been specifically addressed here:</p>\r\n<p>http://waf.codeplex.com/wikipage?title=Model-View-ViewModel%20Pattern</p>\r\n<p>The <strong><span style=\"color:#0000ff\">IView description</span></strong> is exactly the usage that we are implementing.</p>\r\n<h2>Participants</h2>\r\n<p><span>The types participating in this pattern are:</span></p>\r\n<ul>\r\n<li><strong>View</strong>&nbsp;contains the specific GUI controls and defines the appearance of the user interface.\r\n</li><li><span style=\"color:#0000ff\"><strong>IView</strong>&nbsp;declares the interface of the View. The ViewModel can communicate over this interface with the View. Related pattern: Separated Interface (PoEA).</span>\r\n</li><li><strong>ViewModel</strong>&nbsp;represents the state and behavior of the presentation.\r\n</li></ul>\r\n",
    "PostedDate": "2013-01-08T20:17:30.817-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "984563",
    "ThreadId": "428949",
    "Html": "\r\n<p>Hi,</p>\r\n<p>In my opinion&nbsp; there is not only one way to separate the visual presentation concerns from those related to visual logic. Hence, you should use the one that suits best to improve the maintainability and testability of your application. Based on my understanding\r\n<strong>MVVM</strong>'s primary concern is about producing maintainable UIs for the developer and the designer, hence if using the\r\n<strong>IView </strong>interface approach suits best for the requirements of your scenario, instead of directly using data bindings, commands, EventTriggers and behaviors which are commonly used in\r\n<strong>MVVM</strong>, then I believe it should be fine to use it.</p>\r\n<p>Particularly, I haven't experienced with the approach mentioned the suggested link, but it seems to benefit of different separated UI patterns, and as far as I know the\r\n<strong>Prism </strong>Library itself is intended to be neutral with respect on which separation UI pattern you choose as you can be successful with any of these patterns. For example the use of the\r\n<strong>IView </strong>interface is common when using the Presentation Model pattern which can be seen in many of the quickstarts provided in\r\n<strong>Prism </strong>v2.</p>\r\n<p>Regards,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2013-01-09T09:26:19.507-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]