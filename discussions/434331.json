[
  {
    "Id": "1005974",
    "ThreadId": "434331",
    "Html": "I built a Prism application using WPF, .Net 4, Prism 4.1, and Unity. I'm using a DirectoryModuleCatalog to find modules at runtime. My views are displayed in a TabControl (MainRegion). When I remove a view from the region, the view and viewmodel remain in memory and never get garbage collected - the tabitem is removed. After many hours searching, I cannot figure out what I'm doing wrong.<br />\n<br />\nHere's my bootstrapper:<br />\n<pre><code>public class Bootstrapper : UnityBootstrapper\n{\n    protected override void InitializeShell()\n    {\n        base.InitializeShell();\n        App.Current.MainWindow = (Window)Shell;\n        App.Current.MainWindow.Show();\n    }\n\n    protected override DependencyObject CreateShell()\n    {\n        var shell = new Shell();\n        return shell;\n    }\n\n    protected override IModuleCatalog CreateModuleCatalog()\n    {\n        return new DirectoryModuleCatalog() { ModulePath = @&quot;.\\Modules&quot; };\n    }\n}</code></pre>\n\nHere's my module:<br />\n<pre><code>[Module(ModuleName = &quot;ModuleA&quot;)]\npublic class Module : IModule\n{\n    private IRegionManager _regionManager;\n\n    public Module(IRegionManager regionManager)\n    {\n        _regionManager = regionManager;\n    }\n\n    public void Initialize()\n    {\n        var view = new UserControl1();\n        //_regionManager.RegisterViewWithRegion(&quot;MainRegion&quot;, typeof(UserControl1));\n        _regionManager.Regions[&quot;MainRegion&quot;].Add(view, &quot;ModuleA&quot;);\n        _regionManager.Regions[&quot;MainRegion&quot;].Activate(view);\n    }\n}</code></pre>\n\nAnd heres the viewmodel for my view that gets added to the region:<br />\n<pre><code>public class ViewModel\n{\n    public DelegateCommand RemoveView { get; set; }\n\n    public ViewModel()\n    {\n        RemoveView = new DelegateCommand(() =&gt;\n            {\n                var regionManager = ServiceLocator.Current.GetInstance&lt;IRegionManager&gt;();\n                var view = regionManager.Regions[&quot;MainRegion&quot;].GetView(&quot;ModuleA&quot;);\n                regionManager.Regions[&quot;MainRegion&quot;].Deactivate(view);\n                regionManager.Regions[&quot;MainRegion&quot;].Remove(view);\n            });\n    }\n}</code></pre>\n\nAnd here's the code behind for the view:<br />\n<pre><code>public partial class UserControl1 : UserControl\n{\n    public UserControl1()\n    {\n        InitializeComponent();\n\n        this.DataContext = new ViewModel();\n    }\n}</code></pre>\n\nI've read that it could be because I'm instantiating the view in the module or perhaps the viewmodel in the view? When I use Red Gate Memory Profiler, and remove the view via the DelegateCommand, the view and viewmodel are both flagged as not being able to be garbage collected due to a weak reference. Where is the reference that I'm not properly cutting?<br />\n<br />\nHere's teh retention graph for the view model <a href=\"https://docs.google.com/file/d/0B4XjO9pUQxBXbGFHS1luNUtyOTg/edit?usp=sharing\" rel=\"nofollow\">link</a><br />\n",
    "PostedDate": "2013-02-24T11:52:16.95-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1006521",
    "ThreadId": "434331",
    "Html": "Hi,\r<br />\n<br />\nSo far I couldn't find the cause of this problem reviewing the code snippets you posted above. Also, I am unable to see the graph you linked below (I just sent you a access request for it).\r<br />\n<br />\nBased on my understanding, the action of simply instantiating the view in the module (like in the code snippet) would not cause a memory leak. Also, as far as I know, weak references should not prevent an object from being garbage collected, so this might not be the cause behind it (although, I am not seeing anything that might create a weak reference in the code snippets either...)\r<br />\n<br />\nIt would be helpful if you could provide us with more information about your scenario so that we can help you further with this. For example, it would be useful to know what data bindings are being done against the <strong>RemoveView</strong> property and where. Also, I believe it could be worth checking if this issue is also present when using a different type of region, for example an <strong>ItemsControl</strong> or <strong>ListBox</strong> .\r<br />\n<br />\nThanks,\r<br />\n<br />\nDamian Cherubini\r<br />\n<a href=\"http://blogs.southworks.net/dcherubini\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini</a><br />\n",
    "PostedDate": "2013-02-25T13:08:31.873-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1007339",
    "ThreadId": "434331",
    "Html": "Hi Damian,<br />\n<br />\nI got a little further in my discovery process of the actual issue.<br />\n<br />\nOur solution is structured like so:<br />\n<ul>\n<li>Infrastructure</li>\n<li>Shell (main app project)</li>\n<li>TabControl module</li>\n<li>ModuleA</li>\n<li>ModuleB</li>\n<li>ModuleC</li>\n<li>\nMenu module<br />\n</li>\n</ul>\nTabControl module, Menu module, ModuleA, B, and C are loaded with the directory module catalog.<br />\n<br />\nThe IModule in Module A, B, and C sends an EventAggregator message to the menu module to create the menu and via a CompositeCommand tell the menuitem what views to add to the TabControl region when clicked. After the views are added to the TabControl region, sub controls are displayed via a view-model first approach defined in each modules ResourceDictionary (DataTemplates).<br />\n<br />\nI think part of our problem is mixing viewmodel-first with view first. When we attempt to remove views from the TabControl region (via the RegionManager), the view is actually removed from the TabControl but the associated Views and ViewModels linger around in memory - still not exactly sure why, but during the removal of the views, if I set view.DataContext = null it seems to help. <br />\n<br />\nOne really weird thing that was happening is if I added a new view to the tab region, and did nothing to the UI contained within that view (including focus on controls), then removed the veiw from the region it would get garbage collected. The instant any sort of interaction was done on the view it wouldn't garbage collect after being removed from the region. I created a test solution with only one module. The view in the module only contained 1 TextBox with proper binding to the viewmodel. As soon as I focused on that textbox and then removed the view from the region, both the view and viewmodel stayed in memory.<br />\n<br />\nTomorrow I will attempt to alter the program so that when each module loads, it will send an event to the main application which will merge resource dictionaries and then just pass the viewmodel to the region for a full viewmodel-first approach.<br />\n<br />\nThanks<br />\n",
    "PostedDate": "2013-02-26T19:17:30.237-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1007631",
    "ThreadId": "434331",
    "Html": "Here's the <a href=\"https://docs.google.com/file/d/0B4XjO9pUQxBXVEtJaW8yYWV1SGs/edit?usp=sharing\" rel=\"nofollow\">link</a> to one of my test solutions. Click the close button and notice that the View and ViewModel remain in memory.\r<br />\n<br />\n<br />\nThe list in my modules viewmodel generates 16mb worth of list&lt;string&gt; data just for me to easily see the change in Ants memory profiler. The 16mb remains in memory.\r<br />\n<br />\nI'm at wits end with this thing :(<br />\n",
    "PostedDate": "2013-02-27T07:08:37.767-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1007825",
    "ThreadId": "434331",
    "Html": "Hi,\r<br />\n<br />\nThanks you for provide us with a repro-sample application. Unfortunately, we couldn't download it as we need you to grant us access to it (I just sent you an access request.) If it's not possible to share the solution in that hosting service, it would be useful if you could upload it to another file hosting service of your preference so that we could download it.\r<br />\n<br />\nOn the other hand, based on your last description it seems that you are using scoped regions. If that is the case, the problem you are experiencing could be related to a known issue in <strong>Prism</strong> where if a parent view containing regions is removed, its child views are kept alive causing a possible memory leak:<br />\n<ul>\n<li>\n<a href=\"http://compositewpf.codeplex.com/workitem/5657\" rel=\"nofollow\">Remove view does not remove all sub-views</a><br />\n</li>\n</ul>\nRegards,\r<br />\n<br />\nDamian Cherubini\r<br />\n<a href=\"http://blogs.southworks.net/dcherubini\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini</a><br />\n",
    "PostedDate": "2013-02-27T12:42:21.61-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1007843",
    "ThreadId": "434331",
    "Html": "Hi Damian,<br />\n<br />\nTry this <a href=\"http://www.filedropper.com/prismtest\" rel=\"nofollow\">link</a><br />\n<br />\nI read that link as well a couple days ago, but believe that it does not apply since the views being removed do not have nested regions. I also tried RegionBehaviors:ClearChildViewsRegionBehavior just to be sure and get the same result.<br />\n<br />\nIt's like this:<br />\n<ul>\n<li>\nMainRegion (ContentControl)<br />\n<ul>\n<li>\nMainContentRegion (TabControl loaded in MainRegion)<br />\n<ul>\n<li>\nUserControl1 (tab item 1 - datacontext is viewmodel1)<br />\n<ul>\n<li>\nContentControl (viewmodel2 - property in viewmodel1, displayed via datatemplate)<br />\n<ul>\n<li>\nContentControl  (viewmodel3 - property in viewmodel2, displayed via datatemplate)<br />\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\nWhen I try to remove UserControl1 from the MainContentRegion it stays in memory, there are no subregions below MainContentRegion.<br />\n<br />\nLet me know if you are able to grab the file from the link above.<br />\n<br />\nThanks,<br />\nChris<br />\n",
    "PostedDate": "2013-02-27T13:03:01.423-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1007844",
    "ThreadId": "434331",
    "Html": "Duplicate post :(<br />\n",
    "PostedDate": "2013-02-27T13:05:27.83-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1007846",
    "ThreadId": "434331",
    "Html": "Duplicate post.<br />\n",
    "PostedDate": "2013-02-27T13:05:40.747-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1007976",
    "ThreadId": "434331",
    "Html": "I think the memory leak may actually be due to incorrect binding mode or binding to objects that are not INotifyPropertyChanged / Dependency properties, etc.\r<br />\n<br />\nWill verify in the morning.<br />\n",
    "PostedDate": "2013-02-27T20:22:22.513-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1008393",
    "ThreadId": "434331",
    "Html": "Finally found the root cause of my problem.... not exactly sure why it was messing things up though.\r<br />\n<br />\nIn our Shell.xaml we were binding &quot;IsDefault&quot; in one of our buttons to a PasswordBox's IsKeyboardFocused:<br />\n<pre><code>&lt;Button Style=&quot;{DynamicResource RedSubmitButtonStyle}&quot; IsDefault=&quot;{Binding ElementName=passwordBox1, Path=IsKeyboardFocused}&quot; Command=&quot;{Binding LoginCommand}&quot; Content=&quot;Login&quot; Height=&quot;23&quot; HorizontalAlignment=&quot;Left&quot; Margin=&quot;145,86,0,0&quot; Name=&quot;button1&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;75&quot; /&gt;</code></pre>\n\nIsKeyboardFocused, is a dependency property according to <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.uielement.iskeyboardfocused(v=vs.100).aspx\" rel=\"nofollow\">MSDN</a>\r<br />\n<br />\nPerhaps its related to the PasswordBox attached property we're using to bind to the value entered into the PasswordBox - I found the code for that on <a href=\"http://blog.functionalfun.net/2008/06/wpf-passwordbox-and-data-binding.html\" rel=\"nofollow\">another site</a>.\r<br />\n<br />\nHere's the full contents of our Shell.xaml file<br />\n<pre><code>&lt;Grid x:Name=&quot;MainGrid&quot; core:SharedResourceDictionary.MergedDictionaries=&quot;TabControlThemes;MenuThemes;ButtonThemes;DataGridThemes;TreeViewThemes;ComboBoxThemes;ListBoxThemes;GroupBoxThemes;ToggleSwitchThemes&quot;&gt;\n        \n    &lt;DockPanel&gt;\n        &lt;ContentControl x:Name=&quot;menuContent&quot; DockPanel.Dock=&quot;Top&quot; prism:RegionManager.RegionName=&quot;MenuRegion&quot; /&gt;\n        &lt;ContentControl DockPanel.Dock=&quot;Bottom&quot; prism:RegionManager.RegionName=&quot;FooterRegion&quot; /&gt;\n        &lt;ContentControl DockPanel.Dock=&quot;Top&quot; prism:RegionManager.RegionName=&quot;MainContentRegion&quot; /&gt;\n    &lt;/DockPanel&gt;\n\n    &lt;StackPanel Orientation=&quot;Horizontal&quot; Panel.ZIndex=&quot;4&quot; HorizontalAlignment=&quot;Right&quot; VerticalAlignment=&quot;Top&quot;&gt;\n        &lt;Button Visibility=&quot;{Binding IsFullScreenToggleVisible, Converter={StaticResource visConv}}&quot; Command=&quot;{Binding ToggleFullScreen}&quot; Height=&quot;50&quot; Name=&quot;button4&quot; Width=&quot;70&quot; HorizontalAlignment=&quot;Right&quot; Margin=&quot;0,10,10,0&quot; VerticalAlignment=&quot;Top&quot;&gt;\n            &lt;Button.Content&gt;\n                &lt;TextBlock FontSize=&quot;12&quot; FontWeight=&quot;Bold&quot; TextWrapping=&quot;Wrap&quot; TextAlignment=&quot;Center&quot; HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; Text=&quot; Toggle Full Screen&quot; /&gt;\n            &lt;/Button.Content&gt;\n        &lt;/Button&gt;\n\n        &lt;Button Visibility=&quot;{Binding IsAppCloseButtonVisible, Converter={StaticResource visConv}}&quot; Command=&quot;{Binding ShutdownApplication}&quot; Height=&quot;50&quot; Name=&quot;button3&quot; Width=&quot;50&quot; HorizontalAlignment=&quot;Right&quot; Margin=&quot;0,10,10,0&quot; VerticalAlignment=&quot;Top&quot;&gt;\n            &lt;Button.Content&gt;\n                &lt;Image Source=&quot;..\\Graphics\\close.png&quot; Name=&quot;image1&quot; /&gt;\n            &lt;/Button.Content&gt;\n        &lt;/Button&gt;\n    &lt;/StackPanel&gt;\n\n    &lt;xctk:ChildWindow Name=&quot;loginChildWindow&quot; Panel.ZIndex=&quot;3&quot; CloseButtonVisibility=&quot;Collapsed&quot; FocusedElement=&quot;{Binding ElementName=usernameTextBox}&quot; WindowStartupLocation=&quot;Center&quot; WindowState=&quot;{Binding IsVisible, Mode=TwoWay, Converter={StaticResource boolConverter}}&quot; IsModal=&quot;True&quot; OverlayOpacity=&quot;1&quot; Caption=&quot;Pioneer Login&quot; Height=&quot;164&quot; Width=&quot;261&quot;&gt;\n        &lt;xctk:ChildWindow.OverlayBrush&gt;\n            &lt;ImageBrush Stretch=&quot;None&quot; Viewport=&quot;0,0,46,29&quot; ViewportUnits=&quot;Absolute&quot; ImageSource=&quot;../Graphics/escheresque.png&quot; TileMode=&quot;Tile&quot; /&gt;\n        &lt;/xctk:ChildWindow.OverlayBrush&gt;\n        &lt;xctk:BusyIndicator IsBusy=&quot;{Binding IsLoginBusy}&quot; BusyContent=&quot;Authenticating...&quot;&gt;\n            &lt;Grid&gt;\n                &lt;TextBox GotFocus=&quot;usernameTextBox_GotFocus&quot; Text=&quot;{Binding Username, UpdateSourceTrigger=PropertyChanged}&quot; Height=&quot;23&quot; HorizontalAlignment=&quot;Left&quot; Margin=&quot;99,20,0,0&quot; Name=&quot;usernameTextBox&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;120&quot;&gt;\n                    &lt;TextBox.InputBindings&gt;\n                        &lt;KeyBinding Key=&quot;Enter&quot; Command=&quot;{Binding LoginCommand}&quot; /&gt;\n                    &lt;/TextBox.InputBindings&gt;\n                &lt;/TextBox&gt;\n                &lt;Label Content=&quot;Username&quot; Height=&quot;28&quot; HorizontalAlignment=&quot;Left&quot; Margin=&quot;28,18,0,0&quot; Name=&quot;label1&quot; VerticalAlignment=&quot;Top&quot; /&gt;\n                &lt;Label Content=&quot;Password&quot; Height=&quot;28&quot; HorizontalAlignment=&quot;Left&quot; Margin=&quot;29,47,0,0&quot; Name=&quot;label2&quot; VerticalAlignment=&quot;Top&quot; /&gt;\n                &lt;PasswordBox attach:PasswordBoxAssistant.BindPassword=&quot;True&quot; attach:PasswordBoxAssistant.BoundPassword=&quot;{Binding Password, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}&quot; Height=&quot;23&quot; HorizontalAlignment=&quot;Left&quot; Margin=&quot;100,50,0,0&quot; Name=&quot;passwordBox1&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;120&quot; /&gt;\n                &lt;Button Style=&quot;{DynamicResource RedSubmitButtonStyle}&quot; IsDefault=&quot;{Binding ElementName=passwordBox1, Path=IsKeyboardFocused}&quot; Command=&quot;{Binding LoginCommand}&quot; Content=&quot;Login&quot; Height=&quot;23&quot; HorizontalAlignment=&quot;Left&quot; Margin=&quot;145,86,0,0&quot; Name=&quot;button1&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;75&quot; /&gt;\n                &lt;Button Style=&quot;{DynamicResource RedSubmitButtonStyle}&quot; Command=&quot;{Binding LazyLoginCommand}&quot; Visibility=&quot;{Binding IsDebugMode, Converter={StaticResource visConv}}&quot; Content=&quot;Quick Login&quot; Height=&quot;23&quot; HorizontalAlignment=&quot;Left&quot; Margin=&quot;23,87,0,0&quot; Name=&quot;button2&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;89&quot; /&gt;\n            &lt;/Grid&gt;\n        &lt;/xctk:BusyIndicator&gt;\n    &lt;/xctk:ChildWindow&gt;\n\n&lt;/Grid&gt;</code></pre>\n\n",
    "PostedDate": "2013-02-28T11:22:35-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1008434",
    "ThreadId": "434331",
    "Html": "Hi,\r<br />\n<br />\nI was checking your test application but I was unable to find a solution for it so far; so I am glad to hear that you could found the cause behind this problem!\r<br />\n<br />\nRegards,\r<br />\n<br />\nDamian Cherubini\r<br />\n<a href=\"http://blogs.southworks.net/dcherubini\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini</a><br />\n",
    "PostedDate": "2013-02-28T12:34:35.567-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]