[
  {
    "Id": "444190",
    "ThreadId": "212991",
    "Html": "<p>Hi</p>\r\n<p>I have been franticly digging through PRISM guides for the past 2 months in anticipation of a new project we have to get into. So far I am very impressed and confused at the same time. It will be my first really big system rewrite from scratch, so naturally I want to do everything top notch and proper. I have roughly 2million questions about PRISM but I won't burden you with all of them at once.</p>\r\n<p>My question for now is this:</p>\r\n<p>I have created a shell with 5 regions. I have created a login module which gets loaded .WhenAvailable. On startup the shell does what it needs to and the login module is displayed as I desire. After successful login, I get into my (still empty for now) shell. Then I click the Logout button I have added into one of the regions. This basically runs through all the regions and removes all the views and sets up the shell to be as it is when it first started up ie. Login Layout.</p>\r\n<p>Now my problem comes in here where I want to show my login screen again. The login module has already been loaded and registered with the region in the bootstrapper and the module's initialize() method. On startup the Bootstrapper kicks off the login module and loads it up automatically. But once I remove the login view from my shell, how do I get it to come back. The login button is in another module called ActiveUserModule (but still in the same project) as the login module. I thought I should do something like this, but the new LoginViewModuleViewModel(...) part seems to tell me that I should not. Here is my LogoutCommand's Execute function.</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> ExecuteLogoutCommand(<span style=\"color:blue\">object</span> parameter)\r\n        {\r\n            <span style=\"color:blue\">foreach</span> (IRegion region <span style=\"color:blue\">in</span> regionManager.Regions)\r\n            {\r\n                <span style=\"color:blue\">if</span> (region.Name == RegionNames.ContentRegion)\r\n                {\r\n                    \r\n                }\r\n                <span style=\"color:green\">// remove the views from the regions</span>\r\n                <span style=\"color:blue\">while</span> (region.Views.FirstOrDefault() != <span style=\"color:blue\">null</span>)\r\n                {\r\n                    <span style=\"color:blue\">var</span> view = region.Views.FirstOrDefault();\r\n\r\n                    <span style=\"color:blue\">if</span> (view != <span style=\"color:blue\">null</span>)\r\n                    {\r\n                        region.Remove(view);\r\n                    }\r\n                }\r\n            }\r\n\r\n            IRegion contentRegion = regionManager.Regions[RegionNames.ContentRegion];\r\n            <span style=\"color:blue\">object</span> existingView = contentRegion.Views.FirstOrDefault();\r\n\r\n            <span style=\"color:blue\">if</span> (existingView == <span style=\"color:blue\">null</span>)\r\n            {\r\n                LoginView view = <span style=\"color:blue\">new</span> LoginView([ ILoginModuleViewModel implementation should go here]);\r\n                contentRegion.Add(view, <span style=\"color:#a31515\">&quot;UserListView&quot;</span>);\r\n                contentRegion.Activate(view);\r\n            }\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                contentRegion.Activate(existingView);\r\n            }\r\n\r\n            <span style=\"color:green\">//eventAggregator.GetEvent&lt;SetLoginLayout&gt;().Publish(true);</span>\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>&nbsp;</p>\r\n<p>Here is my View's constructor</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>        <span style=\"color:blue\">public</span> LoginView(ILoginModuleViewModel viewModel)\r\n        {\r\n            InitializeComponent();\r\n\r\n            <span style=\"color:blue\">this</span>.DataContext = viewModel;\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>&nbsp;</p>\r\n<p>Here is the ViewModuleViewModel implementation</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>        <span style=\"color:blue\">public</span> LoginModuleViewModel(ILoginService loginService, IRegionManager regionManager, IEventAggregator eventAggregator)\r\n        {\r\n            <span style=\"color:blue\">this</span>.loginService = loginService;\r\n            <span style=\"color:blue\">this</span>.regionManager = regionManager;\r\n            <span style=\"color:blue\">this</span>.eventAggregator = eventAggregator;\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>&nbsp;</p>\r\n<p>When I say\r\n<div style=\"color:black;background-color:white\">\r\n<pre>LoginView view = <span style=\"color:blue\">new</span> LoginView(<span style=\"color:blue\">new</span> LoginModuleViewModel(blahblah);\r\n</pre>\r\n</div>\r\nI need to pass all of the paramaters which usually get dependancy injected.</p>\r\n<p>Am I missing something? Am I completely wrong? How do I load back my Login module after logout? Any ideas would be greatly appreciated, and thanks for an awesome framework :)</p>\r\n<p>Regards</p>",
    "PostedDate": "2010-05-18T01:57:12.403-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "444876",
    "ThreadId": "212991",
    "Html": "<p id=825412d0-44cf-012d-d99f-1231390ee901>Hi,</p>\r\n<p id=82542ba0-44cf-012d-d9a0-1231390ee901>I&rsquo;m glad you are starting to use  Prism.</p>\r\n<p id=825444d0-44cf-012d-d9a1-1231390ee901>The component that makes <a href=\"http://msdn.microsoft.com/en-us/library/ff648978.aspx\">dependency  injection</a> possible in Prism is the dependency injection container, which is  by default the <a href=\"http://msdn.microsoft.com/en-us/library/ff647202.aspx\">Unity Application  Block container</a>. When you write:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>LoginView view = <span style=\"color:blue\">new</span> LoginView(<span style=\"color:blue\">new</span> LoginModuleViewModel(blahblah);\r\n</pre>\r\n</div>\r\n<p id=82547870-44cf-012d-d9a3-1231390ee901>you are explicitly creating an  instance of that view through the new statement, so you need to pass the  corresponding arguments to the view&rsquo;s and ViewModel&rsquo;s constructors. In order to  have the container instantiate the view, and fulfill all its dependencies (in  this case, the ViewModel, which has dependencies itself that the container will  also resolve and inject), you have to write something like this:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>LoginView view = <span style=\"color:blue\">this</span>.Container.Resolve&lt;LoginView&gt;();\r\n</pre>\r\n</div>\r\n<p id=8254ad10-44cf-012d-d9a5-1231390ee901>assuming this.Container is a  reference to the Unity Container. That way, you decouple your view from the  specific implementation of the ViewModel.</p>\r\n<p id=8254c780-44cf-012d-d9a6-1231390ee901>On a different matter, having a  centralized control of when views are added and removed isn&rsquo;t probably the best  approach for achieving this functionality. I would recommend keeping each module  responsible for adding and removing views. To that purpose, you could publish&nbsp;a  &ldquo;LoginEvent&rdquo; when the user is authenticated, and a &ldquo;LogoutEvent&rdquo; when the logout  button is clicked. Then you could have a component in your modules listening to  those events, that would add and remove views accordingly when the events are  published.</p>\r\n<p id=8254e290-44cf-012d-d9a7-1231390ee901>I hope you find this helpful.</p>\r\n<p id=8254fe00-44cf-012d-d9a8-1231390ee901>Guido Leandro Maliandi <br><a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2010-05-19T06:56:31.81-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "533464",
    "ThreadId": "212991",
    "Html": "\r\n<p>Hi Guido,</p>\r\n<p>For your comments:</p>\r\n<p>&quot;On a different matter, having a centralized control of when views are added and removed isn&rsquo;t probably the best approach for achieving this functionality. I would recommend keeping each module responsible for adding and removing views. To that purpose,\r\n you could publish&nbsp;a &ldquo;LoginEvent&rdquo; when the user is authenticated, and a &ldquo;LogoutEvent&rdquo; when the logout button is clicked. Then you could have a component in your modules listening to those events, that would add and remove views\r\n accordingly when the events are published.&quot;</p>\r\n<p>Do you have any samples/examples to illustrate this?&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks!</p>\r\n",
    "PostedDate": "2010-12-09T08:14:53.553-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "533590",
    "ThreadId": "212991",
    "Html": "\r\n<p>Hi,</p>\r\n<p>You could have, for example, a button for logging in, and another one for logging out, binded to some DelegateCommands.</p>\r\n<p>The commands those buttons would execute could look like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> Login()<br>{<br>&nbsp;&nbsp;&nbsp;eventAggregator.GetEvent&lt;LoginEvent&gt;().Publish(<span style=\"color:blue\">null</span>);<br>}<br></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> Logout(<span style=\"color:blue\">&nbsp;</span>)<br>{<br>&nbsp;&nbsp;&nbsp;eventAggregator.GetEvent&lt;LogoutEvent&gt;().Publish(<span style=\"color:blue\">null</span>);<br>}<br></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Assuming eventAggregator is a reference to the Event Aggregator in your application, and that you have a LoginEvent and LogoutEvent defined in an infrastructure project.</p>\r\n<p>Then, you could have each one of your modules subscribe to those events, and add and remove their views accordingly. For example a controller in a sample module which adds its views when logging in and removes them when logging out could have something like\r\n this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> SampleModuleController</pre>\r\n</div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>{<br><br>&nbsp;&nbsp; <span style=\"color:blue\">public</span> SampleModuleController(IEventAggregator eventAggregator, IRegionManager regionManager)<br><br>&nbsp;&nbsp; {<br><br>&nbsp;&nbsp; &nbsp;&nbsp; <span style=\"color:blue\">this</span>.eventAggregator.GetEvent&lt;LoginEvent&gt;().Subscribe(AddViews);<br><br>&nbsp;&nbsp; &nbsp;&nbsp; <span style=\"color:blue\">this</span>.eventAggregator.GetEvent&lt;LogOutEvent().Subscribe(RemoveViews);<br><br>&nbsp;&nbsp; &nbsp;&nbsp; <span style=\"color:blue\">this</span>.regionManager = regionManager;<br><br>&nbsp;&nbsp; }<br><br><br>&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> AddViews(<span style=\"color:blue\">object</span> parameter)<br><br>&nbsp;&nbsp; {<br><br>&nbsp;&nbsp; &nbsp;&nbsp; <span style=\"color:blue\"></span><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">this</span>.regionManager.Regions[<span style=\"color:#a31515\">&quot;SomeRegion&quot;</span>].Add(container.Resolve&lt;SomeView&gt;(),<span style=\"color:#a31515\">&quot;SomeView&quot;</span>);\r\n</pre>\r\n</div>\r\n<br><br>&nbsp;&nbsp; }<br><br><br>&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> RemoveViews(<span style=\"color:blue\">object</span> parameter)<br><br>&nbsp;&nbsp; {<br>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>&nbsp;&nbsp; &nbsp;&nbsp; <span style=\"color:blue\">var</span> View = <span style=\"color:blue\">this</span>.regionManager.Regions[<span style=\"color:#a31515\">&quot;SomeRegion&quot;</span>].GetView(<span style=\"color:#a31515\">&quot;SomeView&quot;</span>)<span style=\"color:blue\"><br><br></span>&nbsp;&nbsp; &nbsp;&nbsp; <span style=\"color:blue\">this</span>.regionManager.Regions[<span style=\"color:#a31515\">&quot;SomeRegion&quot;</span>].Remove(View);<pre> }<br></pre>\r\n<br>}<br></pre>\r\n</div>\r\n</pre>\r\n</div>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2010-12-09T12:16:02.003-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "535152",
    "ThreadId": "212991",
    "Html": "\r\n<p>Thanks Guido for the example. It makes sense. I am basically trying to have Login/Logout functionality in my app. However, wanted to do this in modular way rather than having to use modal Login windows popup on app&nbsp;initialization (some other examples\r\n that I saw were illustrating this approach).</p>\r\n",
    "PostedDate": "2010-12-13T11:49:51.09-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]