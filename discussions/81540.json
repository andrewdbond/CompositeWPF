[
  {
    "Id": "279929",
    "ThreadId": "81540",
    "Html": "<p>Hello! During reviewing quickstarts on PRISM, to be more precisely StockTrader app,&nbsp; I'm faced the next problem: bootstrapper project with shell contains Application's resource dictionary, where all styles, including that ones that are used in other modules. Doing so leads that in design time designer couldn't display View, that use style from shell's module, while at run-time all works fine, as module loads to this root assembly with styles dictionary. Having centralized dictionary is convenient, but how to be in design time, how to see what you draw? Especially if UI is becoming complex.</p>",
    "PostedDate": "2010-01-21T00:48:17.837-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "279963",
    "ThreadId": "81540",
    "Html": "<p>This is less of a Composite WPF problem and more of a designer problem, as this affects any WPF application once multiple assemblies are involved.</p>\r\n<p>The approach I use for this is to split the styles and resources into a third assembly. So you might have:</p>\r\n<ul>\r\n<li>MyApp   \r\n<ul>\r\n<li>Bootstrapper</li>\r\n<li>App.xaml</li>\r\n</ul>\r\n</li>\r\n<li>MyApp.Assets   \r\n<ul>\r\n<li>ButtonStyles.xaml</li>\r\n<li>TextBoxStyles.xaml</li>\r\n</ul>\r\n</li>\r\n<li>MyApp.FooModule   \r\n<ul>\r\n<li>Views go here</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p>The other two assemblies would register MyApp.Assets.</p>\r\n<p>App.xaml would reference the resource dictionaries from the resources assembly:</p>\r\n<p>&lt;ResourceDictionary....<br>&nbsp; &lt;ResourceDictionary.MergedDictionaries&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp; &lt;ResourceDictionary Source=&quot;/MyApp.Assets;component/ButtonStyles.xaml&quot; /&gt;<br> &nbsp;&nbsp;&nbsp;&nbsp; &lt;ResourceDictionary Source=&quot;/MyApp.Assets;component/TextBoxStyles.xaml&quot; /&gt;</p>\r\n<p>This way, the resources are available at run time.</p>\r\n<p>At design time, in Expression Blend 3, this will just work. So long as your assemblies all reference the resources assembly, Blend will recognise the App.xaml file and import it, even though it lives in a different project. You can preview your views as expected, and even assign styles as defined in the external dictionaries.</p>\r\n<p>However, unfortunately it doesn't work in Visual Studio 2008 at design time. It does however work in VS 2010. <strong> </strong></p>\r\n<p>My usual recommendation would be to just use Visual Studio for the intellisense and XAML editing and use Blend for previewing and any design work - it's just a brilliant tool. Or wait for 2010.</p>\r\n<p>That said, if you really, really want designer support in VS 2008, you have two choices. The first and simplest is to import the resources for each view:</p>\r\n<p>&lt;UserControl ....&gt;<br>&nbsp;&nbsp;&nbsp; &lt;UserControl.Resources&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ResourceDictionary&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ResourceDictionary.MergedDictionaries&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ResourceDictionary Source=&quot;/MyApp.Assets;component/ButtonStyles.xaml&quot; /&gt;</p>\r\n<p>Aside from the duplication, the main problem with this is that it means each view re-loads the same set of resources. If your resource dictionaries include expensive resources like images, I've seen this balloon out to an application that uses 22mb every time you open a view. So it's best to avoid this.</p>\r\n<p>The second approach is to create a base class for all views, and load the resources manually:</p>\r\n<p>&nbsp;&nbsp;&nbsp; public class View : UserControl<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public View()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (DesignerProperties.GetIsInDesignMode(this))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resources.MergedDictionaries.Add(new ResourceDictionary() { Source = new Uri(&quot;/MyApp.Assets;component/All.xaml&quot;, UriKind.Relative)});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }</p>\r\n<p>This way at runtime the resources are only loaded once, and at design time they are available for your views.</p>\r\n<p>This gives you designer support for Blend 3 and Visual Studio 2008, but it does add some complexity.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-01-21T03:19:18.14-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]