[
  {
    "Id": "724926",
    "ThreadId": "286090",
    "Html": "\r\n<ul>\r\n<li><a href=\"http://blogs.msdn.com/b/kashiffl/archive/2010/10/05/integrating-prism-v4-region-navigation-with-silverlight-frame-navigation.aspx\">Integrating Prism v4 Region Navigation with Silverlight Frame Navigation</a>\r\n</li></ul>\r\n<p>I have followed through with Karl Shifflett's example and read all his replies on it. He doesn't have any examples of accessing modules loaded OnDemand. I think this is a great solution for navigation, especially for my team whom has used the silverlight\r\n navigation API but not the region API.</p>\r\n<p>What I need todo though is load in modules on demand, and as Karl has mentioned in his replies I should ask here for help.</p>\r\n<p>I'm working in Silverlight 4 with Prism 4 with MEF (SL5 on the release of Prism 4.1), all my modules are OnDemand and discovered through the ModuleCatalog.</p>\r\n<p>Ok so originally I was going to ask a question, but while typing out the question I realized where I was making a mistake in my MappingUri, so instead I'll share my solution for loading OnDemand that I've got currently, I'd love some feed back and possibly\r\n even a better way todo this. My current solution has some TODOs, one of which is display the load progress of a module and recall the navigate.</p>\r\n<p>So here is my Navigation:Frame within my ShellView.xaml&nbsp; (my Project's name is Shell btw)</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>&lt;navigation:Frame\r\n                x:Name=&quot;ContentFrame&quot;\r\n                Source=&quot;&quot;\r\n                Navigated=&quot;ContentFrame_Navigated&quot;\r\n                NavigationFailed=&quot;ContentFrame_NavigationFailed&quot;\r\n                prism:RegionManager.RegionName=&quot;MainContentRegion&quot;\r\n                &gt;\r\n                    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">navigation</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Frame.ContentLoader</span><span style=\"color:blue\">&gt;</span>\r\n                        &lt;prism_Regions:FrameContentLoader RegionName=&quot;MainContentRegion&quot;/&gt;\r\n                    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">navigation</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Frame.ContentLoader</span><span style=\"color:blue\">&gt;</span>\r\n\r\n                    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">navigation</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Frame.UriMapper</span><span style=\"color:blue\">&gt;</span>\r\n                        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">uriMapper</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">UriMapper</span><span style=\"color:blue\">&gt;</span>\r\n                            \r\n                            <span style=\"color:green\">&lt;!--Root View--&gt;</span>\r\n                            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">uriMapper</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">UriMapping</span> <span style=\"color:red\">Uri</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&quot; MappedUri=&quot;/Shell.Views.TestView</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n\r\n                            <span style=\"color:green\">&lt;!--Used to navigate to any Module's View--&gt;</span>\r\n                            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">uriMapper</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">UriMapping</span> <span style=\"color:red\">Uri</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/{moduleName}/{pageName}</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">MappedUri</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{}{moduleName}.Views.{pageName}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n\r\n                            <span style=\"color:green\">&lt;!--Used to navigate to a page in the Shell--&gt;</span>\r\n                            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">uriMapper</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">UriMapping</span> <span style=\"color:red\">Uri</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/{pageName}</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">MappedUri</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Shell.Views.{pageName}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n\r\n                        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">uriMapper</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">UriMapper</span><span style=\"color:blue\">&gt;</span>\r\n                    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">navigation</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Frame.UriMapper</span><span style=\"color:blue\">&gt;</span>\r\n                <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">navigation</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Frame</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>So I'm headed to a TestView on my Shell to begin which simply has a HyperlinkButton with it's NavigateUri=&quot;/AdminAccess/View1&quot;<br>\r\nThis is because currently I have to click the button twice, once to load and once to navigate.</p>\r\n<p>The gotcha that really took me awhile was the UriMapping, one I had this guy at the bottom so /{pageName} was being called instead of the one I wanted, the next issue was I had for the MappedUri.<span style=\"color:red\"> MappedUri</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/{moduleName}.Views.{pageName}</span><span style=\"color:black\">&quot;\r\n Now the issue with this is it'd set the Uri to a relative and do a Shell.{moduleName}.Views.{pageName} instead of {moduleName}</span><span style=\"color:black\">.Views.{pageName}, but I couldn't put a &quot;{moduleName} in because of the special use of {, but then\r\n I remembered you can just put {} and have it be happy.<br>\r\n</span></p>\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">uriMapper</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">UriMapping</span> <span style=\"color:red\">Uri</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/{moduleName}/{pageName}</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">MappedUri</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{}{moduleName}.Views.{pageName}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span><br><br></pre>\r\n<p>So now that I've got the right Uri being sent on click, I start figuring out how to load in the module. Its a little hacked together but works, thinking about it I should probably move it from a try{} catch{} to OnNavigationFailure() and do my logic there.</p>\r\n<p>&nbsp;</p>\r\n<p>(Karl's code) Under FrameContentLoader.cs BeginLoad(...), we'll crash on trying&nbsp; to LoadContent() into &quot;var view&quot; if the module hasn't been loaded yet. So I added a try{} catch{} to handle the exception and load in the module.</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> System.IAsyncResult BeginLoad(System.Uri targetUri, System.Uri currentUri, System.AsyncCallback userCallback, Object asyncState) \r\n        {    \r\n            EnsureRegionIsSet();\r\n\r\n            <span style=\"color:blue\">object</span> view = <span style=\"color:blue\">null</span>;\r\n            <span style=\"color:blue\">try</span>\r\n            {\r\n                view = <span style=\"color:blue\">this</span>._targetHandler.LoadContent(<span style=\"color:blue\">this</span>._region, <span style=\"color:blue\">new</span> NavigationContext(<span style=\"color:blue\">null</span>, targetUri));\r\n            }\r\n            <span style=\"color:blue\">catch</span> (InvalidOperationException e)\r\n            {\r\n                <span style=\"color:green\">//TODO: Create a check to see if the URI is bad. If the URI looks correct, assume the module needs to be loaded</span>\r\n\r\n\r\n                <span style=\"color:green\">//Check to see if Module has been loaded.</span>\r\n                <span style=\"color:blue\">var</span> moduleCatalog = ServiceLocator.Current.GetInstance&lt;IModuleCatalog&gt;();\r\n                <span style=\"color:blue\">string</span>[] uriWords = targetUri.ToString().Split(<span style=\"color:#a31515\">'.'</span>);\r\n                <span style=\"color:blue\">string</span> moduleType = uriWords[0]; <span style=\"color:green\">//This should == {moduleName} from the UriMapping</span>\r\n                <span style=\"color:green\">//TODO: Find a safer way to find the {moduleName} instead of assuming its array[0].</span>\r\n                <span style=\"color:blue\">foreach</span> (ModuleInfo mi <span style=\"color:blue\">in</span> moduleCatalog.Modules)\r\n                {\r\n                    <span style=\"color:blue\">string</span> type = mi.ModuleType;\r\n                    <span style=\"color:blue\">string</span>[] typeWords = type.Split(<span style=\"color:#a31515\">','</span>);\r\n\r\n                    <span style=\"color:blue\">if</span> (typeWords[1].Trim().CompareTo(moduleType) == 0)\r\n                    {\r\n                        <span style=\"color:green\">//We found the Module, so grab the moduleManager and tell it to load it.</span>\r\n                        <span style=\"color:blue\">var</span> moduleManager = ServiceLocator.Current.GetInstance&lt;IModuleManager&gt;();\r\n                        moduleManager.LoadModule(typeWords[0]);\r\n\r\n                        <span style=\"color:green\">//TODO: Create a notification to tell the user we're loading their module, Maybe redirect to a loading page?</span>\r\n                        <span style=\"color:green\">//TODO: Create a callback to recall Navigation on LoadComplete</span>\r\n\r\n                        <span style=\"color:blue\">break</span>;\r\n                    }\r\n                }\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">null</span>;\r\n            }\r\n\r\n            <span style=\"color:blue\">var</span> effectiveView = GetFrameContent(view, <span style=\"color:blue\">this</span>._region);\r\n\r\n            <span style=\"color:blue\">var</span> result = <span style=\"color:blue\">new</span> LoadAsyncResult { FrameContent = effectiveView, ActualView = view, AsyncState = asyncState };\r\n\r\n            <span style=\"color:blue\">if</span>(userCallback != <span style=\"color:blue\">null</span>) {\r\n                userCallback(result);\r\n            }\r\n\r\n            <span style=\"color:blue\">return</span> result;\r\n        }\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>so this will have my Module load (its small so almost instant) and if I click the hyperlink button again it'll navigate my region frame to the view I want.</p>\r\n<p>&nbsp;</p>\r\n<p>Any one have a better solution? Any suggestions for this one?</p>\r\n",
    "PostedDate": "2012-01-13T11:27:43.953-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "725868",
    "ThreadId": "286090",
    "Html": "<p>Hi,</p>\n<p>Thanks for sharing your findings with the rest of the community, as it might be useful for other users pursuing this scenario.</p>\n<p>Also for those interested, I believe you might find these threads interesting, where related concerns are discussed:</p>\n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/241134\">Integrating Prism v4 Region Navigation with Silverlight Frame Navigation with Dynamic Module</a> </li>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/257202\">Prismv4FrameRegionNavigation Issue</a> </li>\n</ul>\n<p>Thanks,</p>\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a>﻿</p>",
    "PostedDate": "2012-01-16T09:45:30.223-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "726505",
    "ThreadId": "286090",
    "Html": "<p>Thank you very much! gan_s solution in the 2nd link helped me, I was having issues with registering the callback event, forgot I could simply GetInstance for the IRegionManager and then .RequestNavigate().</p>\r\n<p>Here's my solution for any one else for what I have right now. It runs based off exceptions for now, I could inline this with the navigation api and always check to see if the module has been loaded and I might have to if I can't figure out how to get the navigation request's target region. For now I actually don't mind the exception handling taking care of this for the simple fact that I didn't have to edit the libary code, just add business logic. This also makes it very easy to share.</p>\r\n<p>This should go into your ShellView.xaml (or what ever you happen to call your root view) and within the &lt;navigation:Frame&gt; tag you'll need<br />NavigationFailed=\"ContentFrame_NavigationFailed\"<br />to link up the event.</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span><span style=\"color: green;\"> Handles the NavigationFailed event of the ContentFrame control.</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"sender\"&gt;</span><span style=\"color: green;\">The source of the event.&lt;/param&gt;</span>\r\n        <span style=\"color: gray;\">///</span> <span style=\"color: gray;\">&lt;param name=\"e\"&gt;</span><span style=\"color: green;\">The &lt;see cref=\"System.Windows.Navigation.NavigationFailedEventArgs\"/&gt; instance containing the event data.&lt;/param&gt;</span>\r\n        <span style=\"color: blue;\">void</span> ContentFrame_NavigationFailed(Object sender, System.Windows.Navigation.NavigationFailedEventArgs e)\r\n        {\r\n            e.Handled = <span style=\"color: blue;\">true</span>;\r\n            \r\n            Uri uri = e.Uri; <span style=\"color: green;\">//NOTE: This is the actual RequestNavigate's URI</span>\r\n            <span style=\"color: blue;\">string</span>[] uriWords = uri.ToString().Split(<span style=\"color: #a31515;\">'/'</span>);\r\n\r\n            \r\n            <span style=\"color: blue;\">if</span> (uriWords.Length &gt;= 3) <span style=\"color: green;\">// assuming \"\", \"{moduleName}\", \"{pageName}\", ....</span>\r\n            {\r\n                <span style=\"color: green;\">//Assume a module needs to be loaded</span>\r\n                <span style=\"color: green;\">//TODO: Find a safer way to find the {moduleName} instead of assuming its array[1].</span>\r\n                <span style=\"color: blue;\">string</span> moduleType = uriWords[1]; <span style=\"color: green;\">//This should == {moduleName} from the UriMapping.Uri</span>\r\n                \r\n                <span style=\"color: green;\">//Attempt to find and load the {moduleName}.</span>\r\n                <span style=\"color: blue;\">var</span> moduleCatalog = ServiceLocator.Current.GetInstance&lt;IModuleCatalog&gt;();\r\n                <span style=\"color: blue;\">var</span> notStartedModules = moduleCatalog.Modules.Where(mi =&gt; mi.State == ModuleState.NotStarted);\r\n                <span style=\"color: blue;\">foreach</span> (ModuleInfo mi <span style=\"color: blue;\">in</span> notStartedModules)\r\n                {\r\n                    <span style=\"color: blue;\">string</span> type = mi.ModuleType;\r\n                    <span style=\"color: blue;\">string</span>[] typeWords = type.Split(<span style=\"color: #a31515;\">','</span>);\r\n\r\n                    <span style=\"color: blue;\">if</span> (typeWords[1].Trim().CompareTo(moduleType) == 0)\r\n                    {\r\n                        <span style=\"color: green;\">//We found the Module, so grab the PrismManagers and tell the Module to load.</span>\r\n                        <span style=\"color: blue;\">var</span> moduleManager = ServiceLocator.Current.GetInstance&lt;IModuleManager&gt;();\r\n                        <span style=\"color: blue;\">var</span> regionManager = ServiceLocator.Current.GetInstance&lt;IRegionManager&gt;();\r\n                        \r\n                        <span style=\"color: green;\">//TODO: Get a way to find the failed navigation's Region target</span>\r\n                        moduleManager.LoadModuleCompleted += (r, s) =&gt; regionManager.RequestNavigate(KnownRegions.MainContentRegion, uri);\r\n                        moduleManager.LoadModule(typeWords[0]);\r\n\r\n                        <span style=\"color: green;\">//MessageBox.Show(\"Page is loading\");//TODO: Create a way to tell the user we're loading the module.</span>\r\n                        <span style=\"color: blue;\">return</span>;\r\n                    }\r\n                }                    \r\n            }\r\n\r\n            MessageBox.Show(<span style=\"color: #a31515;\">\"Uri fail: \"</span> + e.Uri);\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Now when I try and navigate to a page on a module that is not loaded, it'll fail, load my module and then try and navigate again. For my case this works since we'll only have one RegionFrame (no nested ones), but I hate magic strings so I hope to fix the Region Target and figuring out how to grab the {moduleName}. Maybe if I dig into the actual Navigation API's code I can find a good place to let this sit. Any suggestions on how to get this done would be great!<br /><br />Also note my solution is much like jandersen78's in the 2nd link in the above post. Only problem I have with his is I don't see that working for deep-linking the URL. (If I bookmark a page or type the URL in)</p>",
    "PostedDate": "2012-01-17T09:10:13.137-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "726664",
    "ThreadId": "286090",
    "Html": "<p>Interesting error I'm getting, if I go to one of my deep links within a module (Module named AdminAccess, page named DashBoard) <br />So http://localhost:50932/#/AdminAccess/View1<br /><br />If I hit the refresh button it'll work correctly half of the time; other times it'll pop up with \"Uri fail: \" [uri] msg. It'll be there loaded and everything, just seems like its calling the navigation to many times.</p>",
    "PostedDate": "2012-01-17T12:58:55.78-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "727233",
    "ThreadId": "286090",
    "Html": "<p>Hi,</p>\r\n<p>So far, we couldn&rsquo;t find the cause of the error you mentioned, therefore it would be helpful if you could provide us with a repro sample application that portrays this scenario, so that we can help you further with this.</p>\r\n<p>Thanks,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a>﻿</p>",
    "PostedDate": "2012-01-18T12:37:44.88-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "729324",
    "ThreadId": "286090",
    "Html": "<p>Actually I think I might have figured it out. First a question, with the ModuleManager's LoadModuleCompleted event, that fires on ANY module loaded right? Because in debug mode I noticed what was happening was<br /><br />Pseudo code<br />[Refresh]<br />Navigate to AdminAccess/View1<br />[Fail]<br />ModuleManager has 2 .xaps, my LoginModule.xap (State: LoadingTypes) &amp; AdminAccess.xap (State: NotStarted)<br />[ExceptionCatch]<br />Start Loading AdminAccess<br />On Load Complete RequestNavigate()<br /><br />[LoginModule Finishs loading]<br />Navigation Called<br />[Fail]<br />ModuleManager has 2 .xaps, my LoginModule.xap (State: Initialized) &amp; AdminAccess.xap (State: LoadingTypes)<br />[ExceptionCatch]<br />My logic says \"No modules to load, so must be bad URI\" messagebox.show(Uri error)<br /><br />ModuleManager load complete event still set, so on adminaccess.xap finish it recalls navigation a 3rd time, finds the right view to show and then displays correctly.<br /><br />So I think I just need a way to register which module has completed loading and if x module is done loading then fire my event. I know you could use a sample application to help me and if it comes to that I'll set  one up tonight, but I'm pretty sure I figured out the main issue.<br /><br />I'm I setting something up wrong with this?<br />\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>moduleManager.LoadModuleCompleted += (r, s) =&gt; regionManager.RequestNavigate(KnownRegions.MainContentRegion, uri);\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2012-01-23T07:39:29.533-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "729340",
    "ThreadId": "286090",
    "Html": "<p>Yep that was the issue, other modules finishing load would call the navigation before it should have been. Just gotta create some more business logic and should be set.<br />Thank you for the support ^^</p>",
    "PostedDate": "2012-01-23T08:04:55.977-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "837781",
    "ThreadId": "286090",
    "Html": "<p><strong>Here's my solution... (it just works)</strong></p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> FrameContentLoader : DependencyObject, INavigationContentLoader\r\n    {\r\n        <span style=\"color: blue;\">private</span> IRegion _region;\r\n        <span style=\"color: blue;\">private</span> IRegionNavigationContentLoader _targetHandler;\r\n\r\n        <span style=\"color: blue;\">public</span> String RegionName\r\n        {\r\n            <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> (String)GetValue(RegionNameProperty); }\r\n            <span style=\"color: blue;\">set</span> { SetValue(RegionNameProperty, value); }\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">readonly</span> DependencyProperty RegionNameProperty =\r\n            DependencyProperty.Register(<span style=\"color: #a31515;\">\"RegionName\"</span>, <span style=\"color: blue;\">typeof</span>(String), <span style=\"color: blue;\">typeof</span>(FrameContentLoader), <span style=\"color: blue;\">null</span>);\r\n\r\n        <span style=\"color: blue;\">public</span> Boolean CanLoad(Uri targetUri, Uri currentUri)\r\n        {\r\n            <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">true</span>;\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> CancelLoad(System.IAsyncResult asyncResult)\r\n        {\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> System.IAsyncResult BeginLoad(Uri targetUri, Uri currentUri, AsyncCallback userCallback, Object asyncState)\r\n        {\r\n            EnsureRegionIsSet();\r\n\r\n            <span style=\"color: blue;\">object</span> view = <span style=\"color: blue;\">null</span>;\r\n            <span style=\"color: blue;\">if</span> (!TryLoadContent(<span style=\"color: blue;\">this</span>._region, targetUri, <span style=\"color: blue;\">out</span> view))\r\n            {\r\n                <span style=\"color: blue;\">var</span> moduleCatalog = ServiceLocator.Current.GetInstance&lt;IModuleCatalog&gt;();\r\n                <span style=\"color: blue;\">string</span>[] uriWords = targetUri.ToString().Split(<span style=\"color: #a31515;\">'.'</span>);\r\n\r\n                ModuleInfo mi = moduleCatalog.Modules.First(m =&gt; uriWords.Contains(m.ModuleName));\r\n\r\n                <span style=\"color: blue;\">if</span> (mi != <span style=\"color: blue;\">null</span>)\r\n                {\r\n                    Func&lt;Uri&gt; findView = () =&gt;\r\n                    {\r\n                        <span style=\"color: blue;\">string</span> viewName = uriWords[uriWords.Length - 1];\r\n                        Type viewType = Type.GetType(mi.ModuleType).Assembly.GetTypes().First(t =&gt;\r\n                            (t.Name == viewName) &amp;&amp; <span style=\"color: blue;\">typeof</span>(UIElement).IsAssignableFrom(t.BaseType));\r\n\r\n                        Uri uri = <span style=\"color: blue;\">new</span> Uri(String.Join(<span style=\"color: #a31515;\">\".\"</span>, viewType.Namespace, viewType.Name), UriKind.Relative);\r\n                        <span style=\"color: blue;\">return</span> (viewType != <span style=\"color: blue;\">null</span> &amp;&amp; TryLoadContent(<span style=\"color: blue;\">this</span>._region, uri, <span style=\"color: blue;\">out</span> view)) ? uri : <span style=\"color: blue;\">null</span>;\r\n                    };\r\n                    <span style=\"color: blue;\">if</span> (mi.State == ModuleState.Initialized)\r\n                    {\r\n                        targetUri = findView() ?? targetUri;\r\n                    }\r\n                    <span style=\"color: blue;\">else</span>\r\n                    {\r\n                        <span style=\"color: green;\">//We found the Module, so grab the moduleManager and tell it to load it.</span>\r\n                        <span style=\"color: blue;\">var</span> moduleManager = ServiceLocator.Current.GetInstance&lt;IModuleManager&gt;();\r\n                        <span style=\"color: blue;\">var</span> asyncResult = <span style=\"color: blue;\">new</span> LoadAsyncResult(userCallback, asyncState, <span style=\"color: blue;\">false</span>);\r\n                        moduleManager.LoadModuleCompleted += (s, e) =&gt;\r\n                            {\r\n                                <span style=\"color: blue;\">if</span> (e.Error == <span style=\"color: blue;\">null</span>)\r\n                                {\r\n                                    <span style=\"color: blue;\">if</span> (!TryLoadContent(<span style=\"color: blue;\">this</span>._region, targetUri, <span style=\"color: blue;\">out</span> view))\r\n                                        targetUri = findView() ?? targetUri;\r\n                                }\r\n                                asyncResult.Complete(GetFrameContent(view, <span style=\"color: blue;\">this</span>._region), view, <span style=\"color: blue;\">false</span>);\r\n                            };\r\n                        moduleManager.LoadModule(mi.ModuleName);\r\n                        <span style=\"color: blue;\">return</span> asyncResult;\r\n                    }\r\n                }\r\n            }\r\n            <span style=\"color: blue;\">var</span> result = <span style=\"color: blue;\">new</span> LoadAsyncResult(userCallback, asyncState, <span style=\"color: blue;\">true</span>);\r\n            result.Complete(GetFrameContent(view, <span style=\"color: blue;\">this</span>._region), view, <span style=\"color: blue;\">true</span>);\r\n            <span style=\"color: blue;\">return</span> result;\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> LoadResult EndLoad(IAsyncResult asyncResult)\r\n        {\r\n            <span style=\"color: blue;\">var</span> loadAsyncResult = asyncResult <span style=\"color: blue;\">as</span> LoadAsyncResult;\r\n            <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">new</span> LoadResult(loadAsyncResult.FrameContent);\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> EnsureRegionIsSet()\r\n        {\r\n            <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>._region == <span style=\"color: blue;\">null</span>)\r\n            {\r\n                <span style=\"color: blue;\">this</span>._region = ServiceLocator.Current.GetInstance&lt;IRegionManager&gt;().Regions[<span style=\"color: blue;\">this</span>.RegionName];\r\n                <span style=\"color: blue;\">this</span>._targetHandler = ServiceLocator.Current.GetInstance&lt;IRegionNavigationContentLoader&gt;();\r\n            }\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">bool</span> TryLoadContent(IRegion region, Uri targetUri, <span style=\"color: blue;\">out</span> <span style=\"color: blue;\">object</span> view)\r\n        {\r\n            <span style=\"color: blue;\">try</span>\r\n            {\r\n                view = <span style=\"color: blue;\">this</span>._targetHandler.LoadContent(region, <span style=\"color: blue;\">new</span> NavigationContext(<span style=\"color: blue;\">null</span>, targetUri));\r\n                <span style=\"color: blue;\">return</span> (view != <span style=\"color: blue;\">null</span> &amp;&amp; <span style=\"color: blue;\">typeof</span>(UIElement).IsAssignableFrom(view.GetType().BaseType));\r\n            }\r\n            <span style=\"color: blue;\">catch</span> (InvalidOperationException) { view = <span style=\"color: blue;\">null</span>; <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">false</span>; }\r\n        }\r\n\r\n        <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">static</span> DependencyObject GetFrameContent(Object view, IRegion region)\r\n        {\r\n            <span style=\"color: blue;\">var</span> frameworkElement = view <span style=\"color: blue;\">as</span> FrameworkElement;\r\n            <span style=\"color: blue;\">var</span> content = frameworkElement ?? <span style=\"color: blue;\">new</span> ContentControl\r\n            {\r\n                Content = view,\r\n                HorizontalAlignment = HorizontalAlignment.Stretch,\r\n                VerticalContentAlignment = VerticalAlignment.Stretch\r\n            };\r\n            <span style=\"color: blue;\">if</span> (content <span style=\"color: blue;\">is</span> Page)\r\n            {\r\n                <span style=\"color: blue;\">return</span> content;\r\n            }\r\n            <span style=\"color: blue;\">return</span> content.Parent ?? <span style=\"color: blue;\">new</span> FrameNavigationWrapperPage\r\n            {\r\n                Content = content,\r\n                FrameRegionNavigationService = region.NavigationService <span style=\"color: blue;\">as</span> FrameRegionNavigationService\r\n            };\r\n        }\r\n\r\n        <span style=\"color: blue;\">class</span> LoadAsyncResult : IAsyncResult\r\n        {\r\n            <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">readonly</span> AsyncCallback callback;\r\n            <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">readonly</span> <span style=\"color: blue;\">object</span> syncRoot;\r\n            <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">readonly</span> WaitHandle waitHandle;\r\n            <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">bool</span> completed;\r\n\r\n            <span style=\"color: blue;\">internal</span> LoadAsyncResult(AsyncCallback cb, <span style=\"color: blue;\">object</span> state, <span style=\"color: blue;\">bool</span> completed)\r\n            {\r\n                <span style=\"color: blue;\">this</span>.callback = cb;\r\n                <span style=\"color: blue;\">this</span>.completed = completed;\r\n                <span style=\"color: blue;\">this</span>.AsyncState = state;\r\n                <span style=\"color: blue;\">this</span>.CompletedSynchronously = completed;\r\n                <span style=\"color: blue;\">this</span>.waitHandle = <span style=\"color: blue;\">new</span> ManualResetEvent(completed);\r\n                <span style=\"color: blue;\">this</span>.syncRoot = <span style=\"color: blue;\">new</span> <span style=\"color: blue;\">object</span>();\r\n            }\r\n\r\n            <span style=\"color: blue;\">public</span> Object AsyncState { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">set</span>; }\r\n            <span style=\"color: blue;\">public</span> Object FrameContent { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">set</span>; }\r\n            <span style=\"color: blue;\">public</span> Object ActualView { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">set</span>; }\r\n\r\n            <span style=\"color: blue;\">public</span> WaitHandle AsyncWaitHandle\r\n            {\r\n                <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> waitHandle; }\r\n            }\r\n\r\n            <span style=\"color: blue;\">public</span> Boolean CompletedSynchronously { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">set</span>; }\r\n\r\n            <span style=\"color: blue;\">public</span> Boolean IsCompleted\r\n            {\r\n                <span style=\"color: blue;\">get</span>\r\n                {\r\n                    <span style=\"color: blue;\">lock</span> (<span style=\"color: blue;\">this</span>.syncRoot)\r\n                        <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">this</span>.completed;\r\n                }\r\n            }\r\n\r\n            <span style=\"color: blue;\">internal</span> <span style=\"color: blue;\">void</span> Complete(<span style=\"color: blue;\">object</span> frameContent, <span style=\"color: blue;\">object</span> view, <span style=\"color: blue;\">bool</span> completedSynchronously)\r\n            {\r\n                <span style=\"color: blue;\">lock</span> (<span style=\"color: blue;\">this</span>.syncRoot)\r\n                {\r\n                    <span style=\"color: blue;\">this</span>.FrameContent = frameContent;\r\n                    <span style=\"color: blue;\">this</span>.ActualView = view;\r\n                    <span style=\"color: blue;\">this</span>.completed = <span style=\"color: blue;\">true</span>;\r\n                }\r\n                SignalCompletion();\r\n            }\r\n\r\n            <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> SignalCompletion()\r\n            {\r\n                ((ManualResetEvent)<span style=\"color: blue;\">this</span>.waitHandle).Set();\r\n                <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.callback != <span style=\"color: blue;\">null</span>) { <span style=\"color: blue;\">this</span>.callback(<span style=\"color: blue;\">this</span>); }\r\n            }\r\n        }\r\n    }\r\n</pre>\r\n</div>",
    "PostedDate": "2012-05-17T10:13:39.557-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]