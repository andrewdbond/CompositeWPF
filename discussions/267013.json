[
  {
    "Id": "649340",
    "ThreadId": "267013",
    "Html": "\r\n<p>Hi, I'm trying to learn modularity, but I'm a bit stuck.</p>\r\n<p>When modules are loaded I register services and views with the Unity container like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()\r\n        {\r\n            <span style=\"color:blue\">this</span>.container.RegisterType&lt;IPeopleRepository, PeopleRepository&gt;();\r\n            <span style=\"color:blue\">this</span>.container.RegisterType&lt;<span style=\"color:blue\">object</span>, PersonSummaryUserControl&gt;(<span style=\"color:#a31515\">&quot;PersonSummaryUserControl&quot;</span>);\r\n        }\r\n\r\n</pre>\r\n</div>\r\n<p>With that I was hoping to be able to resolve the view from any place in the application without having hard references, like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">this</span>.regionManager.RegisterViewWithRegion(RegionNames.DetailsRegion, <span style=\"color:blue\">this</span>.container.Resolve&lt;PersonSummaryUserControl&gt;());\r\n</pre>\r\n</div>\r\n<p>But this doesn't work. Why not?</p>\r\n<p>With hard references I can do stuff like:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>            <span style=\"color:blue\">var</span> view = <span style=\"color:blue\">this</span>.container.Resolve&lt;PersonSummaryUserControl&gt;();\r\n<span style=\"color:green\">\t   // or</span>\r\n            <span style=\"color:blue\">this</span>.regionManager.RegisterViewWithRegion(RegionNames.DetailsRegion, <span style=\"color:blue\">typeof</span>(PersonSummaryUserControl));\r\n\r\nbut, I'd like to remove the references. What should I do?</pre>\r\n<pre>TIA</pre>\r\n<pre>Dennis</pre>\r\n</div>\r\n",
    "PostedDate": "2011-07-28T20:37:22.43-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "649698",
    "ThreadId": "267013",
    "Html": "<p>Hi,<br /><br />Based on my understanding, as you are registering the view using a named type mapping, in order to resolve it you have to provide that name in the <strong>Resolve </strong>method like this:<br /><br />\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">this</span>.container.Resolve&lt;<span style=\"color: blue;\">object</span>&gt;(<span style=\"color: #a31515;\">\"PersonSummaryUserControl\"</span>)\r\n<br /></pre>\r\n</div>\r\nAdditionally, the <strong>RegisterViewWithRegion </strong>method does not provide an overload which accepts an object of your view&rsquo;s type; it provides one that accepts a type, and another one that accepts a lambda expression. So the line: <br /><br />\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">this</span>.regionManager.RegisterViewWithRegion(RegionNames.DetailsRegion, <span style=\"color: blue;\">this</span>.container.Resolve&lt;PersonSummaryUserControl&gt;());\r\n</pre>\r\n</div>\r\n<br />doesn&rsquo;t use any of the <strong>RegisterViewWithRegion </strong>overloads defined by Prism.<br /><br />On the other hand, note that this is not the usual approach to register a view. Usually the method <strong>RegisterViewWithRegion </strong>is called inside the module where the view is defined, so that when a region is created with that region name (regardless of where the region is created) a view of the registered type will be injected into that region. <br /><br />This is what you are doing when using this code line:<br /><br />\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">this</span>.regionManager.RegisterViewWithRegion(RegionNames.DetailsRegion, <span style=\"color: blue;\">typeof</span>(PersonSummaryUserControl));\r\n</pre>\r\n</div>\r\n</p>\r\n<p><br />If this code line is inside the module where the view is defined then it is not a hard reference as the view doesn&rsquo;t need to be referenced outside its module in order to be shown in the region specified.<br /><br />This is possible because one of the benefits of the UI Composition mechanisms provided by Prism is that you can access regions and add views to them outside the component that defined them. You might find more information about this in the <a href=\"http://msdn.microsoft.com/en-us/library/ff921098%28PandP.40%29.aspx\">UI Composition</a> chapter from the Prism MSDN documentation.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-07-29T11:46:09.343-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "649727",
    "ThreadId": "267013",
    "Html": "<p>Let me see if I can clarify my problem.</p>\r\n<p>I have a PeopleModule with list and details views. I would like to add more details to this module so I added a PersonSummaryView (like in the PRISM UIComposition QuickStart) with a tabcontrol where I want to insert details views for Person, Addresses, Contacts etc. The UIComposition QuickStart puts all of these views (EmployeeDetails and Projects) in the same module. That's not a good idea since I will also have a CompanyModule which will use the same details views only filtered by Company.</p>\r\n<p>What I'm currently trying to do is to set up the PersonModule so that when the PeopleListView is called (from a MenuModule set up with Commands)&nbsp;it inserts the PersonSummaryView into the Shell's DetailsRegion. The PersonSummaryView will then resolve the needed details views (located in other modules) and insert them into its own TabControl regions.</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">this</span>.regionManager.RegisterViewWithRegion(RegionNamesPeopleSummary.AddressesRegion, <span style=\"color: blue;\">typeof</span>(AddressesListUserControl));\r\n<span style=\"color: blue;\">this</span>.regionManager.RegisterViewWithRegion(RegionNamesPeopleSummary.ContactsRegion, <span style=\"color: blue;\">typeof</span>(ContactsListUserControl));\r\n<span style=\"color: green;\">//Etc</span>\r\n</pre>\r\n<pre>The problem here is that to do this I need project references from PeopleModule to all other Modules (and vice versa), not exactly loose coupling. </pre>\r\n<pre>I thought that by registering any UserControls existing in each Module at start-up I would be able to resolve an instance of those UserControls from anywhere as long as I have a reference to the Unity container.</pre>\r\n<pre>Am I completely wrong?</pre>\r\n<pre>TIA</pre>\r\n<pre>Dennis</pre>\r\n</div>",
    "PostedDate": "2011-07-29T12:28:40.29-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "650551",
    "ThreadId": "267013",
    "Html": "<p>Hi Dennis,</p>\r\n<p>The <strong>RegisterViewWithRegion</strong> method does not register the view into the container; its function is to register a view to a region, so that when that region is created and added to the visual tree, a view of the type specified is automatically added to it. The <strong>RegisterViewWithRegion </strong>method is the core of the View Discovery approach, which is described in the <a href=\"http://msdn.microsoft.com/en-us/library/ff921098%28PandP.40%29.aspx\">UI Composition</a> Chapter in the Prism MSDN documentation.</p>\r\n<p>Alternatively, in order to register something in the Unity Container, you have to call the <strong>RegisterType</strong> or <strong>RegisterInstance</strong> methods, which will result in your component (in this case, your view) being available throughout your whole application. However, as I've mentioned in my previous answer, the Prism UI Composition mechanisms allow you to add views to a region without from within another component that might not be the one that defined the region. Therefore, you don't need to make such references to call the <strong>RegisterViewWithRegion</strong> method to tie a view to a region; you only need to know the name of that region (which is just a string, which acts as a contract name, allowing you to avoid tight coupling between your components).</p>\r\n<p>Finally, you should take into account that, while the View Discovery approach (portrayed by the <strong>RegisterViewWithRegion </strong>method) is useful to define more static layout schemes for your views, in your particular case you might benefit more from the View Injection (also explained in the UI Composition chapter) or Region Navigation (explained in the <a href=\"http://msdn.microsoft.com/en-us/library/gg430861%28PandP.40%29.aspx\">Navigation</a> chapter of the aforementioned documentation) approaches. This is because the View Injection approach allows you to have explicit programmatic control of how views are added to regions; therefore, you could decide to add or remove views from a certain region based on a specific action, such as clicking a button. Region Navigation provides additional mechanisms that facilitate a navigation scenario like the one you've described.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-08-01T07:34:14.107-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]