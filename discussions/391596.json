[
  {
    "Id": "899294",
    "ThreadId": "391596",
    "Html": "\r\n<p>Hello,</p>\r\n<p>&nbsp;</p>\r\n<p>I've just started playing with Prism and love it.. very easy to pick up...</p>\r\n<p>&nbsp;</p>\r\n<p>In looking at the StockTrader RI demo though, I am not to sure what the difference is between the regular [export] MEF attribute and the custom&nbsp;[ViewExport(RegionName = &nbsp;RegionNames.ResearchRegion)] attribute used in the demo...</p>\r\n<p>&nbsp;</p>\r\n<p>Also the method&nbsp;AutoPopulateExportedViewsBehavior()... what is this doing that is different from how views are injected into a region normally?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks</p>\r\n<p>Harold</p>\r\n",
    "PostedDate": "2012-08-14T13:20:01.023-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "899534",
    "ThreadId": "391596",
    "Html": "\r\n<p>Hi Harold,</p>\r\n<p>Based on my understanding, the main difference is that using a <strong>Custom Export Attribute</strong> allows associating information with your exports, which can be used by your imports to constraint the export that can satisfy them. This way, the\r\n<strong>AutoPopulateExportedViewsBehavior </strong>discovers the views in the container exported with this custom attribute and automatically populates them into the associated region.</p>\r\n<p>You could find more detailed information about the use of <strong>MEF Custom Export Attributes</strong> in the following resource:</p>\r\n<ul>\r\n<li><a href=\"http://mef.codeplex.com/wikipage?title=Guide&referringTitle=Home\">MEF Programming Guide</a>\r\n</li></ul>\r\n<p>Also, you will find that this approach is similar to the one used by the view discovery approach&nbsp;<strong></strong>which uses the\r\n<strong>AutoPopulateRegionBehavior </strong>to populate the regions with its associated views, although this approach register views in code instead of using declarative attributes.</p>\r\n<p>For more information about this, and the different approaches provided by <strong>\r\nPrism </strong>to compose your <strong>UI</strong>, you could check the following chapter of the\r\n<strong>Prism</strong> documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921098%28v=pandp.40%29\">Chapter 7: Composing the User Interface</a>\r\n</li></ul>\r\n<p>I hope you find this helpful,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-08-15T07:27:53.987-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "902282",
    "ThreadId": "391596",
    "Html": "<p>Hi Agustin,</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks very much for the info! helpful!</p>\r\n<p>&nbsp;</p>\r\n<p>harold</p>",
    "PostedDate": "2012-08-21T19:43:22.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]