[
  {
    "Id": "125952",
    "ThreadId": "37979",
    "Html": "<p><strong>Problem:<br>\r\n</strong>My application has a shell with documents similar to Visual Studio. Each document consists from views. Views within the document communicate with each other through events, e.g. selection change. Views from different documents are isolated and do not see events from other documents. There are also a shell level global events that are to be visible to all the views in all the documents, e.g. options change.</p>\r\n<p><strong>Solution 1. EventAggregator.</strong><br>\r\nThere is a global EventAggregator that contains global events. Each document creates its own local EventAggregator to contain domestic events. All views have to know about 2 EventAggregators and work with them appropriately:</p>\r\n<p>localEventAggregator&lt;SelectionEvent&gt;.Subscribe(...);<br>\r\nglobalEventAggregator&lt;OptionsEvent&gt;.Subscribe(...);</p>\r\n<p>Obviously, this solution does not scale good enough. What if the application has 3 levels of composition? What if 4? </p>\r\n<p><strong>Solution 2. No EventAggregator.<br>\r\n</strong>There is a global UnityContainer for the shell that contains events among the other stuff. Each document creates its own UnityContainer to contain domestic events. All views receive their events through injection as needed:</p>\r\n<p>// shell <br>\r\nthis.container.RegisterType&lt;OptionsEvent&gt;(ContainerControlledLifetime());<br>\r\n// document<br>\r\nthis.container.RegisterType&lt;SelectionEvent&gt;(ContainerControlledLifetime());<br>\r\n// view ctor<br>\r\npublic MyView(OptionsEvent optionsEvent, SelectionEvent selectionEvent...)<br>\r\n{<br>\r\n&nbsp;optionsEvent.Subscribe(...);<br>\r\n&nbsp;selectionEvent.Subsribe(...);<br>\r\n}</p>\r\n<p>This solution scales without pain. Events hierarchy or scope is managed in a unified way with the other entities. Views know nothing about outer world structure. I can redesigne my shell or re-use my views in any other shell application.<br>\r\n<br>\r\n<strong>Conclusion:</strong><br>\r\nFrom the above I'm making a conclusion that EventAggregator is actually a lame UnityContainer with custom name. <br>\r\nPlease point me where I'm wrong.</p>\r\n<p>Thanks,<br>\r\nAndrey.</p>\r\n<p><span style=\"font-weight:bold\"></span>&nbsp;</p>\r\n",
    "PostedDate": "2008-10-17T18:52:21.72-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126522",
    "ThreadId": "37979",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Hi, Andrey</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">The <b>EventAggregator</b> provides you a service for publishing and subscribing to events without the need of instantiating and registering events. It is primarily a container for events (it keeps a collection of the events in the system), but relieves the publisher or subscriber from needing to determine whether the event is available. Moreover, it is responsible for locating or building events (the EventAggregator will construct the event on its first access if it has not already been constructed). So, the event will be built upon subscription or publication, allowing the publisher to fire the event without knowing if the event has been created or if there are any subscribers attached, and allowing the subscriber to attach a handler to the event without knowing if the event has already been created.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Regarding the described problem, if the views contained in a document need to get the events that only its parent document publishes, you may provide a filter to generate that scope. For example:</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">myEventAggregator.GetEvent&lt;<span style=\"color:#4bacc6\">SomeEvent</span>&gt;().Subscribe(OnSomeEvent, <span style=\"color:#4bacc6\">ThreadOption</span>.PublisherThread, <span style=\"color:#0000ff\">true</span>, somePayload =&gt; IsInContext(somePayload));</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d\"><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:#0000ff;font-family:'Courier New'\">bool </span><span style=\"font-size:10pt;font-family:'Courier New'\">IsInContext(<span style=\"color:#4bacc6\">SomePayload</span> something)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:#00b050;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; //TODO: Add the logic to determinate if the event should be executed in the current context (e.g.: if the View is in the document).</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d\"><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:#0000ff;font-family:'Courier New'\">void</span><span style=\"font-size:10pt;font-family:'Courier New'\"> OnSomeEvent(<span style=\"color:#4bacc6\">SomePayload</span> something) </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">{ </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-size:10pt;color:#00b050;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp;&nbsp; //TODO: Add the logic to handle the event.</span> </p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\"><br>\r\n<p>&nbsp;</p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">In addition, the team considered that kind of scoping you are mentioning, but, as it was not a main scenario (regarding usersâ€™ feedback), it was not implemented to keep simplicity.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\">&nbsp;</p>\r\n</span>\r\n<p style=\"margin:0cm 0cm 0pt\">&nbsp;</p>\r\n</span>\r\n<p style=\"margin:0cm 0cm 0pt\">&nbsp;</p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">For more information on the EventAggregator, you may have a look at this topic of the help: </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707867.aspx\"><span style=\"color:#0000ff;font-family:Calibri\">Event Aggregator</span></a><span style=\"font-family:Calibri\">.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Hope it helps.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Ignacio Baumann Fonay</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><a href=\"http://blogs.southworks.net/ibaumann/\"><span><span style=\"color:#0000ff;font-family:Calibri\">http://blogs.southworks.net/ibaumann/</span></span></a> </p>\r\n",
    "PostedDate": "2008-10-21T06:55:51.953-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126615",
    "ThreadId": "37979",
    "Html": "Hi Ignacio,<br>\r\n<br>\r\nThanks for you response. You answered my question. Here is some comment or feedback if you wish :)<br>\r\n<br>\r\n1. If I replace word &quot;EventAggregator&quot; with &quot;UnityContainer&quot; in the first paragraph of you post - nothing will change. UnityContainer also takes the burden of&nbsp;building and&nbsp;registering its entities etc. (and it is much more powerful in this regard). <br>\r\n<br>\r\n2. Yes, I understand that event filter can be used to emulate scopes. However, I do not see why I&nbsp;would want to&nbsp;emulate if I can take it off-the-shelf with UnityContainer. Moreover, it makes the views in my example tightly bound. We have a family of products where we re-use UI controls and compose them in various ways. That means I will have to write a scope fitter service for each of the use case. Too much. <br>\r\n<br>\r\n3. Your note about considering and discarding the scope feature for event makes perfect sense for me. It verifies that my understanding is correct, however feature was not implemented deliberately. I do understand that it is all about prioritization of feature based on the community needs. What seems not right for me is that EventAggregator is trying to implement the things that are already implemented by UnityContainer and its implementation is much weaker. May be instead of investing into EventAggregator duplicate functionality there should be event management unity extension?<br>\r\n<br>\r\nThanks again,<br>\r\nAndrey.<br>\r\n<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-10-21T10:47:29.147-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "127527",
    "ThreadId": "37979",
    "Html": "Andrey,<br>\r\n<br>\r\nYou are right, there is a small bit of what a container would do in EventAggregator, although we have no intention of&nbsp;making it a container.&nbsp;&nbsp;We did considered relying on the container to handle these events, but we ended up not going this direction for a few reasons:<br>\r\n<br>\r\n*&nbsp; We did not want to require a container to use EventAggregator.&nbsp; People could then use EventAggregator in situations where they weren't interested in using a container.<br>\r\n*&nbsp; We did not want to required the user to configure events before they were used.&nbsp; Such as registering the types with ContainerControlledLifetime to ensure only one exists in the container.<br>\r\n*&nbsp; We did not want to have to write container-specific pieces to support the events.&nbsp; We could have used this to solve the registration problems, but did not want container specific pieces.<br>\r\n<br>\r\nHowever, I see no reason you could not use a container for this if it fits your scenarios better.&nbsp;<br>\r\n<br>\r\nThanks,<br>\r\n<br>\r\n-b<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-10-24T09:34:34.547-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "127772",
    "ThreadId": "37979",
    "Html": "Yes, these considerations make good sense for me.Â <div>The really good thing is that all the event specific functionality resides in EventBase class so that one can easily re-compose a new event aggregation sub-system based on the specific needs as in my case.Â <div><br></div><div>Thank you guys for your time answering my question!</div><div>Andrey.</div></div>",
    "PostedDate": "2008-10-25T16:46:33.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]