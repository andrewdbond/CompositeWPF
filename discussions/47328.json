[
  {
    "Id": "158417",
    "ThreadId": "47328",
    "Html": "<div style=\"padding-top:3px;padding-right:3px;padding-bottom:3px;padding-left:3px;background-image:none;margin-top:0px;margin-right:0px;margin-bottom:0px;margin-left:0px;text-align:left;word-wrap:break-word\">Hi,<div><br></div><div>I tried to use Prism V2 for Silverlight, and I've got a question about the retreive of data.</div><div><br></div><div>In Silverlight we have an asynch retreive of data, so is there any way to implement it with prism ? because all examples use sync.</div><div><br></div><div>Thanks.</div></div>",
    "PostedDate": "2009-02-17T01:46:25.433-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "164854",
    "ThreadId": "47328",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Although asynchronous communication is not addressed in the Composite Application Guidance for WPF &amp; Silverlight, there should be no problem in implementing it. </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">The <b>XapModuleTypeLoader</b> class (if you open the source code it is in this path: <b>CompositeApplicationLibrary\\Composite.Silverlight\\Modularity</b>) downloads modules asynchronously, as you can see in the <b>BeginLoadModuleType</b> method. </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">You can take a look at this for an example of asynchronous data retrieval using Silverlight.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Please let me know if this helps.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\">Damian Schenkelman</span></p>\r\n<span style=\"font-size:11pt;font-family:'calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"color:#0000ff\">http://blogs.southworks.net/dschenkelman</span></a></span>\r\n",
    "PostedDate": "2009-03-05T07:27:15.767-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "164873",
    "ThreadId": "47328",
    "Html": "<a href=\"http://www.Codeplex.com/SDMS\">http://www.Codeplex.com/SDMS</a> is a codeplex project that uses CompositeWPF/Prism with WCF.  Both Desktop (Unit Test) and Silverlight use async communications for Data Access; perhaps it will provide insight to your needs.   Note: There are a number of WebCast on the home page that address SDMS architecture and usage.\r\n",
    "PostedDate": "2009-03-05T08:06:53.497-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "164906",
    "ThreadId": "47328",
    "Html": "Well, I have been using Prism V2 with Feb 24 Refresh and I have not been very successful in calling a WCF Web Service asynchronously from either WPF of Silverlight. I have looked at Bill Krat's SDMS sample but the Prism library that he uses is different from Prism V2.<br>\r\n<br>\r\nOn Silverlight.<br>\r\nWhen the Presenter instantiates the Model and calls the service class, which in turn calls a WCF service to retrieve a list of customers, the outbound call never makes it out. <br>\r\n<br>\r\nOn WPF<br>\r\nWhen the Presenter instantiates the Model and calls the service class, which in turn calls a WCF service to retrieve a list of customers, the outbound call makes it out but no call back ever happens. I checked with Fiddler to make sure that the call is routed to the WCF Service and that service actually returns a valid response but no call back ever happens.<br>\r\n<br>\r\nI have not tried using the exact same code with Bill Krat's version of Prism implementation.<br>\r\n<br>\r\nIn a nutshell, Prism V2 does not allow asynchronous WCF calls to be made from the service layer.<br>\r\n<br>\r\nI can send some code samples if interested.\r\n",
    "PostedDate": "2009-03-05T08:48:52.71-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "164992",
    "ThreadId": "47328",
    "Html": "Hmm, that's strange as I only recently upgraded to Feb 2009 release of CompositeWPF/Prism; if you go back a few changesets I was accessing WCF services from CompositeWPF/Prism V2 (drop 9).<br>\r\n<br>\r\nPerhaps some code samples would give us some insight into the problem.  Be sure to provide the ServiceReference.ClientConfig, App.Config or Web.Config info (as applicable).\r\n",
    "PostedDate": "2009-03-05T11:18:50-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "164993",
    "ThreadId": "47328",
    "Html": "Something to try.  On both/either Silverlight or WPF, just before making the WCF Service call place a breakpoint.   Then click on Debug | Attach to process | and attach to the applicable process (you can identify it by looking at the port address of your WCF service on the taskbar).   Place a break point on the Method in question (within the WCF service) and trace it through - perhaps there is something else going on?<br>\r\n<br>\r\nBill<br>\r\n",
    "PostedDate": "2009-03-05T11:22:23.113-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165049",
    "ThreadId": "47328",
    "Html": "What is the best way to post code here? If I copy and paste, the formatting is going to be hard and unfortunately I do not have public URL where I can post the code. Any other ideas? \r\n",
    "PostedDate": "2009-03-05T14:11:15.793-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165078",
    "ThreadId": "47328",
    "Html": "The following has saved me countless of formatting hours:<a href=\"http://www.global-webnet.net/blogengine/post/2008/08/23/Copy-Source-as-Html.aspx\"><br>\r\nhttp://www.global-webnet.net/blogengine/post/2008/08/23/Copy-Source-as-Html.aspx</a>\r\n",
    "PostedDate": "2009-03-05T15:18:26.497-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165153",
    "ThreadId": "47328",
    "Html": "Thank you for the very useful link to CSAH plugin. Certainly a great time saver.<br>\r\n<br>\r\nI have more update on this matter. I changed the WPF code to call synchronously instead of asynchronously and that works successfully. In any case, as promised here are the code snippets from various places. BTW, I just noticed another thread started by developmentally today which has AccessViolation errors and I get the feeling that the two may be related.<br>\r\n<br>\r\n<hr>\r\nFirst App.xaml.cs<br>\r\n<div style=\"font-size:10pt;background:white;color:black;font-family:courier new\">\r\n<pre style=\"margin:0px\"><span style=\"color:#2b91af\">   26</span> <span style=\"color:#0000ff\">protected</span> <span style=\"color:#0000ff\">override</span> <span style=\"color:#0000ff\">void</span> OnStartup(<span style=\"color:#2b91af\">StartupEventArgs</span> e)</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#2b91af\">   27</span>         {</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#2b91af\">   28</span>             <span style=\"color:#0000ff\">base</span>.OnStartup(e);</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#2b91af\">   29</span> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#2b91af\">   30</span>             <span style=\"color:#2b91af\">Bootstrapper</span> bootStrapper = <span style=\"color:#0000ff\">new</span> <span style=\"color:#2b91af\">Bootstrapper</span>();</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#2b91af\">   31</span>             bootStrapper.Run();</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#2b91af\">   32</span>         }<br><hr><br><br><br><br><br>Next Bootstrapper.cs</pre>\r\n</div>\r\n<div style=\"font-size:10pt;background:white;color:black;font-family:courier new\">\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">internal</span> <span style=\"color:#0000ff\">class</span> <span style=\"color:#2b91af\">Bootstrapper</span> : <span style=\"color:#2b91af\">UnityBootstrapper</span></pre>\r\n<pre style=\"margin:0px\">    {</pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:#0000ff\">protected</span> <span style=\"color:#0000ff\">override</span> <span style=\"color:#2b91af\">DependencyObject</span> CreateShell()</pre>\r\n<pre style=\"margin:0px\">        {</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#2b91af\">Shell</span> shell = <span style=\"color:#0000ff\">this</span>.Container.Resolve&lt;<span style=\"color:#2b91af\">Shell</span>&gt;();</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">#if</span> SILVERLIGHT</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#2b91af\">Application</span>.Current.RootVisual = shell;</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">#else</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            shell.Show();</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">#endif</span></pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">return</span> shell;</pre>\r\n<pre style=\"margin:0px\">        }</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:#0000ff\">protected</span> <span style=\"color:#0000ff\">override</span> <span style=\"color:#0000ff\">void</span> InitializeModules()</pre>\r\n<pre style=\"margin:0px\">        {</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#2b91af\">IModule</span> findCustomerModule = <span style=\"color:#0000ff\">this</span>.Container.Resolve&lt;<span style=\"color:#2b91af\">FindCustomerModule</span>&gt;();</pre>\r\n<pre style=\"margin:0px\">            findCustomerModule.Initialize();</pre>\r\n<pre style=\"margin:0px\">        }</pre>\r\n<pre style=\"margin:0px\">    }<br><br><hr></pre>\r\n</div>\r\nNext FindCustomerModule.cs<br>\r\n<div style=\"font-size:10pt;background:white;color:black;font-family:courier new\">\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">public</span> <span style=\"color:#0000ff\">class</span> <span style=\"color:#2b91af\">FindCustomerModule</span> : <span style=\"color:#2b91af\">IModule</span></pre>\r\n<pre style=\"margin:0px\">    {</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">        #region</span> Constructors</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:#0000ff\">public</span> FindCustomerModule(<span style=\"color:#2b91af\">IUnityContainer</span> container, <span style=\"color:#2b91af\">IRegionViewRegistry</span> regionViewRegistry, <span style=\"color:#2b91af\">IRegionManager</span> regionManager)</pre>\r\n<pre style=\"margin:0px\">        {</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.container = container;</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.regionViewRegistry = regionViewRegistry;</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.regionManager = regionManager;</pre>\r\n<pre style=\"margin:0px\">        }</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">        #endregion</span></pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">        #region</span> IModule Members</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:#808080\">///</span><span style=\"color:#008000\"> </span><span style=\"color:#808080\">&lt;summary&gt;</span></pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:#808080\">///</span><span style=\"color:#008000\"> Notifies the module that it has be initialized.</span></pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:#808080\">///</span><span style=\"color:#008000\"> </span><span style=\"color:#808080\">&lt;/summary&gt;</span></pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:#0000ff\">public</span> <span style=\"color:#0000ff\">void</span> Initialize()</pre>\r\n<pre style=\"margin:0px\">        {</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#008000\">// ClientHarness.Initialize();</span></pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.RegisterTypeAndServices();</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.RegisterViewsWithRegions();</pre>\r\n<pre style=\"margin:0px\">        }</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">        #endregion</span></pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">        #region</span> Private Methods</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:#0000ff\">private</span> <span style=\"color:#0000ff\">void</span> RegisterViewsWithRegions()</pre>\r\n<pre style=\"margin:0px\">        {</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.regionViewRegistry.RegisterViewWithRegion(<span style=\"color:#2b91af\">RegionNames</span>.MainRegion, () =&gt; <span style=\"color:#0000ff\">this</span>.container.Resolve&lt;<span style=\"color:#2b91af\">CustomerListPresenter</span>&gt;().View);</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.regionManager.RegisterViewWithRegion(<span style=\"color:#2b91af\">RegionNames</span>.SelectionRegion,</pre>\r\n<pre style=\"margin:0px\">                                                      () =&gt; <span style=\"color:#0000ff\">this</span>.container.Resolve&lt;<span style=\"color:#2b91af\">CustomerPresenter</span>&gt;().View);</pre>\r\n<pre style=\"margin:0px\">        }</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:#0000ff\">protected</span> <span style=\"color:#0000ff\">void</span> RegisterTypeAndServices()</pre>\r\n<pre style=\"margin:0px\">        {</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.container.RegisterType&lt;<span style=\"color:#2b91af\">ICustomersController</span>, <span style=\"color:#2b91af\">CustomersController</span>&gt;();</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.container.RegisterType&lt;<span style=\"color:#2b91af\">IFindCustomerService</span>, <span style=\"color:#2b91af\">FindCustomerService</span>&gt;(</pre>\r\n<pre style=\"margin:0px\">                <span style=\"color:#0000ff\">new</span> <span style=\"color:#2b91af\">ContainerControlledLifetimeManager</span>());</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.container.RegisterType&lt;<span style=\"color:#2b91af\">ICustomerListView</span>, <span style=\"color:#2b91af\">CustomerListView</span>&gt;();</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.container.RegisterType&lt;<span style=\"color:#2b91af\">ICustomerListPresenter</span>, <span style=\"color:#2b91af\">CustomerListPresenter</span>&gt;();</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.container.RegisterType&lt;<span style=\"color:#2b91af\">ICustomerView</span>, <span style=\"color:#2b91af\">CustomerView</span>&gt;();</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.container.RegisterType&lt;<span style=\"color:#2b91af\">ICustomerPresenter</span>, <span style=\"color:#2b91af\">CustomerPresenter</span>&gt;();</pre>\r\n<pre style=\"margin:0px\">        }</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">        #endregion</span></pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">        #region</span> Private Fields</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:#0000ff\">private</span> <span style=\"color:#0000ff\">readonly</span> <span style=\"color:#2b91af\">IUnityContainer</span> container;</pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:#0000ff\">private</span> <span style=\"color:#0000ff\">readonly</span> <span style=\"color:#2b91af\">IRegionViewRegistry</span> regionViewRegistry;</pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:#0000ff\">private</span> <span style=\"color:#0000ff\">readonly</span> <span style=\"color:#2b91af\">IRegionManager</span> regionManager;</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">        #endregion</span></pre>\r\n<pre style=\"margin:0px\">    }<br><br><hr></pre>\r\n</div>\r\nNext CustomerListPresenter.cs<br>\r\n<div style=\"font-size:10pt;background:white;color:black;font-family:courier new\">\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">public</span> CustomerListPresenter(<span style=\"color:#2b91af\">ICustomerListView</span> view, <span style=\"color:#2b91af\">IFindCustomerService</span> service)</pre>\r\n<pre style=\"margin:0px\">        {</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.View = view;</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.findCustomerService = service;</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.model = <span style=\"color:#0000ff\">new</span> <span style=\"color:#2b91af\">CustomerListPresentationModel</span>();</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">this</span>.View.Model = model;</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#008000\">//this.model.PropertyChanged += new System.ComponentModel.PropertyChangedEventHandler(model_PropertyChanged);</span></pre>\r\n<pre style=\"margin:0px\">            view.Model.Customers = findCustomerService.FindCustomer(<span style=\"color:#2b91af\">FindKeyType</span>.CustomerNumber, <span style=\"color:#a31515\">&quot;1101502840338&quot;</span>);</pre>\r\n<pre style=\"margin:0px\">        }<br><br><hr></pre>\r\n</div>\r\nNext FindCustomerService.cs<br>\r\n<div style=\"font-size:10pt;background:white;color:black;font-family:courier new\">\r\n<pre style=\"margin:0px\">        <span style=\"color:#0000ff\">public</span> System.Collections.ObjectModel.<span style=\"color:#2b91af\">ObservableCollection</span>&lt;Infrastructure.SbosProxy.<span style=\"color:#2b91af\">FindCustomerResponseSearchResultsCustomer</span>&gt; FindCustomer(Modules.FindCustomer.BusinessEntities.<span style=\"color:#2b91af\">FindKeyType</span> findKey, <span style=\"color:#0000ff\">string</span> findKeyValue)</pre>\r\n<pre style=\"margin:0px\">        {</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#2b91af\">ObservableCollection</span>&lt;<span style=\"color:#2b91af\">FindCustomerResponseSearchResultsCustomer</span>&gt; customerCollection </pre>\r\n<pre style=\"margin:0px\">                = <span style=\"color:#0000ff\">new</span> <span style=\"color:#2b91af\">ObservableCollection</span>&lt;<span style=\"color:#2b91af\">FindCustomerResponseSearchResultsCustomer</span>&gt;();</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">#if</span> SILVERLIGHT</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            client.FindCustomerCompleted += new ClientHarness.CompletedFindCustomer(client_FindCustomerCompleted);</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            client.BeginFindCustomer(EnumConvert.GetValue(findKey), findKeyValue);</span></pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            Thread.Sleep(5000);</span></pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            int count = Convert.ToInt32(response.SearchResultsCount);</span></pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            for (int i = 0; i &lt; count; i++)</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            {</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">                customerCollection.Add(response.SearchResults[i].Customer);</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            }</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">#else</span></pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#2b91af\">FindCustomerResponseSearchResults</span>[] results = client.FindCustomer(<span style=\"color:#2b91af\">EnumConvert</span>.GetValue(findKey), findKeyValue);</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">int</span> count = results.Length;</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">for</span> (<span style=\"color:#0000ff\">int</span> i = 0; i &lt; count; i++) {</pre>\r\n<pre style=\"margin:0px\">                customerCollection.Add(results[i].Customer);</pre>\r\n<pre style=\"margin:0px\">            }</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">#endif</span></pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#0000ff\">return</span> customerCollection;</pre>\r\n<pre style=\"margin:0px\">        }</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:#0000ff\">void</span> client_FindCustomerCompleted(<span style=\"color:#2b91af\">FindCustomerOperationResponse</span> findCustomerOperationResponse)</pre>\r\n<pre style=\"margin:0px\">        {</pre>\r\n<pre style=\"margin:0px\">            response = findCustomerOperationResponse;</pre>\r\n<pre style=\"margin:0px\">        }<br><br><hr></pre>\r\n</div>\r\n&lt;!--EndFragment--&gt;Next ClientHarness.cs<br>\r\n<div style=\"font-size:10pt;background:white;color:black;font-family:courier new\">\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">ClientHarness</span></pre>\r\n<pre style=\"margin:0px\">    {</pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:blue\">public</span> <span style=\"color:blue\">delegate</span> <span style=\"color:blue\">void</span> <span style=\"color:#2b91af\">CompletedFindCustomer</span>(<span style=\"color:#2b91af\">FindCustomerOperationResponse</span> findCustomerOperationResponse);</pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> <span style=\"color:#2b91af\">CompletedFindCustomer</span> FindCustomerCompleted;</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:blue\">public</span> ClientHarness()</pre>\r\n<pre style=\"margin:0px\">        {</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">#if</span> SILVERLIGHT</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:gray\">            head.Client = Application.Current.Resources[&quot;head.Client&quot;].ToString();</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:gray\">            head.Destination = Application.Current.Resources[&quot;head.Destination&quot;].ToString();</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:gray\">            head.Region = Application.Current.Resources[&quot;head.Region&quot;].ToString();</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:gray\">            head.RoutingArea = Application.Current.Resources[&quot;head.RoutingArea&quot;].ToString();</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:gray\">            head.Source = Application.Current.Resources[&quot;head.Source&quot;].ToString();</span></pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:gray\">            endpoint = Application.Current.Resources[&quot;endpointURL&quot;].ToString();</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">#else</span></pre>\r\n<pre style=\"margin:0px\">                    head.Client = <span style=\"color:#a31515\">&quot;802710001000&quot;</span>;</pre>\r\n<pre style=\"margin:0px\">        head.Destination = <span style=\"color:#a31515\">&quot;CCS01&quot;</span>;</pre>\r\n<pre style=\"margin:0px\">        head.Region = <span style=\"color:#a31515\">&quot;QA8A&quot;</span>;</pre>\r\n<pre style=\"margin:0px\">        head.RoutingArea = <span style=\"color:#a31515\">&quot;8027&quot;</span>;</pre>\r\n<pre style=\"margin:0px\">        head.Source = <span style=\"color:#a31515\">&quot;BOS&quot;</span>;</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">            endpoint = <span style=\"color:#a31515\">&quot;http://misd01-xpa/SbosService/SbosService.svc&quot;</span>;</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">#endif</span></pre>\r\n<pre style=\"margin:0px\">            head.ConversationId = <span style=\"color:#a31515\">&quot;&quot;</span>;</pre>\r\n<pre style=\"margin:0px\">            head.DownstreamNotification = <span style=\"color:#a31515\">&quot;&quot;</span>;</pre>\r\n<pre style=\"margin:0px\">            head.Operator = <span style=\"color:#a31515\">&quot;&quot;</span>;</pre>\r\n<pre style=\"margin:0px\">            head.Origin = <span style=\"color:#a31515\">&quot;&quot;</span>;</pre>\r\n<pre style=\"margin:0px\">            head.RoundTrip = <span style=\"color:#2b91af\">Guid</span>.NewGuid().ToString();</pre>\r\n<pre style=\"margin:0px\">            head.UserId = <span style=\"color:#a31515\">&quot;&quot;</span>;</pre>\r\n<pre style=\"margin:0px\">            head.Version = <span style=\"color:#a31515\">&quot;&quot;</span>; <span style=\"color:green\">//2.16</span></pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#2b91af\">BasicHttpBinding</span> binding = <span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">BasicHttpBinding</span>(<span style=\"color:#2b91af\">BasicHttpSecurityMode</span>.None);</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">            sbosServiceClient = <span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">SbosServiceClient</span>(binding, <span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">EndpointAddress</span>(endpoint));</pre>\r\n<pre style=\"margin:0px\">        }</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">#if</span> !SILVERLIGHT</pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:blue\">public</span> <span style=\"color:#2b91af\">FindCustomerResponseSearchResults</span>[] FindCustomer(<span style=\"color:blue\">string</span> findKeyType, <span style=\"color:blue\">string</span> findKey)</pre>\r\n<pre style=\"margin:0px\">        {</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:blue\">string</span> resultsCount;</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:#2b91af\">FindCustomerResponseSearchResults</span>[] results;</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">            sbosServiceClient.FindCustomerOperation(<span style=\"color:blue\">ref</span> head, findKey, findKeyType, <span style=\"color:blue\">out</span> resultsCount, <span style=\"color:blue\">out</span> results);</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:blue\">return</span> results;</pre>\r\n<pre style=\"margin:0px\">        }</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">#endif</span></pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> BeginFindCustomer(<span style=\"color:blue\">string</span> findKeyType, <span style=\"color:blue\">string</span> findKey)</pre>\r\n<pre style=\"margin:0px\">        {</pre>\r\n<pre style=\"margin:0px\">            sbosServiceClient.FindCustomerOperationCompleted += <span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">EventHandler</span>&lt;<span style=\"color:#2b91af\">FindCustomerOperationCompletedEventArgs</span>&gt;(sbosServiceClient_FindCustomerOperationCompleted);</pre>\r\n<pre style=\"margin:0px\">            sbosServiceClient.FindCustomerOperationAsync(head, findKey, findKeyType);</pre>\r\n<pre style=\"margin:0px\">        }</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:blue\">void</span> sbosServiceClient_FindCustomerOperationCompleted(<span style=\"color:blue\">object</span> sender, <span style=\"color:#2b91af\">FindCustomerOperationCompletedEventArgs</span> e)</pre>\r\n<pre style=\"margin:0px\">        {</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:blue\">if</span> (e.Result != <span style=\"color:blue\">null</span>)</pre>\r\n<pre style=\"margin:0px\">            {</pre>\r\n<pre style=\"margin:0px\">                <span style=\"color:blue\">if</span> (FindCustomerCompleted != <span style=\"color:blue\">null</span>)</pre>\r\n<pre style=\"margin:0px\">                {</pre>\r\n<pre style=\"margin:0px\">                    <span style=\"color:#2b91af\">FindCustomerOperationResponse</span> response = <span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">FindCustomerOperationResponse</span>();</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">                    response.Response = e.Response;</pre>\r\n<pre style=\"margin:0px\">                    response.SearchResults = e.SearchResults;</pre>\r\n<pre style=\"margin:0px\">                    response.SearchResultsCount = e.SearchResultsCount;</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">                    FindCustomerCompleted(response);</pre>\r\n<pre style=\"margin:0px\">                }</pre>\r\n<pre style=\"margin:0px\">            }</pre>\r\n<pre style=\"margin:0px\">        }</pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:blue\">private</span> <span style=\"color:#2b91af\">SbosServiceClient</span> sbosServiceClient;</pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:blue\">private</span> <span style=\"color:#2b91af\">head</span> head = <span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">head</span>();</pre>\r\n<pre style=\"margin:0px\">        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> endpoint;</pre>\r\n<pre style=\"margin:0px\">    }<br><br><hr><br>Next relevant code from VS generated Reference.cs<br><div style=\"font-size:10pt;background:white;color:black;font-family:courier new\"><pre style=\"margin:0px\">        <span style=\"color:blue\">public</span> Infrastructure.SbosProxy.<span style=\"color:#2b91af\">Response</span> FindCustomerOperation(<span style=\"color:blue\">ref</span> Infrastructure.SbosProxy.<span style=\"color:#2b91af\">head</span> head, <span style=\"color:blue\">string</span> Key, <span style=\"color:blue\">string</span> KeyType, <span style=\"color:blue\">out</span> <span style=\"color:blue\">string</span> SearchResultsCount, <span style=\"color:blue\">out</span> <span style=\"color:#2b91af\">FindCustomerResponseSearchResults</span>[] SearchResults) {</pre>\r\n<pre style=\"margin:0px\">            Infrastructure.SbosProxy.<span style=\"color:#2b91af\">FindCustomerOperationRequest</span> inValue = <span style=\"color:blue\">new</span> Infrastructure.SbosProxy.<span style=\"color:#2b91af\">FindCustomerOperationRequest</span>();</pre>\r\n<pre style=\"margin:0px\">            inValue.head = head;</pre>\r\n<pre style=\"margin:0px\">            inValue.Key = Key;</pre>\r\n<pre style=\"margin:0px\">            inValue.KeyType = KeyType;</pre>\r\n<pre style=\"margin:0px\">            Infrastructure.SbosProxy.<span style=\"color:#2b91af\">FindCustomerOperationResponse</span> retVal = ((Infrastructure.SbosProxy.<span style=\"color:#2b91af\">ISbosService</span>)(<span style=\"color:blue\">this</span>)).FindCustomerOperation(inValue);</pre>\r\n<pre style=\"margin:0px\">            head = retVal.head;</pre>\r\n<pre style=\"margin:0px\">            SearchResultsCount = retVal.SearchResultsCount;</pre>\r\n<pre style=\"margin:0px\">            SearchResults = retVal.SearchResults;</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:blue\">return</span> retVal.Response;</pre>\r\n<pre style=\"margin:0px\">        }</pre>\r\n</div>\r\n&lt;!--EndFragment--&gt;<br>\r\n<div style=\"font-size:10pt;background:white;color:black;font-family:courier new\">\r\n<pre style=\"margin:0px\">        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> FindCustomerOperationAsync(Infrastructure.SbosProxy.<span style=\"color:#2b91af\">head</span> head, <span style=\"color:blue\">string</span> Key, <span style=\"color:blue\">string</span> KeyType, <span style=\"color:blue\">object</span> userState) {</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:blue\">if</span> ((<span style=\"color:blue\">this</span>.onBeginFindCustomerOperationDelegate == <span style=\"color:blue\">null</span>)) {</pre>\r\n<pre style=\"margin:0px\">                <span style=\"color:blue\">this</span>.onBeginFindCustomerOperationDelegate = <span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">BeginOperationDelegate</span>(<span style=\"color:blue\">this</span>.OnBeginFindCustomerOperation);</pre>\r\n<pre style=\"margin:0px\">            }</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:blue\">if</span> ((<span style=\"color:blue\">this</span>.onEndFindCustomerOperationDelegate == <span style=\"color:blue\">null</span>)) {</pre>\r\n<pre style=\"margin:0px\">                <span style=\"color:blue\">this</span>.onEndFindCustomerOperationDelegate = <span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">EndOperationDelegate</span>(<span style=\"color:blue\">this</span>.OnEndFindCustomerOperation);</pre>\r\n<pre style=\"margin:0px\">            }</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:blue\">if</span> ((<span style=\"color:blue\">this</span>.onFindCustomerOperationCompletedDelegate == <span style=\"color:blue\">null</span>)) {</pre>\r\n<pre style=\"margin:0px\">                <span style=\"color:blue\">this</span>.onFindCustomerOperationCompletedDelegate = <span style=\"color:blue\">new</span> System.Threading.<span style=\"color:#2b91af\">SendOrPostCallback</span>(<span style=\"color:blue\">this</span>.OnFindCustomerOperationCompleted);</pre>\r\n<pre style=\"margin:0px\">            }</pre>\r\n<pre style=\"margin:0px\">            <span style=\"color:blue\">base</span>.InvokeAsync(<span style=\"color:blue\">this</span>.onBeginFindCustomerOperationDelegate, <span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>[] {</pre>\r\n<pre style=\"margin:0px\">                        head,</pre>\r\n<pre style=\"margin:0px\">                        Key,</pre>\r\n<pre style=\"margin:0px\">                        KeyType}, <span style=\"color:blue\">this</span>.onEndFindCustomerOperationDelegate, <span style=\"color:blue\">this</span>.onFindCustomerOperationCompletedDelegate, userState);</pre>\r\n<pre style=\"margin:0px\">        }</pre>\r\n</div>\r\n&lt;!--EndFragment--&gt;<hr>\r\n<br>\r\nNext the config file as used in WPF client (Silverlight one is very similar)<br>\r\n<div style=\"font-size:10pt;background:white;color:black;font-family:courier new\">\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">&lt;?</span><span style=\"color:#a31515\">xml</span><span style=\"color:blue\"> </span><span style=\"color:red\">version</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">1.0</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">encoding</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">utf-8</span>&quot;<span style=\"color:blue\"> ?&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">configuration</span><span style=\"color:blue\">&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">    &lt;</span><span style=\"color:#a31515\">system.serviceModel</span><span style=\"color:blue\">&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">        &lt;</span><span style=\"color:#a31515\">bindings</span><span style=\"color:blue\">&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">            &lt;</span><span style=\"color:#a31515\">basicHttpBinding</span><span style=\"color:blue\">&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                &lt;</span><span style=\"color:#a31515\">binding</span><span style=\"color:blue\"> </span><span style=\"color:red\">name</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">HttpBinding_SLBOS</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">closeTimeout</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">00:01:00</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">openTimeout</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">00:01:00</span>&quot;</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                    </span><span style=\"color:red\">receiveTimeout</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">00:10:00</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">sendTimeout</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">00:01:00</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">allowCookies</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">false</span>&quot;</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                    </span><span style=\"color:red\">bypassProxyOnLocal</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">false</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">hostNameComparisonMode</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">StrongWildcard</span>&quot;</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                    </span><span style=\"color:red\">maxBufferSize</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">65536</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">maxBufferPoolSize</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">524288</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">maxReceivedMessageSize</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">65536</span>&quot;</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                    </span><span style=\"color:red\">messageEncoding</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">Text</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">textEncoding</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">utf-8</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">transferMode</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">Buffered</span>&quot;</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                    </span><span style=\"color:red\">useDefaultWebProxy</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">true</span>&quot;<span style=\"color:blue\">&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                    &lt;</span><span style=\"color:#a31515\">readerQuotas</span><span style=\"color:blue\"> </span><span style=\"color:red\">maxDepth</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">32</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">maxStringContentLength</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">8192</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">maxArrayLength</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">16384</span>&quot;</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                        </span><span style=\"color:red\">maxBytesPerRead</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">4096</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">maxNameTableCharCount</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">16384</span>&quot;<span style=\"color:blue\"> /&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                    &lt;</span><span style=\"color:#a31515\">security</span><span style=\"color:blue\"> </span><span style=\"color:red\">mode</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">None</span>&quot;<span style=\"color:blue\">&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                        &lt;</span><span style=\"color:#a31515\">transport</span><span style=\"color:blue\"> </span><span style=\"color:red\">clientCredentialType</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">None</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">proxyCredentialType</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">None</span>&quot;</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                            </span><span style=\"color:red\">realm</span><span style=\"color:blue\">=</span>&quot;&quot;<span style=\"color:blue\"> /&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                        &lt;</span><span style=\"color:#a31515\">message</span><span style=\"color:blue\"> </span><span style=\"color:red\">clientCredentialType</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">UserName</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">algorithmSuite</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">Default</span>&quot;<span style=\"color:blue\"> /&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                    &lt;/</span><span style=\"color:#a31515\">security</span><span style=\"color:blue\">&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                &lt;/</span><span style=\"color:#a31515\">binding</span><span style=\"color:blue\">&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">            &lt;/</span><span style=\"color:#a31515\">basicHttpBinding</span><span style=\"color:blue\">&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">        &lt;/</span><span style=\"color:#a31515\">bindings</span><span style=\"color:blue\">&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">        &lt;</span><span style=\"color:#a31515\">client</span><span style=\"color:blue\">&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">            &lt;</span><span style=\"color:#a31515\">endpoint</span><span style=\"color:blue\"> </span><span style=\"color:red\">address</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">http://localhost/SbosService/SbosService.svc</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">binding</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">basicHttpBinding</span>&quot;</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                </span><span style=\"color:red\">bindingConfiguration</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">HttpBinding_SLBOS</span>&quot;<span style=\"color:blue\"> </span><span style=\"color:red\">contract</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">SbosProxy.ISbosService</span>&quot;</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">                </span><span style=\"color:red\">name</span><span style=\"color:blue\">=</span>&quot;<span style=\"color:blue\">HttpBinding_SLBOS</span>&quot;<span style=\"color:blue\"> /&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">        &lt;/</span><span style=\"color:#a31515\">client</span><span style=\"color:blue\">&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">    &lt;/</span><span style=\"color:#a31515\">system.serviceModel</span><span style=\"color:blue\">&gt;</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">configuration</span><span style=\"color:blue\">&gt;</span></pre>\r\n</div>\r\n&lt;!--EndFragment--&gt;<br>\r\nNothing that jumps out at me. Thank you for your assistance.</pre>\r\n</div>\r\n&lt;!--EndFragment--&gt;\r\n",
    "PostedDate": "2009-03-05T19:04:42.713-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165163",
    "ThreadId": "47328",
    "Html": "At a quick glance I noted you did something that had me chasing my tail for quite some time.  <br>\r\nYou used Thread.Sleep(5000) assuming, as I did, that the Async call is running on a different thread - it isn't.<br>\r\n<br>\r\nAsynchronous operations are queued on the same thread versus across multiple threads.  This is why we can <br>\r\nassign results directly to the UI without having to invoke.  After plugging in extensive logging I found that the <br>\r\nAsync call doesn't execute until after the parent method returned to the calling process (sometimes they didn't<br>\r\nrun until all processes were done).<br>\r\n<br>\r\nThis posed a big problem for me because I needed the WCF Call to complete before continuing execution,<br>\r\nconsider the following pseudo code:<br>\r\n<br>\r\nList&lt;Data&gt; data = new List&lt;Data&gt;;<br>\r\n<br>\r\nclient.OnDataRequestCompleted += DataRequestHandler;<br>\r\nclient.GetData()<br>\r\nThread.Sleep()<br>\r\nHaveToDoSomethingWithTheData(data)<br>\r\n<br>\r\npublic void DataRequestHandler(DataCompleted e)<br>\r\n{<br>\r\n     data = e.Result as List&lt;Data&gt;<br>\r\n}<br>\r\n<br>\r\n<strong>Failed miserably - I had to do something like the following:<br>\r\n</strong><br>\r\n<br>\r\n--- DAL ----<br>\r\npublic event EventHandler&lt;DataEventArg&gt; OnData;<br>\r\nclient.OnDataRequestCompleted += DataRequestHandler;<br>\r\nclient.GetData();<br>\r\n<br>\r\npublic void DataRequestHandler(DataCompleted e)<br>\r\n{<br>\r\n    if(OnData!=null)<br>\r\n       OnData(this, new DataEventArgs(e.Result))<br>\r\n}<br>\r\n<br>\r\n<strong>BLL would subscribe to the OnData event and then be able to execute: <br>\r\n</strong>   HaveToDoSomethingWithTheData(data)<br>\r\n<br>\r\n<strong>Could this be your problem?<br>\r\n</strong><br>\r\n<br>\r\n<br>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">#if</span> SILVERLIGHT</pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            client.FindCustomerCompleted += new ClientHarness.CompletedFindCustomer(client_FindCustomerCompleted);</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            client.BeginFindCustomer(EnumConvert.GetValue(findKey), findKeyValue);</span></pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            Thread.Sleep(5000);</span></pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            int count = Convert.ToInt32(response.SearchResultsCount);</span></pre>\r\n<pre style=\"margin:0px\"> </pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            for (int i = 0; i &lt; count; i++)</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            {</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">                customerCollection.Add(response.SearchResults[i].Customer);</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#808080\">            }</span></pre>\r\n<pre style=\"margin:0px\"><span style=\"color:#0000ff\">#else</span></pre>\r\n",
    "PostedDate": "2009-03-05T19:34:38.887-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165164",
    "ThreadId": "47328",
    "Html": "I thought I should emphasize - if you use Thread.Sleep() in a Silverlight application you put the entire application to sleep.<br>\r\n<br>\r\nI edited the above psuedo code to be more technically correct as I forgot the client.GetData() call.  <br>\r\n<br>\r\n--- DAL ----<br>\r\npublic event EventHandler&lt;DataEventArg&gt; OnData;<br>\r\nclient.OnDataRequestCompleted += DataRequestHandler;<br>\r\nclient.GetData();<br>\r\n<br>\r\npublic void DataRequestHandler(DataCompleted e)<br>\r\n{<br>\r\n    if(OnData!=null)<br>\r\n       OnData(this, new DataEventArgs(e.Result))<br>\r\n}<br>\r\n<br>\r\n<strong>BLL would subscribe to the OnData event and then be able to execute: <br>\r\n</strong>   HaveToDoSomethingWithTheData(data)<br>\r\n<br>\r\n",
    "PostedDate": "2009-03-05T19:40:44.703-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165392",
    "ThreadId": "47328",
    "Html": "Hi Mistry<br>\r\nI have noticed a couple of things in your code.<br>\r\n<br>\r\n1. You don't have to make the call 'synchronous'. As far as I can tell, all async callbacks are done on the UI thread. So it should be safe to manipulate the UI from there.<br>\r\n2. It appears that you only create the ObservableCollection when the async callback returns. This causes a problem because:<br>\r\n     - When SL sets up the databinding between the view and the viewmodel, your ObservableCollection is still Null. So nothing happens<br>\r\n     - Then when the call returns, you create the observable collection. However, the view is never notified that the collection is created. So nothing happens.<br>\r\n     - When you made it 'synchronous', you already create the observablecollection in the constructor. That's why the view can find your results. <br>\r\n    -&gt; To fix this: Option 1. Create the ObservableCollection in the Constructor and fill it when the callback returns. This gives the view an object to monitor when the databinding is setup (the observablecollection)<br>\r\n                         Option 2. Implement INotifyPropertyChanged on your Model and raise the PropertyChanged event when your value changes.<br>\r\n<br>\r\nYou might also look at the webcasts Bob and I did. We didn't show you how to use WCF, however, we did use async communication:<br>\r\n<a href=\"http://blogs.msdn.com/erwinvandervalk/archive/2009/03/03/prism-v2-walkthrough-webcasts.aspx\">http://blogs.msdn.com/erwinvandervalk/archive/2009/03/03/prism-v2-walkthrough-webcasts.aspx</a><br>\r\n<br>\r\nHope this help,<br>\r\nErwin\r\n",
    "PostedDate": "2009-03-06T08:44:58.22-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165405",
    "ThreadId": "47328",
    "Html": "BillKrat, as you aptly stated Thread.Sleep was a very bad idea. I am now able to make the call successfully. How naive of me to assume that the asynchronous call will always happen on a different thread. Appreciate your help.<br>\r\n<br>\r\nvallekie, you are a step ahead of me and now I will follow up on what you have to say. Once again, appreciate the help. \r\n",
    "PostedDate": "2009-03-06T09:02:24.88-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]