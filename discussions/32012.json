[
  {
    "Id": "106330",
    "ThreadId": "32012",
    "Html": "I have created the following items all contained in module Customer:<br>\r\n<br>\r\nCustomerModel<br>\r\n<br>\r\nICustomerListPresenter/CustomerListPresenter&nbsp;&nbsp; <br>\r\nICustomerListView/CustomerListView&nbsp;(Defined as a listbox)<br>\r\n<br>\r\nICustomerDetailPresenter/CustomerDetailPresenter<br>\r\nICustomerDetailView/CustomerDetailView<br>\r\n<br>\r\nICustomerCompositePresenter/CustomerCompositePresenter<br>\r\nICustomerCompositeView/CustomerCompositeView<br>\r\n<br>\r\nThese are self contained in there own module with no external references.&nbsp; When I load this in my main application everything is fine my composite view can come up with a customer list I double click on a fish and it brings up the details.<br>\r\n<br>\r\nNow I want to add a Orders module.&nbsp; Assuming the orders module is set up exactly like the above but has a static reference to the Customer module.&nbsp; When I edit an order in details view, I want to have a combobox from which I can select my customer.&nbsp; Do I need to make a new CustomerComboListView to fill in here or is there a way to use CustomerListView?<br>\r\n<br>\r\nFeel free to tell me I am going in a completely wrong direction on this, but also please tell me a better one if you feel this is the case.&nbsp; I didn't know if this was more of a wpf thing or a composite WPF thing.<br>\r\n",
    "PostedDate": "2008-07-22T12:40:25.03-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "107153",
    "ThreadId": "32012",
    "Html": "<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">Hi</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">I recommend you to avoid having static references between modules. You can instead split in a separated project the common interfaces that your modules share. Then you can use the container to get the specific implementation.</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">Please, let me know if it helps.</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"color:#1f497d\"><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">Mariano Converti</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><a href=\"http://blogs.southworks.net/mconverti\"><span><span style=\"font-family:Calibri\">http://blogs.southworks.net/mconverti</span></span></a></p>\r\n",
    "PostedDate": "2008-07-25T11:59:04.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "107495",
    "ThreadId": "32012",
    "Html": "<p>Thanks for the reply Mariano.</p>\r\n<p>I would agree that holding a static reference is not the best approach and defeats the purpose of loosely coupled, but I'm not sure how I would resolve it.&nbsp; If I want a listbox and a combobox implementation of the list view the only code I really want to write is create a new implementation of CustomerListView.&nbsp; The interfaces don't need to change or anything.&nbsp; But I would have to register the two concrete list views with ICustomerListView and I don't know how to resolve this without using the concrete classes.&nbsp; I'm not sure if I am being clear.&nbsp; So please let me know if there is more clarification needed.</p>\r\n",
    "PostedDate": "2008-07-28T08:57:55.337-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "107874",
    "ThreadId": "32012",
    "Html": "I created a demo with full source code&nbsp;<a href=\"http://www.global-webnet.net/BlogEngine/post/2008/07/29/CompositeWPF-Sharing-service-among-different-modules.aspx\">HERE</a> that implements the solution as Mariano suggested; I&nbsp;created a common interface (ICustomerService) in&nbsp;a module shared by ModuleA and ModuleB and have both modules use the container to get the implementation (via a dependency attribute).<br>\r\n<br>\r\nIf&nbsp;response to the following:&nbsp;&nbsp; <br>\r\n<br>\r\n<em>[CodeHulk] The interfaces don't need to change or anything.&nbsp; But I would have to register the two concrete list views with ICustomerListView and I don't know how to resolve this without using the concrete classes.<br>\r\n<br>\r\n</em>\r\n",
    "PostedDate": "2008-07-29T21:15:32.657-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "107976",
    "ThreadId": "32012",
    "Html": "Thanks for the response Bill.&nbsp; It served very well to show the dependancy injection on the properties, however it didn't really solve my problem.&nbsp; There are two seperate views for the same data agreed, but the two views are created completely independant of each other.<br>\r\n<br>\r\nOne of the benefits of using interfaces is&nbsp;utilizing the same code with multiple different concrete classes without having to change the plumbing that uses them.&nbsp; So looking at the EventAggregation example.&nbsp; <br>\r\nIn ModuleA (unmodified)&nbsp;we have the IAddFundView which contains no references to any controls or anything specific to&nbsp;UI design in general.&nbsp; It simply states the interface that&nbsp;can be used when working with anything that derives from it.&nbsp; The benefit in traditional OOP to doing&nbsp;this is I can now implement a&nbsp;StandardAddFundView, a WizardAddFundView, and a&nbsp;&nbsp;AdvancedAddFundView all deriving from this interface(Standard, Wizard, and&nbsp;Advanced are just different UI representations of the same thing).&nbsp; In fact, using our UI patters (mvp, presentationmodel, etc) we can use the same presenters when working with these different views as well.&nbsp; <br>\r\n<br>\r\nI have two options<br>\r\nOption 1:<br>\r\nIStandardAddFundView<br>\r\nStandardAddFundView :&nbsp;IStandardAddFundView<br>\r\nStandardAddFundPresenter<br>\r\n<br>\r\nIWizardAddFundView<br>\r\nWizardAddFundView :&nbsp;IWizardAddFundView<br>\r\nWizardAddFundPresenter<br>\r\n<br>\r\nIAdvancedAddFundView<br>\r\nAdvancedAddFundView :&nbsp;IAdvancedAddFundView<br>\r\nAdvancedAddFundPresenter<br>\r\n<br>\r\nOption 2:<br>\r\n<br>\r\nIAddFundView<br>\r\nAddFundPresenter<br>\r\nStandardAddFundView&nbsp;:&nbsp;IAddFundView<br>\r\nWizardAddFundView :&nbsp;IAddFundView<br>\r\nAdvancedAddFundView :&nbsp;IAddFundView<br>\r\n<br>\r\nObviously Option 2 holds leaves us in a better state for maintainability as we don't have as many classes to maintain and since the only difference in the views is the UI.&nbsp; More or less what I am asking is how would one go about using option 2.&nbsp; It would be possible to change the&nbsp;UI using Data Templates but wouldn't I then have to have either static references to every data template I want to use or find a way to inject them?<br>\r\n<br>\r\nI hope this clears up what I am asking.&nbsp; I'm not trying to argue either way I am just trying to learn some of the best practices of the best practices so to speak and just asking how other people would resolve this problem.&nbsp; I'm sorry if I can't get my point across.&nbsp; Its kind of hard to do in plain text.<br>\r\n<br>\r\nThanks again for the responses.\r\n",
    "PostedDate": "2008-07-30T07:55:09.713-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "108129",
    "ThreadId": "32012",
    "Html": "<p>Hi CodeHulk, option 2 seems to be pretty clear - here is my stab at it.<br>\r\n<br>\r\nI have a XAML form that has two buttons and a label.&nbsp; The buttons will both call the same event handler btnClick() and use the buttons name to resolve the service to use.</p>\r\n<p>HelloWorldView.xaml file: </p>\r\n<p>&nbsp;&nbsp;&nbsp; &lt;UserControl x:Class=&quot;HelloWorld.Views.HelloWorldView&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:local=&quot;clr-namespace:HelloWorld&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:cal=&quot;<a href=\"http://www.codeplex.com/CompositeWPF\">http://www.codeplex.com/CompositeWPF</a>&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;StackPanel&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TextBlock x:Name=&quot;lblResults&quot; HorizontalAlignment=&quot;Center&quot;&gt;HelloWorld&lt;/TextBlock&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Button Click=&quot;btnClick&quot; x:Name=&quot;btnOne&quot;&gt;Load HelloWorld1&lt;/Button&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Button Click=&quot;btnClick&quot; x:Name=&quot;btnTwo&quot;&gt;Load HelloWorld2&lt;/Button&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ContentControl <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cal:RegionManager.RegionName=&quot;{x:Static local:RegionNames.HelloWorld}&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/StackPanel&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/UserControl&gt; </p>\r\n<p>In the btnClick() of the code behind you'll find that I have a service object (of type IHelloWorldService) that I need to resolve - it will use the Button.Name as indicated above.&nbsp; The step after being resolved will use the applicable services GetMessage() to update the label, which in our case will contain the Hello World #1 or #2 message as applicable.&nbsp; You can get more details, as well as the source code, <a href=\"http://www.global-webnet.net/BlogEngine/post/2008/07/30/CompositeWPF-Using-a-single-interface-for-multiple-services.aspx\">HERE</a>.<br>\r\n<br>\r\n<em>HelloWorldView.xaml.cs</em> </p>\r\n<p>&nbsp;&nbsp;&nbsp; private void btnClick(object sender, System.Windows.RoutedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button button = sender as Button;<br>\r\n<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IHelloWorldService service = _container.Resolve&lt;IHelloWorldService&gt;(button.Name);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lblResults.Text = service.GetMessage();<br>\r\n</strong>&nbsp;&nbsp;&nbsp; }</p>\r\n<p><em>HelloWorldModule</em></p>\r\n<p>&nbsp;&nbsp;&nbsp; protected void RegisterViewsAndServices()<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .RegisterType&lt;IHelloWorldService, HelloWorldService1&gt;(&quot;btnOne&quot;)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .RegisterType&lt;IHelloWorldService, HelloWorldService2&gt;(&quot;btnTwo&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp; public class HelloWorldService1 : IHelloWorldService<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string GetMessage()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return &quot;********&gt; Hello World #1 &lt;********&quot;;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; } </p>\r\n<p>&nbsp;&nbsp;&nbsp; public class HelloWorldService2 : IHelloWorldService<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string GetMessage()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return &quot;======&gt; Hello World #2 &lt;======&quot;;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n<p>Am I getting closer to understanding your requirement?<br>\r\n<br>\r\n&nbsp;</p>\r\n",
    "PostedDate": "2008-07-30T19:45:09.347-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "108226",
    "ThreadId": "32012",
    "Html": "<p>That's&nbsp;exactly what I am looking for thanks a lot Bill.&nbsp; Sorry if this was an easy problem.&nbsp; The more I thought about my problem the more I realized its not so much of a Composite WPF&nbsp;hang up&nbsp;as it is a unity one.&nbsp; I just downloaded the unity documentation.&nbsp; One last question though.&nbsp; Using your above example, I have a class&nbsp;</p>\r\n<p>public class HelloWorld<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;public HelloWorld(IHelloWorldService service)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyService service;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;public IHelloWorldService MyService {get;set;}<br>\r\n}<br>\r\n<br>\r\nand then resolve as follows:<br>\r\n<br>\r\ncontainer.Resolve&lt;HelloWorld&gt;();<br>\r\n<br>\r\nis there a way to specify which IHelloWorldService you want to be injected into the constructor of HelloWorld or would you manually resolve the service and use the MyService property to give HelloWorld a handle to it.<br>\r\n<br>\r\n<br>\r\nThanks Much,<br>\r\n~Justin</p>\r\n",
    "PostedDate": "2008-07-31T06:05:03.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "108246",
    "ThreadId": "32012",
    "Html": "<p>Hi Justin, </p>\r\n<p>I haven't seen anything in the Unity documentation to suggest that there is named mapping support for Setter/Constructor injection.&nbsp; Here is one way you approached it (in concept, I would use MVP in the real world).</p>\r\n<p>Using the example provided I want HelloWorldService1 to resolve - I modified the btnClick()&nbsp;as follows:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void btnClick(object sender, System.Windows.RoutedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Button button = sender as Button;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //IHelloWorldService service = _container.Resolve&lt;IHelloWorldService&gt;(button.Name);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //lblResults.Text = service.GetMessage();</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HelloWorldController controller = _container.Resolve&lt;HelloWorldController&gt;();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lblResults.Text = controller.GetMessage();</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\nThis is what my controller looks like:</p>\r\n<p>&nbsp;&nbsp;&nbsp; public class HelloWorldController<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private IHelloWorldService _service;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public HelloWorldController(IUnityContainer container)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _service = container.Resolve&lt;IHelloWorldService&gt;(&quot;btnOne&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string GetMessage()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _service.GetMessage();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2008-07-31T07:45:24.537-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "108346",
    "ThreadId": "32012",
    "Html": "That works for me. :)&nbsp; Thanks a lot for your help Bill.<br>\r\n<br>\r\nThough less dynamic I was able to get what I was looking for by making the presenter templated so I can pass in the the view during registration or resolution.&nbsp; <br>\r\n",
    "PostedDate": "2008-07-31T13:56:12.683-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "112879",
    "ThreadId": "32012",
    "Html": "I believe there is named support as of Unity 1.1. You can use the Configuration API (Container.Configure) or you can specify through configuration.\r\n",
    "PostedDate": "2008-08-21T23:55:49.603-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]