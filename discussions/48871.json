[
  {
    "Id": "163175",
    "ThreadId": "48871",
    "Html": "<span style=\"font-family:tahoma;font-size:13px;white-space:pre-wrap\">Is there a way to query the Module to determine the various public types?  We want to dynamically load a view (there are dozens) based on a menu click.  I am able to dynamically load the module and next want to get a hold of the list of presenters in the module to check if the one the user has asked for exists and load it into the proper region.</span><div><span style=\"font-family:tahoma;font-size:13px;white-space:pre-wrap\"><br></span></div><div><span style=\"font-family:tahoma;font-size:13px;white-space:pre-wrap\">Here is a pseudocode example of what I am looking to do:</span></div><div><span style=\"font-family:tahoma;font-size:13px;white-space:pre-wrap\"><br></span></div><div><span style=\"font-family:tahoma;font-size:13px;white-space:pre-wrap\">                string moduleName = String.Format(&quot;{0}Module&quot;, viewSelected.ModuleName);_moduleLoader.Initialize(new ModuleInfo[] { _moduleEnumerator.GetModule(moduleName) });string typeName = String.Format(&quot;I{0}Presenter&quot;, viewSelected.ViewName);Type myType = GetTypeFromName(typeName);  &lt;-- This </span></div><div><span style=\"font-family:tahoma;font-size:13px;white-space:pre-wrap\"><span style=\"white-space:pre\">\t\t</span>_container.Resolve&lt;myType&gt;().View<br></span></div>",
    "PostedDate": "2009-03-01T06:07:57.557-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "164375",
    "ThreadId": "48871",
    "Html": "Technically speaking, yes you can do what you are describing. You can use reflection to get the assembly the module comes from and then load all the classes from that assembly that the module is defined in.<br>\r\n<br>\r\nI don't really recommend doing that though. I would recommend creating a seperate registration piece. Each module can register it's views in such a way that your menu's can find them.<br>\r\n<br>\r\nMaybe this blogpost helps you. In this post, i'm showing how to build an outlook style app. I have a list of buttons (the outlook navigation buttons) Each module can contribute items for those buttons. Only when you click the button do I want to create the views and add them to the regions.<br>\r\n<br>\r\n<a href=\"http://blogs.msdn.com/erwinvandervalk/archive/2009/03/02/how-to-build-an-outlook-style-application.aspx\">http://blogs.msdn.com/erwinvandervalk/archive/2009/03/02/how-to-build-an-outlook-style-application.aspx</a><br>\r\n<br>\r\nLet me know if that's helpful.<br>\r\n",
    "PostedDate": "2009-03-04T08:45:41.907-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "165433",
    "ThreadId": "48871",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi,</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d;font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-family:calibri\">This is possible by doing:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-family:calibri\">Type myType = Type.GetType(typeName);  //where typeName is the assembly qualified name for the type.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-family:calibri\">((IBasePresenter)_container.Resolve(myType)).View  //you cannot use generics, because you don’t know the type at compile-time, so you will need a known interface to get the View from (like IBasePresenter).</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-family:calibri\">In most containers (including Unity) you can even use strings as keys apart from types for these kind of things:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:calibri\">_container.Resolve&lt;IBasePresenter&gt;(viewSelecte.ViewName).View;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-family:calibri\">For that to work, you need to register the presenter with a string key and the IBasePresenter interface in the module’s initializer:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-family:calibri\">_container.RegisterType&lt;IBasePresenter, ConcretePresenterType&gt;(“myViewName”);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Another way to implement what you want is using the EventAggregator service. You could have your on demand modules subscribed to an event in the EventAggregator to show a view based on the name that the subscriber gets from the EventArgs. Then, in the Click handler you would initialize the module (which will really be initialized only the first time), and later publish that same event in the EventAggregator, passing the view name as an argument. In this way, you can host the name resolution to a specific view type in the on demand module making your modules less coupled, and also, using this approach, you will be able to avoid using the GetType method to resolve types.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Check the following sample code to see a possible implementation of this:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">//In the menu click handler…</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">private void MenuItem_Click(object sender, RoutedEventArgs e)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    string moduleName = String.Format(&quot;{0}Module&quot;, viewSelected.ModuleName);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    _moduleLoader.Initialize(new ModuleInfo[] { _moduleEnumerator.GetModule(moduleName) });</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    ActivateModuleEvent activateModuleEvent = this.eventAggregator.GetEvent&lt;ActivateModuleEvent&gt;();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    activateModuleEvent.Publish(viewSelected.viewName);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">//In the ModuleInitializer of the Module loaded on demand…</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">private readonly IRegionManager _regionManager;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">private readonly IUnityContainer _container;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">public ModuleInitializer (IRegionManager regionManager, IEventAggregator eventAggregator, IUnityContainer container)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    _regionManager = regionManager;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    _container = container;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    eventAggregator.GetEvent&lt;ActivateModuleEvent&gt;().Subscribe(ActiveModuleEventHandler, ThreadOption.UIThread, true);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">public void ActiveModuleEventHandler(string viewName)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">      {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    switch (viewName)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 70.8pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    case &quot;ViewA&quot;:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 106.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    _regionManager.Regions[&quot;MainRegion&quot;].Add(_container.Resolve&lt;DefaultViewA&gt;());</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 106.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    break;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 70.8pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    default:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 106.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    break;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Perhaps you could find useful the following articles about loosely coupled communication mechanism in the documentation:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707867.aspx\"><span style=\"color:#0000ff;font-family:calibri\">Event Aggregator</span></a><span style=\"font-family:calibri\"> service to publish and subscribe to events.</span>\r\n<p style=\"margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707894.aspx\"><span style=\"color:#0000ff;font-family:calibri\">Commands</span></a><span style=\"font-family:calibri\"> that allow to handle user interface (UI) actions to bind the UI to the logic that performs the action.</span>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\">Please let me know if this helps.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\">Ezequiel Sculli</span></p>\r\n<span style=\"font-size:11pt;color:#1f497d;font-family:'calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/esculli\">http://blogs.southworks.net/esculli</a></span></span></p>\r\n</span></p>\r\n",
    "PostedDate": "2009-03-06T10:02:00.66-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]