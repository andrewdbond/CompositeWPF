[
  {
    "Id": "189578",
    "ThreadId": "56133",
    "Html": "<p><span style=\"font-family:'Segoe UI';color:black;font-size:10pt\">Hi,</span></p>\r\n<p><span style=\"font-family:'Segoe UI';color:black;font-size:10pt\">I'm currently trying to propagate exceptions that occur in my ViewModel back to the View, and have been reading about all sorts of patterns on the web, but I&nbsp;am looking for a straight forward way of doing this. </span></p>\r\n<p><span style=\"font-family:'Segoe UI';color:black;font-size:10pt\">So far the best way I can see to do this easily using Prism is to fire an event using the Event Aggregator in the ViewModel and listen for this event in the View code behind. </span></p>\r\n<p><span style=\"font-family:'Segoe UI';color:black;font-size:10pt\">Is this the best way to handle this situation using Prism or is there an easier was to do this with the ViewModel pattern?</span></p>\r\n<p><span style=\"font-family:'Segoe UI';color:black;font-size:10pt\">Thanks,</span></p>\r\n<p><span style=\"font-family:'Segoe UI';color:black;font-size:10pt\">Ross</span></p>",
    "PostedDate": "2009-05-12T21:50:14.303-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "189745",
    "ThreadId": "56133",
    "Html": "<p>&lt;!-- .style1 { \tmargin-left: 40px; } --&gt; <span style=\"border-collapse:separate;color:#000000;font-family:'Times New Roman';font-size:16px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:normal;text-align:auto;text-indent:0px;text-transform:none;white-space:normal;word-spacing:0px\">\r\n<div style=\"color:#000000;font-family:'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif;font-size:10pt;margin-top:8px;margin-right:8px;margin-bottom:8px;margin-left:8px;background-image:initial;background-repeat:initial;background-attachment:initial;background-color:#ffffff;background-position:initial initial\">\r\n<p>The way I did this was to create a Module that handles exceptions, in it  \tI have all the view/viewmodels for showing exceptions and code to determine  \tthe type of exception and how to show it.</p>\r\n<p>This module gets loaded when the application loads and its view injected  \tin the shell inside a popup.</p>\r\n<p>When an exception occurs anywhere in the app, an event is fired, the  \texception module is setup to listen to the event and handle the exception by  \tshowing the popup and graying out the back of the app:</p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#008000;font-size:x-small\">// Subscribe to Application Exceptions  \tNotifications</span></p>\r\n<p><span style=\"color:#0000ff;font-size:x-small\">if</span><span style=\"font-size:x-small\"><span>&nbsp;</span>(eventAggregator!=</span><span style=\"color:#0000ff;font-size:x-small\">null</span><span style=\"font-size:x-small\">)</span></p>\r\n<p><span style=\"font-size:x-small\">eventAggregator.GetEvent&lt;</span><span style=\"color:#2b91af;font-size:x-small\">ApplicationExceptionEvent</span><span style=\"font-size:x-small\">&gt;().Subscribe(OnApplicationException,</span><span style=\"color:#2b91af;font-size:x-small\">ThreadOption</span><span style=\"font-size:x-small\">.PublisherThread);</span></p>\r\n<p>&nbsp;</p>\r\n<p>I also keep an internal list of exceptions, so that you can see ALL  \texceptions that have occured in the app, kind of like IE handles errors in  \tthe page and shows you all of them. (Of course remember not to save a \t<strong>REFERENCE</strong> of the exception, that would be BAD)</p>\r\n<p>It has worked really well, one thing though, if an unhandled exception  \toccurs, and I have to handle it in&nbsp;DispatcherUnhandledException, it will of  \tcourse not be handled by the exception module. In this&nbsp;</p>\r\n<p>case I basically have an ExceptionUtility class in my Exception Module  \tthat gets call to display the exception, this of course requires that you  \treference the exception module from your shell, but wouldn't you do it  \tanyway?:</p>\r\n<p>IN SHELL VIEW MODEL:</p>\r\n<span style=\"font-size:x-small\"> </span>\r\n<p><span style=\"color:#0000ff;font-size:x-small\">static</span><span style=\"font-size:x-small\"> </span> <span style=\"color:#0000ff;font-size:x-small\">void</span><span style=\"font-size:x-small\"> Current_DispatcherUnhandledException(</span><span style=\"color:#0000ff;font-size:x-small\">object</span><span style=\"font-size:x-small\"> sender, System.Windows.Threading.</span><span style=\"color:#2b91af;font-size:x-small\">DispatcherUnhandledExceptionEventArgs</span><span style=\"font-size:x-small\"> e)</span></p>\r\n<span style=\"font-size:x-small\">\r\n<p>{</p>\r\n</span>\r\n<p><span style=\"font-size:x-small\">e.Handled = </span><span style=\"color:#0000ff;font-size:x-small\">true</span><span style=\"font-size:x-small\">;</span></p>\r\n<span style=\"font-size:x-small\"> </span>\r\n<p><span style=\"color:#2b91af;font-size:x-small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  \tExceptionUtility</span><span style=\"font-size:x-small\">.ShowExceptionDialog(</span><span style=\"color:#a31515;font-size:x-small\">&quot;Unhandled  \tError&quot;</span><span style=\"font-size:x-small\">,</span><span style=\"color:#0000ff;font-size:x-small\">new</span><span style=\"font-size:x-small\"> </span><span style=\"color:#2b91af;font-size:x-small\">ExceptionRecord</span><span style=\"font-size:x-small\">(e.Exception));</span></p>\r\n<span style=\"font-size:x-small\"> </span><span style=\"font-size:x-small\">\r\n<p>}</p>\r\n</span>\r\n<p>Exception record converts an exception in to a plain text based object  \tfor record keeping.</p>\r\n<p>The pros of this are:</p>\r\n<p>- Centralized exception handling</p>\r\n<p>- Same view/viewmodel for ALL exceptions</p>\r\n<p>- Easier exception logging from a single place</p>\r\n<p>- Allows you to keep a history of exceptions the user can navigate.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Ricardo</p>\r\n</div>\r\n</span></p>",
    "PostedDate": "2009-05-13T06:42:15.807-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]