[
  {
    "Id": "1112997",
    "ThreadId": "463884",
    "Html": "Hi.\r<br />\n<br />\nI'm trying to implement interface IConfirmNavigationRequest in my WPF app, but can't make Prism call its functions.\r<br />\n<br />\nIn my app there are two regions, Region_1 and Region_3.\r<br />\n<br />\nIn Region_1 there's a FirstView, within which there's a button that's connected to a command in FirstViewModel, that does the actual navigation:<br />\n<pre><code>IRegionManager irmRegionManager = Microsoft.Practices.ServiceLocation.ServiceLocator.Current.GetInstance&lt;Microsoft.Practices.Prism.Regions.IRegionManager&gt;();\nIRegion irRegion3 = irmRegionManager.Regions[&quot;Region_3&quot;];\nvar viewToActivate = irRegion3.GetView(this.NavigatedView);\nirRegion3.Activate(viewToActivate);\n...\n</code></pre>\n\nThe navigation exchanges between two views in Region_3, and it works just fine.\r<br />\n<br />\nFirstViewModel implements interface IConfirmNavigationRequest, but its functions aren't called along navigation, which is simply performed.<br />\n<pre><code>public class FirstViewModel :\n                NotificationObject,\n                IConfirmNavigationRequest\n{\n    public void OnNavigatedTo(NavigationContext navigationContext)\n    {\n    }\n...\n</code></pre>\n\nI then also implemented interface IConfirmNavigationRequest for ThirdView and FourthView, that are the views between which the navigation occurs in Region_3, but for no avail.\r<br />\n<br />\nNevertheless, I implemented interface IRegionMemberLifetime for both ThirdView and FourthView, and its KeepAlive function gets called as expected.<br />\n<pre><code>public partial class ThirdView :\n                        UserControl,\n                        IConfirmNavigationRequest,\n                        IRegionMemberLifetime\n{\n    public ThirdView()\n    {\n        InitializeComponent();\n    }\n\n    public bool KeepAlive\n    {\n        get { return true; }\n    }\n\n    public void OnNavigatedTo(NavigationContext navigationContext)\n    {\n    }\n...\n</code></pre>\n\nAt this point I was told that you should not navigate in Region_3 from Region_1, and that if you do so, IConfirmNavigationRequest functions won't be called. I therefore moved the navigation code (Activate) to ThirdView, where it is executed in result of an event that's fired by FirstViewModel whenever above mentioned button is clicked, and made ThirdView support interface IConfirmNavigationRequest, but for no avail: the functions of interface IConfirmNavigationRequest still aren't called.\r<br />\n<br />\nCan anybody explain how to force Prism to call these functions?\r<br />\n<br />\nThanks!<br />\n",
    "PostedDate": "2013-10-28T04:25:50.857-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1113084",
    "ThreadId": "463884",
    "Html": "Hello OferElboher,\r<br />\n<br />\nBased on my understanding, the problem you are facing remains on how you would &quot;<em>navigate</em>&quot; through <strong>Views</strong>.\r<br />\n<strong><em>Activate()</em></strong> method would not be exactly a <em>Navigation</em> call. I would think that <strong>Region_3</strong> is a <strong><em>SingleActiveRegion</em></strong> so when you call to <strong><em>Activate()</em></strong> a specified <strong>View</strong>, the previous <strong>View</strong> that was already shown gets <em>deactivated</em>. This behavior of <strong><em>SingleActiveRegion</em></strong> would make you experience some kind of <em>Navigation</em>. However, any <em>Confirmation</em> or <em>NavigatedTo/From</em> methods would not be called.\r<br />\n<br />\nIn order to properly navigate between <strong>Views</strong>, you would need to use <strong><em>Region_3.RequestNavigate(..)</em></strong> method. \r<br />\nThen, changing the <strong><em>Activate()</em></strong> call with <strong><em>RegionManager.Regions[&quot;Region_3&quot;].RequestNavigate(new Uri(this.NavigatedView.Name, UriKind.Relative));</em></strong> would solve the issue. <strong>IConfirmNavigation</strong> would also be needed to be implemented on the current source <strong><em>Active</em></strong> <strong>Region_3's View</strong>.\r<br />\n<br />\nYou can verify on the <strong>Prism</strong> library implementation how the <strong>ConfirmNavigation</strong> method is called:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n <span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> RequestCanNavigateFromOnCurrentlyActiveView(\n       NavigationContext navigationContext,\n       Action&lt;NavigationResult&gt; navigationCallback,\n       <span style=\"color:Blue;\">object</span>[] activeViews,\n       <span style=\"color:Blue;\">int</span> currentViewIndex)\n {\n       <span style=\"color:Blue;\">if</span> (currentViewIndex &lt; activeViews.Length)\n       {\n           <span style=\"color:Blue;\">var</span> vetoingView = activeViews[currentViewIndex] <span style=\"color:Blue;\">as</span> IConfirmNavigationRequest;\n           <span style=\"color:Blue;\">if</span> (vetoingView != <span style=\"color:Blue;\">null</span>)\n           {\n               <span style=\"color:Green;\">// the current active view implements IConfirmNavigationRequest, request confirmation</span>\n               <span style=\"color:Green;\">// providing a callback to resume the navigation request</span>\n               vetoingView.ConfirmNavigationRequest(\n                   navigationContext,\n                   canNavigate =&gt;\n                   {\n                       <span style=\"color:Blue;\">if</span> (<span style=\"color:Blue;\">this</span>.currentNavigationContext == navigationContext &amp;&amp; canNavigate)\n                       {\n                           RequestCanNavigateFromOnCurrentlyActiveViewModel(\n                               navigationContext,\n                               navigationCallback,\n                               activeViews,\n                               currentViewIndex);\n                      }\n                      <span style=\"color:Blue;\">else</span>\n                      {\n                           <span style=\"color:Blue;\">this</span>.NotifyNavigationFailed(navigationContext, navigationCallback, <span style=\"color:Blue;\">null</span>);\n                      }\n                });\n           }\n     ...\n}\r\n</pre></div>Regarding Activate() call, you could see that it doesn't perform any Navigation confirmation:<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> Activate(<span style=\"color:Blue;\">object</span> view)\n{\n      <span style=\"color:Blue;\">object</span> currentActiveView = ActiveViews.FirstOrDefault();\n\n      <span style=\"color:Blue;\">if</span> (currentActiveView != <span style=\"color:Blue;\">null</span> &amp;&amp; currentActiveView != view &amp;&amp; <span style=\"color:Blue;\">this</span>.Views.Contains(currentActiveView))\n      {\n           <span style=\"color:Blue;\">base</span>.Deactivate(currentActiveView);\n      }\n      <span style=\"color:Blue;\">base</span>.Activate(view);\n}\r\n</pre></div>Notice that calling <strong><em>RequestNavigate()</em></strong> method from a different <strong>Region</strong> than the one where <em>navigation</em> takes place would not be a problem. \r<br />\nNevertheless, <strong>IConfirmNavigation</strong> should be implemented on the <strong>ViewModel</strong> that belongs to the <strong>View</strong> on <strong>Region_3</strong> that is <em>Active</em> before <strong>Navigation</strong> would be performed.\r<br />\n<br />\nYou can find more information about <strong><em>Navigation</em></strong> on the following <strong>MSDN Prism</strong> Guide chapter:<br />\n<h1></h1>\n<ul>\n<li>\n<a href=\"http://msdn.microsoft.com/en-us/library/gg430861(v=pandp.40).aspx#sec12\" rel=\"nofollow\">Navigation</a><br />\n</li>\n</ul>\nI hope this helped you,\r<br />\n<br />\nGabriel Ostrowsky.\r<br />\n<a href=\"http://blogs.southworks.net/gostrowsky\" rel=\"nofollow\">http://blogs.southworks.net/gostrowsky</a><br />\n",
    "PostedDate": "2013-10-28T07:16:57.88-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": "2013-10-28T10:07:33.14-07:00"
  },
  {
    "Id": "1113201",
    "ThreadId": "463884",
    "Html": "Thanks you VERY-VERY much, Gabriel.\r<br />\nThat's a neat and clean explanation that immediately worked!<br />\n",
    "PostedDate": "2013-10-28T10:08:58.66-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]