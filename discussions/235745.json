[
  {
    "Id": "525934",
    "ThreadId": "235745",
    "Html": "\r\n<p>I need some advice on using the EventAggregator.&nbsp; Currently, I just want to use the EventAggregator and not other aspects of Prism.&nbsp; I am also using MEF, not Unity.</p>\r\n<p>&nbsp;</p>\r\n<p>Everything I have researched says to use a single instance of the EventAggregator.&nbsp; All those examples seem to use Prism and Unity to take care of that so I would like an example on doing it with MEF.</p>\r\n<p>I also want to know a little more about waht goes on under the hood of the EventAggregator.&nbsp; My concern is whether I need multiple instances of it or not and the best way to handle accomplishing that.&nbsp; The situation is that I have different views\r\n and viewmodels that are similar in nature and may publish the same event.&nbsp; Does the EventAggregator differentatiate events depending on the object that published it?&nbsp; For example, if class A publishes MyEvent&nbsp;and class B also publishes MyEvent\r\n will subscribers to MyEvent get the evnt from both class A and class B?&nbsp; If so, I need to avoid this situation.&nbsp; Should I just use a filter or use a different EventAggregator for separate components within my application.</p>\r\n<p>Since this is important, let me explain further using specifics from my application.&nbsp; The main portion of my application is a graph control.&nbsp; This user control visualizes data in the form of Node objects.&nbsp; Node objects can be connected to\r\n other nodes via Edges (lines).&nbsp; The view model for the graph control will be publishing a serieis of events such as NodeMouseEnter, NodeMouseLeave, NodeMouseClick, etc.&nbsp; Certain portions of the user interface will subscribe to these events.&nbsp;\r\n An example is a popup control that displays information about a node when the mouse hovers over it.&nbsp; Now, the flip side is that some portions of the application have there own version of the graph control (with their own viewmodel).&nbsp; Much of the\r\n functionality will be the same and they will share base classes.&nbsp; They would also publish many of the same events but the subscribers must be different.&nbsp; If I hover my mouse cursor over a node in a subgraph (not the main graph) I want the node popup\r\n to show on the subgraph, not on the main graph (and vice versa).&nbsp; Does this mean I want a separate EventAggregator to handle these different Graph controls??</p>\r\n<p>Thanks,</p>\r\n<p>Todd</p>\r\n",
    "PostedDate": "2010-11-23T08:52:02.66-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526020",
    "ThreadId": "235745",
    "Html": "\r\n<p>Hi Todd,</p>\r\n<p>In order to support using the Event Aggregator with MEF, the Prism Library provides a\r\n<strong>MefEventAggregator </strong>class (located in the <strong>Prism.MefExtensions.Silverlight</strong> project), which &quot;<em>Exports the EventAggregator using the Managed Extensibility Framework (MEF)</em>&quot;. So if you want to use it, you should import an\r\n instance of <strong>IEventAggregator</strong>, providing that you have added the necessary composable part to the Aggregate Catalog (which is done by the\r\n<strong>MefBootstrapper</strong>). You could find an example of using the Event Aggregator in the\r\n<a href=\"http://msdn.microsoft.com/en-us/library/ff921074%28PandP.40%29.aspx\">Stock Trader Reference Implementation</a>.</p>\r\n<p>If you don't want to add the entire Prism libraries that hold the <strong>EventAggregator</strong>, the\r\n<strong>MefEventAggregator </strong>and even the <strong>MefBootstrapper </strong>\r\nitself, you could put the necessary classes for the <strong>EventAggregator </strong>\r\n(which are located in the <strong>Events</strong> folder of the <strong>Prism.Silverlight</strong> project) in a library of yours, and export the\r\n<strong>EventAggregator </strong>class as an <strong>IEventAggregator</strong>. To this purpose, you might also find this\r\n<a href=\"http://blogs.southworks.net/dschenkelman/2009/05/08/putting-prism-v2-extensibility-to-test-the-standalone-silverlight-event-aggregator/\">\r\nblog post</a> by <a href=\"http://blogs.southworks.net/dschenkelman\">Damian Schenkelman</a> useful. Even though it is targeted at an older Prism version, it should still work, as there aren't breaking changes in Event Aggregation in Prism v4.0.</p>\r\n<p>As for your specific scenario, you could make use of the <strong>Subscription Filtering\r\n</strong>feature of the Event Aggregator, to make the subscribers handle events only if a certain condition is met (which would suit to your scenario, in my understanding). You can read about it in\r\n<a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28PandP.40%29.aspx\">this article</a> from the Prism documentation (Under the Event Aggregation section, and specifically under the Subscription Filtering sub section).</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2010-11-23T11:30:05.67-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526117",
    "ThreadId": "235745",
    "Html": "\r\n<p>Thanks Guido.</p>\r\n<p>I decided, for now, to not use MEF for this situation.&nbsp; I am using MEF in other areas but do to the timeline I am on I wanted to go with a slightly different scenario.&nbsp; I have plans, in the future, to update my solution to use the MefBootStrapper\r\n but I don't have that time for now.&nbsp; I ended up wrapping the EventAggregator and providing a static property to access an instance of the class.</p>\r\n<p>I don't need the filters at this point but hope they will end up allowing me to separate the events of different components.&nbsp; That is an important aspect that I will need in the near future.&nbsp; I just came across a perfect example.&nbsp; My Node\r\n class is now pbulishing a NodeMouseEnterEvent whenever the mouse enters it.&nbsp; The trick here is that more than one graph may contain Node objects and the events shouldn't cross components.&nbsp; I.E., Graph A should not get events from nodes that are on\r\n Graph B.&nbsp; I can use a Filter for this but I am trying to ensure that this is the best option.&nbsp; Each graph could have hundreds of nodes and the mouse enter and leave events could fire very quickly</p>\r\n",
    "PostedDate": "2010-11-23T14:28:25.98-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526436",
    "ThreadId": "235745",
    "Html": "\r\n<p>It's nice to see that you're planning to implement further Prism capabilities.</p>\r\n<p>As regarding your concern with the Event Aggregator, considering that you're going to have several instances of the Node objects, it could be a better idea to have a separate instance of the Event Aggregator for each Graph object, so as to avoid possible\r\n performance issues.</p>\r\n<p>Take into account that the Event Aggregator is useful to communicate between loosely coupled components. If the communication will be between components that are located in the same assembly, it isn't necessary to use the Event Aggregator; you could just\r\n use plain .NET events.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2010-11-24T06:56:57.857-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526471",
    "ThreadId": "235745",
    "Html": "\r\n<p>Thanks Guido.</p>\r\n<p>I have taken in to account the EventAggregator being useful for communication between loosely coupled components.&nbsp; Currently, most of my components are in the same assembly but they are very loosely coupled.&nbsp; I am also leaning towwards splitting\r\n my main project into multiple projects because it is getting rather large and unrulely.</p>\r\n<p>I weighed the decision to use EventAggregator for some time.&nbsp; I finally made the decision with the current task I am working on.&nbsp; I have a control I created that is a popup and shows information for a node.&nbsp; The control itself has no reference\r\n to a node.&nbsp; The graph control (which has the popup control and the nodes) would have to refire the node mouse enter and mouse leave events and I would have had to make my popup control have reference to the graph view model (since I am using MVVM).&nbsp;\r\n I didn't want this tight coupling so the EventAggregator is a perfect fit.</p>\r\n<p>Since I created a wrapper for the EventAggregator, I should be able to easily update it to allow overriding the default instance (to provide additional instances for additional graphs).&nbsp; This appears to be similar to how the Messenger API works in the\r\n MVVM Light Framework.</p>\r\n<p>Todd</p>\r\n",
    "PostedDate": "2010-11-24T07:57:29.257-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]