[
  {
    "Id": "685274",
    "ThreadId": "276172",
    "Html": "\r\n<p>Hello!</p>\r\n<p>I've got many views registered under the same region (this can't be changed). I need to instantiate view only when they are required. Currently I'm using this ugly code to achieve this:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> Common;\r\n<span style=\"color:blue\">using</span> Common.Events;\r\n<span style=\"color:blue\">using</span> Microsoft.Practices.Prism.Events;\r\n<span style=\"color:blue\">using</span> Microsoft.Practices.Prism.Regions;\r\n<span style=\"color:blue\">using</span> Microsoft.Practices.Unity;\r\n<span style=\"color:blue\">using</span> OnAgile.Views;\r\n\r\n<span style=\"color:blue\">namespace</span> OnAgile.Controllers\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MainController : ControllerBase\r\n    {\r\n        <span style=\"color:blue\">public</span> MainController(IUnityContainer container, IEventAggregator eventAggregator, IRegionManager regionManager)\r\n            : <span style=\"color:blue\">base</span>(container, eventAggregator, regionManager)\r\n        {\r\n            InitViews();\r\n            DisplayView(ViewNames.LoginView);\r\n\r\n            EventAggregator.GetEvent&lt;SwitchViewEvent&gt;().Subscribe(OnSwitchViewEvent, <span style=\"color:blue\">true</span>);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> InitViews()\r\n        {\r\n            viewsMap = <span style=\"color:blue\">new</span> Dictionary&lt;<span style=\"color:blue\">string</span>, <span style=\"color:blue\">object</span>&gt;();\r\n            viewsMap[ViewNames.LoginView] = <span style=\"color:blue\">null</span>;\r\n            viewsMap[ViewNames.RegisterView] = <span style=\"color:blue\">null</span>;\r\n            viewsMap[ViewNames.RegisterView] = <span style=\"color:blue\">null</span>;\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> DisplayView(<span style=\"color:blue\">string</span> viewName)\r\n        {\r\n            IRegion mainRegion = GetMainRegion();\r\n\r\n            <span style=\"color:blue\">object</span> view = <span style=\"color:blue\">null</span>;\r\n\r\n            <span style=\"color:blue\">if</span> (viewsMap[viewName] == <span style=\"color:blue\">null</span>)\r\n            {\r\n                <span style=\"color:green\">//can't use switch here</span>\r\n                <span style=\"color:blue\">if</span> (viewName == ViewNames.LoginView)\r\n                    view = Container.Resolve&lt;LoginView&gt;();\r\n                <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (viewName == ViewNames.RegisterView)\r\n                    view = Container.Resolve&lt;RegistrationView&gt;();\r\n                <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (viewName == ViewNames.ActivateView)\r\n                    view = Container.Resolve&lt;ActivationView&gt;();\r\n\r\n                <span style=\"color:blue\">if</span> (view != <span style=\"color:blue\">null</span>)\r\n                {\r\n                    viewsMap[viewName] = view;\r\n                    mainRegion.Add(view, viewName);\r\n                }\r\n            }\r\n\r\n            view = mainRegion.GetView(viewName);\r\n\r\n            <span style=\"color:blue\">if</span> (view != <span style=\"color:blue\">null</span>)\r\n                mainRegion.Activate(view);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> IRegion GetMainRegion()\r\n        {\r\n            <span style=\"color:blue\">return</span> RegionManager.Regions[RegionNames.MainRegion];\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> OnSwitchViewEvent(<span style=\"color:blue\">string</span> viewName)\r\n        {\r\n            <span style=\"color:blue\">if</span> (viewsMap.ContainsKey(viewName))\r\n                DisplayView(viewName);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> Dictionary&lt;<span style=\"color:blue\">string</span>, <span style=\"color:blue\">object</span>&gt; viewsMap;\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>As you can see I'm holding dictionary and resolve views only when needed (when composite event&nbsp;SwitchViewEvent is received). Is there any more elegant approach to do what I want?</p>\r\n<p>PS. RegisterViewWithRegion( delegate ) also resolves views immediately :(</p>\r\n",
    "PostedDate": "2011-10-17T10:11:47.507-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "685417",
    "ThreadId": "276172",
    "Html": "<p>Hi,</p>\r\n<p>The view discovery approach (that is, using the <strong>RegisterViewWithRegion </strong>method) is designed to automatically populate a region, with the corresponding registered views, when the region is available using the <strong>AutoPopulateRegionBehavior</strong>. If you need to control when a view is going to be \"shown\" in a region, it's recommended to use the view injection approach (that is, adding a view to a region with the <strong>Add </strong>method) or use navigation instead.</p>\r\n<p>However, if you cannot change this, you might need to implement a custom method to control the views registered in the region and when they are going be injected. For example, a possible approach could be to create your own implementation of the <strong>AutoPopulateRegionBehavior </strong>(which is the one that creates and adds the registered views to the regions) so that you can control when the views will be added in the corresponding region.</p>\r\n<p>Regarding the approach that you describe above, it seems to be a valid approach as the implementation details depends mostly of the requirements of your scenario and your personal preferences. However, in the case that this approach is being used with a single active region (for example a <strong>ContentControl</strong>), the views seems to be added and activated but never removed from the region, which could cause an undesired memory leak. To avoid this you could remove the views in the region before adding the new one or use navigation instead. Again, these recommendations only applies to a single active region and might not be required if the region must contain more than one view, like a <strong>TabControl </strong>or a <strong>ListBox</strong>.</p>\r\n<p>Also, you can find more information in the following links:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921098%28v=PandP.40%29.aspx\">Chapter 7: Composing the User Interface in MSDN</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg430861%28v=PandP.40%29.aspx\">Chapter 8: Navigation in MSDN</a></li>\r\n</ul>\r\n<p>I hope you find it useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\" target=\"_blank\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-10-17T13:54:17.347-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]