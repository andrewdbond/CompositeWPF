[
  {
    "Id": "947610",
    "ThreadId": "404727",
    "Html": "\r\n<p>Hi all</p>\r\n<p>I am trying to learn how to architect a modular application in WPF 4 using PRISM 4.</p>\r\n<p>Using Unity container to register and inject my types, I have got a shell application and have created a single module which automatically loads. The &quot;landing page&quot; of my created module is a user control has a number of buttons to allow the user\r\n to access the area of the module concerned. My questions&nbsp;are</p>\r\n<ul>\r\n<li>Upon clicking one of these buttons how would I get the User control/view associated to this area of the module to load in the MainRegion I have defined in the shell application? I have my &lt;Module&gt;MainView & associated viewmodel & interface. In the\r\n view model I have a DelegateCommand created but what goes in here? </li><li>Then how would I go back to the &quot;landing page&quot; when user has finished processing in the previous area?\r\n</li><li>How do I have multiple modules in my solution and load&nbsp;a specific&nbsp;module from a &quot;Main&quot; startup module dependant on user selection?\r\n</li></ul>\r\n<p>Sorry if these are daft questions but Can't seem to get head away from button click = Frame.Navigate????????</p>\r\n<p>Any help appreciated.</p>\r\n<p>Thanks</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-11-27T05:02:59.45-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "947811",
    "ThreadId": "404727",
    "Html": "\r\n<p>OK, carried on looking and have modified my application to have the following structure:</p>\r\n<p>&nbsp;</p>\r\n<ul>\r\n<li>Management.Desktop wpf aaplication with shell window. This calls Bootstrapper class(Unity) and registers my modules, ModuleA is set to load on demand whilst ManagementMainModule is initialised straight off the bat.\r\n</li><li>ManagementMai&#65279;nModule\r\n<ul>\r\n<li>This has a MainView & MainViewViewModel with commands bound to buttons for launching other modules. Have injected the&nbsp;IModuleManager and called the LoadModule(&quot;ModuleA&quot;) method to load my other &quot;A&quot; module\r\n</li></ul>\r\n</li><li>ModuleA\r\n<ul>\r\n<li>ModuleA has a main UserControl with buttons to load the various views within this module, again commands bound to the buttons\r\n</li><li>I can load the various views but am unsure how to get my ManagementMainModule to show back in my MainRegion upon &quot;exiting&quot; my ModuleA, surely ModuleA does not need to know about the ManagementMainModule to activate this view in the ContentControl of my\r\n app? </li></ul>\r\n</li></ul>\r\n<p>Question is essentially, once I've finished with a module, how do I go&nbsp;activate the &quot;original&quot; main modules' MainView?????</p>\r\n",
    "PostedDate": "2012-11-27T09:52:14.28-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "947871",
    "ThreadId": "404727",
    "Html": "\r\n<p>Hi,</p>\r\n<p><strong>Prism </strong>provides you with several approaches to dynamically compose your UI using\r\n<strong>Regions</strong>. If you want to switch the <strong>MainView </strong>that is in the\r\n<strong>MainRegion </strong>with another view, when a button of the aforementioned\r\n<strong>MainView </strong>is pressed, you could use the <strong><span style=\"text-decoration:underline\"><em>view injection</em></span></strong> or the\r\n<span style=\"text-decoration:underline\"><em><strong>navigation</strong></em><strong>&nbsp;</strong></span> approaches provided by\r\n<strong>Prism</strong>. For example, in the method executed by the <strong>DelegateCommand</strong>, you could perform a navigation request like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// After loading ModuleA</span>\n_regionManager.RequestNavigate(<span style=\"color:#a31515\">&quot;MainRegion&quot;</span>, <span style=\"color:#a31515\">&quot;ModuleAView&quot;</span>);\n</pre>\r\n</div>\r\n<p>Then, when you need to go to the <strong>MainView </strong>again, you can simply perform another navigation request to the\r\n<strong>MainView</strong>. Like this, the modules do not need to know each other, as the navigation approach provided by\r\n<strong>Prism </strong>use <strong>URIs </strong>to identify the views.</p>\r\n<p>Also, <strong>Prism </strong>provides you with a <strong>RegionNavigationJournal\r\n</strong>which allows you to navigate back and forward between the different navigation request that were performed in a specific region. For example, if you navigated from your\r\n<strong>MainView </strong>to the <strong>ModuleAView</strong>, you can navigate back to the\r\n<strong>MainView </strong>simply by invoking the <strong>Journal</strong>'s <strong>\r\nGoBack </strong>method of the <strong>NavigationService </strong>of the <strong>MainRegion</strong>. However, in order to be able to use this, the\r\n<strong>MainView </strong>should be also navigated the first time, instead of being registered using the\r\n<strong>RegisterViewWithRegion </strong>method. For example, in the <strong>Initialize\r\n</strong>method of the <strong>ManagementMainModule </strong>you could navigate to the\r\n<strong>MainView </strong>doing something like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// After registering the components in the container </span>\n_regionManager.RequestNavigate(<span style=\"color:#a31515\">&quot;MainRegion&quot;</span>, <span style=\"color:#a31515\">&quot;MainView&quot;</span>);\n</pre>\r\n</div>\r\n<p>Take into account that in order to use your views with <strong>Prism</strong>'s navigation capabilities you need to register your views in the container to be used in navigation. For example, in\r\n<strong>Unity</strong>, a view must be registered like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>container.RegisterType&lt;<span style=\"color:blue\">object</span>, MainView&gt;(<span style=\"color:#a31515\">&quot;MainView&quot;</span>);\n</pre>\r\n</div>\r\n<p>You can find more information about navigation and other UI composition capabilities provided by\r\n<strong>Prism </strong>in the following chapters of the documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg430861%28v=pandp.40%29.aspx\">Chapter 8 - Navigation</a>\r\n</li><li><a href=\"http://msdn.microsoft.com/en-us/library/ff921098%28v=pandp.40%29.aspx\">Chapter 7 - Composing the User Interface</a>\r\n</li></ul>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br>\r\n<a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>\r\n",
    "PostedDate": "2012-11-27T11:09:20.003-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "948238",
    "ThreadId": "404727",
    "Html": "\r\n<p>Cheers for response DC. Can I question this part?</p>\r\n<p><span style=\"color:#808080\"><em>&quot;Then, when you need to go to the <strong>MainView\r\n</strong>again, you can simply perform another navigation request to the <strong>\r\nMainView</strong>. Like this, the modules do not need to know each other, as the navigation approach provided by\r\n<strong>Prism </strong>use <strong>URIs </strong>to identify the views.&quot;</em></span></p>\r\n<p><span style=\"color:#000000\">My thinking was that I would have a &quot;Done/Close&quot; button in my ModuleAView which indicates to me that the user is finished with this module. If I had a command in my ModuleAViewViewModel which had the _regionManager.RequestNavigate(<span style=\"color:#a31515\">&quot;MainRegion&quot;</span>,\r\n<span style=\"color:#a31515\">&quot;MainView&quot;</span>); line this implies that my ModuleA can only ever be loaded into an application which actually had a MainView is this right? I thought the idea of modularisation was I could consume my module in any calling app,\r\n within reason? Would this be saying &quot;you can consume in any app which has a MainView delared and registered in the regionManager&quot;?<br>\r\n</span></p>\r\n<p><span style=\"color:#000000\">Thanks again.</span></p>\r\n<p><span style=\"color:#000000\">&nbsp;</span></p>\r\n",
    "PostedDate": "2012-11-28T03:49:59.62-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "948477",
    "ThreadId": "404727",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Based on my understanding in some scenarios modules may depend on other modules, as they could require components provided by other modules to function, without knowing their specific implementations. Hence, it will depend on your preferences and the requirements\r\n of your scenario, how these modules will be integrated together into the main application.</p>\r\n<p>It's true that calling the <strong>_regionManager.RequestNavigate</strong> method in you ModuleA's view model, will require having a MainView registered in the application. Although, this will not make your module dependent of any specific implementation\r\n of this view, it will require one in order to function properly.</p>\r\n<p>Hence as an alternative, I believe, using another loosely coupled communication mechanism could become handy if you want your modules to be more independent, for example you could publish an event using the\r\n<strong>EventAggregator</strong> when closing the opened module's view. This way your main module could be subscribed to this event and react showing the MainView again when necessary. Like this your module doesn't need to know of the existence of a MainView.\r\n For more information about the use of the <strong>EventAggregator</strong> you could check the following chapter of the\r\n<strong>Prism </strong>documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921122(v=pandp.40).aspx\">9: Communicating Between Loosely Coupled Components</a>\r\n</li></ul>\r\n<p>I hope you find this helpful,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-11-28T09:31:23.517-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "948869",
    "ThreadId": "404727",
    "Html": "\r\n<p>Great input, cheers Agustin.</p>\r\n",
    "PostedDate": "2012-11-29T02:36:26.433-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]