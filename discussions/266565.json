[
  {
    "Id": "647553",
    "ThreadId": "266565",
    "Html": "\r\n<p>HI all,</p>\r\n<p>In my application I want to stick to Prism/MVVM. The application consists of several separated assemblies (modules if you will). Those modules have views, that can appear in various Regions of the Shell. Whenever events happen/trigger in one of the views,\r\n other views in other Regions have to react/respond to that event.</p>\r\n<p>Example: when a user chooses one Person from a PersonList in view A, the PersonDetails have to appear in PersonDetailView of view B.</p>\r\n<p>If I understand correctly I need an EventAggregator to achieve this. Furthermore, I need to &quot;inject&quot; that EventAggregator into the different modules, so that they can publish and subscribe on the EventAggregator's CompositePresentationEvent.</p>\r\n<p>My questions:</p>\r\n<p>1. How do I instantiate the EventAggregator in the Container?</p>\r\n<p>2. How do I inject the EventAggregator into the modules so that they can publish and subscribe respectively?</p>\r\n<p>If possible I would appreciate documentation for further study and examples. Please no examples without proper MVVM structure, I've seen more than a few like those. The trick for me is in the MVVM with the dependeny injection!</p>\r\n<p>Thanks in advance!</p>\r\n",
    "PostedDate": "2011-07-26T00:23:36.343-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "647704",
    "ThreadId": "266565",
    "Html": "<p>Hi,</p>\r\n<p>In applications developed using Prism, services such as the <strong>EventAggregator </strong>are exported automatically. For example, you might find the <strong>MefEventAggregator </strong>class useful to see how this is achieved. The contract for the export involving the <strong>EventAggregator</strong> is its interface, <strong>IEventAggregator</strong>. Therefore, in order to inject the <strong>EventAggregator</strong> into your modules, you need to use the <strong>Import </strong>attribute, or the <strong>ImportingConstructor</strong>, or anything similar that achieves similar result, for a property of type <strong>IEventAggregator</strong>. That will bring the <strong>EventAggregator </strong>to your module, thus allowing you to publish and subscribe events for your purposes.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-07-26T06:04:10.51-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "840365",
    "ThreadId": "266565",
    "Html": "<p>This reply is all very well and correct, but my problem is that each view model is getting a new and different instance of the object, an object that must only be instantiated once. I am \"simply\" trying to pass around in this way an event aggregator, and so far, each VM is seeing a different one.</p>\r\n<p>Can anyone advise on how I can ensure that only one event aggregator is created. I am using Prism 4 with MEF and a full MVVM pattern.</p>\r\n<p>TIA</p>\r\n<p>jxxs</p>",
    "PostedDate": "2012-05-24T04:43:36.33-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "840573",
    "ThreadId": "266565",
    "Html": "<p>Hi,</p>\r\n<p>By default Prism registers a <strong>singleton </strong>instance of the <strong>EventAggregator </strong>class in the container through the <strong>IEventAggregator </strong>interface. This can be seen in the <strong>ConfigureContainer </strong>method in the <strong>UnityBootstrapper </strong>implementation provided with <strong>Prism </strong>when using <strong>Unity </strong>or in the <strong>MefEventAggregator </strong>class when using <strong>MEF</strong>.</p>\r\n<p>Hence if you retrieve this instance using the <strong>IEventAggregator </strong>interface from the container (note that you must use the interface to retrieve the mapped instance of the <strong>EventAggregator </strong>class), then you should be able to retrieve the same instance in all the view models without problems.</p>\r\n<p>If this doesn't help it would be helpful if you could provide us with more information about your particular scenario, and the way you obtain the <strong>EventAggregator</strong> instance in each of your view models.</p>\r\n<p>Regards,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-05-24T11:54:52.897-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]