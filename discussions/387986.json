[
  {
    "Id": "889888",
    "ThreadId": "387986",
    "Html": "\r\n<p>I'm having problems with a simple project here, please, I need help.</p>\r\n<p>I'm using SL5, Prism 4.1, Unity.</p>\r\n<p>I'm making a simple solution for studying purposes, but I can't advance since my solution can't load the modules I coded so far, it throws an exception that says that it can't find the module Countries, but it fact, if I don't load the module Countries,\r\n the same exception is thrown for the remaining module. I haven't been able to see what the problem is.</p>\r\n<p>Here is the solution structure:&nbsp;</p>\r\n<p><img src=\"http://s16.postimage.org/qe9ayspd1/Sin_t_tulo.jpg\" alt=\"\" width=\"267\" height=\"716\"></p>\r\n<p>Here's the Bootstarpper:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MyBootstrapper : UnityBootstrapper {\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">const</span> <span style=\"color:blue\">string</span> ModuleCatalogUri =\r\n                            <span style=\"color:#a31515\">&quot;/MyPrismSolution;component/ModulesCatalog.xaml&quot;</span>;\r\n\r\n    <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> IModuleCatalog CreateModuleCatalog() {\r\n        ModuleCatalog mc = Microsoft.Practices.Prism.Modularity.ModuleCatalog.CreateFromXaml(\r\n                                    <span style=\"color:blue\">new</span> Uri(ModuleCatalogUri, UriKind.Relative));\r\n        <span style=\"color:blue\">return</span> mc;\r\n               \r\n    }\r\n\r\n    <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> DependencyObject CreateShell() {\r\n        <span style=\"color:green\">// Use the container to create an instance of the shell.</span>\r\n        Shell view = <span style=\"color:blue\">this</span>.Container.TryResolve&lt;Shell&gt;();\r\n\r\n        <span style=\"color:green\">// Set it as the root visual for the application.</span>\r\n        Application.Current.RootVisual = view;\r\n\r\n        <span style=\"color:blue\">return</span> view;\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>Here's the Modules catalog:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleCatalog</span>    \r\n    <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns:x</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns:sys</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">clr-namespace:System;assembly=mscorlib</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns:Modularity</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">clr-namespace:Microsoft.Practices.Prism.Modularity;assembly=Microsoft.Practices.Prism</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfoGroup</span>\r\n        <span style=\"color:red\">Ref</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Companies.xap</span><span style=\"color:black\">&quot;</span>\r\n        <span style=\"color:red\">InitializationMode</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">WhenAvailable</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n        &lt;Modularity:ModuleInfo\r\n            ModuleName=&quot;Companies&quot;\r\n            ModuleType=&quot;Companies.Companies, Companies, \r\n                        Version=1.0.0.0, Culture=neutral,\r\n                PublicKeyToken=null&quot; &gt;\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfo</span><span style=\"color:blue\">&gt;</span>\r\n        &lt;Modularity:ModuleInfo\r\n            ModuleName=&quot;Countries&quot;\r\n            ModuleType=&quot;Countries.Countries, Countries, \r\n                        Version=1.0.0.0, Culture=neutral,\r\n                PublicKeyToken=null&quot; &gt;\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfo</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfoGroup</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleCatalog</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>Here's one of the modules's implementation classes:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Countries : IModule {\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> IUnityContainer container;\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> IRegionManager regionManager;\r\n\r\n    <span style=\"color:blue\">public</span> Countries(IUnityContainer container, IRegionManager regionManager) {\r\n        <span style=\"color:blue\">this</span>.container = container;\r\n        <span style=\"color:blue\">this</span>.regionManager = regionManager;\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize() {\r\n        <span style=\"color:blue\">this</span>.regionManager.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;RightRegion&quot;</span>,\r\n                                                    () =&gt; <span style=\"color:blue\">this</span>.container.Resolve&lt;CountriesView&gt;());\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;Here's the shell:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span> <span style=\"color:red\">x:Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">LayoutRoot</span><span style=\"color:black\">&quot;</span>\r\n        <span style=\"color:red\">Background</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">White</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid.RowDefinitions</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">RowDefinition</span> <span style=\"color:red\">Height</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">50</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">RowDefinition</span> <span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid.RowDefinitions</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid.ColumnDefinitions</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ColumnDefinition</span> <span style=\"color:red\">Width</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">250</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ColumnDefinition</span> <span style=\"color:red\">Width</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">3*</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid.ColumnDefinitions</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">TextBlock</span> <span style=\"color:red\">Text</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">My Prism Solution</span><span style=\"color:black\">&quot;</span>\r\n                <span style=\"color:red\">FontSize</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">36</span><span style=\"color:black\">&quot;</span>\r\n                <span style=\"color:red\">TextAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Left</span><span style=\"color:black\">&quot;</span>\r\n                <span style=\"color:red\">HorizontalAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Center</span><span style=\"color:black\">&quot;</span>\r\n                <span style=\"color:red\">Grid.ColumnSpan</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">2</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Border</span> <span style=\"color:red\">Grid.Row</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ContentControl</span> <span style=\"color:red\">x:Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">LeftRegion</span><span style=\"color:black\">&quot;</span>\r\n                        <span style=\"color:red\">prism:RegionManager.RegionName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">LeftRegion</span><span style=\"color:black\">&quot;</span>\r\n                        <span style=\"color:red\">VerticalContentAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Stretch</span><span style=\"color:black\">&quot;</span>\r\n                        <span style=\"color:red\">HorizontalContentAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Stretch</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Border</span><span style=\"color:blue\">&gt;</span>\r\n\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Border</span> <span style=\"color:red\">Grid.Column</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span>\r\n            <span style=\"color:red\">Grid.Row</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1</span><span style=\"color:black\">&quot;</span>\r\n            <span style=\"color:red\">Grid.RowSpan</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">2</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ContentControl</span> <span style=\"color:red\">x:Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">MainRegion</span><span style=\"color:black\">&quot;</span>\r\n                        <span style=\"color:red\">prism:RegionManager.RegionName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">RightRegion</span><span style=\"color:black\">&quot;</span>\r\n                        <span style=\"color:red\">VerticalContentAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Stretch</span><span style=\"color:black\">&quot;</span>\r\n                        <span style=\"color:red\">HorizontalContentAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Stretch</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">ContentControl</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Border</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>&nbsp;</pre>\r\n</div>\r\n<p>Here's the exception I get&nbsp;when running the app:</p>\r\n<pre>{Microsoft.Practices.Prism.Modularity.ModuleInitializeException: Unable to retrieve the module type Countries.Countries, Countries,                          Version=1.0.0.0, Culture=neutral,                 PublicKeyToken=null from the loaded assemblies.  You may need to specify a more fully-qualified type name.\r\n   en Microsoft.Practices.Prism.Modularity.ModuleInitializer.HandleModuleInitializationError(ModuleInfo moduleInfo, String assemblyName, Exception exception)\r\n   en Microsoft.Practices.Prism.Modularity.ModuleInitializer.Initialize(ModuleInfo moduleInfo)\r\n   en Microsoft.Practices.Prism.Modularity.ModuleManager.InitializeModule(ModuleInfo moduleInfo)\r\n   en Microsoft.Practices.Prism.Modularity.ModuleManager.LoadModulesThatAreReadyForLoad()\r\n   en Microsoft.Practices.Prism.Modularity.ModuleManager.IModuleTypeLoader_LoadModuleCompleted(Object sender, LoadModuleCompletedEventArgs e)\r\n   en Microsoft.Practices.Prism.Modularity.XapModuleTypeLoader.RaiseLoadModuleCompleted(LoadModuleCompletedEventArgs e)\r\n   en Microsoft.Practices.Prism.Modularity.XapModuleTypeLoader.RaiseLoadModuleCompleted(ModuleInfo moduleInfo, Exception error)\r\n   en Microsoft.Practices.Prism.Modularity.XapModuleTypeLoader.HandleModuleDownloaded(DownloadCompletedEventArgs e)\r\n   en Microsoft.Practices.Prism.Modularity.XapModuleTypeLoader.IFileDownloader_DownloadCompleted(Object sender, DownloadCompletedEventArgs e)\r\n   en Microsoft.Practices.Prism.Modularity.FileDownloader.WebClient_OpenReadCompleted(Object sender, OpenReadCompletedEventArgs e)\r\n   en System.Net.WebClient.OnOpenReadCompleted(OpenReadCompletedEventArgs e)\r\n   en System.Net.WebClient.OpenReadOperationCompleted(Object arg)}</pre>\r\n<p>If I don't load the Countries module, the same exception is thrown for the other module Companies.</p>\r\n<p>Could you please tell me what am I missing here?</p>\r\n",
    "PostedDate": "2012-07-24T12:08:39.85-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "891113",
    "ThreadId": "387986",
    "Html": "<p>Hi,</p>\r\n<p>Based on my understanding of your scenario, I believe the problem you are experiencing is related to the way you are defining your <strong>ModuleCatalog</strong>. Based on the code snippets you provided, in your <strong>ModuleCatalog </strong> two modules from different <strong>xap </strong>files are defined in the same <strong>ModuleInfoGroup </strong>which is not allowed. And as the properties set for the group will be applied to all its contained modules,&nbsp; your application will try to load both modules at startup, causing the error you mentioned.</p>\r\n<p>Hence, to avoid this for example you could define the modules contained in different <strong>xap </strong>files in different <strong>ModuleInfoGroup</strong>.</p>\r\n<p>As an example of this, I recommend you to check the<a href=\"http://msdn.microsoft.com/en-us/library/ff921163%28v=pandp.40%29\"> Modularity QuickStarts for Silverlight</a> provided with Prism. <br /><br />Regards,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-07-25T05:35:40.697-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "891191",
    "ThreadId": "387986",
    "Html": "\r\n<p>I defined different xap files and it worked.</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleCatalog</span>    \r\n    <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns:x</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns:sys</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">clr-namespace:System;assembly=mscorlib</span><span style=\"color:black\">&quot;</span>\r\n    <span style=\"color:red\">xmlns:Modularity</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">clr-namespace:Microsoft.Practices.Prism.Modularity;assembly=Microsoft.Practices.Prism</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfo</span> <span style=\"color:red\">Ref</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Companies.xap</span><span style=\"color:black\">&quot;</span>\r\n                      <span style=\"color:red\">ModuleName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Companies</span><span style=\"color:black\">&quot;</span>\r\n                      <span style=\"color:red\">ModuleType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Companies.Companies, Companies, Version=1.0.0.0</span><span style=\"color:black\">&quot;</span>\r\n                      <span style=\"color:red\">InitializationMode</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">WhenAvailable</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfo</span> <span style=\"color:red\">Ref</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Countries.xap</span><span style=\"color:black\">&quot;</span>\r\n                      <span style=\"color:red\">ModuleName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Countries</span><span style=\"color:black\">&quot;</span>\r\n                      <span style=\"color:red\">ModuleType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Countries.Countries, Countries, Version=1.0.0.0</span><span style=\"color:black\">&quot;</span>\r\n                      <span style=\"color:red\">InitializationMode</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">WhenAvailable</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleCatalog</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>My new question is: How can I, using the ModuleCatalog.xaml, define one xap file for both modules. I tried to do it with no success. I thought that the ModuleCatalog was also useful to define the way that the modules were packed into xap files, and that\r\n by&nbsp;using the ModuleInfoGroup one could to do it.</p>\r\n<p>Where can I instruct VS to create only one xap file for both modules?</p>\r\n",
    "PostedDate": "2012-07-25T08:03:50.513-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "891330",
    "ThreadId": "387986",
    "Html": "<p>Hi,</p>\r\n<p>As far as I know, a module catalog does not take part in the building process of your application and cannot be used to define how the modules are packed in your application. Based on my understanding, a module catalog is simply used by <strong>Prism </strong>to know which modules it needs to load when the application run.</p>\r\n<p>As far as I know, by default each <strong>Silverlight Application Project</strong> created in your solution will be packed in a different .<strong>xap </strong>file. As the modules defined in your application are in fact <strong>Silverlight Application Projects</strong>, <strong>Visual Studio</strong> automatically pack them in different .<strong>xap </strong>files when the project is build.</p>\r\n<p>As a possible workaround, you can define more than one module in the same <strong>Silverlight Application Project</strong>, as each module is simply a class implementing the <strong>IModule</strong> interface were the initialization of the module is done and a set of classes the included in the module. You would still need to define the each module in the module catalog, but they would have the same <strong>Ref </strong>attribute.</p>\r\n<p>I am not aware if <strong>Visual Studio</strong> can be configured to include more that one <strong>Silverlight Application Project</strong> in the same .<strong>xap </strong>file, but as this is more related to the way <strong>Silverlight </strong>applications are built I believe you can find better support regarding this topic in the following forums:</p>\r\n<ul>\r\n<li><a href=\"http://forums.silverlight.net/\">Silverlight Forums</a></li>\r\n<li><a href=\"http://social.msdn.microsoft.com/Forums/en/category/visualstudio\">Visual Studio Forums</a></li>\r\n</ul>\r\n<p>Regards,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-07-25T13:50:48.023-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "891339",
    "ThreadId": "387986",
    "Html": "<p>Thank you Damian.</p>",
    "PostedDate": "2012-07-25T14:25:49.023-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]