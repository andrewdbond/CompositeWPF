[
  {
    "Id": "737473",
    "ThreadId": "291016",
    "Html": "\r\n<p>I'm looking for the &quot;best practice&quot; approach to providing something like the INavigationAware interface but without using the navigation methods to switch views.</p>\r\n<p>Using Prism/MEF v4.</p>\r\n<p>I inject views without problem. &nbsp;I can remove views without problem.</p>\r\n<p>I remove views by something outside the target view (usually in my controller) will get a handle to the view and call Region.Remove(view). &nbsp;Something like this:</p>\r\n<p><strong></p>\r\n<hr>\r\n<br>\r\n(The insert code snippet control does not work for me in Chrome or IE so please forgive the formatting)</strong>\r\n<p></p>\r\n<p style=\"padding-left:30px\">... some method</p>\r\n<p style=\"padding-left:30px\">&nbsp; &nbsp; &nbsp; IRegion region = scopedRegion.Regions[RegionNames.SomeRegion];<br>\r\n&nbsp; &nbsp; &nbsp; var previousView = region.Views.First(reg =&gt; reg.GetType().Equals(typeof(SomeView)));<br>\r\n&nbsp; &nbsp; &nbsp; region.Remove(previousView); &nbsp; &nbsp;&nbsp;</p>\r\n<p><strong></p>\r\n<hr>\r\n</strong>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>I'm looking for a way to have each view check if it is allowed to be removed.</p>\r\n<p>If not, cancel the call to Remove (such as when the view has pending changes that need to be saved)</p>\r\n<p>Ideally there is some way to use the INavigationAware implementation but without using RequestNavigate(Uri...) to change views since I'm NOT using that navigation pattern.</p>\r\n<p>I can easily control whether or not to allow my view to initiate being closed (such as on a cancel button click etc) since I'm in scope to check IsDirty() methods etc.</p>\r\n<p>What I can't do is have parent views try to remove a child view, where the child view blocks the removal.</p>\r\n<p>About the closest thing I've found was this article:<br>\r\n<a href=\"http://blogs.msdn.com/b/dphill/archive/2011/01/23/closable-tabbed-views-in-prism.aspx\">http://blogs.msdn.com/b/dphill/archive/2011/01/23/closable-tabbed-views-in-prism.aspx</a></p>\r\n<p><a href=\"http://blogs.msdn.com/b/dphill/archive/2011/01/23/closable-tabbed-views-in-prism.aspx\"></a>There he's using the INavigationAware methods with Blend triggers. &nbsp;I use that approach when my parent tabs close, but I need something similar for nested\r\n views inside my UI structure.&nbsp;</p>\r\n<p><strong><br>\r\n</strong></p>\r\n",
    "PostedDate": "2012-02-02T15:27:24.32-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "738088",
    "ThreadId": "291016",
    "Html": "<p>Hi,</p>\r\n<p>Based on my understanding, the implementation details of  the features  you are describing will depend mostly of your personal  preferences and  the requirement of your scenario.</p>\r\n<p>A possible approach could be to create an extension method that checks if the view should be removed or not before removing it.</p>\r\n<p>As an example, you could implement an interface that exposes an <strong>IsDirty </strong>property in each view that you want to be  able to cancel its removal. Then, instead of using the <strong>Remove </strong>method  to remove the views, you could use an extension method that checks this  property, and if it returns false, the view is removed:</p>\r\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #000084; font-weight: bold;\">    public</span> <span style=\"color: #000084; font-weight: bold;\">static</span> <span style=\"color: #000084; font-weight: bold;\">class</span> RegionExtensions\r\n    {\r\n        <span style=\"color: #808080;\">// Returns true if the view was removed and false otherwise.</span>\r\n        <span style=\"color: #000084; font-weight: bold;\">public</span> <span style=\"color: #000084; font-weight: bold;\">static</span> <span style=\"color: #000084; font-weight: bold;\">bool</span> RemoveIfNotDirty(<span style=\"color: #000084; font-weight: bold;\">this</span> IRegion region, <span style=\"color: #000084; font-weight: bold;\">object</span> view)\r\n        {\r\n            <span style=\"color: #808080;\">// IConfirmRemove is a custom interface that exposes an IsDirty property...</span>\r\n            IConfirmRemove confirmableView = view <span style=\"color: #000084; font-weight: bold;\">as</span> IConfirmRemove; \r\n            <span style=\"color: #000084; font-weight: bold;\">if</span> (confirmableView != <span style=\"color: #000084; font-weight: bold;\">null</span>)\r\n            {\r\n                <span style=\"color: #000084; font-weight: bold;\">if</span> (confirmableView.IsDirty == <span style=\"color: #000084; font-weight: bold;\">false</span>)\r\n                {\r\n                    <span style=\"color: #808080;\">// If the view is not dirty, we can remove it.</span>\r\n                    region.Remove(view);\r\n                    <span style=\"color: #000084; font-weight: bold;\">return</span> <span style=\"color: #000084; font-weight: bold;\">true</span>;\r\n                }\r\n                <span style=\"color: #000084; font-weight: bold;\">else</span>\r\n                {\r\n                    <span style=\"color: #808080;\">// If the view IS dirty, the view is not removed.</span>\r\n                    <span style=\"color: #000084; font-weight: bold;\">return</span> <span style=\"color: #000084; font-weight: bold;\">false</span>;\r\n                }\r\n            }\r\n            <span style=\"color: #000084; font-weight: bold;\">else</span>\r\n            {\r\n                <span style=\"color: #808080;\">// If the region does not implement IConfirmRemove, we simply remove it like a common view.</span>\r\n                region.Remove(view);\r\n                <span style=\"color: #000084; font-weight: bold;\">return</span> <span style=\"color: #000084; font-weight: bold;\">true</span>;\r\n            }\r\n        }\r\n    }</pre>\r\n<p>Like this, parent views / view models can be abstracted from the logic to check if the view should be removed or not. Also, you could improved this approach to include any other required functionality, like invoking callbacks, raising events, etc.</p>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-02-03T10:06:07.113-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "763487",
    "ThreadId": "291016",
    "Html": "<p>Thanks for the reply, Damian. &nbsp;That looks like a solid direction to go in and I'll get to implementing something soon, I just got sidetracked on other things in the meantime.</p>\r\n<p>Cheers</p>",
    "PostedDate": "2012-02-14T07:41:03.61-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]