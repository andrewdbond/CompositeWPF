[
  {
    "Id": "475589",
    "ThreadId": "222224",
    "Html": "<p>I have read several posts like this but &quot;no cigar&quot;:</p>\r\n<p><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=42078\">http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=42078</a></p>\r\n<p>The Setup:</p>\r\n<p>Very simple application based on &quot;PrismSilverlight 4.0 QuickStart solution&quot; with a small variation - I moved the XAML of the original ShellView to Module1 and named it &quot;RegionsView&quot;. Then I replaced the original ShellView with a simple ItemsControl&nbsp;which has only one main region &quot;MainRegion&quot;&nbsp;defined inside&nbsp;this ItemsControl. The main idea being -&nbsp;working with&nbsp;nested regions where I can use the container of the new MainView to show the nested regions from Module1.</p>\r\n<p>In Module1 the main view is the &quot;RegionsView&quot; which has a region &quot;MainRegion1&quot; which is defined inside a view containing a &quot;ContentControl&quot; - this is to allow the switch between views inside the same region only by using myRegion.Activete(myView_n). &quot;MainRegion_1&quot; (in RegionsView.XAML)&nbsp;is supposed to show as a nested region inside &quot;MainRegion&quot; (in ShellView.XAML)&nbsp;(sorry for the very descriptive names). I also preserved the two origin views in Module1&nbsp;&quot;View1&quot; and &quot;View2&quot; which are supposed to alternate inside MainRegion_1.</p>\r\n<p>Upon start of the application nothing shows inside the MainRegion. Upon a button click I register MainRegion_1 which properly shows as a nested region.</p>\r\n<p>Upon the click of another button I register and show View1 and then upon click of another button I register and&nbsp;try to show View2 - which does not show.</p>\r\n<p>I do see that the code flows through correctly and that both views are registered and added. I make sure they are initialized only once. I also use a ContentControl which is supposed to take care of switching between the views via &quot;Acitvate()&quot;. This does not happen however. If I start with View1 - View2 does not show. If I start with View2 - View1 does not show.</p>\r\n<p>Here the most meaningful lines:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>      <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> DisplayView(<span style=\"color:blue\">string</span> viewName)\r\n        {\r\n            <span style=\"color:green\">// Get a reference to the main region.</span>\r\n            IRegion mainRegion = _regionManager.Regions[RegionNames.MainRegion];\r\n\r\n            <span style=\"color:green\">// Create the view if we need to.</span>\r\n            <span style=\"color:blue\">object</span> view = mainRegion.GetView(viewName);\r\n\r\n            <span style=\"color:blue\">if</span> (view == <span style=\"color:blue\">null</span>)\r\n            {<span style=\"color:green\">//Register each view only once</span>\r\n\t\t<span style=\"color:green\">//Step-1: Button_1-&gt; Show RegionsView</span>\r\n\t\t<span style=\"color:green\">//Step-2: Button_View1-&gt; Show View1</span>\r\n\t\t<span style=\"color:green\">//Step-3: Button_View2-&gt; Show View2</span>\r\n                <span style=\"color:blue\">switch</span> (viewName)\r\n                {\r\n                    <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;View1&quot;</span>:\r\n                        _regionManager.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;MainRegion1&quot;</span>, <span style=\"color:blue\">typeof</span>(View1));\r\n                        view = <span style=\"color:blue\">this</span>._container.Resolve&lt;View1&gt;();\r\n                        <span style=\"color:blue\">break</span>;\r\n                    <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;View2&quot;</span>:\r\n                        _regionManager.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;MainRegion1&quot;</span>, <span style=\"color:blue\">typeof</span>(View2));\r\n                        view = <span style=\"color:blue\">this</span>._container.Resolve&lt;View2&gt;();\r\n                        <span style=\"color:blue\">break</span>;\r\n                    <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;RegionsView&quot;</span>:\r\n                        view = <span style=\"color:blue\">this</span>._container.Resolve&lt;RegionsView&gt;();\r\n                        <span style=\"color:blue\">break</span>;\r\n                }\r\n\r\n                <span style=\"color:green\">// Add the veiw to the main region.</span>\r\n                mainRegion.Add(view, viewName);\r\n            }\r\n\r\n            <span style=\"color:green\">// Activate the view only once.</span>\r\n            <span style=\"color:blue\">if</span> (view != <span style=\"color:blue\">null</span>)\r\n            {\r\n                mainRegion.Activate(view);\r\n            }\r\n        }\r\n</pre>\r\n</div>\r\n<p>The Problem:</p>\r\n<p>Basically the sticking point is&nbsp;- why is&nbsp;ContentControl&nbsp;not alternating&nbsp;between the views? I am assuming all of other things happen correctly as I am able to show either view as intended.</p>\r\n<p>Forgot to mention - new to Prism - but that is evident I guess.</p>\r\n<p>Many thanks for any tips or links.</p>\r\n<p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\">\r\n<p>&nbsp;</p>\r\n</span></span></span></p>",
    "PostedDate": "2010-08-02T12:49:16.22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "475992",
    "ThreadId": "222224",
    "Html": "<p>OK - this is the error I was making.</p>\r\n<p><strong>Note:</strong> this should be coded &quot;nicer &amp; cleaner&quot; in a real-life project - but here all is crammed hardcoded so one can read it in a small space:</p>\r\n<p>Basic understanding (<em>I changed some of the names so they are more descriptive</em>):</p>\r\n<p>1. ShellView.XAML has an ItemsControl used as a &quot;Parent&quot; region for the entire application. This Parent view is used as a container for Modules to inject their views into it - however complex.</p>\r\n<p>2. Module1 has three views: RegionsView (<em>only regions</em>); View1&amp;2 - Views with actual functional code; These are supposed to appear inside&nbsp;&quot;Module1_MainRegion&quot;</p>\r\n<p>The problem was that I was registering the views (View1&amp;2) with the Parent-Region. One has to register&nbsp;Module1_MainRegion (<em>the container of View1&amp;2</em>)&nbsp;with the ParentView and then register View1&amp;2 with Module1-RegionsView (<em>Their own container - not the global parent container</em>) .... Huh ... now that I put it in writing it sounds like &quot;<em>duh ... what were you thinking</em>&quot; ... . Anyway - Here the code:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><div style=\"color:black;background-color:white\"><pre><span style=\"color:green\">//Inside ShellViewModel.cs</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> SwitchViewClicked(<span style=\"color:blue\">string</span> name)\r\n        {\r\n            _eventAggregator.GetEvent&lt;SwitchViewEvent&gt;().Publish(<span style=\"color:#a31515\">&quot;RegionsView&quot;</span>);\r\n        }\r\n\r\n<span style=\"color:green\">//Inside Module1.MainRegionController.cs</span>\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> SwitchViewEventHandler(<span style=\"color:blue\">string</span> viewName)\r\n        {\r\n            DisplayView(viewName);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> DisplayView(<span style=\"color:blue\">string</span> viewName)\r\n        {\r\n            \r\n            IRegion mainRegion; \r\n            <span style=\"color:blue\">object</span> view;\r\n\r\n            <span style=\"color:blue\">if</span> (viewName == <span style=\"color:#a31515\">&quot;RegionsView&quot;</span>)\r\n            {<span style=\"color:green\">//The button declared in ShellView.XAML is supposed to</span>\r\n             <span style=\"color:green\">//show the main design of Module1 without populating it.</span>\r\n                mainRegion = _regionManager.Regions[<span style=\"color:#a31515\">&quot;ParentRegion&quot;</span>];\r\n                view = mainRegion.GetView(viewName);\r\n            }\r\n            <span style=\"color:blue\">else</span>\r\n            {<span style=\"color:green\">//Buttons inside the main design of Module-1 are</span>\r\n             <span style=\"color:green\">//supposed to call View1&amp;2</span>\r\n                mainRegion = _regionManager.Regions[<span style=\"color:#a31515\">&quot;Module1_MainRegion&quot;</span>];\r\n                view = mainRegion.GetView(viewName);\r\n            }\r\n\r\n            <span style=\"color:blue\">if</span> (view == <span style=\"color:blue\">null</span>)\r\n            {\r\n                <span style=\"color:blue\">switch</span> (viewName)\r\n                {\r\n                    <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;View1&quot;</span>:\r\n                        _regionManager.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;Module1_MainRegion&quot;</span>, <span style=\"color:blue\">typeof</span>(View1));\r\n                        view = <span style=\"color:blue\">this</span>._container.Resolve&lt;View1&gt;();\r\n                        <span style=\"color:blue\">break</span>;\r\n                    <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;View2&quot;</span>:\r\n                        _regionManager.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;Module1_MainRegion&quot;</span>, <span style=\"color:blue\">typeof</span>(View1));\r\n                        view = <span style=\"color:blue\">this</span>._container.Resolve&lt;View2&gt;();\r\n                        <span style=\"color:blue\">break</span>;\r\n                    <span style=\"color:blue\">case</span> <span style=\"color:#a31515\">&quot;RegionsView&quot;</span>:\r\n                        view = <span style=\"color:blue\">this</span>._container.Resolve&lt;RegionsView&gt;();\r\n                        <span style=\"color:blue\">break</span>;\r\n                }\r\n\r\n                <span style=\"color:green\">// Add the veiw to the main region.</span>\r\n                mainRegion.Add(view, viewName);\r\n            }\r\n\r\n            <span style=\"color:green\">// Activate the view.</span>\r\n            <span style=\"color:blue\">if</span> (view != <span style=\"color:blue\">null</span>) mainRegion.Activate(view);\r\n        }\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>",
    "PostedDate": "2010-08-03T08:38:38.72-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]