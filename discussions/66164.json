[
  {
    "Id": "224726",
    "ThreadId": "66164",
    "Html": "<p>Hi, Admin,</p>\r\n<p>I post a problem yesterday, but no response: <a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=65833\">http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=65833</a>.</p>\r\n<p>I donot know if it is an issue of Prism. Because the command in Prism is base on that the control must&nbsp;inherit from&nbsp;Content, but TextBlock inherit directly from FrameworkElement, so we must overload class:</p>\r\n<pre><div style=\"color:Black;background-color:White\"><pre>    <span style=\"color:Blue\">public</span> class CommandBehaviorBase\r\n        <span style=\"color:Blue\">where</span> T : FrameworkElement\r\n&nbsp;</pre>\r\n</div>\r\n</pre>\r\n<pre>Although I try my best to find a way to implement it, but faild. I attach this event to the command, but no response after I click on the TextBlock.</pre>\r\n<pre><pre>      <div style=\"color:Black;background-color:White\"><pre>    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">FlightNO</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Tag</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">FLT/Date</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding FLTDATE}</span><span style=\"color:Black\">&quot;</span>   </pre>\r\n<pre>      <span style=\"color:Red\">Infrastructure:MouseLeftButtonUp.Command</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=MouseLeftButtonUpCommand}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n</pre>\r\n<pre>the code snippet behind:</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre>        ICommand MouseLeftButtonUpCommand = <span style=\"color:Blue\">new</span> DelegateCommand&lt;MouseButtonEventArgs&gt;(OnMouseLeftButtonUp11);\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> OnMouseLeftButtonUp11(MouseButtonEventArgs e)\r\n        {\r\n            MessageBox.Show(e.ToString());\r\n        }\r\n</pre>\r\n<pre>Anyboy meet this problem? and reference can help me to resolve it? Thank you!\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</pre>\r\n</pre>",
    "PostedDate": "2009-08-17T20:28:53.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "224739",
    "ThreadId": "66164",
    "Html": "<p>Hi guy</p>\r\n<p>First of all create a class with two attached property like this one.</p>\r\n<pre>#region SingleEventCommand Class\r\n        /// \r\n        /// This class allows a single command to event mappings.  \r\n        /// It is used to wire up View events to a\r\n        /// ViewModel ICommand implementation.  \r\n        /// \r\n        /// \r\n        /// &lt;![CDATA[\r\n        /// \r\n        /// &lt;Grid Background=&quot;WhiteSmoke&quot;\r\n        ///    Cinch:SingleEventCommand.RoutedEventName=&quot;MouseDown&quot;\r\n        ///      Cinch:SingleEventCommand.TheCommandToRun=\r\n        ///       &quot;{Binding Path=ShowWindowCommand}&quot; /&gt;\r\n        /// \r\n        /// ]]&gt;\r\n        /// \r\n        public static class SingleEventCommand\r\n        {\r\n            #region TheCommandToRun\r\n\r\n            /// \r\n            /// TheCommandToRun : The actual ICommand to run\r\n            /// \r\n            public static readonly DependencyProperty TheCommandToRunProperty =\r\n                DependencyProperty.RegisterAttached(&quot;TheCommandToRun&quot;,\r\n                    typeof(ICommand),\r\n                    typeof(SingleEventCommand),\r\n                    new FrameworkPropertyMetadata((ICommand)null));\r\n\r\n            /// \r\n            /// Gets the TheCommandToRun property.  \r\n            /// \r\n            public static ICommand GetTheCommandToRun(DependencyObject d)\r\n            {\r\n                return (ICommand)d.GetValue(TheCommandToRunProperty);\r\n            }\r\n\r\n            /// \r\n            /// Sets the TheCommandToRun property.  \r\n            /// \r\n            public static void SetTheCommandToRun(DependencyObject d, ICommand value)\r\n            {\r\n                d.SetValue(TheCommandToRunProperty, value);\r\n            }\r\n            #endregion\r\n\r\n            #region RoutedEventName\r\n\r\n            /// \r\n            /// RoutedEventName : The event that should actually execute the\r\n            /// ICommand\r\n            /// \r\n            public static readonly DependencyProperty RoutedEventNameProperty =\r\n                DependencyProperty.RegisterAttached(&quot;RoutedEventName&quot;, typeof(String),\r\n                typeof(SingleEventCommand),\r\n                    new FrameworkPropertyMetadata((String)String.Empty,\r\n                        new PropertyChangedCallback(OnRoutedEventNameChanged)));\r\n\r\n            /// \r\n            /// Gets the RoutedEventName property.  \r\n            /// \r\n            public static String GetRoutedEventName(DependencyObject d)\r\n            {\r\n                return (String)d.GetValue(RoutedEventNameProperty);\r\n            }\r\n\r\n            /// \r\n            /// Sets the RoutedEventName property.  \r\n            /// \r\n            public static void SetRoutedEventName(DependencyObject d, String value)\r\n            {\r\n                d.SetValue(RoutedEventNameProperty, value);\r\n            }\r\n\r\n            /// \r\n            /// Hooks up a Dynamically created EventHandler (by using the \r\n            /// EventHooker class) that when\r\n            /// run will run the associated ICommand\r\n            /// \r\n            private static void OnRoutedEventNameChanged(DependencyObject d,\r\n                DependencyPropertyChangedEventArgs e)\r\n            {\r\n                String routedEvent = (String)e.NewValue;\r\n\r\n                if (d == null || String.IsNullOrEmpty(routedEvent))\r\n                    return;\r\n\r\n\r\n                //If the RoutedEvent string is not null, create a new\r\n                //dynamically created EventHandler that when run will execute\r\n                //the actual bound ICommand instance (usually in the ViewModel)\r\n                EventHooker eventHooker = new EventHooker();\r\n                eventHooker.ObjectWithAttachedCommand = d;\r\n\r\n                EventInfo eventInfo = d.GetType().GetEvent(routedEvent,\r\n                    BindingFlags.Public | BindingFlags.Instance);\r\n\r\n                //Hook up Dynamically created event handler\r\n                if (eventInfo != null)\r\n                {\r\n                    eventInfo.RemoveEventHandler(d,\r\n                        eventHooker.GetNewEventHandlerToRunCommand(eventInfo));\r\n\r\n                    eventInfo.AddEventHandler(d,\r\n                        eventHooker.GetNewEventHandlerToRunCommand(eventInfo));\r\n                }\r\n\r\n            }\r\n            #endregion\r\n        }\r\n        #endregion\r\n\r\n        #region EventHooker Class\r\n        /// \r\n        /// Contains the event that is hooked into the source RoutedEvent\r\n        /// that was specified to run the ICommand\r\n        /// \r\n        sealed class EventHooker\r\n        {\r\n            #region Public Methods/Properties\r\n            /// \r\n            /// The DependencyObject, that holds a binding to the actual\r\n            /// ICommand to execute\r\n            /// \r\n            public DependencyObject ObjectWithAttachedCommand { get; set; }\r\n\r\n            /// \r\n            /// Creates a Dynamic EventHandler that will be run the ICommand\r\n            /// when the user specified RoutedEvent fires\r\n            /// \r\n            /// &lt;param name=&quot;eventInfo&quot; /&gt;The specified RoutedEvent EventInfo\r\n            /// An Delegate that points to a new EventHandler\r\n            /// that will be run the ICommand\r\n            public Delegate GetNewEventHandlerToRunCommand(EventInfo eventInfo)\r\n            {\r\n                Delegate del = null;\r\n\r\n                if (eventInfo == null)\r\n                    throw new ArgumentNullException(&quot;eventInfo&quot;);\r\n\r\n                if (eventInfo.EventHandlerType == null)\r\n                    throw new ArgumentException(&quot;EventHandlerType is null&quot;);\r\n\r\n                if (del == null)\r\n                    del = Delegate.CreateDelegate(eventInfo.EventHandlerType, this,\r\n                          GetType().GetMethod(&quot;OnEventRaised&quot;,\r\n                            BindingFlags.NonPublic |\r\n                            BindingFlags.Instance));\r\n\r\n                return del;\r\n            }\r\n            #endregion\r\n\r\n            #region Private Methods\r\n\r\n            /// \r\n            /// Runs the ICommand when the requested RoutedEvent fires\r\n            /// \r\n            private void OnEventRaised(object sender, EventArgs e)\r\n            {\r\n                ICommand command = (ICommand)(sender as DependencyObject).\r\n                    GetValue(SingleEventCommand.TheCommandToRunProperty);\r\n\r\n                if (command != null)\r\n                {\r\n                    command.Execute(null);\r\n                }\r\n            }\r\n            #endregion\r\n        }\r\n        #endregion</pre>\r\n<p>&nbsp;</p>\r\n<p>after that you can use them in your xaml</p>\r\n<pre>        \r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span> <span style=\"color:Red\">cmd:SingleEventCommand.RoutedEventName</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">MouseLeftButtonUp</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">cmd:SingleEventCommand.TheCommandToRun</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding YourCommand}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span></pre>\r\n<pre><span style=\"color:Blue\">&nbsp;</span></pre>\r\n<pre></pre>\r\n<pre>\r\n</pre>\r\n</pre>",
    "PostedDate": "2009-08-17T21:21:32.907-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "224809",
    "ThreadId": "66164",
    "Html": "<div style=\"color:Black;background-color:White\">\r\n<pre>Hi, Blochaou,</pre>\r\n</div>\r\n<p>Thank you for your code, it works fine.</p>\r\n<p>When I click on the TextBlock, the MouseLeftButtonUp event is actually fired, but cannot pass the MouseButtonEventArgs.</p>\r\n<p>Another issue is that when I put&nbsp;your code&nbsp;into a DataGrid, the TextBlock still cannot be invoked.</p>\r\n<p><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">data</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">DataGrid</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">FlightPlanning</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">ItemsSource</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding FlightList, Mode=OneWay}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">data</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">DataGrid.Columns</span><span style=\"color:Blue\">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">data</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">DataGridTemplateColumn</span> <span style=\"color:Red\">Header</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">FLT/DT</span><span style=\"color:Black\">&quot;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Red\">Width</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">60</span><span style=\"color:Black\">&quot;</span>&nbsp;&nbsp; <span style=\"color:Red\">SortMemberPath</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">FLTDATE</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">data</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">DataGridTemplateColumn.CellTemplate</span><span style=\"color:Blue\">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTemplate</span><span style=\"color:Blue\">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBlock</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">FlightNO</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Tag</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">FLT/Date</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding FLTDATE}</span><span style=\"color:Black\">&quot;</span> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Red\">Infrastructure:SingleEventCommand.RoutedEventName</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">MouseLeftButtonUp</span><span style=\"color:Black\">&quot;</span> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Red\">Infrastructure:SingleEventCommand.TheCommandToRun</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Path=MouseLeftButtonUpCommand}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTemplate</span><span style=\"color:Blue\">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">data</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">DataGridTemplateColumn.CellTemplate</span><span style=\"color:Blue\">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">data</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">DataGridTemplateColumn</span><span style=\"color:Blue\">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">data</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">DataGrid.Columns</span><span style=\"color:Blue\">&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">data</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">DataGrid</span><span style=\"color:Blue\">&gt;</span></p>",
    "PostedDate": "2009-08-18T01:50:02.16-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "224851",
    "ThreadId": "66164",
    "Html": "<p>Hi</p>\r\n<p>To get the MouseButtonEventAgrs, you have to change a little bit the codes.</p>\r\n<p>1. Define you command like this</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>   <span style=\"color:Blue\">private</span> DelegateCommand&lt;MouseButtonEventArgs&gt; _testParameter;\r\n\r\n        <span style=\"color:Blue\">public</span> DelegateCommand&lt;MouseButtonEventArgs&gt; TestParameter\r\n        {\r\n            <span style=\"color:Blue\">get</span> {\r\n                <span style=\"color:Blue\">if</span> (_testParameter == <span style=\"color:Blue\">null</span>)\r\n                    _testParameter = <span style=\"color:Blue\">new</span> DelegateCommand&lt;MouseButtonEventArgs&gt;(args =&gt; OnTest(args), param =&gt; <span style=\"color:Blue\">true</span>);\r\n                <span style=\"color:Blue\">return</span> _testParameter;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> OnTest(MouseButtonEventArgs args)\r\n        {\r\n            System.Windows.Forms.MessageBox.Show(<span style=\"color:#A31515\">&quot;Test&quot;</span>);\r\n        }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>2. Change the OnEventRaise in the EventHook class</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>     <div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> OnEventRaised(<span style=\"color:Blue\">object</span> sender, EventArgs e)\r\n            {\r\n                Console.WriteLine(e.GetType().ToString());\r\n                ICommand command = (ICommand)(sender <span style=\"color:Blue\">as</span> DependencyObject).\r\n                    GetValue(SingleEventCommand.TheCommandToRunProperty);\r\n\r\n                <span style=\"color:Blue\">if</span> (command != <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    \r\n                    <span style=\"color:Blue\">if</span> (e <span style=\"color:Blue\">is</span> MouseEventArgs)\r\n                    {\r\n                        command.Execute(e <span style=\"color:Blue\">as</span> MouseEventArgs);\r\n                    }\r\n                }\r\n            }\r\n</pre>\r\n</div>\r\nThis means that you send the argument to your Handler.</pre>\r\n</div>\r\n<p>But as i can guess all your handlers don't receive a MouseEventArgs as parameter so&nbsp; you have to check the type of the EventArgs in&nbsp; OneventRaised method&nbsp;before you call command.Execute.</p>\r\n<p>&nbsp;</p>\r\n<p>For the orther issue i'm not sure that the problem is the datagrid. Try to use directly &nbsp;MouseLeftButtonUp event handler in your code behind. And if it works my code should work.</p>\r\n<p>Let me know.</p>\r\n<p>Thanks</p>",
    "PostedDate": "2009-08-18T03:30:21.82-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "224915",
    "ThreadId": "66164",
    "Html": "<p>Hi, <a id=\"ctl00_ctl00_MasterContent_Content_PostRepeater_ctl06_UserNameLink\" href=\"http://www.codeplex.com/site/users/view/blochaou\">blochaou</a></p>\r\n<p>I test your code. In TextBlock, it looks fine, still not suitable to Datagrid.</p>\r\n<p>I am sorry not to tell you that my project is Silverlight. So the class FrameworkPropertyMetadata can not be used in SL. I try to replace FrameworkPropertyMetadata of PropertyMetadata, it can be complied, but I think some function is blocked. So which action shall I do something&nbsp;about FrameworkPropertyMetadata?</p>\r\n<p>And also, about MouseEventArgs in your method OnEventRaised, I think it should be MouseButtonEventArgs, right?</p>\r\n<p>Last, I test your code in DataGrid, debug on the method OnEventRaised, I find the parameter sender is a TextBlock, and when execute this code line as follow:</p>\r\n<p>ICommand command = (ICommand)(sender <span style=\"color:blue\">as</span> DependencyObject).<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetValue(SingleEventCommand.TheCommandToRunProperty);</p>\r\n<p>the command result in a null value. So no action to do finally. I try to seperate your code into 3 statements:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DependencyObject dp = sender as DependencyObject;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object obj= dp.GetValue(SingleEventCommand.TheCommandToRunProperty);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ICommand command = obj as ICommand;</p>\r\n<p>I find obj is null, it means DP TheCommandToRunProperty doesn't exist in sender, but when I change the 2nd statement as follow:</p>\r\n<p>Object obj= dp.GetValue(SingleEventCommand.RoutedEventNameProperty);</p>\r\n<p>My God, obj is not null, which means DP RoutedEventNameProperty exists in sender. Why these 2 DP are different, one is registered but the other one does not?</p>",
    "PostedDate": "2009-08-18T06:35:51.457-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "224940",
    "ThreadId": "66164",
    "Html": "<p>Hi</p>\r\n<p>You are right about MouseButtonEventArgs.</p>\r\n<p>if you get null for the command this mean that&nbsp;the second attached property (<strong>TheCommandToRun</strong>)&nbsp;is not set or your command is not defined.</p>\r\n<p>if you are sure that your command is properly defined in your viewmodel then TheCommandToRun is not set. May be it is the binding in the Datatable.</p>\r\n<p>As i work in WPF i can not give you more detail about how to work arround with SL. I'm sorry</p>\r\n<p>Thanks</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-18T07:15:05.783-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "225231",
    "ThreadId": "66164",
    "Html": "<p>For the DataGrid, your context is no longer the ViewModel but rather the item in the collection. There are several ways to get around this including using the {Binding DataContext.YourCommand, ElementName=RootElement} where the RootElement is the name of the user control. There is also an older pattern I used (sorry I don't have it here) where you can use an attached property to reset another properties binding. Try the ElementName approach first and if no luck, I will reply again with the other site I found.</p>",
    "PostedDate": "2009-08-18T20:04:20.827-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "226843",
    "ThreadId": "66164",
    "Html": "<p>Hi, all the friends above,</p>\r\n<p>I have implemented this function as <a id=\"ctl00_ctl00_MasterContent_Content_PostRepeater_ctl10_UserNameLink\" href=\"http://www.codeplex.com/site/users/view/blochaou\">blochaou</a>&nbsp;just said, put command into DataGrid's property:</p>\r\n<p>&lt;data:DataGrid x:Name=&quot;FlightPlanning&quot; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ItemsSource=&quot;{Binding FlightList, Mode=OneWay}&quot; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Infrastructure:SingleEventCommand.RoutedEventName=&quot;MouseLeftButtonUp&quot; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Infrastructure:SingleEventCommand.TheCommandToRun=&quot;{Binding Path=MouseLeftButtonUpCommand}&quot; &gt;</p>\r\n<p>so, evenything looks find.</p>\r\n<p>Thank you.</p>",
    "PostedDate": "2009-08-23T10:56:12.933-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "424134",
    "ThreadId": "66164",
    "Html": "<p>Great work on this, <a id=\"ctl00_ctl00_MasterContent_Content_PostRepeater_ctl02_UserNameLink\" href=\"http://www.codeplex.com/site/users/view/blochaou\">blochaou</a>.&nbsp; Very appreciated!</p>",
    "PostedDate": "2010-03-26T08:48:27.433-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "424165",
    "ThreadId": "66164",
    "Html": "<p>I was able to do set up a MouseDoubleClick using the information above, which worked great.&nbsp; I would now like to set up multiple events on the datagrid.&nbsp; For example, I'd like to do some action on the MouseDoubleClick event but also handle the Sorting event.&nbsp; Is this possible?</p>\r\n<p>Tks.</p>",
    "PostedDate": "2010-03-26T09:40:22.407-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "424196",
    "ThreadId": "66164",
    "Html": "<p>Hi Gorter</p>\r\n<p>Take a look at this article.</p>\r\n<p><a href=\"http://www.codeproject.com/KB/WPF/CinchII.aspx\">http://www.codeproject.com/KB/WPF/CinchII.aspx</a></p>\r\n<p>Blochaou Francois</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-03-26T10:59:45.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]