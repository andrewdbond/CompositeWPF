[
  {
    "Id": "910423",
    "ThreadId": "394975",
    "Html": "\r\n<p>Hi all, I'm hoping someone can help me...I'm struggling to get, what I think is, expected behavior using Silverlight Toolkit's WeakEventListener combined with Prism 4 &amp; MEF.</p>\r\n<p>I have a V/VM combination, marked as &quot;NonShared&quot;. The view loads in a secondary region, almost identical to the way the StockTrader RI loads &quot;News articles&quot;. I have 2 buttons on the view, &quot;OK&quot; and &quot;Cancel&quot;, both of which should ultimately close the popup...which\r\n works. In the constructor for that view model, I use the Silverlight toolkit's WeakEventListener to hook up to the PropertyChanged event from my Model. I expect that when my View closes, my OnDetachAction would fire, but it does not. Here's some code to help\r\n explain my issue:</p>\r\n<p>MY VIEWMODEL:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Export(<span style=\"color:blue\">typeof</span>(ZFlowBusinessManagementViewModel))]\r\n[PartCreationPolicy(CreationPolicy.NonShared)]\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ZFlowBusinessManagementViewModel : ZFunnelDataEntryViewModel\r\n{\r\n    [ImportingConstructor]\r\n    <span style=\"color:blue\">public</span> ZFlowBusinessManagementViewModel(IZOpportunityController controller)\r\n        : <span style=\"color:blue\">base</span>(controller)\r\n    {\r\n        _okCommand = <span style=\"color:blue\">new</span> DelegateCommand(OKCommandExecuted, OKCommandCanExecute);\r\n        _closeCommand = <span style=\"color:blue\">new</span> DelegateCommand(CloseCommandExecuted);\r\n\r\n        <span style=\"color:green\">// Setup property changed handler for manufacturer estimate changes</span>\r\n        <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> estimate <span style=\"color:blue\">in</span> MfrEstimates)\r\n        {\r\n            <span style=\"color:green\">/* hook up to property changed using weak event patten */</span>\r\n            <span style=\"color:blue\">var</span> weakListener = <span style=\"color:blue\">new</span> ZWeakEventListener&lt;ZFlowBusinessManagementViewModel, ZSalesFunnelKeyMfrEstimate, PropertyChangedEventArgs&gt;(<span style=\"color:blue\">this</span>, estimate);\r\n\r\n            estimate.PropertyChanged &#43;= weakListener.OnEvent;\r\n\r\n            weakListener.OnEventAction = (instance, source, e) =&gt;\r\n                {\r\n                    <span style=\"color:green\">// register handler</span>\r\n                    instance.estimate_PropertyChanged(source, e);\r\n                };\r\n\r\n            weakListener.OnDetachAction = (listener, source) =&gt;\r\n                {\r\n                    <span style=\"color:green\">// unregister handler</span>\r\n                    source.PropertyChanged -= listener.OnEvent;\r\n                };\r\n\r\n            <span style=\"color:green\">// ensure there is not reference to the weakListener</span>\r\n            weakListener = <span style=\"color:blue\">null</span>;\r\n        }\r\n\r\n        BalanceEstimate();\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>Now, why when I close this view, I would expect the OnDetachAction to run, but it never does. Can anyone offer some advice?</p>\r\n",
    "PostedDate": "2012-09-10T06:57:41.187-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "910541",
    "ThreadId": "394975",
    "Html": "<p>Hi,</p>\r\n<p>If you're using the behaviors provided in the <strong>Stock Trader RI</strong> to create your popup region, then I believe your problem could be related to how those behaviors work.</p>\r\n<p>By default, neither the <strong>DialogActivationBehavior </strong>(which is the one that creates the popup) or the <strong>SingleActiveRegion </strong>(which is the type of region used for the popup) removes the view from the region; instead, they just deactivate it.</p>\r\n<p>Based on my understanding, <strong></strong>when a view is deactivated in a <strong>SingleActiveRegion </strong>applied to a <strong>ContentControl </strong>(which is the case of the popup implemented in the <strong>Stock Trader RI</strong>) it no longer appears in the <strong>ContentControl</strong>, but the region still holds a reference to it in its <strong>View </strong>collection. Therefore, as the view is not removed, it's being kept alive by the region, preventing it and its view model to be garbage collected.</p>\r\n<p>If this is the cause of your problem, then a possible approach could be to implement the <strong>IRegionMemberLifetime </strong>interface in the <strong>ZFlowBusinessManagementViewModel</strong>. This interface defines a <strong>KeepAlive </strong>property which is checked by the <strong>RegionMemberLifetimeBehavior </strong>of the region when a view / view model is deactivated. If this property returns <em><strong>false</strong></em>, the aforementioned behavior will remove the view from the region automatically, avoiding this problem.</p>\r\n<p>Please let us know if this approach is useful in your scenario.</p>\r\n<p>Regards,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-09-10T11:07:21.917-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "910568",
    "ThreadId": "394975",
    "Html": "<p>Hi DCherubini,&nbsp;</p>\r\n<p>Thanks for responding. I am doing pretty much everything the same way as the <strong>Stock Trader RI </strong>(despite the fact that my V/VM in the popup is NonShared). So I tried your solution of implementing&nbsp;<strong>IRegionMemberLifetime</strong>. Unfortunately the <strong>Keep Alive </strong>property never gets hit when I put a breakpoint there. I follow the code through, and inside the&nbsp;<strong>DialogActivationBehavior,</strong>&nbsp;ContentDialogClosed(object sender, System.EventArgs e) is successfully called (and the region deactivates the content. I would have thought that right after that happens, the <strong>KeepAlive</strong>&nbsp;property would have been called...but it is not being called.</p>\r\n<p>Do you have any suggestions as to how I could go about troubleshooting why the property isn't getting called?</p>",
    "PostedDate": "2012-09-10T11:54:59.17-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "910610",
    "ThreadId": "394975",
    "Html": "<p>Hi,</p>\r\n<p>After further examination of the <strong>Stock Trader RI</strong> we found that the <strong>SingleActiveRegion</strong> that is created for the popup does not have <strong>Prism</strong>'s default regions behaviors attached to it. Therefore, that regions doesn't have a <strong>RegionMemberLifetimeBehavior</strong>, which is why the <strong>KeepAlive </strong>property of your view model is never accessed.</p>\r\n<p>A possible approach to solve this could be to modify the <strong>RegisterNewPopupRegion </strong>method of the <strong>RegionsPopupBehaviors </strong>class to add the aforementioned behavior after creating the region. For example:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> RegisterNewPopupRegion(DependencyObject owner, <span style=\"color: blue;\">string</span> regionName)\r\n{\r\n    . . . .\r\n\r\n    region.Behaviors.Add(DialogActivationBehavior.BehaviorKey, behavior);\r\n\r\n    <span style=\"color: green;\">// Adding RegionMemberLifetimeBehavior</span>\r\n    RegionMemberLifetimeBehavior rmlBehavior = <span style=\"color: blue;\">new</span> RegionMemberLifetimeBehavior();\r\n    region.Behaviors.Add(RegionMemberLifetimeBehavior.BehaviorKey, rmlBehavior);\r\n\r\n    regionManager.Regions.Add(regionName, region);\r\n}\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-09-10T13:46:19.65-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "910625",
    "ThreadId": "394975",
    "Html": "<p>That seems to have done the trick. After looking at my setup a little more, I realized that I wouldn't have introduced any leaks since my model reference is local to my viewmodel, i.e. when my viewmodel is destroyed, so is my model reference. But with your help, I'm able to guarantee my viewmodel is being destroyed, which is what I was ultimately trying to do...so thank you!</p>",
    "PostedDate": "2012-09-10T14:05:06.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]