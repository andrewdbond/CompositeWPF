[
  {
    "Id": "447549",
    "ThreadId": "213889",
    "Html": "<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\"><div style=\"color:black;background-color:white\"><pre><span style=\"color:blue\"><span style=\"color:#000000\">Hello,<br><br>we are using Prism in our application and I might have found a bug in the CAL.<br><br>We are using a view with a scoped region which is added to the <em>MainRegion</em> of the shell. The view is pretty simple:<br></span><br>&lt;</span><span style=\"color:#a31515\">UserControl</span> <span style=\"color:red\">x:Class</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">PatientManagement.Views.PatientManagementView</span><span style=\"color:black\">&quot;</span><br>             <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:black\">&quot;</span><br>             <span style=\"color:red\">xmlns:x</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:black\">&quot;</span><br>             <span style=\"color:red\">xmlns:cal</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://www.codeplex.com/CompositeWPF</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span><br>    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">TabControl</span> <span style=\"color:red\">cal:RegionManager.RegionName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Exam</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span><br><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">UserControl</span><span style=\"color:blue\">&gt;</span><br></pre>\r\n</div>\r\n<span style=\"color:#000000\">Depending on the user input the view is added and removed from the <em>MainRegion </em>multiple times. I created a simple<br>module wich does add and remove the view multiple times. After the second Remove you always get a </span></span><span style=\"color:blue\">&nbsp;</span><em>UpdateRegionsException</em> <br>informing you that the Region with the name <em>Exam </em>already exists. (See stacktrache below)<br></pre>\r\n</div>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\"><br>public</span> <span style=\"color:blue\">class</span> PatientManagementModule : IModule\r\n{\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> IRegionManager _regionManager;\r\n    <span style=\"color:blue\">private</span> PatientManagementView _view;\r\n\r\n    <span style=\"color:blue\">public</span> PatientManagementModule(IRegionManager regionManager)\r\n    {\r\n        _regionManager = regionManager; \r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()\r\n    {\r\n        <span style=\"color:green\">// Create view</span>\r\n        _view = <span style=\"color:blue\">new</span> PatientManagementView();\r\n            \r\n        AddView();\r\n        RemoveView();\r\n        AddView();\r\n        RemoveView();   <span style=\"color:green\">// Exception!   </span>\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> AddView()\r\n    {\r\n        IRegion region = _regionManager.Regions[<span style=\"color:#a31515\">&quot;MainRegion&quot;</span>];\r\n\r\n        <span style=\"color:green\">// Add the view to the region and create a scoped region manager</span>\r\n        region.Add(_view, <span style=\"color:#a31515\">&quot;dummy&quot;</span>, <span style=\"color:blue\">true</span>);\r\n        region.Activate(_view);\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> RemoveView()\r\n    {\r\n        IRegion region = _regionManager.Regions[<span style=\"color:#a31515\">&quot;MainRegion&quot;</span>];\r\n\r\n        <span style=\"color:green\">// Remove the view from the region</span>\r\n        region.Remove(_view);\r\n    }\r\n}\r\n<br></pre>\r\n</div>\r\n<pre>I used the debugger to step into the CAL code and found one problem. Whenever a view is added to a region, the Region.Add<br>Method will add the RegionManager as an attached property to the view. In the example the ScopedRegionManager is added<br>to the view as a attached property. Once you remove the view from the region, the <em>Region.Remove</em> will remove the <br>attached property only if it is the default RegionManager. So in the example the attached property is not removed because<br>it is the scoped RegionManager not the default one.<br><br>Once I added some code to remove the left over attached property from the view I can add and remove it<br>as often as I want without getting any exceptions.<br></pre>\r\n<p>Sincerely,</p>\r\n<p>Michael</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><strong>Stacktrace</strong><br><br>Microsoft.Practices.Composite.Presentation.Regions.UpdateRegionsException: An exception occurred while trying to create region objects. <br>&nbsp;&nbsp;&nbsp; - The most likely causing exception was: 'System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.ArgumentException: Region with the given name is already registered: Exam<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Regions.RegionManager.RegionCollection.Add(IRegion region) in C:\\CSharp\\PrismScopedRegions\\CAL\\Composite.Presentation\\Regions\\RegionManager.cs:line 315<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Regions.Behaviors.RegionManagerRegistrationBehavior.TryRegisterRegion() in C:\\CSharp\\PrismScopedRegions\\CAL\\Composite.Presentation\\Regions\\Behaviors\\RegionManagerRegistrationBehavior.cs:line 127<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Regions.Behaviors.RegionManagerRegistrationBehavior.OnUpdatingRegions(Object sender, EventArgs e) in C:\\CSharp\\PrismScopedRegions\\CAL\\Composite.Presentation\\Regions\\Behaviors\\RegionManagerRegistrationBehavior.cs:line 142<br>&nbsp;&nbsp; --- End of inner exception stack trace ---<br>&nbsp;&nbsp; at System.RuntimeMethodHandle._InvokeMethodFast(IRuntimeMethodInfo method, Object target, Object[] arguments, SignatureStruct&amp; sig, MethodAttributes methodAttributes, RuntimeType typeOwner)<br>&nbsp;&nbsp; at System.RuntimeMethodHandle.InvokeMethodFast(IRuntimeMethodInfo method, Object target, Object[] arguments, Signature sig, MethodAttributes methodAttributes, RuntimeType typeOwner)<br>&nbsp;&nbsp; at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, Boolean skipVisibilityChecks)<br>&nbsp;&nbsp; at System.Delegate.DynamicInvokeImpl(Object[] args)<br>&nbsp;&nbsp; at System.Delegate.DynamicInvoke(Object[] args)<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Events.WeakDelegatesManager.Raise(Object[] args) in C:\\CSharp\\PrismScopedRegions\\CAL\\Composite.Presentation\\Events\\WeakDelegatesManager.cs:line 49<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Regions.RegionManager.UpdateRegions() in C:\\CSharp\\PrismScopedRegions\\CAL\\Composite.Presentation\\Regions\\RegionManager.cs:line 217'.<br>&nbsp;&nbsp;&nbsp; But also check the InnerExceptions for more detail or call .GetRootException().&nbsp; ---&gt; System.ArgumentException: Region with the given name is already registered: Exam<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Regions.RegionManager.RegionCollection.Add(IRegion region) in C:\\CSharp\\PrismScopedRegions\\CAL\\Composite.Presentation\\Regions\\RegionManager.cs:line 315<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Regions.Behaviors.RegionManagerRegistrationBehavior.TryRegisterRegion() in C:\\CSharp\\PrismScopedRegions\\CAL\\Composite.Presentation\\Regions\\Behaviors\\RegionManagerRegistrationBehavior.cs:line 127<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Regions.Behaviors.RegionManagerRegistrationBehavior.OnUpdatingRegions(Object sender, EventArgs e) in C:\\CSharp\\PrismScopedRegions\\CAL\\Composite.Presentation\\Regions\\Behaviors\\RegionManagerRegistrationBehavior.cs:line 142<br>&nbsp;&nbsp; --- End of inner exception stack trace ---<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Regions.RegionManager.UpdateRegions() in C:\\CSharp\\PrismScopedRegions\\CAL\\Composite.Presentation\\Regions\\RegionManager.cs:line 223<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Regions.RegionManager.RegionCollection.get_Item(String regionName) in C:\\CSharp\\PrismScopedRegions\\CAL\\Composite.Presentation\\Regions\\RegionManager.cs:line 292<br>&nbsp;&nbsp; at PatientManagement.PatientManagementModule.RemoveView() in C:\\CSharp\\PrismScopedRegions\\PatientManagement\\PatientManagementModule.cs:line 51<br>&nbsp;&nbsp; at PatientManagement.PatientManagementModule.Initialize() in C:\\CSharp\\PrismScopedRegions\\PatientManagement\\PatientManagementModule.cs:line 30<br></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-05-26T04:22:30.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "456833",
    "ThreadId": "213889",
    "Html": "<p>Hi Michael,</p>\r\n<p>Thanks for reporting that, we&rsquo;ve checked your approach and some others, and found that it is an issue in Prism. We will communicate it to the Prism team to get them notified about it.<br>Based on our findings for your particular situation, a possible workaround without modifying the CAL is to change the place where the application is retrieving the Main Region, since it is not necessary to perform this operation on each adding/removing of a view. <br><br>The code for achieving that could look like this:</p>\r\n<pre><span style=\"color:blue\">public class </span><span style=\"color:#2b91af\">HelloWorldModule </span>: <span style=\"color:#2b91af\">IModule\r\n</span>{\r\n    <span style=\"color:blue\">private </span><span style=\"color:#2b91af\">IRegion </span>MainRegion { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:blue\">private </span>Views.<span style=\"color:#2b91af\">HelloWorldView </span>MyView { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    <span style=\"color:green\">//public IRegionManager RegionManager { get; set; }\r\n    \r\n    </span><span style=\"color:blue\">public </span>HelloWorldModule(<span style=\"color:#2b91af\">IRegionManager </span>regionManager)\r\n    {\r\n        <span style=\"color:green\">// We added here the call for getting the main region \r\n        </span><span style=\"color:blue\">this</span>.MainRegion = regionManager.Regions[<span style=\"color:#a31515\">&quot;MainRegion&quot;</span>];\r\n    }\r\n\r\n    <span style=\"color:blue\">public void </span>Initialize()\r\n    {\r\n        <span style=\"color:blue\">this</span>.MyView = <span style=\"color:blue\">new </span>Views.<span style=\"color:#2b91af\">HelloWorldView</span>();\r\n        <span style=\"color:blue\">this</span>.AddView();            \r\n        <span style=\"color:blue\">this</span>.RemoveView();\r\n        <span style=\"color:blue\">this</span>.AddView();\r\n        <span style=\"color:blue\">this</span>.RemoveView();\r\n    }\r\n\r\n    <span style=\"color:blue\">public void </span>AddView()\r\n    {\r\n        <span style=\"color:green\">//We removed this call since it is not necessary to be repeated on each adding of a view.          \r\n        //this.MainRegion = this.RegionManager.Regions[&quot;MainRegion&quot;];            \r\n        </span><span style=\"color:blue\">this</span>.MainRegion.Add(<span style=\"color:blue\">this</span>.MyView, <span style=\"color:#a31515\">&quot;HelloWorldView&quot;</span>, <span style=\"color:blue\">true</span>);\r\n        <span style=\"color:blue\">this</span>.MainRegion.Activate(<span style=\"color:blue\">this</span>.MyView);\r\n    }\r\n\r\n    <span style=\"color:blue\">public void </span>RemoveView()\r\n    {\r\n        <span style=\"color:green\">//We removed this call since it is not necessary to be repeated on each removing of a view. \r\n        //this.MainRegion = this.RegionManager.Regions[&quot;MainRegion&quot;];\r\n        </span><span style=\"color:blue\">this</span>.MainRegion.Remove(<span style=\"color:blue\">this</span>.MyView);\r\n    }        \r\n}\r\n</pre>\r\n<p><a href=\"http://11011.net/software/vspaste\"></a><a href=\"http://11011.net/software/vspaste\"></a></p>\r\n<p>I hope you can find this helpful.</p>\r\n<p>Fernando Antivero <br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>",
    "PostedDate": "2010-06-17T09:58:14.977-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "459440",
    "ThreadId": "213889",
    "Html": "<p>How do you remove the view with the scopedregionmanager? And dispose scopedregionmanager from container?</p>",
    "PostedDate": "2010-06-24T04:44:10.717-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "507837",
    "ThreadId": "213889",
    "Html": "<p>Hello Fernando,</p>\r\n<p>Yes indeed very usefull ...</p>\r\n<p>I'm facing exactly the same issue,</p>\r\n<p>but in my case , when i use your solution, (scope limited) the subregions of my view are not included in the regionManager.</p>\r\n<p>So, in one case, it works for Display, Remove, Display , and crach for Remove again</p>\r\n<p>And, with your solution, It fail , when I'm trying to inject the view in the sub region (because not existing in the regionManager due to the scopped == true)</p>\r\n<p>Do you have an idee .</p>\r\n<p>Thanks in advance for your reply.</p>\r\n<p>Best regards</p>\r\n<p>&nbsp;&nbsp;&nbsp; Christophe</p>",
    "PostedDate": "2010-10-15T08:40:28.77-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "507945",
    "ThreadId": "213889",
    "Html": "<p>Hi Christophe,<br><br>Thanks for reporting that. I will copy this as a work-item, so the product team will be notified. Additionally, other users can vote this.<br><br>When you use an Scope Region, it will create a Region Manager separated. In general, scope regions are used with View Discovery, but we used this with View Injection as a workaround.<br><br>From the MSDN documentation: Note that by setting the createRegionManagerScope parameter to true, the added view will define a new region scope; therefore, all the regions registered by the view will not be registered with the Shell window's region manager;<br><br>Therefore, when you call to Add method in your MainRegion, you could register in your container the ScopedRegionManager returned</p>\r\n<p><span style=\"color:blue\">var <span style=\"color:#000000\">scopedRegionManager = </span>this</span>.MainRegion.Add(<span style=\"color:blue\">this</span>.MyView, <span style=\"color:#a31515\">&quot;HelloWorldView&quot;</span>, <span style=\"color:blue\">true</span>); <span style=\"color:blue\"><br><span style=\"color:#000000\">yourContainer.RegisterInstanace(scopedRegionManager, &quot;ScopedRegionManager&quot;)</span></span><span style=\"color:#000000\">;</span></p>\r\n<p>Then you could use the container to obtain the scopedRegionManager for injecting your views.</p>\r\n<p>Hope this helps.</p>\r\n<p>Fernando Antivero <br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-15T11:52:53.64-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "507947",
    "ThreadId": "213889",
    "Html": "This discussion has been copied to a work item. Click <a href=\"http://compositewpf.codeplex.com/workitem/7381\">here</a> to go to the work item and continue the discussion.",
    "PostedDate": "2010-10-15T11:53:51.12-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513813",
    "ThreadId": "213889",
    "Html": "\r\n<p>Have we found a solution to this one? I think I've runned into a similar issue here:\r\n<a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=232334\">http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=232334</a></p>\r\n",
    "PostedDate": "2010-10-28T01:02:37.427-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "524772",
    "ThreadId": "213889",
    "Html": "\r\n<p>This also appears to be an issue when moving views between regions. If a view with a scoped region manager is removed from one region, and subsequently re-added to another region, this issue also occurs. Forcing the view to clear it's RegionManagerProperty\r\n when removing from a region does prevent the exception as well.</p>\r\n",
    "PostedDate": "2010-11-20T12:21:06.553-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]