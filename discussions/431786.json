[
  {
    "Id": "995722",
    "ThreadId": "431786",
    "Html": "Firstly, sorry for this long question but it is very critical to my LOB application and i hope you will<br />\n<pre><code>     have patience with me here</code></pre>\n\nI will use Customer - Order - OrderDetail as analogy to my system.<br />\nMy Target: is to build CustomerDetailsView (wpf user control) containing single Customer Details as master in the upper part of the view and in lower part of same view TabControl containing multiple TabItems: Orders tab, Addresses Tab, ... as slaves for that displayed customer.(this sequence will be repeated with Order - OrderDetail- ...)<br />\n<br />\nNow to the details:<br />\n<br />\n1-In the database <br />\ni have Customer table that has one-to-many relationship with<br />\nOreder table (Customer is the parent and orders are childern) and OrderDetail table<br />\nwhere Order has one-to-many relationship with OrderDetail.<br />\n<br />\n2-In the EDM<br />\ni have Customer entity contains navigation property Orders with Order entity<br />\nand Order  entity has navigation property OrderDetails with OrederDetail entity<br />\n<br />\n3-In the Model:<br />\nnow the Customer model class contains this relationship to Order model class:<br />\n<pre><code>     public IEnumerable&lt;Order&gt; Orders { get; set; }\n</code></pre>\n\nand Order model class contains relationship to orderDetail:<br />\n<pre><code>     public IEnumerable&lt;OrderDetail&gt; OrderDetails { get; set; } \n</code></pre>\n\n*all model classes are populated from entities using services<br />\n<br />\n4-In ViewModel (CustomerDetailsViewModel)<br />\n every model property is mirrored to view model and that properties are populated from the model.<br />\n the view model will have many views : the CustomerDetailsView and the UserControls that will contain the DataGrids and reside in the tabControl that will reside in CustomerDetailsView <br />\n The property that represents the navigation property i mirrored in view model<br />\n like this:<br />\n<pre><code>    private ObservableCollection&lt;Order&gt; _orders;\n    public ObservableCollection&lt;Order&gt; Orders\n    {\n        get\n        {\n\n            return _customer.Orders.ToObservableCollection(); //_customer is the model object\n        }\n\n        set\n        {\n\n            if (_orders != value)\n            {\n                _orders = value;\n                PropertyChanged(this, new PropertyChangedEventArgs(&quot;Orders&quot;));\n            }\n\n        }\n\n    }\n</code></pre>\n\n5-In View (CustomerDetailsView ):<br />\n   in the lower part with multiple taps (as explained above), each tab will contain DataGrid view that will contains slaves Data Orders, Addresses, ...<br />\n   in xaml of <br />\n<pre><code>             &lt;DataGrid ItemsSource=&quot;{Binding Orders}&quot; \n                       AutoGenerateColumns=&quot;False&quot; \n                       ....\n</code></pre>\n\nMy Questions:<br />\n   1-Is this the right approach to represent navigation property as collection in Model, ViewModel?<br />\n   2-Is the right way to use ObservableCollection&lt;OrderViewModel&gt; _orders instead of <br />\n<pre><code>   ObservableCollection&lt;Order&gt; _orders in CustomerDetailsViewModel to represent collection of orders\n   i.e. using one view model for master and slave or using two view models?</code></pre>\n\n3-Is there sample application that model this scenarion w/o violating MVVM , Prism, MEF rules?<br />\n   4-Is this the right way to mirror such hierarchy in the real world and model the Master-Slave relationship?<br />\nmany questions to come after answering these first three.<br />\nMany thanks in advance for your time and help.<br />\n",
    "PostedDate": "2013-02-03T00:43:42.44-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "996337",
    "ThreadId": "431786",
    "Html": "Hi there,<br />\n<br />\nSorry for the delay, but after analyzing the scenario you described, I realized that a recommended approach that could be used for this kind of scenarios, could be like the one used in the <a href=\"http://msdn.microsoft.com/en-us/library/ff921174%28v=pandp.40%29.aspx\" rel=\"nofollow\">UI Composition QuickStart</a> provided with <strong>Prism</strong> , which so far is the only sample I know, that illustrates a similar scenario like the one you described.<br />\n<br />\nAs you may find this approach, could be useful to keep a clean separation on the different layers of your application. Also, it uses different view models for each of the details views in order to represent the information from the currently selected <strong>Exployee</strong> which for example in your case could be the selected <strong>customer</strong> , this approach in my opinion will result in a cleaner one than only having only one view model.<br />\n<br />\nAlthough, this sample was built with <strong>Unity</strong> and <strong>Silverlight</strong> I believe  you could find the concepts explained there useful to tackle your application as a similar approach could be used in a <strong>WPF</strong> application without problems.<br />\n<br />\nI hope you find this as a helpful reference to start with,<br />\n<br />\nRegards,<br />\n<br />\nAgustin Adami<br />\n<a href=\"http://blogs.southworks.net/aadami\" rel=\"nofollow\">http://blogs.southworks.net/aadami</a><br />\n",
    "PostedDate": "2013-02-04T13:03:09.78-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "996807",
    "ThreadId": "431786",
    "Html": "Hi,<br />\nSorry adami this is not my case and not my goal.<br />\nMy goal is how to mirror the master details relationship or the hierarchy exist in real work into my application, starting from<br />\nthe database (foreign keys) to EDM (navigation property) to Service (detail is collection inside the master service) to Model (detail is collection of models inside the master model) to View Model (detail is a collection of models or ViewModel inside the master view model) up to the view where different details views are contained in several tabs nested inside the master user control. then i should be able to apply CRUD operations on these details tables. I don't know how to do this w/o violating Prism and MVVM rules.<br />\nTo be more specific my problem is how to model the master - details relationship in the view model in conformance <br />\nwith Prism and MVVM rules and allowing CRUD operations in details views withing master view?<br />\nsorry if i can't explain my target clearly.<br />\n",
    "PostedDate": "2013-02-05T10:00:12.687-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "997466",
    "ThreadId": "431786",
    "Html": "Hi,<br />\n<br />\nAs far as I know there are no examples or guidance of how to connect or update a back-end database in the <strong>Prism</strong>, I believe this is mainly because this guidance is focused on the presentation layer and not how you architect your Business Logic Layer or Data Access Layer. And this is why there are no Quick starts related to this. However, if you believe this should be changed, you could copy this as a work-item in the <a href=\"http://compositewpf.codeplex.com/workitem/list/advanced\" rel=\"nofollow\">issue tracker section</a> , so the P&amp;P team can analyze this for future releases.<br />\n<br />\nOn the other hand, I believe you could check some of the samples suggested in this thread where a similar topic was discussed, perhaps you could find them useful to tackle your scenario:<br />\n<ul>\n<li>\n<a href=\"http://social.msdn.microsoft.com/Forums/pl/wpf/thread/bc01a712-d29f-4109-90fb-0826bcde22ac\" rel=\"nofollow\">Full example application using Prism 4</a><br />\n</li>\n</ul>\nAdditionally, you may also find the new upcoming release from the P&amp;P team named <a href=\"http://konaguidance.codeplex.com/\" rel=\"nofollow\">Kona</a> interesting, although it is in its first drops, it will will provide written guidance and a reference implementation that describe recommended practices for building LOB Windows 8 client apps using WinRT and .NET.<br />\n<br />\nBest Regards,<br />\n<br />\nAgustin Adami<br />\n<a href=\"http://blogs.southworks.net/aadami\" rel=\"nofollow\">http://blogs.southworks.net/aadami</a><br />\n",
    "PostedDate": "2013-02-06T11:11:58.517-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "997540",
    "ThreadId": "431786",
    "Html": "Hi Adami'<br />\nThanks for trying to help.<br />\nI found a solution to implement master details hierarchy in the View Model part but i want<br />\nyour help to make it work and make it conform with Prism-MEF (this solution for Ryan Vice)<br />\n<br />\nNow down to the trenches:<br />\n<br />\n*CustomerDetailsView.xaml is the view that will contain Master (Customer) data and Details <br />\n  (Order, Addresses ...) data in tabitems nested inside  CustomerDetailsView.xaml<br />\n*CustomerDetailsViewModel.cs : is the View Model for previous view<br />\n*Now to add Order as details to to master customer in CustomerDetailsView.xaml view:<br />\n<br />\n1-Add class OrderViewModel:<br />\n<pre><code> public class OrderViewModel\n {\n   private Order _model;\n   public Order Model\n {\n   get { return _model; }\n   set\n    {\n      if (_model == value)\n      return;\n      _model = value;\n      RaisePropertyChanged(ModelPropertyName);\n     }\n  }\n\n  public OrderViewModel(Order model)\n  {\n    _model = model;\n    \n  }\n</code></pre>\n\n2-Add class called OrdersViewModel.cs This View Model takes a collection of Model.Order (Order model )<br />\nobjects as a constructor argument and then exposes them as a collection<br />\nof OrderViewModel instances for consumption by the view.<br />\n<pre><code>    public class OrdersViewModel\n    {\n       public ObservableCollection&lt;OrderViewModel&gt;\n               Orders { get; set; }\n      public OrdersViewModel(\n               IEnumerable&lt;Model.Order&gt; orders)\n       {\n         Orders = new ObservableCollection&lt;OrderViewModel&gt;(\n         orders.Select(o =&gt; new OrderViewModel(o)));\n       }\n     }\n</code></pre>\n\n3-in CustomerDetailsViewModel.cs add the following property to it. This property is lazy instantiated and when its getter <br />\nis called it will create a new OrderViewModel, if one hasn't been created, and pass it to Customers.Orders.<br />\n<pre><code>   private OrdersViewModel _orders;\n   public OrdersViewModel Orders\n   {\n     get\n       {\n         if (Customer == null)\n         return null;\n         return _orders ?? (_orders\n                = new OrdersViewModel(Customer.Orders));\n        }\n    }</code></pre>\n\nNow we have CustomerDetailsViewModel contains OrdersViewModel which in turn contains<br />\na collection of OrderViewModels which implement the hierarchy<br />\n<br />\n4-Create OrdersView.xaml with OrdersViewModel.cs  as its view model<br />\n<br />\n  OrdersView.xaml  will contain datagrid with <br />\n<pre><code>ItemsSource=&quot;{Binding Orders}&quot;  </code></pre>\n\n(Orders here is the ObservableCollection&lt;OrderViewModel&gt; contained in OrdersViewModel) hence it will display grid of orders<br />\n<br />\n5-in CustomerDetailsView.xaml in the tabitem that will contain orders we bind it to the OrdersViewModel in CustomerDetailsViewModel.cs <br />\n<pre><code>  &lt;ContentControl Content=&quot;{Binding Orders}&quot; /&gt; </code></pre>\n\n(Orders here is the OrdersViewModel property contained in CustomerDetailsViewModel  )<br />\n<br />\n<br />\n**{this may help: Adami created spike &quot;TabControlDynamicTabItems&quot; in previous thread &quot;prism: problems with dynamically adding tabitems&quot;<br />\n  if you replaced SubsystemDetailsViewModel by CustomerDetailsViewModel and SubsystemDetailsView by CustomerDetailsView it will be our case }<br />\n**Now I need to involve MEF + make this code work (i tried but it is not working)+make this code compliant <br />\nwith Prism<br />\n<br />\n**You help is very much appreciated.<br />\n",
    "PostedDate": "2013-02-06T13:42:49.757-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]