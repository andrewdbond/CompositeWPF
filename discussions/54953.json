[
  {
    "Id": "185501",
    "ThreadId": "54953",
    "Html": "Hi,<div>Let's say  I have two views LeftView and RightView.  I have a toolbar and a menu bar implemented as separate UserControls.  When my LeftView becomes active, I need to disable certain buttons and menuItems from the toolbar and menubar respectively.  My buttons on the toolbar and menuitems are bound to commands.  </div><div><br></div><div>My question is how do I leverage IActiveAware to disable/enable toolbat buttons and menuItems?  Are there any samples around that do this.</div><div><br></div><div>Thanks,</div><div>Arun</div>",
    "PostedDate": "2009-04-30T06:08:12.437-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "186657",
    "ThreadId": "54953",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi Arun, </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">The <b>IActiveAware</b> interface  defines if the object instance is active and notifies when the activity changes. You should implement for your objects that need to know if they are active or need to communicate their activity changes. For example in Prism-v2 this interface is used by the <b>CompositeCommand</b> class not to execute Commands that are inactive. <b>RegionActiveAwareBehavior</b> notifies views that implement <b>IActiveAware</b> when they are activated /deactivated.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">To leverage the <b>IActiveAware</b> interface in your scenario, you can implement it in your <b>LeftView</b> and <b>RightView </b> so that they are notified when they are activated /deactivated and they can notify about this change. </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:calibri\">To implement the enabling or disabling the buttons in the toolbar,  it depends on your particular scenario. If the commands bound to the buttons are used by several modules you will be using </span><a href=\"http://msdn.microsoft.com/en-us/library/dd458862.aspx\"><span style=\"font-family:calibri\">Globally Available Commnads</span></a><span style=\"font-family:calibri\">. One possible solution might be having a <b>CompositeCommand </b>that should be accessible to the view and to the toolbar. This way the view could register a <b>DelegateCommand</b> in the <b>CompositeCommnad</b> that will have an empty <b>ExecuteMethod </b> and the <b>CanExecute</b> method using the <b>IsActive</b> property of the view. For example you can do the following in the view's constructor:</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">      public</span><span style=\"font-size:10pt;font-family:'courier new'\"> LeftView()</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    InitializeComponent();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    <span style=\"color:green\">// Declare the command</span>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    <span style=\"color:blue\">this</span>.activeCommand = <span style=\"color:blue\">new</span> DelegateCommand&lt;<span style=\"color:blue\">object</span>&gt;(param =&gt; { <span style=\"color:blue\">return</span>; }, param =&gt; <span style=\"color:blue\">this</span>.IsActive);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    <span style=\"color:green\">// add command to the composite command</span> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    <span style=\"color:#2b91af\">Commands</span>.ToolBarCommand.RegisterCommand(<span style=\"color:blue\">this</span>.activeCommand);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span> </p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">                </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">      public</span><span style=\"font-size:10pt;font-family:'courier new'\"> <span style=\"color:blue\">bool</span> IsActive</span> </p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">      {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">            <span style=\"color:blue\">get</span>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">            {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>._isActive;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">            }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">            <span style=\"color:blue\">set</span>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">            {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>._isActive != value)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">                {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">                    <span style=\"color:blue\">this</span>._isActive = value;                    </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">                    OnIsActiveChanged();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">                    this.activeCommand.RaiseCanExecuteChanged();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">                }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">            }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">       }</span><span style=\"font-family:calibri\">          </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">This way the <b>ToolBarCommand </b>will be able to execute only if the <b>LeftView</b> is active and this will automatically enable /disable the controls bound to this command. </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">One more thing to notice is that you should be careful about which control you are using as region, because this will change the way it's views are considered active. For example, a <b>ContentControl</b> will always have one active view (the one that is showing), the <b>ItemsControl</b> and <b>TabContol</b> might have several active views (even if they are not being shown in the UI).</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d;font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hope it helps!</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Matias Bonaventura</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><a href=\"http://blogs.southworks.net/\"><span style=\"color:#0000ff;font-family:calibri\">http://blogs.southworks.net/matiasb</span></a> </p>\r\n</span></p>\r\n</span></p>\r\n</span></p>\r\n",
    "PostedDate": "2009-05-04T12:51:28.737-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "223272",
    "ThreadId": "54953",
    "Html": "<p>Just wanted to post an implementation that you might find useful in a scenario like the one described. Feel free to let me know flaws in the thinking or better ways to achieve the same thing.</p>\r\n<p>&nbsp;</p>\r\n<p>I am using a TabControl region with a close button which I wanted to hide in the unselected tabs. The steps I took in my MVVM/MVP style project:</p>\r\n<p>&nbsp;</p>\r\n<ol>\r\n<li>Bind a local command in the presenter to the close button in the shell's TabItem HeaderTemplate .</li>\r\n<li>Implement IActiveAware on the views that will be shown in the tabs. These views are given a reference to their presenter. This presenter holds a property for CloseCanExecute and it is set to true or false when the view is activated and inactivated (in the IActiveAware IsActive setter - I feel that this is an acceptable use of a property side effect? Chime in!).</li>\r\n<li>In my shell XAML where the TabControl resides, I added a reference to a value converter which converts a boolean to a Visibility value. I bound the Visibility of a container holding the button to the close button's IsEnabled property through the converter. I would guess you could bind the button's own Visibility property as well. Element binding in SL3 = Fresh. (You should still be able to make this work in SL2 with a propety in your presenter and INotifyPropertyChanged)</li>\r\n</ol>\r\n<p>&nbsp;</p>\r\n<p>That's it. When you flip the bit on the CloseCanExecute property (when a View is activated or deactivated), the button's IsEnabled property is toggled, converted to a Visibility of collapsed or visible and applied to the button. Visually, it's a little blinky (you see the button momentarily before it disappears) - will have to figure out what can be done about that later - but it works in a reasonably nice &quot;Prism kind of way&quot;.</p>\r\n<p>&nbsp;</p>\r\n<p>P.S. Any suggestions on dealing with the blink would be greatly appreciated. ;)</p>\r\n<p>&nbsp;</p>\r\n<p>Rock.</p>\r\n<p>&nbsp;</p>\r\n<p>Best wishes...</p>",
    "PostedDate": "2009-08-14T00:33:50.68-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "223605",
    "ThreadId": "54953",
    "Html": "<p>Update: Changed the button to bind to itself and eliminated the container - visual performance is much better. Looks like this:</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>&lt;Button x:Name=&quot;btnClose&quot; Visibility=&quot;{Binding IsEnabled, Mode=OneWay, ElementName=btnClose, Converter={StaticResource VisibilityConverter}}&quot; /&gt;\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-14T10:39:34.49-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "246204",
    "ThreadId": "54953",
    "Html": "<p>Can you post the VisibilityConverter?&nbsp; Thanks.</p>",
    "PostedDate": "2009-10-15T13:02:13.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "247487",
    "ThreadId": "54953",
    "Html": "<p>Apologies for the late reply. I used the approach detailed here:</p>\r\n<p>&nbsp;</p>\r\n<p><a href=\"http://www.jeff.wilcox.name/2008/07/visibility-type-converter/\">http://www.jeff.wilcox.name/2008/07/visibility-type-converter/</a></p>\r\n<p>&nbsp;</p>\r\n<p>Best of luck!</p>",
    "PostedDate": "2009-10-19T15:53:04.057-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]