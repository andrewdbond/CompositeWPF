[
  {
    "Id": "469715",
    "ThreadId": "220170",
    "Html": "<p>I have been having this issue since I upgraded to v2.2 of Prism and I can not for the life of me figure out what is happening. Basically my shell will launch with no modules loaded and then after the modules have been loaded will launch again properly, but I still have the first blank shell open. I can close the blank shell and the application continues to run, but if I close the shell with the modules loaded then the application will exit as expected. I created a small video so I could better explain what I am seeing in case I can't quite get it across in words.</p>\r\n<p><a href=\"http://www.kcdc.org/files/doubleshell.wmv\">http://www.kcdc.org/files/doubleshell.wmv</a></p>\r\n<p>If I comment out this line view.ShowView(); from the CreateShell() method, shown below, then the first blank shell still launches, but the &quot;good&quot; shell does not. I have no clue where phantom shell is being created more less shown from. I'm pulling my hair out. It has to be something simple, but I have no clue. I've watered it down just about as much as I can. I did create a new test Prism app and I do not experience this issue with it. I used the same bootstrapper and App.xaml.cs logic to launch it's shell, but for some reason it works and this one does not.</p>\r\n<p><span style=\"text-decoration:underline\"><strong>Here is my bootstrapper class.&nbsp;</strong></span></p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Bootstrapper : UnityBootstrapper\r\n    {\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> IModuleCatalog GetModuleCatalog()\r\n        {\r\n            <span style=\"color:blue\">string</span> modulePath = Path.GetFullPath(<span style=\"color:#a31515\">&quot;Modules&quot;</span>);\r\n            <span style=\"color:blue\">if</span> (!System.IO.Directory.Exists(modulePath))\r\n            {\r\n                System.IO.Directory.CreateDirectory(modulePath);\r\n            }\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> MultipleDirectoryModuleCatalog() { ModulePath = modulePath };\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureContainer()\r\n        {\r\n            Container.AddExtension(<span style=\"color:blue\">new</span> EnterpriseLibraryCoreExtension());\r\n\r\n            Container.RegisterType&lt;IShellView, ShellView&gt;();\r\n            <span style=\"color:green\">//container.RegisterType&lt;IMessageService, MessageService&gt;(new ContainerControlledLifetimeManager());</span>\r\n            <span style=\"color:green\">//container.RegisterType&lt;IShowAboutView, ShowAboutViewService&gt;(new ContainerControlledLifetimeManager());</span>\r\n            Container.RegisterType&lt;ILoggerService, EnterpriseLibraryLoggerAdapter&gt;(<span style=\"color:blue\">new</span> ContainerControlledLifetimeManager());\r\n            <span style=\"color:green\">//container.RegisterType&lt;IUIElementCreationService, WpfCreationService&gt;(new ContainerControlledLifetimeManager());</span>\r\n            <span style=\"color:green\">//container.RegisterType&lt;IEliteService, EliteDataService&gt;(new ContainerControlledLifetimeManager()); </span>\r\n            <span style=\"color:blue\">base</span>.ConfigureContainer();\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> InitializeModules()\r\n        {\r\n            IModuleManager manager;\r\n\r\n            <span style=\"color:blue\">try</span>\r\n            {\r\n                manager = <span style=\"color:blue\">this</span>.Container.Resolve&lt;IModuleManager&gt;();\r\n            }\r\n            <span style=\"color:blue\">catch</span> (ResolutionFailedException ex)\r\n            {\r\n                <span style=\"color:blue\">if</span> (ex.Message.Contains(<span style=\"color:#a31515\">&quot;IModuleCatalog&quot;</span>))\r\n                {\r\n                    <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> InvalidOperationException(Resources.NullModuleCatalogException);\r\n                }\r\n                <span style=\"color:blue\">throw</span>;\r\n            }\r\n            manager.Run();\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> RegionAdapterMappings ConfigureRegionAdapterMappings()\r\n        {\r\n            RegionAdapterMappings regionAdapterMappings = Container.TryResolve&lt;RegionAdapterMappings&gt;();\r\n            <span style=\"color:blue\">if</span> (regionAdapterMappings != <span style=\"color:blue\">null</span>)\r\n            {\r\n                regionAdapterMappings.RegisterMapping(<span style=\"color:blue\">typeof</span>(RadToolBar), Container.Resolve&lt;RadToolBarTrayRegionAdapter&gt;());\r\n                regionAdapterMappings.RegisterMapping(<span style=\"color:blue\">typeof</span>(RadToolBarTray), Container.Resolve&lt;RadToolBarTrayRegionAdapter&gt;());\r\n                regionAdapterMappings.RegisterMapping(<span style=\"color:blue\">typeof</span>(RadPaneGroup), Container.Resolve&lt;RadPaneGroupRegionAdapter&gt;());\r\n                regionAdapterMappings.RegisterMapping(<span style=\"color:blue\">typeof</span>(RadRibbonBar), Container.Resolve&lt;RadRibbonBarRegionAdapter&gt;());\r\n            }\r\n\r\n            <span style=\"color:blue\">return</span> regionAdapterMappings;            \r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> EnterpriseLibraryLoggerAdapter _logger = <span style=\"color:blue\">new</span> EnterpriseLibraryLoggerAdapter();\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> ILoggerFacade LoggerFacade\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _logger; }\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> DependencyObject CreateShell()\r\n        {\r\n            ShellViewModel presenter = Container.Resolve&lt;ShellViewModel&gt;();\r\n            IShellView view = presenter.View;\r\n\r\n            <span style=\"color:green\">//view.ShowView();</span>\r\n\r\n            <span style=\"color:blue\">return</span> view <span style=\"color:blue\">as</span> DependencyObject;\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p><span style=\"text-decoration:underline\"><strong>Here is my App.xaml.cs class.</strong></span></p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> App : Application\r\n    {\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> OnStartup(StartupEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">base</span>.OnStartup(e);\r\n            <span style=\"color:blue\">this</span>.ShutdownMode = ShutdownMode.OnMainWindowClose;\r\n<span style=\"color:blue\">#if</span> (DEBUG)\r\n            RunInDebugMode();\r\n<span style=\"color:blue\">#else</span>\r\n            RunInReleaseMode();\r\n<span style=\"color:blue\">#endif</span>            \r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> RunInDebugMode()\r\n        {\r\n            AppDomain.CurrentDomain.UnhandledException += AppDomainUnhandledException;\r\n            <span style=\"color:blue\">try</span>\r\n            {\r\n                SplashScreen appSplash = <span style=\"color:blue\">new</span> SplashScreen(<span style=\"color:#a31515\">&quot;../Resources/SplashScreen.png&quot;</span>);\r\n                appSplash.Show(<span style=\"color:blue\">false</span>);\r\n                UnityBootstrapper bootstrapper = <span style=\"color:blue\">new</span> Bootstrapper();\r\n                appSplash.Close(TimeSpan.FromSeconds(0.5));\r\n\r\n                <span style=\"color:green\">//InitializeCultures();</span>\r\n\r\n                <span style=\"color:green\">//Resources.MergedDictionaries.Add(ResourceService.GetSharedDictionary(</span>\r\n                <span style=\"color:green\">//    new Uri(ResourceHelper.SharedResourcePath, UriKind.Relative)));</span>\r\n                Log(<span style=\"color:#a31515\">&quot;Elite Extender is running in Debug Mode&quot;</span>, System.Diagnostics.TraceEventType.Information);\r\n\r\n                bootstrapper.Run();\r\n            }\r\n            <span style=\"color:blue\">catch</span> (Exception ex)\r\n            {\r\n                Log(<span style=\"color:#a31515\">&quot;Error Starting Elite Extender:&quot;</span> + ex.Message, System.Diagnostics.TraceEventType.Error);\r\n                <span style=\"color:green\">//HandleException(ex);</span>\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> RunInReleaseMode()\r\n        {\r\n            AppDomain.CurrentDomain.UnhandledException += AppDomainUnhandledException;\r\n            <span style=\"color:blue\">try</span>\r\n            {\r\n                SplashScreen appSplash = <span style=\"color:blue\">new</span> SplashScreen(<span style=\"color:#a31515\">&quot;../Resources/SplashScreen.png&quot;</span>);\r\n                appSplash.Show(<span style=\"color:blue\">false</span>);\r\n                UnityBootstrapper bootstrapper = <span style=\"color:blue\">new</span> Bootstrapper();\r\n                appSplash.Close(TimeSpan.FromSeconds(0.5));\r\n\r\n                <span style=\"color:green\">//InitializeCultures();</span>\r\n\r\n                <span style=\"color:green\">//Resources.MergedDictionaries.Add(ResourceService.GetSharedDictionary(</span>\r\n                <span style=\"color:green\">//    new Uri(ResourceHelper.SharedResourcePath, UriKind.Relative)));</span>\r\n                Log(<span style=\"color:#a31515\">&quot;Elite Extender is running in Release Mode&quot;</span>, System.Diagnostics.TraceEventType.Information);\r\n                bootstrapper.Run();\r\n            }\r\n            <span style=\"color:blue\">catch</span> (Exception ex)\r\n            {\r\n                Log(<span style=\"color:#a31515\">&quot;Error Starting Elite Extender:&quot;</span> + ex.Message, System.Diagnostics.TraceEventType.Error);\r\n                <span style=\"color:green\">//throw ex;</span>\r\n                HandleException(ex);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> AppDomainUnhandledException(<span style=\"color:blue\">object</span> sender, UnhandledExceptionEventArgs e)\r\n        {\r\n            HandleException(e.ExceptionObject <span style=\"color:blue\">as</span> Exception);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> HandleException(Exception ex)\r\n        {\r\n            <span style=\"color:blue\">if</span> (ex == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">return</span>;\r\n                Log(<span style=\"color:#a31515\">&quot;Error Occured In Elite Extender:&quot;</span> + ex.Message, System.Diagnostics.TraceEventType.Error);\r\n\r\n            <span style=\"color:green\">//ExceptionPolicy.HandleException(ex, &quot;Default Policy&quot;);</span>\r\n            Environment.Exit(1);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> Log(<span style=\"color:blue\">string</span> message, System.Diagnostics.TraceEventType severity)\r\n        {\r\n<span style=\"color:blue\">#if</span> (DEBUG)\r\n            Debug.Print(message);\r\n<span style=\"color:blue\">#else</span>\r\n            LogEntry entry = <span style=\"color:blue\">new</span> LogEntry();\r\n            entry.Severity = severity;\r\n            entry.Message = <span style=\"color:#a31515\">&quot;App.xaml.cs: &quot;</span> + message;\r\n            entry.Title = <span style=\"color:#a31515\">&quot;EliteExtender&quot;</span>;\r\n            entry.Categories.Add(<span style=\"color:#a31515\">&quot;Core&quot;</span>);\r\n            Logger.Write(entry);\r\n<span style=\"color:blue\">#endif</span>    \r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>Any help with this annoying problem would greatly be appreciated!</p>",
    "PostedDate": "2010-07-20T07:44:33.047-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "469727",
    "ThreadId": "220170",
    "Html": "<pre></pre>\r\n<p>OK please disregard this. I would delete it if I could to save public face, but there appears to be no way to do that. :) So I guess I'll use this opportunity to lecture on the issues of copy and paste. Apparently I copied and pasted the App.xaml portion from an older version and forgot to remove the startupuri from it!</p>\r\n<p>&lt;Application x:Class=<span style=\"color:#a31515\">&quot;EliteExtender.Shell.App&quot;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns=<span style=\"color:#a31515\">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:x=<span style=\"color:#a31515\">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StartupUri=<span style=\"color:#a31515\">&quot;Views/ShellView.xaml&quot;</span>&gt;</p>\r\n<p>I literally have been looking at this for about 2 hours now and as soon as I posted my question it dawned on me. Talk about over thinking something simple. I could have sworn you guys snuck something in on me in v2.2 that somehow referenced my shell view and was displaying it.</p>\r\n<p>Oh well leasoned learned. Sorry guys and hope this at least puts a smile on someone's face!</p>",
    "PostedDate": "2010-07-20T08:00:00.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "469794",
    "ThreadId": "220170",
    "Html": "<p>No problem.&nbsp; Sometimes all it takes to figure out a problem like this is to describe the problem to someone else.</p>\r\n<p>I'm glad you figured it out.</p>",
    "PostedDate": "2010-07-20T09:55:57.033-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "470581",
    "ThreadId": "220170",
    "Html": "<p>Same thing happened to me little bit ago...I posted elsewhere though...</p>\r\n<p>&nbsp;</p>\r\n<p><a href=\"http://stackoverflow.com/questions/3143283/prism-shell-template-two-instances-of-shellview-being-created\">http://stackoverflow.com/questions/3143283/prism-shell-template-two-instances-of-shellview-being-created</a><br><br></p>",
    "PostedDate": "2010-07-21T14:13:46.45-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "470586",
    "ThreadId": "220170",
    "Html": "Haha, thanks for all the support and understanding guys. Glad I'm not alone!",
    "PostedDate": "2010-07-21T14:34:39.763-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]