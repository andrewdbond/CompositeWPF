[
  {
    "Id": "653170",
    "ThreadId": "267919",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I'm tring to understand StockTraderRI execution sequence. Here are a couple of questions.</p>\r\n<p>1. One of my understanding is the order of the modules are being called are in ConfigureAggregateCatalog(), is this correct?</p>\r\n<p>2. Is&nbsp;<span style=\"color:#2b91af\">StockTraderRICommands&nbsp; <span style=\"color:#000000\">\r\nserverve as an entry point to Infrastructure (like the disscusion&nbsp;and that's why it need to be specificlly added in ConfigureAggregateCatalog?</span></span></p>\r\n<p><span style=\"color:#2b91af\"><span style=\"color:#000000\">3. What controls the order of all the services being called? When it is needed or as long as it is decorated with &quot;Export&quot; attribute? For example, PositionSummaryViewModel need to inject &quot;IOrdersController&quot;,\r\n when this &quot;IOrderController&quot; becomes available to be injected?</span></span></p>\r\n<p><span style=\"color:#2b91af\"></span>4. In ConfigureAggregateCatalog(), adding MarkeModule is still necessary even if the MarkeModule is empty and all the type and services in MarkeModule needed to be injected have &quot;Export&quot; attribute?</p>\r\n<p><br>\r\nThanks!</p>\r\n",
    "PostedDate": "2011-08-05T08:25:21.237-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "653311",
    "ThreadId": "267919",
    "Html": "<p>Hi,</p>\n<p>I'll answer your concerns by parts:</p>\n<p>1. By design, the load order of the modules that are marked to be loaded when available (such as the modules in the Stock Trader Reference Implementation) should not influence the functionality exposed by them. Therefore, while the order in which their assemblies  are added to the aggregate catalog is the one specified in that method, you should not rely on that for the design of your application, and it's not guaranteed that it will be the order in which the initialization of your modules is performed.</p>\n<p>2. In the <strong>ConfigureAggregateCatalog</strong> method inside the <strong> StockTraderRIBootstrapper</strong>, <strong>AssemblyCatalogs </strong>are added to the <strong>AggregateCatalog</strong>, which are formed by <strong>Assemblies </strong> (that is, instances of the <strong>System.Reflection.Assembly </strong>class). In order to obtain a reference to that class, you need to refer to the <strong>Assembly </strong>property of the type of a class that belongs to that assembly. Therefore, since the <strong>StockTraderRICommands </strong>class belongs to the <strong>StockTraderRI.Infrastructure</strong> project, the expression</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">typeof</span>(StockTraderRICommands).Assembly</pre>\n</div>\n<p>will return the <strong>System.Reflection.Assembly </strong>corresponding to the StockTraderRI.Infrastructure project<strong>.</strong></p>\n<p>3. The container internally controls the order of the exports that other exports need as dependencies, so as long as you decorate the necessary parts with the <strong>Export </strong>attribute, and you don't have circular references, the parts (such as shared services) are likely to be imported correctly.<strong></strong></p>\n<p>4. As explained in the second answer, adding the assembly that contains the MarketModule (which is done through obtaining the <strong>System.Reflection.Assembly</strong> associated to any of the elements of that assembly, in this case the empty <strong>MarketModule</strong> class) makes all the views and services declared in that assembly to be exported into the MEF container. Therefore, even though no initialization logic is needed (and thus, the <strong>MarketModule</strong> class is left empty), you need to add that assembly to the aggregate catalog.</p>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-08-05T10:46:34.007-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]