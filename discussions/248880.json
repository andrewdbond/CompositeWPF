[
  {
    "Id": "577226",
    "ThreadId": "248880",
    "Html": "<p>Hello dear community,</p>\n<p>I am experiencing some weird behaviour with event aggregators and would like to share my design and relevant code to hopefully tackle the issue. I am not using any background threading, yet the side effects look very similar...</p>\n<p>I have two Modules within my Prism app. <br />1) Contact Module (includes a&nbsp;ContactView)<br />2) Navigation Module (incl. NavigationView and also a ToolBarView)</p>\n<p>The Shell has three regions (MainRegion, ToolbarRegion and NavRegion). MainRegion is a TabControl. Whenever a ContactView is added it will be added as a new TabItem.</p>\n<p>My NavigationView has an ObservableCollection&lt;Contact&gt; Contacts. Whenever I want to create a new Contact, I would add a new contact to the&nbsp;Contacts and also send the contact object wrapped inside a&nbsp;new instance of ContactView to the tabitem.&nbsp; It is easier to understand it through code:</p>\n<p>In Code:</p>\n<p><strong>User clicks on New Button within Toolbar:</strong><br /><br /><span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> OnNewContact()<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp; _eventAggregator.GetEvent&lt;NotifyNavigationViewModelEvent&gt;().Publish(<span style=\"color: blue;\">null</span>);<br />}</p>\n<p><strong>NavigationViewModel:</strong><br /><br /></p>\n<div style=\"background-color: white; color: black;\">\n<pre>ctor()\r\n{\r\n     _eventAggregator.GetEvent&lt;﻿NotifyNavigationViewModelEvent﻿&gt;().Subscribe(OnAddNewContact, ThreadOption.UIThread);  \r\n}\r\n\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> OnAddnewContact(<span style=\"color: blue;\">object</span> o)\r\n{\r\n   <span style=\"color: blue;\">var</span> contact = <span style=\"color: blue;\">new</span> Contact();\r\n   Contacts.Add(contact);\r\n   <span style=\"color: green;\">//NavigationViewModel creates a new contact, adds it to the collection and sends it to the Contact Module in order to wrap it as a tabitem.</span>\r\n   _eventAggregator.GetEvent&lt;NotifyContactModuleEvent&gt;().Publish(contact);\r\n}\r\n</pre>\n</div>\n<p><strong>Contact Module:</strong></p>\n<div style=\"background-color: white; color: black;\">\n<pre>ctor()\r\n{\r\n     _eventAggregator.GetEvent&lt;NotifyContactModuleEvent&gt;().Subscribe(DisplayContact, ThreadOption.UIThread);\r\n}\r\n\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> DisplayContact(Contact contact)\r\n{\r\n     <span style=\"color: blue;\">var</span> contactViewModel = _container.Resolve&lt;ContactViewModel&gt;();\r\n     <span style=\"color: blue;\">var</span> view = <span style=\"color: blue;\">new</span> ContactView(contactViewModel);\r\n     view.Initialize(contact);\r\n     _regionManager.Regions[Constants.MainRegion].Add(view);    OR  _regionManager.RegisterViewWithRegion(Constants.MainRegion, () =&gt; view);\r\n     <span style=\"color: green;\">// Sometime this works, sometimes I get an argument exception \"Value does not fall wihin expected range\", why?  </span>\r\n}\r\n</pre>\n</div>\n<p>The CompositePresentationEvent is done as expected like this:<br /><span style=\"color: blue;\"><br />public</span> <span style=\"color: blue;\">class</span> NotifyNavigationViewModelEvent : CompositePresentationEvent&lt;<span style=\"color: blue;\">object</span>&gt; { }</p>\n<p><strong>Bootstrapper:</strong><br /><span style=\"color: blue;\"><br />protected</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> ConfigureContainer()<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">base</span>.ConfigureContainer();<br />&nbsp;&nbsp;&nbsp;&nbsp; Container.RegisterType&lt;IEventAggregator, EventAggregator&gt;(<span style=\"color: blue;\">new</span> ContainerControlledLifetimeManager());<br />}</p>\n<p><strong>Idea:<br /></strong><br />By having the contact reference inside the ContactView within the TabItem, whatever the user input is, it would affect the new created contact object within the collection right away&nbsp;and I have less trouble saving its (new) state later on by RIA Services.<br /><br />Do you see any problem with this design and why do I get this error message sometimes. EventAggregator in combination with RegionManager&nbsp;doesn't seem to work consistently. <br /><br />Your help on this would be highly appreciated,<br />Houman</p>",
    "PostedDate": "2011-03-08T08:11:15.987-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "577605",
    "ThreadId": "248880",
    "Html": "<p>I have found the solution: check out Roddles Answer: ﻿<a href=\"http://forums.silverlight.net/forums/p/126047/532359.aspx\">here</a></p>\r\n<p>You have to give each View a unique name before inserting them into&nbsp;an ﻿ItemsControl&nbsp;Region. You should really put this into the documentation, unless its there and I have overlooked it. Alternatively a better error message for the exception could be very helpful for other Prism users out there&nbsp;pulling their hair out. :)</p>\r\n<p>Thanks,<br />Houman</p>",
    "PostedDate": "2011-03-09T01:31:40.653-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "577840",
    "ThreadId": "248880",
    "Html": "<p>Hi Houman,</p>\r\n<p>Thank you for sharing this with the rest of the community, as other users might benefit from knowing this.</p>\r\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-03-09T08:38:07.99-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]