[
  {
    "Id": "254670",
    "ThreadId": "74442",
    "Html": "<p>Hi,</p>\r\n<p>In order to learn more about Prism I developed this simple project: I have a shell with 2 regions.</p>\r\n<p>Region A contains a module with a view with a ListView. Region B contains the same module with another view with a&nbsp;textbox.</p>\r\n<p>I want that when I click on any item in the ListView the text is shown in the TextBox in region B. That simple.</p>\r\n<p>Both views have their own model classes. I used event aggregators to communicate both views.</p>\r\n<p>I followed <a id=\"Header1_HeaderTitle\" title=\"The Title Of This Blog.\" href=\"http://geekswithblogs.net/HouseOfBilz/archive/2009/05/29/adventures-in-mvvm-ndash-commanding-with-list-boxes.aspx\">Brian Genisio's </a>List Commanding classes and it works great: clicking on the ListView publishes an event that is consumed by the model of region B.</p>\r\n<p>By setting a setting a breakpoint in the model of the view assigned to region B I can see that the information from region A was sent correctly.</p>\r\n<p>However the textbox in module B does not update and is not showing the data from the selected item. Please help me with this problem.</p>\r\n<p>Here's the main code of the model assigned to the view of module B:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> ItemsDetailsModel: IItemsDetailsModel, INotifyPropertyChanged\r\n    {\r\n        <span style=\"color:Blue\">public</span> businessEntities.categoriesEntities selectedCategory = <span style=\"color:Blue\">new</span> businessEntities.categoriesEntities();\r\n        <span style=\"color:Blue\">public</span> businessEntities.categoriesEntities SelectedCategory\r\n        { \r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> selectedCategory; } \r\n            <span style=\"color:Blue\">set</span> \r\n            { \r\n                <span style=\"color:Blue\">this</span>.selectedCategory = value;\r\n                RaisePropertyChanged(<span style=\"color:#A31515\">&quot;SelectedCategory&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">void</span> RaisePropertyChanged(<span style=\"color:Blue\">string</span> propertyName)\r\n        {\r\n            PropertyChangedEventHandler propertyChanged = PropertyChanged;\r\n            <span style=\"color:Blue\">if</span> (propertyChanged != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                propertyChanged(<span style=\"color:Blue\">this</span>, <span style=\"color:Blue\">new</span> PropertyChangedEventArgs(propertyName));\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> Views.IItemDetails detailsView;\r\n        <span style=\"color:Blue\">public</span> Views.IItemDetails DetailsView\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">this</span>.detailsView; }\r\n            <span style=\"color:Blue\">set</span> { <span style=\"color:Blue\">this</span>.detailsView = value; }\r\n        } <span style=\"color:Green\">// ListView</span>\r\n\r\n        <span style=\"color:Blue\">public</span> ItemsDetailsModel(Views.IItemDetails pv, IEventAggregator pea)\r\n        {\r\n            <span style=\"color:Blue\">this</span>.DetailsView = pv;\r\n            <span style=\"color:Blue\">this</span>.DetailsView.Model = <span style=\"color:Blue\">this</span>;\r\n            pea.GetEvent&lt;PTTInfrastructure.SelectedItemEvent&gt;().Subscribe(WhenItemSelected);\r\n        } <span style=\"color:Green\">// ItemsDetailsModel(IEventAggregator pea)</span>\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> WhenItemSelected(PTTInfrastructure.SelectedItem psi)</pre>\r\n<pre>        // Here, the psi comes from module A with the correct information of the selected item.\r\n        {\r\n            <span style=\"color:Blue\">this</span>.SelectedCategory.company = psi.company;\r\n            <span style=\"color:Blue\">this</span>.SelectedCategory.store = psi.store;\r\n            <span style=\"color:Blue\">this</span>.SelectedCategory.category = psi.id;\r\n            <span style=\"color:Blue\">this</span>.SelectedCategory.title1 = psi.text;\r\n        } <span style=\"color:Green\">// WhenItemSelected        </span>\r\n    } <span style=\"color:Green\">// ItemsDetailsModel</span>\r\n</pre>\r\n</div>\r\n<p>This is the simple code of the view for region B</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>&lt;UserControl x:Class=&quot;categoriesModule.Views.ItemDetails&quot;\r\n    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\r\n    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\r\n    Height=&quot;300&quot; Width=&quot;300&quot;&gt;\r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Grid</span> <span style=\"color:Red\">DataContext</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;SelectedCategory&quot;</span> <span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Label</span> <span style=\"color:Red\">Height</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;27&quot;</span> <span style=\"color:Red\">Margin</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;12,12,0,0&quot;</span> <span style=\"color:Red\">Name</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;label1&quot;</span> <span style=\"color:Red\">VerticalAlignment</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;Top&quot;</span> <span style=\"color:Red\">HorizontalAlignment</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;Left&quot;</span> <span style=\"color:Red\">Width</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;73&quot;</span><span style=\"color:Blue\">&gt;</span>Title:<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Label</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBox</span>  <span style=\"color:Red\">Height</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;23&quot;</span> <span style=\"color:Red\">Margin</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;91,14,12,0&quot;</span> <span style=\"color:Red\">Name</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;txtTitle&quot;</span> <span style=\"color:Red\">VerticalAlignment</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;Top&quot;</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;{Binding Path=title1}&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n    <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Grid</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">UserControl</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>And this is the main part of the code behind the view file:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">partial</span> <span style=\"color:Blue\">class</span> ItemDetails : UserControl, IItemDetails\r\n    {\r\n        <span style=\"color:Blue\">public</span> ItemDetails()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> Models.IItemsDetailsModel Model\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">this</span>.DataContext <span style=\"color:Blue\">as</span> Models.IItemsDetailsModel; }\r\n            <span style=\"color:Blue\">set</span> { <span style=\"color:Blue\">this</span>.DataContext = value; }\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;Finally I registered everything in the main class of the module with this:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> categoriesModule : IModule\r\n    {\r\n        <span style=\"color:Blue\">public</span> IUnityContainer _mainContainer;\r\n        <span style=\"color:Blue\">public</span> IRegionManager _regionManager;\r\n\r\n        <span style=\"color:Blue\">public</span> categoriesModule(IUnityContainer pc, IRegionManager prm)\r\n        {\r\n            <span style=\"color:Blue\">this</span>._mainContainer = pc;\r\n            <span style=\"color:Blue\">this</span>._regionManager = prm;\r\n        } <span style=\"color:Green\">// categoriesModule()</span>\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> Initialize()\r\n        {\r\n            <span style=\"color:Blue\">this</span>.registerViewsAndServices(); <span style=\"color:Green\">// This will create instances on the models and views</span>\r\n\r\n            Models.IItemsPresentationModel lipm = <span style=\"color:Blue\">this</span>._mainContainer.Resolve&lt;Models.IItemsPresentationModel&gt;();\r\n            Models.IItemsDetailsModel lidm = <span style=\"color:Blue\">this</span>._mainContainer.Resolve&lt;Models.IItemsDetailsModel&gt;();\r\n            <span style=\"color:Green\">// this._regionManager.RegisterViewWithRegion(&quot;regionList&quot;, () =&gt; this._mainContainer.Resolve&lt;Models.IItemsPresentationModel&gt;().ListView);</span>\r\n            <span style=\"color:Blue\">this</span>._regionManager.Regions[<span style=\"color:#A31515\">&quot;regionList&quot;</span>].Add(lipm.ListView);\r\n            <span style=\"color:Blue\">this</span>._regionManager.Regions[<span style=\"color:#A31515\">&quot;regionDetails&quot;</span>].Add(lidm.DetailsView);\r\n        } <span style=\"color:Green\">// Initialize</span>\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> registerViewsAndServices()\r\n        <span style=\"color:Green\">// We will create instances on the models and views by registering implementators in the container</span>\r\n        {\r\n            <span style=\"color:Blue\">this</span>._mainContainer.RegisterType&lt;Views.IListItemsView, Views.listItemsView&gt;();\r\n            <span style=\"color:Blue\">this</span>._mainContainer.RegisterType&lt;Models.IItemsPresentationModel, Models.itemsPresentationModel&gt;();\r\n            <span style=\"color:Blue\">this</span>._mainContainer.RegisterType&lt;Views.IItemDetails, Views.ItemDetails&gt;();\r\n            <span style=\"color:Blue\">this</span>._mainContainer.RegisterType&lt;Models.IItemsDetailsModel, Models.ItemsDetailsModel&gt;();\r\n        } <span style=\"color:Green\">// registerViewsAndServices</span>\r\n\r\n    } <span style=\"color:Green\">// class categoriesModule</span>\r\n</pre>\r\n<pre>I hope somebody can help me.</pre>\r\n</div>",
    "PostedDate": "2009-11-07T21:57:02.837-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "254685",
    "ThreadId": "74442",
    "Html": "<p>Hey ctellez69,</p>\r\n<p>Try changing the line in your ItemsDetailsModel constructor from this:</p>\r\n<p>pea.GetEvent&lt;PTTInfrastructure.SelectedItemEvent&gt;().Subscribe(WhenItemSelected);</p>\r\n<p>to this:</p>\r\n<p>pea.GetEvent&lt;PTTInfrastructure.SelectedItemEvent&gt;().Subscribe(WhenItemSelected, ThreadOption.UIThread, true);</p>\r\n<p>I haven't reproduced your code, but it seems like&nbsp;it's not hanging onto the event reference from the&nbsp;Event Aggregator&nbsp;(that's what the true does). And it's always good practice to specify the UI thread if you're going to be updating the UI.</p>\r\n<p>HTH,</p>\r\n<p>Ryan</p>",
    "PostedDate": "2009-11-07T23:10:36.66-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "254872",
    "ThreadId": "74442",
    "Html": "<p>Hi Ryan,</p>\r\n<p>Unfortunately the code does not work.</p>\r\n<p>Any other idea?</p>",
    "PostedDate": "2009-11-08T19:34:27.39-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "254926",
    "ThreadId": "74442",
    "Html": "<p>We can't tell from your code here if your &quot;categoriesEntities&quot; also implement INotifyPropertyChanged which they have to do since you're modifying the properties of that object.</p>\r\n<p>Or if that class doesn't implement INotifyPropertyChanged, you could simple add the following line after updating the properties:<br>RaisePropertyChanged(<span style=\"color:#a31515\">&quot;SelectedCategory&quot;</span>);<br>which will trigger an update of the UI.</p>\r\n<p>Cheers,<br>Ted</p>",
    "PostedDate": "2009-11-08T23:30:38.55-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "255323",
    "ThreadId": "74442",
    "Html": "<p>Thank you for your response.</p>\r\n<p>&quot;categoriesEntities&quot; is just a simple&nbsp;class and no, it does not implement INotifyPropertyChanged. It is just a plain class with basic info.</p>\r\n<p>I put the &quot;RaisePropertyChanged(<span style=\"color:#a31515\">&quot;SelectedCategory&quot;</span>);&quot; at the end of the&nbsp;method &quot;<span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> WhenItemSelected(PTTInfrastructure.SelectedItem psi)&quot;. While debbuging I noticed that inside the &quot;RaisePropertyChanged&quot; method, the&nbsp;&quot;PropertyChanged&quot; event variable is null:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangedEventHandler propertyChanged = PropertyChanged; // &lt;---It is NULL<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (propertyChanged != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propertyChanged(this, new PropertyChangedEventArgs(propertyName));&nbsp;// &lt;--- It is never executed<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>Any idea of this? How can I assign it so it is not null? Am I missing something?</p>",
    "PostedDate": "2009-11-09T20:52:29.283-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "255368",
    "ThreadId": "74442",
    "Html": "<p>Ah, sure, missed this the first time I read it... You're setting the DataContext to a string of &quot;SelectedCategory&quot; (&lt;Grid DataContext=&quot;SelectedCategory&quot;&gt;), change that to:<br>&lt;Grid DataContext=&quot;{Binding SelectedCategory}&quot;&gt;, or you could remove that &quot;DataContext=...&quot; and change your TextBox binding to: Text=&quot;{Binding SelectedCategory.title1}&quot;</p>\r\n<p>and add the following in your module init:<br>&quot;lidm.DetailsView.DataContext = lidm;&quot; (At least I couldn't see that you were setting the datacontext of your View anywhere else.)<br>So that the datacontext of your UserControl is set to your ViewModel.</p>\r\n<p>Cheers,<br>Ted</p>",
    "PostedDate": "2009-11-09T23:34:32.13-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "255820",
    "ThreadId": "74442",
    "Html": "<p>Oh, thank God it finally worked!</p>\r\n<p>Thank you NeoDarque, I eliminated the &lt;Grid DataContext=&quot;{Binding SelectedCategory}&quot;&gt; and went directly to binding the textbox:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBox</span> <span style=\"color:Red\">Height</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;23&quot;</span> <span style=\"color:Red\">Margin</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;91,14,12,0&quot;</span> <span style=\"color:Red\">Name</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;txtTitle&quot;</span> <span style=\"color:Red\">VerticalAlignment</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;Top&quot;</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Blue\">&quot;{Binding SelectedCategory.title1}&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n</pre>\r\n</div>\r\n<pre></pre>\r\n<p>\r\n<p><span style=\"color:#0000ff\">That was weird, I&nbsp;always thought&nbsp;that having the DataContext assigned in the Grid or other panel would allow me to bind other components with just &quot;{Binding Path=field}&quot;. Am I missing something?</span></p>\r\n</p>\r\n<p><span style=\"color:#0000ff\">On the other hand, there was no need for adding this line to the module initial class: </span></p>\r\n<p><span style=\"color:#0000ff\">lidm.DetailsView.DataContext = lidm; </span></p>\r\n<p><span style=\"color:#0000ff\">Because in the constructor of the Model I have:</span></p>\r\n<p><span style=\"color:blue\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public</span> ItemsDetailsModel(Views.IItemDetails pv, IEventAggregator pea)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">this</span>.DetailsView = pv;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">this</span>.DetailsView.Model = <span style=\"color:blue\">this</span>; &lt;-------- Here, I'm assigning the model to the view<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pea.GetEvent&lt;PTTInfrastructure.SelectedItemEvent&gt;().Subscribe(WhenItemSelected);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <span style=\"color:green\">// ItemsDetailsModel(IEventAggregator pea)</span></p>\r\n<p>I will keep working on this program. Thank you everybody for your help.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-11-10T19:52:28.157-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]