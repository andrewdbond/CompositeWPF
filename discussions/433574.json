[
  {
    "Id": "1003007",
    "ThreadId": "433574",
    "Html": "Hi Prism Experts,\r<br />\nFirst i want to thank you because you are the only guidance for us for lack of books on prism.\r<br />\nI have an application similar to PrismTrainingKit 4.0 /UI Composition Hands-On Lab / Exercise 3\r<br />\n(where i need to use scoped regions) with some deviation so i need your help to implement it with the following modifications to use it as a guide to complete my application:\r<br />\n 1-using MEF as container and RequestNavigate &amp; UriQuery for view navigation\r<br />\n<br />\n2-If there is another tab in the MainRegion that will display SpareParts for example, and another user control will be displayed in the BottomRegion with diffrent tabs, now the user controls in the BottomRegion  will interchange depending on i'm selecting from Product List or Spare Parts \r<br />\nlist, how would you implement this?\r<br />\n<br />\nThanks in advance for your very valuable help<br />\n",
    "PostedDate": "2013-02-18T12:45:20.26-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1003632",
    "ThreadId": "433574",
    "Html": "Hi,\r<br />\n<br />\nBased on my understanding, in order to migrate the <strong>UI Composition HOL</strong> from <strong>Unity</strong> to <strong>MEF</strong> , first you will need to change how the classes are registered in the container. Basically speaking you will need to add the required attributes like <strong>Export</strong> and <strong>ImportingConstructor</strong> to the corresponding classes. If a class was previously registered through an <strong>interface</strong> in <strong>Unity</strong> (for example the <strong>UIMessagesService</strong>) you will also need to register it like this in <strong>MEF</strong> too : <code>[Export(typeof(IUIMessagesService)]</code>. After that you will need to refactor the <strong>WorkshopBootstrapper</strong> to inherit from the <strong>MefBootstrapper</strong> class and configure it accordingly. You can find more information about the differences between <strong>Unity</strong> and <strong>MEF</strong> in the following chapters of the <strong>Prism</strong> documentation:<br />\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921140%28v=pandp.40%29.aspx\" rel=\"nofollow\">Chapter 3 - Managing Dependencies Between Components</a></li>\n<li>\n<a href=\"http://msdn.microsoft.com/en-us/library/gg405479%28v=pandp.40%29.aspx\" rel=\"nofollow\">Chapter 4 - Modular Application Development</a><br />\n</li>\n</ul>\nRegarding changing the <strong>UI Composition</strong> method to navigation, it would be helpful to know which regions and views you want to manage through navigation, specially in an scenario similar to the aforementioned <strong>HOL</strong> where most views are being manually composed through presenters. Also, please take into account that currently <strong>Prism</strong> does not support the scenario of navigating to a view while attaching a scoped region manager to it. For example, if you navigate to a <strong>ProductDetailsView</strong> you wouldn't be able attach a region manager to in like in the <strong>OnProductSelected</strong> method of the <strong>ProductController</strong> class. Also, take into account that you will need to register the corresponding views to be used in navigation: <code>[Export(&quot;ViewClassName&quot;)]</code> . You can find more information about this in the following chapter of the <strong>Prism</strong> documentation:<br />\n<ul>\n<li>\n<a href=\"http://msdn.microsoft.com/en-us/library/gg430861%28v=pandp.40%29.aspx\" rel=\"nofollow\">Chapter 8 - Navigation</a><br />\n</li>\n</ul>\nFinally, there are several approaches you can use to achieve the behavior you are mentioning. Which one is most suitable will depend of your personal preferences and the requirements of your scenario. For example, if you want to change the contents of the <strong>BottomRegion</strong> upon selecting a product or a spare part, a possible approach could be to bind the <strong>SelectedItem</strong> property of the <strong>DataGrid</strong> to a property in the view model: <code>SelectedItem=&quot;{Binding SelectedItem, Mode=TwoWay}&quot;</code> . Then in the setter of the view model's property, you could react when the selected item is changed and change the views in the <strong>BottomRegion</strong> . Another example of a different approach is what the <strong>UI Composition HOL</strong> does in the <strong>OnProductSelected</strong> method of the <strong>ProductController</strong> class.\r<br />\n<br />\nI hope you find this useful,\r<br />\n<br />\nDamian Cherubini\r<br />\n<a href=\"http://blogs.southworks.net/dcherubini\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini</a><br />\n",
    "PostedDate": "2013-02-19T12:32:33.117-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]