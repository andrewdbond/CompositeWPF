[
  {
    "Id": "470585",
    "ThreadId": "220513",
    "Html": "<p>External NUnit prg in the solution, want to access the module catalog to&nbsp;walk through&nbsp;the modules and&nbsp;verify&nbsp;each has a name per the Module&nbsp;attribute. Trying to figure out the best way to approach this, where it doesn't feel naughty. I want the actual instance that is active per the bootstrapper, versus creating additional instances...</p>",
    "PostedDate": "2010-07-21T14:32:58.623-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "471092",
    "ThreadId": "220513",
    "Html": "<p>Not sure if this meets what you are looking for, but if you new up your bootstrapper and call run on it, then use the Container property it exposes to resolve the IModuleCatalog, you should be able to do what you are describing.</p>",
    "PostedDate": "2010-07-22T08:54:30.19-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "471680",
    "ThreadId": "220513",
    "Html": "<p>The problem seems to be the coupling between the EntLogger now...arg...here it is in a nutshell...</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> testRemoteSample()\r\n        {\r\n            <span style=\"color:green\">//UnityBootstrapper bootstrapper = new BootstrapperExtended();</span>\r\n            <span style=\"color:green\">//bootstrapper.Run();</span>\r\n\r\n            <span style=\"color:green\">//IModuleCatalog moduleCatalog = ((BootstrapperExtended)bootstrapper).GetModuleCatalog();</span>\r\n\r\n            <span style=\"color:green\">//foreach (ModuleInfo module in moduleCatalog.Modules)</span>\r\n            <span style=\"color:green\">//    Assert.IsNotNullOrEmpty(module.ModuleName, &quot;Module name is missing, add module name via [Module(ModuleName = \\&quot;Name\\&quot;&quot;);</span>\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">class</span> BootstrapperExtended : Bootstrapper\r\n    {\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">new</span> IModuleCatalog GetModuleCatalog()\r\n        {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">base</span>.GetModuleCatalog();\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-07-23T09:23:00.44-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "502635",
    "ThreadId": "220513",
    "Html": "<p>Hi,</p>\r\n<p>As Brian has mentioned in this thread, the catalog is being registered in the container when calling the Run method in the Bootstrapper. <br><br>So you could use the container to retrieve your catalog. This way you avoid calling the GetModuleCatalog method manually. <br><br>Regarding to the references, you will need to reference them.<br><br>Additionally, the following two methods could help you to understand how to obtain the module name as well as how to create the ModuleInfo:</p>\r\n<ol>\r\n<li>The <strong>EnsureModulesDiscovered</strong> method in the  <strong>ConfigurationModuleCatalog.Desktop.cs</strong> class</li>\r\n<li>The <strong>CreateModuleInfo</strong> method in&nbsp;the  <strong>DirectoryModuleCatalog.Deskptop.cs</strong> class</li>\r\n</ol>\r\n<p>Fernando Antivero<br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n<p>&nbsp;</p>\r\n<ol> </ol>",
    "PostedDate": "2010-10-05T11:09:57.003-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]