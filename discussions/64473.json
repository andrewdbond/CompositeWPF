[
  {
    "Id": "219449",
    "ThreadId": "64473",
    "Html": "<p>I've posted a question on StackOverflow and I thought I would duplicate it here, since this is a more specific forum for Prism.<br><a href=\"http://stackoverflow.com/questions/1228674/share-context-data-with-all-children-of-a-control\">http://stackoverflow.com/questions/1228674/share-context-data-with-all-children-of-a-control</a></p>\r\n<p>Basically I want to have a piece of data that all child controls (all the way down the control tree) can access. &nbsp;I assumed RegionContext would provide this functionality, but it doesn't.</p>\r\n<p>Any suggestions would be helpful!&nbsp;</p>",
    "PostedDate": "2009-08-04T14:10:16.65-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "219475",
    "ThreadId": "64473",
    "Html": "<p>What about something like the following in your child control constructor?&nbsp; Where IMyControlPresentationModel (aka ViewModel) was registered in the parent.&nbsp; This way you can simply bind to the shared model.</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>myChildControl.DataContext = Container.Resolve&lt;IMyControlPresentationModel&gt;();\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-04T14:58:57.313-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "219532",
    "ThreadId": "64473",
    "Html": "<p>Yeah... that's something we are kicking around and is our top contender. &nbsp;This also has the advantage of putting the data where it belongs: in the view model. &nbsp;The rub here is that each view I add will have a <em>different</em>&nbsp;set of data, so that will require a scoped unity container per item that gets thrown in that Region. &nbsp;Not a big deal, but it seems like sort of an abuse of the container, but maybe not. &nbsp;Is putting a Model object in the container &quot;wrong&quot;? &nbsp;</p>\r\n<p>Feels wrong somehow, but no more wrong than relying on the UI to route data to the ViewModel, I suppose.</p>",
    "PostedDate": "2009-08-04T19:55:42.627-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "219545",
    "ThreadId": "64473",
    "Html": "<p>Hi andersonies,</p>\r\n<p>I use the&nbsp;DI container&nbsp;to loosely&nbsp; couple -&nbsp;so within that context it shouldn't feel wrong.&nbsp;&nbsp; For example, I have a&nbsp;Multi-Targeting application (<a href=\"http://multitargeting.codeplex.com/\">http://multitargeting.codeplex.com/</a>&nbsp;should be activated within a few days)&nbsp;that has a series of PrismContrib.xxxxx projects where xxxx = <strong>WPF</strong>,&nbsp;<strong>WinForms</strong> and <strong>Silverlight</strong> (Silverlight is shared by regular Silverlight as well as <strong>RIA Services</strong>) - so I essentially have four separate platforms sharing the same codebase (transparent to the developer).&nbsp;</p>\r\n<p>Setting up a module will be as simple as setting&nbsp;references as applicable and then complying with the Model-View-Presenter pattern, coupled with the PresentationModel (aka Model-View-ViewModel).&nbsp;&nbsp; e.g., the following is the most complicated work that will have to be done - setting up the presenter with the applicable View interface (derived from IView) and PresentationModel interface (derived from IPresentationModel).&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">namespace</span> Module.Client.Views.Details\r\n{\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> DetailsViewPresenter : PresenterBase&lt;IDetailsView&gt;\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> DetailsViewPresenter(\r\n            IDetailsView view, \r\n            IDemoPresentationModel model, \r\n            IUnityContainer container) : <span style=\"color:Blue\">base</span>(view, model, container)\r\n        {\r\n\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>Using P&amp;P learned while working with the Smart Client Software Factory&nbsp;&nbsp;I let PresenterBase do the wiring up.&nbsp; I have special processing so that the behaviors for all platforms&nbsp;are consistent.&nbsp;&nbsp; All of my Views (UserControls) use this so for me wiring up the data context is a mute point.&nbsp;&nbsp;The Modules registering types as applicable for that module.&nbsp;&nbsp;</p>\r\n<p>This permits me to use a single framework (PRISM and PrismContrib.xxxxx) for multiple applications while remaining loosely coupled.&nbsp;&nbsp; In MVP tightly coupling the View to the Presenter (and visa versa) is not an issue because it is a one-to-one relationship.&nbsp;&nbsp; The PresentationModel on the other hand can be shared by multiple views (doesn't have to be)&nbsp;so we let the Presenters carry the responsibility of populating the PresentationModel(s).</p>\r\n<p>For your reference the PresenterBase code follows:</p>\r\n<p><span style=\"color:Blue\">public</span> PresenterBase(IView view, IPresentationModel model, IUnityContainer container)<br>{<br>&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">try</span><br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// For logging purposes</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleName = GetType().FullName;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// Setter injection is not available until after the constructor</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// so we'll set them manually</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Error = container.Resolve&lt;IError&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Logger = container.Resolve&lt;ILoggerFacade&gt;();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// Set the presenter with a reference to the container</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Container = container;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// Set the Presenter with a reference to the model</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Model = model;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">if</span> ((TView)view <span style=\"color:Blue\">is</span> UserControl)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br><span style=\"color:Blue\">#if</span> !WinForm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// WPF/Silverlight have SizeChanged event</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// Provide means to notify User Controls that their size has been set</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((TView)view).SizeChanged += (<span style=\"color:Blue\">object</span> sender, SizeChangedEventArgs e) =&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnViewSizeSet(sender, e);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };<br><span style=\"color:Blue\">#endif</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// Set the Presenter with a reference to the view</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; View = (TView)view;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// Subscribe to all Button Click events.&nbsp; The main view&nbsp;</span><span style=\"color:Green\"> will bubble <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // all button click events (see MainView code-behind)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;container.Resolve&lt;IEventAggregator&gt;() <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .GetEvent&lt;ClickEvent&gt;().Subscribe(OnButtonClickEventHandler, <span style=\"color:Blue\">true</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// Subscribe to any Data Access Layer event changes</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container.Resolve&lt;IEventAggregator&gt;()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .GetEvent&lt;DALEvent&gt;().Subscribe(OnDALEventHandler, <span style=\"color:Blue\">true</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// Process controls on view </span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IControlProcessor controlProcessor = container.Resolve&lt;IControlProcessor&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; controlProcessor.ProcessControlCollection(View);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// Set Unity container in View - this will allow us</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// to gain access to the container if all we have is</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// a reference to the view</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; View.Container = container;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// For the XAML forms (WPF and Silverlight) this sets the databinding</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Green\">// to the Presentation Model / View Model</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; View.DataContext = model;<br><br>&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">catch</span> (Exception ex)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Error.SetError(ex);&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; }<br>}<br><br></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-04T21:05:46.457-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]