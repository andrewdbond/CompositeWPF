[
  {
    "Id": "644773",
    "ThreadId": "265820",
    "Html": "\r\n<p>In my SL4, Prism, Unity application, I am having floating-windows that gets loaded in a Region when a menu item is clicked. Everything works fine but when I close the window, the Views and the related ViewModels don't get cleared from memory. This results\r\n in my app consuming more and more memory with use. I used Resource Monitor and WinDbg to trace but couldn't get to the bottom of it.</p>\r\n<p>The following is how I am creating the floating window:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>BaseFloatingWindow window = (BaseFloatingWindow)container.Resolve&lt;IBaseFloatingWindow&gt;();\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>This is how I load/clear view in a region:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> AddViewInRegion(<span style=\"color:blue\">string</span> regionName, <span style=\"color:blue\">object</span> view)\r\n        {\r\n            regionManager.Regions[regionName].Add(view, (view.ToString()));\r\n            regionManager.Regions[regionName].Activate(view);\r\n           \r\n        }\r\n\r\n <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> ClearRegion(<span style=\"color:blue\">string</span> regionName)\r\n        {\r\n            List&lt;<span style=\"color:blue\">object</span>&gt; views = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">object</span>&gt;();\r\n            <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">object</span> view <span style=\"color:blue\">in</span> regionManager.Regions[regionName].Views)\r\n            {\r\n                views.Add(view);\r\n            }\r\n            <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">object</span> view <span style=\"color:blue\">in</span> views)\r\n            {\t\t\t\r\n\t\t\t\tregionManager.Regions[regionName].Remove(view);\r\n\t\t\t\t<span style=\"color:blue\">if</span> (((UserControl)view).DataContext <span style=\"color:blue\">is</span> ViewModelBase)\r\n\t\t\t\t{\r\n\t\t\t\t\t((ViewModelBase)((UserControl)view).DataContext).KeepAlive = <span style=\"color:blue\">false</span>;\r\n\t\t\t\t}\r\n\t\t\t\t<span style=\"color:blue\">if</span> (view <span style=\"color:blue\">is</span> ViewBase)\r\n\t\t\t\t{\r\n\t\t\t\t\t((ViewBase)view).KeepAlive = <span style=\"color:blue\">false</span>;\r\n\t\t\t\t}\t\t\t\t\r\n            }\r\n\t\t\tGC.Collect();\r\n        }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>And this is how I clear the floating window:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>\t\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> BaseFloatingWindow_Closed(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n\t\t{\t\t\t\r\n\t\t\t<span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">object</span> view <span style=\"color:blue\">in</span> <span style=\"color:blue\">this</span>.regionManager.Regions[regionName].Views)\r\n\t\t\t{\r\n\t\t\t\t<span style=\"color:blue\">if</span> (((UserControl)view).DataContext <span style=\"color:blue\">is</span> ViewModelBase)\r\n\t\t\t\t{\r\n\t\t\t\t\t((ViewModelBase)((UserControl)view).DataContext).KeepAlive = <span style=\"color:blue\">false</span>;\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t<span style=\"color:blue\">if</span> (view <span style=\"color:blue\">is</span> ViewBase)\r\n\t\t\t\t{\r\n\t\t\t\t\t((ViewBase)view).KeepAlive = <span style=\"color:blue\">false</span>;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\t<span style=\"color:blue\">this</span>.Dispose();\r\n\t\t\tGC.Collect();\r\n\t\t}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>I am taking care to explicitly unsubscribe all event subscriptions (including those related to even aggregator) and also implementing IRegionMemberLifetime on both View and ViewModel classes (base classes actually).</p>\r\n<p>Here is the dump from WinDbg when I close a View (DashboardView) and it still stays in the memory:</p>\r\n<p></p>\r\n<pre>0:022&gt; !dumpheap -type Resonant.eEnrol.Silverlight.UI.Modules.Dashboard.DashboardView\r\n Address       MT     Size\r\n07bb3b14 06e6fd54      136     \r\ntotal 0 objects\r\nStatistics:\r\n      MT    Count    TotalSize Class Name\r\n06e6fd54        1          136 Resonant.eEnrol.Silverlight.UI.Modules.Dashboard.DashboardView\r\nTotal 1 objects\r\n0:022&gt; !GCRoot 07bb3b14\r\nNote: Roots found on stacks may be false positives. Run &quot;!help gcroot&quot; for\r\nmore info.\r\nScan Thread 6 OSTHread 1478\r\nScan Thread 18 OSTHread 624\r\nScan Thread 19 OSTHread 1cbc\r\nDOMAIN(06C49630):HANDLE(Pinned):4f712f4:Root:  08af6260(System.Object[])-&gt;\r\n  07b2c6e8(Microsoft.Practices.ServiceLocation.ServiceLocatorProvider)-&gt;\r\n  07b1d7d8(Resonant.eEnrol.Silverlight.UI.Bootstrapper)-&gt;\r\n  07b1effc(Microsoft.Practices.Unity.UnityContainer)-&gt;\r\n  07b1f31c(Microsoft.Practices.ObjectBuilder2.PolicyList)-&gt;\r\n  07bf8550(System.Collections.Generic.Dictionary`2[[Microsoft.Practices.ObjectBuilder2.PolicyList&#43;PolicyKey, Microsoft.Practices.Unity.Silverlight],[Microsoft.Practices.ObjectBuilder2.IBuilderPolicy, Microsoft.Practices.Unity.Silverlight]])-&gt;\r\n  07bf88a4(System.Collections.Generic.Dictionary`2&#43;Entry[[Microsoft.Practices.ObjectBuilder2.PolicyList&#43;PolicyKey, Microsoft.Practices.Unity.Silverlight],[Microsoft.Practices.ObjectBuilder2.IBuilderPolicy, Microsoft.Practices.Unity.Silverlight]][])-&gt;\r\n  07b94bac(Microsoft.Practices.Unity.ContainerControlledLifetimeManager)-&gt;\r\n  07ba3ce0(Resonant.eEnrol.Silverlight.UI.Modules.Menu.MenuView)-&gt;\r\n  07ba60ac(System.Windows.Controls.ItemsControl)-&gt;\r\n  07ba6cb4(System.Windows.Controls.ItemContainerGenerator)-&gt;\r\n  07c0a1f0(System.Windows.Controls.ItemContainerGenerator&#43;ItemBlock)-&gt;\r\n  07c0a7d4(System.Windows.Controls.ItemContainerGenerator&#43;RealizedItemBlock)-&gt;\r\n  07c0a7ec(System.Windows.Controls.ItemContainerGenerator&#43;BlockEntry[])-&gt;\r\n  07c0efb8(System.Windows.Controls.ContentPresenter)-&gt;\r\n  07c0f0bc(System.Collections.Generic.Dictionary`2[[MS.Internal.IManagedPeerBase, System.Windows],[System.Object, mscorlib]])-&gt;\r\n  07c0f108(System.Collections.Generic.Dictionary`2&#43;Entry[[MS.Internal.IManagedPeerBase, System.Windows],[System.Object, mscorlib]][])-&gt;\r\n  07c0f2b4(System.Windows.Controls.RadioButton)-&gt;\r\n  07c0f498(System.Collections.Generic.Dictionary`2[[System.Windows.DependencyProperty, System.Windows],[System.Windows.EffectiveValueEntry, System.Windows]])-&gt;\r\n  07c0fcd4(System.Collections.Generic.Dictionary`2&#43;Entry[[System.Windows.DependencyProperty, System.Windows],[System.Windows.EffectiveValueEntry, System.Windows]][])-&gt;\r\n  07c0fd6c(Resonant.eEnrol.Silverlight.Common.RadioButtonCommand&#43;CommandRadioButonBehavior)-&gt;\r\n  07c095c8(Microsoft.Practices.Prism.Commands.DelegateCommand`1[[System.String, mscorlib]])-&gt;\r\n  07c09634(System.Func`2[[System.Object, mscorlib],[System.Boolean, mscorlib]])-&gt;\r\n  07c09604(Microsoft.Practices.Prism.Commands.DelegateCommand`1&#43;&lt;&gt;c__DisplayClass6[[System.String, mscorlib]])-&gt;\r\n  07c095a8(System.Action`1[[System.String, mscorlib]])-&gt;\r\n  07ba3c2c(Resonant.eEnrol.Silverlight.UI.Modules.Menu.MenuViewModel)-&gt;\r\n  07b5191c(Microsoft.Practices.Prism.Regions.RegionManager)-&gt;\r\n  07b51928(Microsoft.Practices.Prism.Regions.RegionManager&#43;RegionCollection)-&gt;\r\n  07b5193c(System.Collections.Generic.List`1[[Microsoft.Practices.Prism.Regions.IRegion, Microsoft.Practices.Prism]])-&gt;\r\n  07b5b328(System.Object[])-&gt;\r\n  07bc5dd8(Microsoft.Practices.Prism.Regions.AllActiveRegion)-&gt;\r\n  07bc5e08(Microsoft.Practices.Prism.Regions.RegionBehaviorCollection)-&gt;\r\n  07bc5e18(System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[Microsoft.Practices.Prism.Regions.IRegionBehavior, Microsoft.Practices.Prism]])-&gt;\r\n  07bc625c(System.Collections.Generic.Dictionary`2&#43;Entry[[System.String, mscorlib],[Microsoft.Practices.Prism.Regions.IRegionBehavior, Microsoft.Practices.Prism]][])-&gt;\r\n  07bc6488(Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior)-&gt;\r\n  07bc56a8(System.Windows.Controls.ItemsControl)-&gt;\r\n  07bc5a60(System.Windows.Controls.ItemContainerGenerator)-&gt;\r\n  07bf2760(System.Windows.Controls.ItemContainerGenerator&#43;ItemBlock)-&gt;\r\n  07bff964(System.Windows.Controls.ItemContainerGenerator&#43;RealizedItemBlock)-&gt;\r\n  07bff97c(System.Windows.Controls.ItemContainerGenerator&#43;BlockEntry[])-&gt;\r\n  07bb3b14(Resonant.eEnrol.Silverlight.UI.Modules.Dashboard.DashboardView)\r\nDOMAIN(06C49630):HANDLE(Pinned):4f712f8:Root:  08af4260(System.Object[])-&gt;\r\n  07b41594(Resonant.eEnrol.Silverlight.UI.CoreShell)-&gt;\r\n  07b42250(System.Windows.Controls.ItemsControl)-&gt;\r\n  07b4ff54(System.Windows.Controls.ItemContainerGenerator)-&gt;\r\n  07b92db4(System.Windows.Controls.ItemContainerGenerator&#43;ItemBlock)-&gt;\r\n  07bf99b0(System.Windows.Controls.ItemContainerGenerator&#43;RealizedItemBlock)-&gt;\r\n  07bf99c8(System.Windows.Controls.ItemContainerGenerator&#43;BlockEntry[])-&gt;\r\n  07b8ca24(Resonant.eEnrol.Silverlight.UI.Shell)-&gt;\r\n  07b8d110(System.Windows.Controls.ItemsControl)-&gt;\r\n  07b90500(System.Windows.Controls.ItemCollection)-&gt;\r\n  07b9102c(System.Windows.Controls.WeakCollectionChangedListener)-&gt;\r\n  07b90f50(Microsoft.Practices.Prism.Regions.ViewsCollection)-&gt;\r\n  07b91488(System.Collections.Specialized.NotifyCollectionChangedEventHandler)-&gt;\r\n  07b91180(System.Object[])-&gt;\r\n  07b91468(System.Collections.Specialized.NotifyCollectionChangedEventHandler)-&gt;\r\n  07b91458(Microsoft.Practices.Prism.Regions.Behaviors.RegionMemberLifetimeBehavior)-&gt;\r\n  07b90d7c(Microsoft.Practices.Prism.Regions.AllActiveRegion)-&gt;\r\n  07b5191c(Microsoft.Practices.Prism.Regions.RegionManager)-&gt;\r\n  07b51928(Microsoft.Practices.Prism.Regions.RegionManager&#43;RegionCollection)-&gt;\r\n  07b5193c(System.Collections.Generic.List`1[[Microsoft.Practices.Prism.Regions.IRegion, Microsoft.Practices.Prism]])-&gt;\r\n  07b5b328(System.Object[])-&gt;\r\n  07bc5dd8(Microsoft.Practices.Prism.Regions.AllActiveRegion)-&gt;\r\n  07bc5e08(Microsoft.Practices.Prism.Regions.RegionBehaviorCollection)-&gt;\r\n  07bc5e18(System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[Microsoft.Practices.Prism.Regions.IRegionBehavior, Microsoft.Practices.Prism]])-&gt;\r\n  07bc625c(System.Collections.Generic.Dictionary`2&#43;Entry[[System.String, mscorlib],[Microsoft.Practices.Prism.Regions.IRegionBehavior, Microsoft.Practices.Prism]][])-&gt;\r\n  07bc6488(Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior)-&gt;\r\n  07bc56a8(System.Windows.Controls.ItemsControl)-&gt;\r\n  07bc5a60(System.Windows.Controls.ItemContainerGenerator)-&gt;\r\n  07bf2760(System.Windows.Controls.ItemContainerGenerator&#43;ItemBlock)-&gt;\r\n  07bff964(System.Windows.Controls.ItemContainerGenerator&#43;RealizedItemBlock)-&gt;\r\n  07bff97c(System.Windows.Controls.ItemContainerGenerator&#43;BlockEntry[])-&gt;\r\n  07bb3b14(Resonant.eEnrol.Silverlight.UI.Modules.Dashboard.DashboardView)</pre>\r\n<p></p>\r\n<p>I have my project here: <a href=\"http://tinyurl.com/eEnrol\" target=\"_blank\"><strong>http://tinyurl.com/eEnrol</strong></a></p>\r\n<p>I have spent many days now to find what is wrong in my code. I desperately need some help now.</p>\r\n<p>Can someone please have a look at my project above and please, please help me how to avoid this memory leak? Any other suggestion in how I implement Prism is also welcome.</p>\r\n<p>Thanks in advance</p>\r\n",
    "PostedDate": "2011-07-19T21:03:40.867-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "644970",
    "ThreadId": "265820",
    "Html": "<p>Hi,</p>\r\n<p>We've examined your solution, and found some things that you could look at to check if they are causing this undesired behavior (note that we couldn't run the solution, since the <strong>Resonant.Controls</strong> and <strong>Resonant.eEnrol.Silverlight.UI.Web</strong> projects couldn't be loaded, since there were missing files.)</p>\r\n<p>The <strong>GenericMessageServiceLocator</strong>, for example, uses the <strong>RegisterInstance</strong> method. Note that the <strong>RegisterInstance</strong> method registers your instance in the container using a <strong>ContainerControlledLifetimeManager</strong> (you can read more about this <a href=\"http://msdn.microsoft.com/en-us/library/ff647854.aspx\">here</a>), which means that the instance is a singleton instance that will be kept alive as long as the container is kept alive (which is probably as long as you keep your application open). Basically, when you have a memory leak you should check who is holding a reference to your object, and in this case it is likely that in some cases, the container is holding a reference to your view/view model.</p>\r\n<p>We've also noted that you're modifying the <strong>KeepAlive </strong>property after removing the view. However, the <strong>RegionMemberLifetimeBehavior</strong> is responsible for determining if an item should be removed from the region when it is deactivated; hence it should have no effect when the region has already been removed from the region.</p>\r\n<p>Finally, we've noted that you placed your modules in the shell project. You should take into account that the usual approach is to place modules into separate projects, so that they can be individually developed, and decoupled from each other.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-07-20T07:01:37.773-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "645226",
    "ThreadId": "265820",
    "Html": "<p>Thank you very much for your reply. I have been able to unload View and ViewModel classes from memory now. However, I am still struggling with BaseFloatingWindow class that holds the Region (and Views).</p>\n<p>You should be able to run just the UI project, by right clicking it in VS solution explorer and selecting 'View in browser' (if you have added the service reference files in the project from the other folders). The BaseFloatingWindow class is the class  that loads the floating windows. I have used the following library in it: http://www.codeproject.com/KB/silverlight/FloatingWindow.aspx</p>\n<p>Thanks again</p>",
    "PostedDate": "2011-07-20T15:34:00.41-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "645530",
    "ThreadId": "265820",
    "Html": "<p>Hi,</p>\n<p>It would be helpful if you could provide us with additional details of the problem that you're experiencing when using <strong>BaseFloatingWindow</strong>.</p>\n<p>Additionally, if you want to use a region in a popup window of any kind, you might find the <strong>RegionPopupBehaviors </strong>in the <a href=\"http://msdn.microsoft.com/en-us/library/ff921074%28PandP.40%29.aspx\"> StockTrader Reference Implementation</a> useful for this purpose. Based on my understanding on your scenario, it's likely that you could modify the behaviors to use a <strong>BaseFloatingWindow </strong>instead of a <strong>Popup</strong>.</p>\n<p>You might find the following threads useful, as they are related to the <strong> RegionPopupBehaviors</strong>:</p>\n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/265715\"><span>Modal Dialog </span></a></li>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/261751\"><span>RegionPopupBehaviors.CreatePopupRegionWithName </span></a></li>\n</ul>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-07-21T06:15:36.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "688873",
    "ThreadId": "265820",
    "Html": "<p>Hi dharmbhav</p>\r\n<p>I have also such problems with MemoryLeaks. Did you find your problem? Perhaps we can work together?</p>\r\n<p>Thank you very much for your feedback.</p>\r\n<p>Thomas</p>",
    "PostedDate": "2011-10-25T02:14:07.733-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "690052",
    "ThreadId": "265820",
    "Html": "<p>Hi tkehl,</p>\r\n<p>After much trouble I found that most of the issues are with event registrations. So be sure that you un-register any event before disposing any View/VM that can even remotely be referred in their event handlers.</p>\r\n<p>Moreover, if you are tracking memory leaks with ResourceMonitor or Windbg, don't care too much if the reference stays alive (even after taking necessary steps). I think the way .NET manages memory makes it hard to figure out when the objects are really getting disposed from memory.</p>\r\n<p>Last but not the least, you can refer to the following for understanding how to avoid memory leaks:</p>\r\n<p>http://www.red-gate.com/products/dotnet-development/ants-memory-profiler/learning-memory-management/resources/WPF-Silverlight-Pitfalls.pdf</p>\r\n<p>Thanks,</p>\r\n<p>Dharmesh</p>",
    "PostedDate": "2011-10-26T22:44:24.097-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]