[
  {
    "Id": "414322",
    "ThreadId": "203855",
    "Html": "<p>I am writing a sort of plugin framework. My first tought was to have each plugin implemented as a prism module and load them on demand. The problem is that when the application starts I don't know which plugins will be loaded because it will be possible to load plugins after the application has started. At the time the Bootstrapper's GetModuleCatalog method is called I don't know which plugins the user will load, so it is impossible to add the modules at this time. Can this be done in Prism? I know MEF maybe would be the correct framework to use here, but I was hoping to be able to use PRISM, and don't have to learn another new framework.</p>\r\n<p>I have tried to ask a similar question at the silverlight.net forum (<a href=\"http://forums.silverlight.net/forums/p/165664/373649.aspx#373649\">http://forums.silverlight.net/forums/p/165664/373649.aspx#373649</a>), but hasn't got&nbsp;a solution for this yet.</p>",
    "PostedDate": "2010-03-04T12:49:45.483-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "414652",
    "ThreadId": "203855",
    "Html": "<p id=3b898af0-0aa1-012d-d419-1231390a7601>Hi,</p>\r\n<p id=3b899aa0-0aa1-012d-d41a-1231390a7601>If I understand correctly, when the  application begins you don&rsquo;t know what the available plug-ins will be. Thus,  your specific concern is not how to load them on demand, but how to discover  them instead.</p>\r\n<p id=3b89adf0-0aa1-012d-d41b-1231390a7601>If this is your scenario, discovering  modules at runtime is not something Prism supports out of the box. That is,  Prism (out-of-the-box) allows you to <a href=\"http://msdn.microsoft.com/en-us/library/dd458873.aspx\">specify through  configuration which modules will be loaded</a>, and this is only done during the  application&rsquo;s bootstrapping process. This is useful to avoid compile time  dependencies, but does not provide the capability of discovering new modules  while the application is running.</p>\r\n<p id=3b89cca0-0aa1-012d-d41c-1231390a7601>While it is possible to build this  kind of functionality into Prism, you might should still consider checking <a href=\"http://mef.codeplex.com/\">MEF</a> out as it was created to address dynamic  composition scenarios like this. It is possible to integrate Prism and MEF  together, so that might also help you achieve what you want.</p>\r\n<p id=3b89f170-0aa1-012d-d41d-1231390a7601>A possible way to load the modules on  demand if you already know them (not at compile time but before running the  application), could be writing each plug-in as a module as you said and <a href=\"http://msdn.microsoft.com/en-us/library/dd458932.aspx\">use on demand  module loading</a>. You would have no need to rebuild the application, just  updating the <strong>ModulesCatalog.xaml</strong> before loading your app. Thus,  the user can choose only those plug-ins he wishes to load. The flow of your  application would be something like:</p>\r\n<ol>\r\n<li>Load a module that provides the user with a view that gives the option of  which plug-ins to load. <a href=\"View.aspx?ThreadId=203471\">This  thread</a> might be useful for that. </li>\r\n<li>Load the different modules on demand based on the user&rsquo;s choice. </li>\r\n</ol>\r\n<p id=3b8a1380-0aa1-012d-d41e-1231390a7601>While this is a suitable approach and  a scenario Prism is intended to target, you might also find it useful</p>\r\n<p id=3b8a34a0-0aa1-012d-d41f-1231390a7601>Please let me know if this helps.</p>\r\n<p id=3b8a5970-0aa1-012d-d420-1231390a7601>Damian Schenkelman <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2010-03-05T08:32:37.63-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]