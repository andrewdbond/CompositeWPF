[
  {
    "Id": "656020",
    "ThreadId": "268575",
    "Html": "<p>Hi,</p>\n<p>My Prism WPF app is a class library hosted in another win32 app. So Shell.xaml is a UserControl. I'm trying to implement a popup region following the NewsReader in StockTraderRI. Idealy, this popup can interact with the control in the view on Shell (like drag and drop).</p>\n<p>I tried to use <span style=\"color: green;\">WindowDialogActivationBehavior <span style=\"color: #000000;\">(like the Desktop version of StockTraderRI), but I can only open this popup once and it is not staying on top of the Shell, even the view was correctly loaded in the popup.&nbsp;I don't think I should use this method since my shell is not a window but a UserControl.</span></span></p>\n<p><span style=\"color: green;\"><span style=\"color: #000000;\">I tried to use </span></span><span style=\"color: #2b91af;\">PopupDialogActivationBehavior <span style=\"color: #000000;\">(Silerlight version), the popup shows up and closes when click the \"x\",&nbsp;but the view in it doesn't get loaded (contentcontrol is empty). The View and ViewModel for the popup&nbsp;does get called when I debug.</span></span></p>\n<p><span style=\"color: #2b91af;\"><span style=\"color: #000000;\">My question is can I achieve what I need using one of the solution? If yes, how to fix the problems?</span></span></p>\n<p><span style=\"color: #2b91af;\"><span style=\"color: #000000;\">&nbsp;</span></span></p>\n<p>Thanks!</p>\n<p>&nbsp;</p>",
    "PostedDate": "2011-08-10T11:30:22.517-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "656486",
    "ThreadId": "268575",
    "Html": "<p>Some code for easier diagnose.</p>\n<p>Popup region defined in Shell.xaml (Shell is a UserControl)</p>\n<div style=\"background-color: white; color: black;\">\n<pre>infBehaviors:RegionPopupBehaviors.CreatePopupRegionWithName=\"PopupRegion\"\r\ninfBehaviors:RegionPopupBehaviors.ContainerWindowStyle=\"{StaticResource PopupStyle}\"\r\n</pre>\n</div>\n<p>Files for Popup region behavior copied from StockTraderRI: RegionPopupBehaviors.cs, DialogActiveationBehavior.cs, IWindow.cs, PopupDialogActivationBehavior.Silverlight.cs, PopupWrapper.Silverlight.cs, TreeHelper.cs</p>\n<p>In&nbsp;RegionPopupBehaviors.cs,</p>\n<div style=\"background-color: white; color: black;\">\n<pre>behavior = <span style=\"color: blue;\">new</span> PopupDialogActivationBehavior();</pre>\n</div>\n<pre>In TreeHelper.cs: \r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\"><span style=\"color: green;\">//#if&nbsp;SILVERLIGHT</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #2b91af;\">FrameworkElement</span>&nbsp;frameworkElement&nbsp;=&nbsp;dependencyObject&nbsp;<span style=\"color: blue;\">as</span>&nbsp;<span style=\"color: #2b91af;\">FrameworkElement</span>;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">if</span>&nbsp;(frameworkElement&nbsp;!=&nbsp;<span style=\"color: blue;\">null</span>)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent&nbsp;=&nbsp;frameworkElement.Parent&nbsp;??&nbsp;System.Windows.Media.<span style=\"color: #2b91af;\">VisualTreeHelper</span>.GetParent(frameworkElement);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</pre>\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\">&nbsp;The view that need to show up in popup:</pre>\n</pre>\n<p>&nbsp;&nbsp;[<span style=\"color: #2b91af;\">PartCreationPolicy</span>(<span style=\"color: #2b91af;\">CreationPolicy</span>.NonShared)]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //tried NonShare and Shared<br />&nbsp;&nbsp;&nbsp;&nbsp;[<span style=\"color: #2b91af;\">ViewExport</span>(<span style=\"color: #a31515;\">\"VesselTypeListView\"</span>)]<br />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">public</span>&nbsp;<span style=\"color: blue;\">partial</span>&nbsp;<span style=\"color: blue;\">class</span>&nbsp;<span style=\"color: #2b91af;\">VesselTypeListView</span>&nbsp;:&nbsp;<span style=\"color: #2b91af;\">UserControl</span></p>\n<p>&nbsp;In the ViewModel that need to bring up the popup by button click:</p>\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\"><pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\"><pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\"><span style=\"color: blue;\">private</span>&nbsp;<span style=\"color: blue;\">const</span>&nbsp;<span style=\"color: blue;\">string</span>&nbsp;VesselTypeTest&nbsp;=&nbsp;<span style=\"color: #a31515;\">\"VesselTypeListView\"</span>;\r\n</pre>\n</pre>\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\">[<span style=\"color: #2b91af;\">ImportingConstructor</span>] <span style=\"color: blue;\">public</span>&nbsp;ThroughputResultViewModel(<span style=\"color: #2b91af;\">IEventAggregator</span>&nbsp;eventAggregator,&nbsp;<span style=\"color: #2b91af;\">IRegionManager</span>&nbsp;regionManager)</pre>\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\"> {     ...</pre>\n&nbsp;<span style=\"color: blue;\">this</span>._showVesselTypeListCommand&nbsp;=&nbsp;<span style=\"color: blue;\">new</span>&nbsp;<span style=\"color: #2b91af;\">DelegateCommand</span>(<span style=\"color: blue;\">this</span>.ShowVesselTypeList);</pre>\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\">       ...</pre>\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\">}</pre>\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\"><pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\"><span style=\"color: blue;\">private</span>&nbsp;<span style=\"color: blue;\">void</span>&nbsp;ShowVesselTypeList() &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;</pre>\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\"><span style=\"color: green;\"><span style=\"color: #000000;\"><span style=\"color: blue;\">       this</span>._regionManager.RequestNavigate(<span style=\"color: #a31515;\">\"PopupRegion\"</span>,&nbsp;<span style=\"color: blue;\">new</span>&nbsp;<span style=\"color: #2b91af;\">Uri</span>(VesselTypeTest,&nbsp;<span style=\"color: #2b91af;\">UriKind</span>.Relative)); </span></span></pre>\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\"><span style=\"color: green;\"><span style=\"color: #000000;\">}</span></span></pre>\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\">Currently, the popup shows up fine but it's empty. the VesselTypeListView and model gets excuted but not loaded in popup.</pre>\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\">Thanks.</pre>\n</pre>",
    "PostedDate": "2011-08-11T05:44:50.627-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "656591",
    "ThreadId": "268575",
    "Html": "<p>Just found out the problem, in DialogActivationBehavior.cs</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre> <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> PrepareContentDialog(<span style=\"color: blue;\">object</span> view)\r\n        {\r\n            <span style=\"color: blue;\">this</span>.contentDialog = <span style=\"color: blue;\">this</span>.CreateWindow();\r\n            <span style=\"color: blue;\">this</span>.contentDialog.Content = view;\r\n            <span style=\"color: blue;\">this</span>.contentDialog.Owner = <span style=\"color: blue;\">this</span>.HostControl;\r\n            <span style=\"color: blue;\">this</span>.contentDialog.Closed += <span style=\"color: blue;\">this</span>.ContentDialogClosed;\r\n            <span style=\"color: green;\">//this.contentDialog.Style = this.GetStyleForView();</span>\r\n            <span style=\"color: blue;\">this</span>.contentDialog.Show();\r\n        }\r\n</pre>\r\n</div>\r\n<p>I have to comment out the line this.contentDialog.Style = this.GetStyleForView(); My guess is that it couldn't resolve the style. Because my app is WPF class library, so I can't use App.xaml to have an application level style for</p>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\"><span style=\"color: red;\">RegionPopupBehaviors.ContainerWindowStyle</span><span style=\"color: blue;\">=\"{</span><span style=\"color: #a31515;\">StaticResource</span><span style=\"color: red;\">&nbsp;PopupStyle</span><span style=\"color: blue;\">}</span><span style=\"color: blue;\">\"</span>\r\n</pre>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\">I created a MyResourceDictionary.xaml loaded in code in the host like this:</pre>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\"><div style=\"color: black; background-color: white;\"><pre><span style=\"color: blue;\">if</span> (System.Windows.Application.Current == <span style=\"color: blue;\">null</span>)\r\n            {\r\n                <span style=\"color: blue;\">new</span> MyApp();\r\n                MyApp.Current.Resources.MergedDictionaries.Add(\r\n                    MyApp.LoadComponent(<span style=\"color: blue;\">new</span> Uri(<span style=\"color: #a31515;\">\"NYRCPTAGXAddin;component/MyResourceDictionary.xaml\"</span>, UriKind.Relative)) <span style=\"color: blue;\">as</span> System.Windows.ResourceDictionary);\r\n            }\r\n</pre>\r\n</div>\r\nApparently, this works if I use the WindowWrapper.cs (the view shows up in popup), but not with PopupWrapper. How can I get around this? Is there a way that I can define the style when I create the content for the popup?</pre>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\">Thanks!</pre>",
    "PostedDate": "2011-08-11T07:52:53.977-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "656776",
    "ThreadId": "268575",
    "Html": "<p>Hi Julie,</p>\r\n<p>I'm glad you've found a solution to your original problem; thank you for sharing it with the rest of the community.</p>\r\n<p>Regarding the <strong>PopupWrapper</strong> issue, have you tried using the <strong>PopupDialogActivationBehavior </strong>in WPF outside your win32 application, using managed-only code?</p>\r\n<p>If you are able to reproduce this undesired behavior in isolation, it would be helpful if you could provide us with a repro sample application, so that we can help you find the underlying cause behind it.</p>\r\n<p>Thanks,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-08-11T12:03:30.28-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "656887",
    "ThreadId": "268575",
    "Html": "<p>Hi,</p>\r\n<p>Thanks for your response!</p>\r\n<p>I was able to reproduce this in a stand along WPF app and loaded to SkyDrive&nbsp;(<a href=\"https://skydrive.live.com/redir.aspx?cid=4f0ce6c357477187&amp;resid=4F0CE6C357477187!121\">https://skydrive.live.com/redir.aspx?cid=4f0ce6c357477187&amp;resid=4F0CE6C357477187!121</a>). The name of the zip file is TestWPFAppMEF.&nbsp;It has a moduleA displays in Shell and click button</p>\r\n<p>in ModuleAView bring up popup that contains ModuleB. Currently the line in DialogActivationBehavior.cs</p>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\"><span style=\"color: green;\">//this.contentDialog.Style&nbsp;=&nbsp;this.GetStyleForView();</span>\r\n</pre>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\">is commentted out, so moduleB shows up in the popup. If uncomment this line, only the popup with content border but no ModuleB.</pre>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\">Thanks a lot for your help!</pre>",
    "PostedDate": "2011-08-11T16:34:32.71-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "657184",
    "ThreadId": "268575",
    "Html": "<p>Hi Julie,</p>\r\n<p>The problem you're experiencing might be caused by the differences between Silverlight and WPF; since you're trying to use a component that was intended to be used in Silverlight, but in a WPF application, such differences might show up and cause unexpected behaviors like this.</p>\r\n<p>As for the specific error you're experiencing, we've examined your sample and found that, probably due to the aforementioned differences between Silverlight and WPF, the <strong>PopupStyle </strong>you're defining in the <strong>App.xaml</strong> file isn't showing the ContentControl's content through the ContentPresenter. We therefore modified the style to define the Content property in the content presenter explicitly, to something like this:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Style</span> <span style=\"color: red;\">x:Key</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">PopupStyle</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">TargetType</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">ContentControl</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n            <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Setter</span> <span style=\"color: red;\">Property</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Template</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Setter.Value</span><span style=\"color: blue;\">&gt;</span>\r\n                    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ControlTemplate</span><span style=\"color: blue;\">&gt;</span>\r\n                        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Border</span> <span style=\"color: red;\">x:Name</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">overlay</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Background</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">#A9000000</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Padding</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">50,50,50,50</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Opacity</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0</span><span style=\"color: black;\">\"</span> <span style=\"color: blue;\">&gt;</span>\r\n                            <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Border.Triggers</span><span style=\"color: blue;\">&gt;</span>\r\n                                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">EventTrigger</span> <span style=\"color: red;\">RoutedEvent</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Border.Loaded</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n                                    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">BeginStoryboard</span><span style=\"color: blue;\">&gt;</span>\r\n                                        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Storyboard</span><span style=\"color: blue;\">&gt;</span>\r\n                                            <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">DoubleAnimationUsingKeyFrames</span> <span style=\"color: red;\">BeginTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Storyboard.TargetName</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">overlay</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Storyboard.TargetProperty</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">(UIElement.Opacity)</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n                                                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">SplineDoubleKeyFrame</span> <span style=\"color: red;\">KeyTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Value</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n                                                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">SplineDoubleKeyFrame</span> <span style=\"color: red;\">KeyTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00.5000000</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Value</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">1</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n                                            <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">DoubleAnimationUsingKeyFrames</span><span style=\"color: blue;\">&gt;</span>\r\n                                            <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">PointAnimationUsingKeyFrames</span> <span style=\"color: red;\">BeginTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Storyboard.TargetName</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">box</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Storyboard.TargetProperty</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">(UIElement.RenderTransformOrigin)</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n                                                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">SplinePointKeyFrame</span> <span style=\"color: red;\">KeyTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Value</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0.5,0.5</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n                                                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">SplinePointKeyFrame</span> <span style=\"color: red;\">KeyTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00.3000000</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Value</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0.5,0.5</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n                                                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">SplinePointKeyFrame</span> <span style=\"color: red;\">KeyTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00.9000000</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Value</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0.5,0.5</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n                                            <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">PointAnimationUsingKeyFrames</span><span style=\"color: blue;\">&gt;</span>\r\n                                            <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">DoubleAnimationUsingKeyFrames</span> <span style=\"color: red;\">BeginTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Storyboard.TargetName</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">box</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Storyboard.TargetProperty</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n                                                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">SplineDoubleKeyFrame</span> <span style=\"color: red;\">KeyTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Value</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n                                                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">SplineDoubleKeyFrame</span> <span style=\"color: red;\">KeyTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00.3000000</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Value</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n                                                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">SplineDoubleKeyFrame</span> <span style=\"color: red;\">KeyTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00.9000000</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Value</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">1</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">KeySpline</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0.5,0,0.5,1</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n                                            <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">DoubleAnimationUsingKeyFrames</span><span style=\"color: blue;\">&gt;</span>\r\n                                            <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">DoubleAnimationUsingKeyFrames</span> <span style=\"color: red;\">BeginTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Storyboard.TargetName</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">box</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Storyboard.TargetProperty</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n                                                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">SplineDoubleKeyFrame</span> <span style=\"color: red;\">KeyTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Value</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n                                                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">SplineDoubleKeyFrame</span> <span style=\"color: red;\">KeyTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00.3000000</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Value</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n                                                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">SplineDoubleKeyFrame</span> <span style=\"color: red;\">KeyTime</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">00:00:00.9000000</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Value</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">1</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">KeySpline</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0.5,0,0.5,1</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n                                            <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">DoubleAnimationUsingKeyFrames</span><span style=\"color: blue;\">&gt;</span>\r\n                                        <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Storyboard</span><span style=\"color: blue;\">&gt;</span>\r\n                                    <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">BeginStoryboard</span><span style=\"color: blue;\">&gt;</span>\r\n                                <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">EventTrigger</span><span style=\"color: blue;\">&gt;</span>\r\n                            <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Border.Triggers</span><span style=\"color: blue;\">&gt;</span>\r\n                            <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Border</span> <span style=\"color: red;\">x:Name</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">box</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">HorizontalAlignment</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Center</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">VerticalAlignment</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Center</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Background</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">#FFFFFFFF</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">CornerRadius</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">12,12,12,12</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">MinHeight</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">200</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">MinWidth</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">200</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">RenderTransformOrigin</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0.5,0.5</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n                                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Border.RenderTransform</span><span style=\"color: blue;\">&gt;</span>\r\n                                    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">TransformGroup</span><span style=\"color: blue;\">&gt;</span>\r\n                                        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ScaleTransform</span><span style=\"color: blue;\">/&gt;</span>\r\n                                        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">SkewTransform</span><span style=\"color: blue;\">/&gt;</span>\r\n                                        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">RotateTransform</span><span style=\"color: blue;\">/&gt;</span>\r\n                                        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">TranslateTransform</span><span style=\"color: blue;\">/&gt;</span>\r\n                                    <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">TransformGroup</span><span style=\"color: blue;\">&gt;</span>\r\n                                <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Border.RenderTransform</span><span style=\"color: blue;\">&gt;</span>\r\n                                <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Grid</span> <span style=\"color: red;\">x:Name</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">grid</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n                                    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ContentPresenter</span> <strong><span style=\"color: red;\">Content</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding RelativeSource={RelativeSource AncestorType=ContentControl}, Path=Content}</span><span style=\"color: black;\">\"</span></strong> <span style=\"color: red;\">HorizontalAlignment</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Center</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">VerticalAlignment</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Center</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Margin</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">15,15,15,15</span><span style=\"color: black;\">\"</span> <span style=\"color: blue;\">/&gt;</span>\r\n                                    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Button</span> <span style=\"color: red;\">Cursor</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Hand</span><span style=\"color: black;\">\"</span>  <span style=\"color: red;\">HorizontalAlignment</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Right</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Width</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Auto</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Behaviors:ButtonBehaviors.CloseAncestorPopup</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">true</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">VerticalAlignment</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Top</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">BorderBrush</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{x:Null}</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Background</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{x:Null}</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Foreground</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{x:Null}</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">BorderThickness</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0,0,0,0</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Template</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{StaticResource CloseButtonStyle}</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Margin</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">15,15,15,15</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n                                <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Grid</span><span style=\"color: blue;\">&gt;</span>\r\n                            <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Border</span><span style=\"color: blue;\">&gt;</span>\r\n                        <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Border</span><span style=\"color: blue;\">&gt;</span>\r\n                    <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">ControlTemplate</span><span style=\"color: blue;\">&gt;</span>\r\n                <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Setter.Value</span><span style=\"color: blue;\">&gt;</span>\r\n            <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Setter</span><span style=\"color: blue;\">&gt;</span>\r\n        <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Style</span><span style=\"color: blue;\">&gt;</span>\r\n</pre>\r\n</div>\r\n</p>\r\n<p>And after that, we verified that the code worked and the popup content was being shown appropriately.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-08-12T08:03:40.587-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "657203",
    "ThreadId": "268575",
    "Html": "<p>Hi Guido,</p>\r\n<p>Yes!! It worked!</p>\r\n<p>I noticed that the style returned from <span style=\"color: blue;\">this</span>.GetStyleForView() have different TargetType between my app and StockTraderRI. One from PresentationFramework, one from System.Windows.Conrols assembly</p>\r\n<p>which seems like that they are coming from WPF and Silverlight. But totally clueless how to make it work.</p>\r\n<p>Thank you so much for yor quick resonse!</p>\r\n<p>My guess is that down the road in the implementation, the difference between WPF and Silverlight may&nbsp;create other issues. But there should be ways to work them out.&nbsp;What do you think?</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-08-12T08:29:10.647-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "657223",
    "ThreadId": "268575",
    "Html": "<p>Julie,</p>\r\n<p>In my opinion you are right, you should be able to work around most of the difficulties that may arise from this. You might find the following chapter useful, as it goes deeper into the differences between WPF and Silverlight and provides possible solutions to overcome them in a scenario in which it is intended to share code between Silverlight and WPF:</p>\r\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ff921109%28PandP.40%29.aspx\">Chapter 10: Sharing Code Between Silverlight and WPF</a></p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-08-12T09:11:16.667-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "657351",
    "ThreadId": "268575",
    "Html": "<p>Hi,</p>\r\n<p>Thanks for the reference. That Prism4 help file has been an excellent source.</p>\r\n<p>I have a follow up question regarding the popup. If I need to pass the location of the button that brings up the popup so I can position my popup accordingly.</p>\r\n<p>should I do this through the owner of the popup which is the Shell? How to trace down to the control in one of the region on the Shell?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks!</p>",
    "PostedDate": "2011-08-12T12:17:24.49-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "658423",
    "ThreadId": "268575",
    "Html": "<p>Hi Julie,</p>\n<p>Based on my understanding of your scenario, you need to be able to determine in which coordinates to show your popup when adding a view to the region. You might be able to manipulate that through the <strong>VerticalOffset </strong>and <strong>HorizontalOffset </strong>properties of the popup that lays inside the <strong>PopupWrapper </strong>generated by the <strong>PopupDialogActivationBehavior </strong>behavior. In order to achieve that, you could modify the implementation of the <strong>Show</strong> method in the <strong>PopupWrapper</strong> class so that it modifies the aforementioned properties depending on certain properties of the object contained in the object used as its <strong>Content </strong>(i.e. in its <strong>Content </strong>property).</p>\n<p>For example, the current implementation of the <strong>PopupWrapper.Show</strong> method has the following code:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Show()\n        {\n            <span style=\"color: blue;\">this</span>.popUp.IsOpen = <span style=\"color: blue;\">true</span>;\n        }\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>But as a workaround, you could modify it so that for example, in case you have set a <strong>Tuple </strong>containing two values in the content's tag property, those values are used as the <strong>VerticalOffset </strong>and <strong>HorizontalOffset</strong> for the popup. The code might look like this:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Show()\n        {\n            <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.Content <span style=\"color: blue;\">as</span> FrameworkElement != <span style=\"color: blue;\">null</span>)\n            {\n                <span style=\"color: blue;\">if</span> ((<span style=\"color: blue;\">this</span>.Content <span style=\"color: blue;\">as</span> FrameworkElement).Tag <span style=\"color: blue;\">as</span> Tuple&lt;<span style=\"color: blue;\">int</span>,<span style=\"color: blue;\">int</span>&gt; != <span style=\"color: blue;\">null</span>)\n                {\n                    <span style=\"color: blue;\">var</span> tuple = (<span style=\"color: blue;\">this</span>.Content <span style=\"color: blue;\">as</span> FrameworkElement).Tag <span style=\"color: blue;\">as</span> Tuple&lt;<span style=\"color: blue;\">int</span>, <span style=\"color: blue;\">int</span>&gt;;\n                    <span style=\"color: blue;\">this</span>.popUp.HorizontalOffset = tuple.Item1;\n                    <span style=\"color: blue;\">this</span>.popUp.VerticalOffset = tuple.Item2;\n                }\n            }\n\n            <span style=\"color: blue;\">this</span>.popUp.IsOpen = <span style=\"color: blue;\">true</span>;\n        }\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>You can also define your own class containing the metadata instead of using the tag property of the view you're adding to that region, or even define an alternative approach, such as using a declarative attribute on the view you're going to add to the region, to fulfill this requirement.</p>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-08-15T10:56:49.36-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "658474",
    "ThreadId": "268575",
    "Html": "<p>Hi Guido,</p>\r\n<p>I tried the code, but my goal is to set the popup to be positioned at the user clicked location on the Shell (Owner of the popup). I was trying to set the <span style=\"color: green;\">HorizontalOffset and </span><span style=\"color: green;\">VerticalOffset<span style=\"color: #000000;\"> when the Owner of the pop</span></span></p>\r\n<p><span style=\"color: green;\"><span style=\"color: #000000;\">up was set (where the size of the popup set). But don't kown how to find the location that the user clicked through the owner (right now button click brings the popup). Can this be done?</span></span></p>\r\n<p>Another better&nbsp;alternative is to be able to drag around the popup. I'm thinking&nbsp;to add&nbsp;an element (rectangle or button) on the Content of the popup (like the close button) and handle MouseMove on this element to</p>\r\n<p>change the <span style=\"color: green;\">HorizontalOffset and </span><span style=\"color: green;\">VerticalOffset <span style=\"color: #000000;\">of the popup. Is this possible?</span></span></p>\r\n<p><span style=\"color: green;\"><span style=\"color: #000000;\">Thanks a lot!</span></span></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-08-15T12:44:20.927-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "659390",
    "ThreadId": "268575",
    "Html": "<p>Hi,</p>\r\n<p>I've been thinking&nbsp;about&nbsp;the solution of the \"dragable popup\". Maybe a ChildWindow is more suitable in my case? If true, I'm NOT going to need the popup region, just do something like <a href=\"http://msdn.microsoft.com/en-us/library/gg405495(v=PandP.40).aspx\">State-Based Navigation</a>&nbsp;sample?</p>\r\n<p>From the research, I found this: <a href=\"http://wpftoolkit.codeplex.com/wikipage?title=ChildWindow\">Extended WPF Toolkit</a>. Do you think this would work better in my case?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks for your inputs!</p>",
    "PostedDate": "2011-08-17T05:59:56.677-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "659404",
    "ThreadId": "268575",
    "Html": "<p>Julie,</p>\r\n<p>As you're mentioning, it's likely that the <strong>ChildWindow </strong>will be more suitable for your scenario, since it's going to be simpler to achieve your requirements using it, rather than implementing its functionality by yourself.</p>\r\n<p>You could therefore implement a new behavior that inherits from the DialogActivationBehavior, or just modify one of the existing ones to use the Extended WPF Toolkit's child window instead of a popup.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-08-17T06:24:35.537-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "659447",
    "ThreadId": "268575",
    "Html": "<p>Hi Guido,</p>\r\n<p>I just tried to bring up the ChildWindow in Shell.xaml. It doesn't work because the child window is restricted inside the shell window. Our design team determined that this \"popup\" has to be extended outside the shell.</p>\r\n<p>If by using DialogActivationBehavior, will that still utilize the \"popup region\" to host the child window and get around the issue of childwindow stay inside of shell?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks!</p>",
    "PostedDate": "2011-08-17T07:32:15.73-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "659616",
    "ThreadId": "268575",
    "Html": "<p>Hi Guido,</p>\r\n<p>I've been trying the ChildWindow by using a ChildWindowDialogActivationBehavior which inherits from the DialogActivationBehavior, but with no luck.</p>\r\n<p>The set statement&nbsp;in ChildWindowWrapper&nbsp;keeps getting into infinite loop:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">object</span> Owner\r\n        {\r\n            <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">this</span>.Owner; }\r\n            <span style=\"color: blue;\">set</span> { <span style=\"color: blue;\">this</span>.Owner = value <span style=\"color: blue;\">as</span> FrameworkElement; }\r\n        }\r\n</pre>\r\n</div>\r\n<p>I uploaded the project here <a href=\"https://skydrive.live.com/redir.aspx?cid=4f0ce6c357477187&amp;resid=4F0CE6C357477187!121\">https://skydrive.live.com/redir.aspx?cid=4f0ce6c357477187&amp;resid=4F0CE6C357477187!121</a>.</p>\r\n<p>Could you please help?</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-08-17T13:25:22.15-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "659958",
    "ThreadId": "268575",
    "Html": "<p>Julie,</p>\r\n<p>We've downloaded your sample. We'll examine it and provide you with our feedback soon.</p>\r\n<p>Thanks,</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-08-18T05:16:10.84-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "659968",
    "ThreadId": "268575",
    "Html": "<p>I appreciated for your time.</p>\r\n<p>Now I'm thinking maybe the \"Set\" statement I mentioned above has something to do with the error. Because ChildWindow doesn't have Owner property, I changed from</p>\r\n<p><span style=\"color: #0000ff;\">this</span>.window.Owner = <span style=\"color: #0000ff;\">value </span>as <span style=\"color: #008000;\">Window</span>;</p>\r\n<p>to</p>\r\n<p><span style=\"color: #0000ff;\">ths</span>.Owner = <span style=\"color: #0000ff;\">value </span>as <span style=\"color: #008000;\">FrameworkElement</span>;</p>\r\n<p>For my TestWPFApp statand along, it need to be \"value as Window\". But for my WPF hosted app, the Shell is a UserControl, so it need to be FrameworkElement, right?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-08-18T05:36:57.343-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "660154",
    "ThreadId": "268575",
    "Html": "<p>Julie,</p>\n<p>We've examined your sample and found that the infinite loop you're experiencing is caused by the fact that you're trying to modify a property's value in the property's setter, so when you assign a value to this.Owner, the setter is called again, which modifies  the value again, calling the setter and so forth.</p>\n<p>You could try having a private field (for example called owner, in lowercase) and use that field in the getter and setter of your Owner property.</p>\n<p>As for your last post, what you're saying sounds reasonable for your scenario.</p>\n<p>Please let us know if you are still unable to make your <strong>ChildWindowDialogActivationBehavior</strong> work, so that we provide further guidance about it.</p>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-08-18T11:07:59.337-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "661873",
    "ThreadId": "268575",
    "Html": "<p>Hi Guido,</p>\r\n<p>Thanks for your suggestion. Since the popup is the preferred UI for our application, I went back to visit the implementation of the draggable popup and finally got it to work. I added a label in the popup&nbsp;along side of the close button&nbsp;and</p>\r\n<p>implement the event for MouseLeftButtonDown and capture mouse move for the label. This is the code I added in ButtonBehaviors.Silverlight.cs for anyone finding it is useful.</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">readonly</span> DependencyProperty DragAncestorPopupProperty = DependencyProperty.RegisterAttached(\r\n               <span style=\"color: #a31515;\">\"DragAncestorPopup\"</span>, <span style=\"color: blue;\">typeof</span>(<span style=\"color: blue;\">bool</span>), <span style=\"color: blue;\">typeof</span>(ButtonBehaviors), <span style=\"color: blue;\">new</span> PropertyMetadata(OnDragAncestorPopupChanged));\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">bool</span> GetDragAncestorPopup(DependencyObject dependencyObject)\r\n        {\r\n            <span style=\"color: blue;\">return</span> (<span style=\"color: blue;\">bool</span>)(dependencyObject.GetValue(DragAncestorPopupProperty) ?? <span style=\"color: blue;\">false</span>);\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> SetDragAncestorPopup(DependencyObject dependencyObject, <span style=\"color: blue;\">bool</span> value)\r\n        {\r\n            dependencyObject.SetValue(DragAncestorPopupProperty, value);\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> OnDragAncestorPopupChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            UIElement label = d <span style=\"color: blue;\">as</span> UIElement;\r\n            <span style=\"color: blue;\">if</span> (label != <span style=\"color: blue;\">null</span>)\r\n            {\r\n                <span style=\"color: blue;\">if</span> ((<span style=\"color: blue;\">bool</span>)e.NewValue)\r\n                {\r\n                    label.MouseLeftButtonDown += DragBarMouseDown;\r\n                }\r\n                <span style=\"color: blue;\">else</span>\r\n                {\r\n                    label.MouseLeftButtonDown -= DragBarMouseDown;\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> DragBarMouseDown(<span style=\"color: blue;\">object</span> sender, MouseButtonEventArgs e)\r\n        {\r\n            UIElement label = sender <span style=\"color: blue;\">as</span> UIElement;\r\n\r\n            lastPoint = e.GetPosition(<span style=\"color: blue;\">null</span>);\r\n            label.CaptureMouse();\r\n            label.MouseMove += RootVisual_MouseMove;\r\n            label.MouseLeftButtonUp += RootVisual_MouseLeftButtonUp;\r\n            label.LostMouseCapture += topbar_LostMouseCapture;\r\n            e.Handled = <span style=\"color: blue;\">true</span>;\r\n\r\n        }\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> RootVisual_MouseMove(<span style=\"color: blue;\">object</span> sender, MouseEventArgs e)\r\n        {\r\n            <span style=\"color: green;\">//isDragging = true;</span>\r\n            <span style=\"color: green;\">//ChangeVisualState(true);    </span>\r\n            UIElement label = sender <span style=\"color: blue;\">as</span> UIElement;\r\n            <span style=\"color: blue;\">if</span> (label != <span style=\"color: blue;\">null</span> &amp;&amp; GetDragAncestorPopup(label))\r\n            {\r\n                <span style=\"color: blue;\">var</span> popup = TreeHelper.FindAncestor(label, d =&gt; d <span style=\"color: blue;\">is</span> Popup) <span style=\"color: blue;\">as</span> Popup;\r\n                <span style=\"color: blue;\">if</span> (popup != <span style=\"color: blue;\">null</span>)\r\n                {\r\n                    Point p2 = e.GetPosition(<span style=\"color: blue;\">null</span>);\r\n                    <span style=\"color: blue;\">double</span> dX = p2.X - lastPoint.X;\r\n                    <span style=\"color: blue;\">double</span> dY = p2.Y - lastPoint.Y;\r\n                    popup.HorizontalOffset += dX;\r\n                    popup.VerticalOffset += dY;\r\n                    lastPoint = p2;\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> RootVisual_MouseLeftButtonUp(<span style=\"color: blue;\">object</span> sender, MouseButtonEventArgs e)\r\n        {\r\n            StopDrag(sender);\r\n        }\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> topbar_LostMouseCapture(<span style=\"color: blue;\">object</span> sender, MouseEventArgs e)\r\n        {\r\n            StopDrag(sender);\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> StopDrag(<span style=\"color: blue;\">object</span> sender)\r\n        {\r\n            UIElement label = sender <span style=\"color: blue;\">as</span> UIElement;\r\n            label.ReleaseMouseCapture();\r\n            label.MouseMove -= RootVisual_MouseMove;\r\n            label.MouseLeftButtonUp -= RootVisual_MouseLeftButtonUp;\r\n            label.LostMouseCapture -= topbar_LostMouseCapture;\r\n\r\n        }\r\n</pre>\r\n</div>\r\n<p>In the xaml that define the \"PopupStyle\", add a label inside the grid named \"grid\":</p>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 13px;\"><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Label</span><span style=\"color: red;\">&nbsp;x</span><span style=\"color: blue;\">:</span><span style=\"color: red;\">Name</span><span style=\"color: blue;\">=</span><span style=\"color: blue;\">\"DragBar\"</span><span style=\"color: red;\">&nbsp;Cursor</span><span style=\"color: blue;\">=</span><span style=\"color: blue;\">\"Hand\"</span><span style=\"color: red;\">&nbsp;HorizontalAlignment</span><span style=\"color: blue;\">=</span><span style=\"color: blue;\">\"Center\"</span><span style=\"color: red;\">&nbsp;Width</span><span style=\"color: blue;\">=</span><span style=\"color: blue;\">\"30\"</span><span style=\"color: red;\">&nbsp;infBehaviors</span><span style=\"color: blue;\">:</span><span style=\"color: red;\">ButtonBehaviors.DragAncestorPopup</span><span style=\"color: blue;\">=</span><span style=\"color: blue;\">\"true\"</span><span style=\"color: red;\">&nbsp;VerticalAlignment</span><span style=\"color: blue;\">=</span><span style=\"color: blue;\">\"Top\"</span><span style=\"color: red;\">&nbsp;BorderBrush</span><span style=\"color: blue;\">=\"{</span><span style=\"color: #a31515;\">x</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">Null</span><span style=\"color: blue;\">}</span><span style=\"color: blue;\">\"</span><span style=\"color: red;\">&nbsp;Background</span><span style=\"color: blue;\">=</span><span style=\"color: blue;\">\"White\"</span><span style=\"color: red;\">&nbsp;Foreground</span><span style=\"color: blue;\">=\"{</span><span style=\"color: #a31515;\">x</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">Null</span><span style=\"color: blue;\">}</span><span style=\"color: blue;\">\"</span><span style=\"color: blue;\">&nbsp;/&gt;</span>\r\n</pre>\r\n<p>This is&nbsp;not working perfectly because the popup doesn't move to the exaact location of the mouse, but it serves the purpose for now.</p>\r\n<p>I would like still try the ChildWindow solution&nbsp;when I get a chance.</p>\r\n<p>Very appreciated all your help!</p>",
    "PostedDate": "2011-08-22T19:58:13.373-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "662060",
    "ThreadId": "268575",
    "Html": "<p>Julie,</p>\r\n<p>Thank you for sharing your implementation with the rest of the community, as it might be helpful for other users trying to achieve similar scenarios.</p>\r\n<p>Thanks,</p>\r\n<p>Guido Leandro Maliandi&nbsp;<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-08-23T05:50:31.457-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "668047",
    "ThreadId": "268575",
    "Html": "<p>No problem.</p>\r\n<p>One further question regarding this popup window. Rigth now the close of the popup is&nbsp;using the \"ButtonBehavior\"&nbsp; through button on the ContentControl in popup.</p>\r\n<p>Now if I need to use a button&nbsp;on one of the views loaded inside popup region to close the popup, how do I do that?</p>\r\n<p>Thanks!</p>",
    "PostedDate": "2011-09-06T05:17:01.93-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "668068",
    "ThreadId": "268575",
    "Html": "<p>Hi,</p>\r\n<p>You could try removing the view from the popup region you have created through the <strong>region manager</strong>. That would cause the popup to be closed.</p>\r\n<p>You might find this thread useful:</p>\r\n<ul>\r\n<li><a href=\"http://compositewpf.codeplex.com/discussions/258973\">Closing popup without using X button?</a> </li>\r\n</ul>\r\n<p>I hope you find this helpful.</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2011-09-06T05:59:30.923-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]