[
  {
    "Id": "176316",
    "ThreadId": "52467",
    "Html": "I see in the examples that there are several ways that you are supporting construction (not Initialization) of Modules but I can't see it documented anywhere. Any clues to how you are calling constructors by convention?  What are all the Interfaces you support?\r\n",
    "PostedDate": "2009-04-06T14:13:58.91-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "176785",
    "ThreadId": "52467",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">The reason why this happens is because classes that implement <b>IModule</b> interface are not meant to be instanced as objects usually are (using the <b>new</b> keyword) but using the Unity container instead.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">When a class gets resolved through the Unity container, it is injected with the different dependencies it has declared. This dependencies have to be previously registered in the container and if not a new object of that type is created. To better understand this behavior you might find useful the<span style=\"color:#1f497d\"> <a href=\"http://msdn.microsoft.com/en-us/library/dd458879.aspx\"><span style=\"color:#0000ff\">Dependency Injection</span></a> </span>pattern and the<span style=\"color:#1f497d\"> <a href=\"http://msdn.microsoft.com/en-us/library/dd458893.aspx\"><span style=\"color:#0000ff\">Container</span></a> </span>design concept in the documentation.<span style=\"color:#1f497d\">  </span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d;font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">For example:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">public class ModuleA : IModule</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">      private IRegionManager manager;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">      public ModuleA(IRegionManager regionManager)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">// regionManager is injected into this class. It is the instance that was registered for the IRegionManager interface in the container</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">      this.manager = manager; </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">public void Initialize()</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">//Some logic</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">The interfaces used are usually abstractions of different elements from the <b>Composite Application Guidance for WPF &amp; Silverlight</b>. Example: <b>IRegionManager </b>is implemented by the RegionManager class, <b>IEventAggregator </b>is implemented by the <b>EventAggregator</b> class. This abstractions allow a more decoupled application, since the code is not dependant on the implementation.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:calibri\">For more information you could download and go over the Unity Application Block documentation and source code </span><a href=\"http://unity.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=18855#ReleaseFiles\"><span style=\"color:#0000ff;font-family:calibri\">here</span></a><span style=\"font-family:calibri\">. P&amp;P has recently released<span style=\"color:#1f497d\"> <a href=\"http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=93a5e18f-3211-44ef-b785-c59bcec4cd6f\"><span style=\"color:#0000ff\">Hands-on Labs for Unity 1.2</span></a> </span>which cover Dependency Injection with Unity among other topics<span style=\"color:#1f497d\">.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Please let me know if this helps.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\">Damian Schenkelman</span></p>\r\n<span style=\"font-size:11pt;font-family:'calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"color:#0000ff\">http://blogs.southworks.net/dschenkelman</span></a></span>\r\n",
    "PostedDate": "2009-04-07T12:52:15.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "176790",
    "ThreadId": "52467",
    "Html": "This was me missing the barn because I was looking at the woodgrain. Of course its using Constructor injection so we're all good.",
    "PostedDate": "2009-04-07T12:56:23.187-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]