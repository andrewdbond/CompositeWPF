[
  {
    "Id": "157155",
    "ThreadId": "46985",
    "Html": "Hi,<div>Im Having a requirement tht ,Shell contains Menu Bar with MenuItem.Upon Clicking on MenuItem is there any Possiblity of loading particular Module.Plz answer me asap.It is very imp.</div><div><br></div><div>With regards,</div><div>Mahender</div>",
    "PostedDate": "2009-02-12T11:44:32.677-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "158141",
    "ThreadId": "46985",
    "Html": "<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Hi Mahender,</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">You can add a <b>Command</b> to your MenuItem that loads a module on demand when the user right clicks on it by using the <b>Module Loader</b> and the <b>Module Enumerator</b> services (in Prism v1).</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">You can check the </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707860.aspx\"><span style=\"font-family:calibri\">DirectoryLookupModularity and ConfigurationModularity quickstarts</span></a><span style=\"font-family:calibri\"> to see different ways of how modules could be loaded on demand, and the </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707837.aspx\"><span style=\"font-family:calibri\">Commanding quickstart</span></a><span style=\"font-family:calibri\"> to see the usage of the commands provided by the Composite Application Library.</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">For further understanding, you can read the following articles in the documentation:</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707852.aspx\"><span style=\"font-family:calibri\">How to: Load Modules On Demand</span></a>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707834.aspx\"><span style=\"font-family:calibri\">How to: Dynamically Load Modules</span></a>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707896.aspx\"><span style=\"font-family:calibri\">How to: Create Locally Available Commands</span></a>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707861.aspx\"><span style=\"font-family:calibri\">How to: Create Globally Available Commands</span></a>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">For Prism v2, the approach is the same but the services involved during the module loading process were changed for the <b>Module Catalog</b> and <b>Module Loader</b>. You can download the </span><a href=\"http://www.codeplex.com/CompositeWPF/Release/ProjectReleases.aspx?ReleaseId=22566\"><span style=\"font-family:calibri\">Prism v2 – Drop 10</span></a><span style=\"font-family:calibri\"> and check the same quickstarts and topics in the documentation (under the <b>Development Activities</b> section).</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Please let me know if this helps. If you want more specific guidance on this, please provide me which version of Prism are you using.</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Mariano Converti </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><a href=\"http://blogs.southworks.net/mconverti\"><span style=\"font-family:calibri\">http://blogs.southworks.net/mconverti</span></a> </p>\r\n</span></p>\r\n</span></p>\r\n</span></p>\r\n</span></p>\r\n",
    "PostedDate": "2009-02-16T09:39:28.283-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "158653",
    "ThreadId": "46985",
    "Html": "Similar to mahens, I am creating my first Prism app (V2).&nbsp; I have a module that contains the RibbonBar, and other views (controls) that represent the other functions. For the sake of discussion, let's say I have a PieChart module, PieChart.Xaml, and PieChart.xaml.cs. <br>\r\n<br>\r\nWhen I click on the PieChart button in the RibbonBar, I want the main region to load the PieChart view. <br>\r\n<br>\r\nIn the examples, it appears that I have to go through a Presentaion Layer to do this. All I really want to do is set the view to a specific on based on what was clicked in the RibbonBar. <br>\r\n<br>\r\nAre commands the way to go here? <br>\r\nEDIT:<br>\r\nWell,due to the fact that the RibbonBar doesn't implement ICommand, this is a little contrived, but here goes.<br>\r\nI returned my RibbonBar to the Shell.xaml. Each command has a CommadParameter naming the command.<br>\r\n<br>\r\nIn the CodeBehind, I have a single OnRibbonCommand that handles all the commands. \\<br>\r\n(if e.Parameter ==&quot;Census&quot;) <br>\r\n&nbsp;&nbsp; MenuCommands.CensusCommand.Execute(info);<br>\r\n<br>\r\nFrom this, I utilize a common static class that has CompositeCommands to call the command. The appopriate modules Register&nbsp; via this:<br>\r\n<br>\r\n&nbsp;public DelegateCommand&lt;object&gt; MenuCommand { get; set; }<br>\r\nMenuCommand = new DelegateCommand&lt;object&gt;(OnMenuCommand, ShouldBeEnabled);<br>\r\n&nbsp; MenuCommands.CensusCommand.RegisterCommand(MenuCommand);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void OnMenuCommand(object param)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //do things...<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n<br>\r\n<br>\r\n<strong>This is all well and good, but I am still trying to figure out how to show/hide modules in the regionmanager.</strong> <br>\r\n<br>\r\n<br>\r\n\r\n",
    "PostedDate": "2009-02-17T13:19:15.953-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "160028",
    "ThreadId": "46985",
    "Html": "Hi,<br>\r\nI found doing it using events is quite easy. So in the command method, I pass the moduleName I want to load:<br>\r\n<span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">\r\n<p>public</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#0000ff\">void</span><span style=\"font-size:13px\"> OnMenuCommand(</span><span style=\"font-size:13px;color:#0000ff\">string</span><span style=\"font-size:13px\"> parameter)\r\n<p>&nbsp;</p>\r\n<p>{</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#0000ff\">var</span><span style=\"font-size:13px\"> module = moduleEnumerator.GetModule(parameter);\r\n<p>&nbsp;</p>\r\n<p>moduleLoader.Initialize(</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#0000ff\">new</span><span style=\"font-size:13px\">[] { module });\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px;color:#2b91af\">RequiredModuleView</span><span style=\"font-size:13px\"> requiredModuleView = </span><span style=\"font-size:13px;color:#0000ff\">new</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\">RequiredModuleView</span><span style=\"font-size:13px\">();<br>\r\nrequiredModuleView.ModuleName = parameter;<br>\r\n//In case the module contains few views<br>\r\nrequiredModuleView.ViewName = &quot;....&quot;<br>\r\n//In case the module need to load a specific item selected in another view<br>\r\nrequiredModuleView.RequiredObjectId = ...<br>\r\neventAggregator.GetEvent&lt;</span><span style=\"font-size:13px;color:#2b91af\">ActivateModuleEvent</span><span style=\"font-size:13px\">&gt;().Publish(requiredModuleView);\r\n<p>&nbsp;</p>\r\n<p>}<br>\r\n<br>\r\nMy RequiredModuleView class look like that:<br>\r\n<span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">\r\n<p>&nbsp;</p>\r\n<p>public</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#0000ff\">class</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\">RequiredModuleView<br>\r\n</span><span style=\"font-size:13px\">{<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">public</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#0000ff\">string</span><span style=\"font-size:13px\"> ModuleName { </span><span style=\"font-size:13px;color:#0000ff\">get</span><span style=\"font-size:13px\">; </span><span style=\"font-size:13px;color:#0000ff\">set</span><span style=\"font-size:13px\">; }<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">public</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#0000ff\">string</span><span style=\"font-size:13px\"> ViewName { </span><span style=\"font-size:13px;color:#0000ff\">get</span><span style=\"font-size:13px\">; </span><span style=\"font-size:13px;color:#0000ff\">set</span><span style=\"font-size:13px\">; }<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">public</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#0000ff\">int</span><span style=\"font-size:13px\"> SelectedObjectId { </span><span style=\"font-size:13px;color:#0000ff\">get</span><span style=\"font-size:13px\">; </span><span style=\"font-size:13px;color:#0000ff\">set</span><span style=\"font-size:13px\">; }<br>\r\n}<br>\r\n<br>\r\nand ActivateModuleEvent is simply:<br>\r\n<span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">\r\n<p>&nbsp;</p>\r\n<p>public</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#0000ff\">class</span><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#2b91af\">ActivateModuleEvent</span><span style=\"font-size:13px\"> : </span><span style=\"font-size:13px;color:#2b91af\">CompositeWpfEvent</span><span style=\"font-size:13px\">&lt;</span><span style=\"font-size:13px;color:#2b91af\">RequiredModuleView</span><span style=\"font-size:13px\">&gt;<br>\r\n{<br>\r\n}<br>\r\n<br>\r\nBoth the classses are in the common project which is referenced by all modules.<br>\r\nThen in the module itself:<br>\r\n<span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">\r\n<p>&nbsp;</p>\r\n<p>public</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#0000ff\">void</span><span style=\"font-size:13px\"> Initialize()<br>\r\n{<br>\r\n...<br>\r\n<span style=\"font-size:13px;color:#2b91af\">ActivateModuleEvent</span><span style=\"font-size:13px\"> activateModuleEvent = </span><span style=\"font-size:13px;color:#0000ff\">this</span><span style=\"font-size:13px\">.eventAggregator.GetEvent&lt;</span><span style=\"font-size:13px;color:#2b91af\">ActivateModuleEvent</span><span style=\"font-size:13px\">&gt;();<br>\r\nactivateModuleEvent.Subscribe(ActivetModuleEventHandler, </span><span style=\"font-size:13px;color:#2b91af\">ThreadOption</span><span style=\"font-size:13px\">.UIThread, </span><span style=\"font-size:13px;color:#0000ff\">true</span><span style=\"font-size:13px\">, p =&gt; p.ModuleName == &quot;the mopdule name</span><span style=\"font-size:13px;color:#a31515\">&quot;</span><span style=\"font-size:13px\">);<br>\r\n}<br>\r\n<br>\r\n<span style=\"font-size:13px;color:#0000ff\"><span style=\"font-size:13px;color:#0000ff\">\r\n<p>&nbsp;</p>\r\n<p>private</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px\"> </span><span style=\"font-size:13px;color:#0000ff\">void</span><span style=\"font-size:13px\"> ActivetModuleEventHandler(</span><span style=\"font-size:13px;color:#2b91af\">RequiredModuleView</span><span style=\"font-size:13px\"> requiredModuleView)<br>\r\n{<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">if</span><span style=\"font-size:13px\"> (requiredModuleView.ViewName == </span><span style=\"font-size:13px;color:#a31515\">&quot;FileTypeBuilder&quot;</span><span style=\"font-size:13px\">)<br>\r\n{<br>\r\n</span><span style=\"font-size:13px;color:#2b91af\">IFileTypeBuilderCompositeViewPresentationModel</span><span style=\"font-size:13px\"> presentationModel = _container.Resolve&lt;</span><span style=\"font-size:13px;color:#2b91af\">IFileTypeBuilderCompositeViewPresentationModel</span><span style=\"font-size:13px\">&gt;();<br>\r\n</span><span style=\"font-size:13px;color:#2b91af\">IRegion</span><span style=\"font-size:13px\"> popRegion = _regionManager.Regions[</span><span style=\"font-size:13px;color:#2b91af\">RegionNames</span><span style=\"font-size:13px\">.PopWindowRegion];<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">if</span><span style=\"font-size:13px\"> (!popRegion.Views.Contains(presentationModel.View))<br>\r\n{<br>\r\npopRegion.Add(presentationModel.View);<br>\r\n</span><span style=\"font-size:13px;color:#0000ff\">this</span><span style=\"font-size:13px\">.builderModel = presentationModel; <br>\r\n}<br>\r\npresentationModel.LoadData(requiredModuleView.SelectedObjectId);<br>\r\n</span><span style=\"font-size:13px\">popRegion.Activate(presentationModel.View);<br>\r\n}<br>\r\n}<br>\r\n<br>\r\nThere might be more elegant way to do it but this one worked for me :)<br>\r\nHope it helps,<br>\r\nKen\r\n<p>&nbsp;</p>\r\n</span></p>\r\n</span></span></p>\r\n</span></p>\r\n</span></p>\r\n</span></p>\r\n",
    "PostedDate": "2009-02-19T21:10:36.867-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]