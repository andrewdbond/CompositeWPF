[
  {
    "Id": "1364150",
    "ThreadId": "586832",
    "Html": "Hi,\r<br />\n<br />\nI am looking for advice on how to best track changes within a composite view in a PRISM application using MVVM.\r<br />\n<br />\nIn my case, I have an OrderViewModel, which in turns has a collection of OrderlineViewModel, which in turn has a collection of ProductViewModel. I want the OrderViewModel to know if any changes has been made by a user in the order at any level in the view model hierarchy. In this case, the save command should be enabled among other things.\r<br />\n<br />\nI see three alternatives:<br />\n<h1>1</h1>\nSubscribe to INotifyPropertyChanged on all view model objects present for the view (and CollectionChanged on all lists). This leads to quite cumbersome code to maintain in the root view model, similar to:<br />\n<pre><code>public void Subscribe()\n{\n  // Listen for changes on OrderViewModel\n  this.PropertyChanged -= OnDirty;\n  this.PropertyChanged += OnDirty;\n\n  // Listen if order lines added/removed\n  this.OrderlineViewModels.CollectionChanged -= this.OnDirty;\n  this.OrderlineViewModels.CollectionChanged += this.OnDirty;\n\n  // Listen for changes in any OrderlineViewModel\n  {\n    foreach (var orderlineViewModel in this.OrderlineViewModels)\n    {\n      orderlineViewModel.PropertyChanged -= OnDirty;\n      orderlineViewModel.PropertyChanged -= OnDirty;\n      \n      // ... and so on for each level\n    }\n}\n</code></pre>\n\n<h1>2</h1>\nAllow all child view models to know about their parent. Then require that all child view models call a method on its parent when a change happened (which will bubble up to the root).<br />\n<pre><code>this.PropertyChanged += (s, e) =&gt;\n{\n  this.Parent.MakeDirty();\n};\nthis.ProductViewModels.CollecitonChanged += (s, e) =&gt;\n{\n  this.Parent.MakeDirty();\n};\n</code></pre>\n\n<h1>3</h1>\nUse EventAggregator to send out a typed event for each ViewModel, e.g. “OrderlineViewModelChanged”. The root view model needs to subscribe to each event applicable for this view.\r<br />\n<br />\nAny input on which route to go down, or if we have missed any better approach, is highly appreciated!\r<br />\n<br />\nThanks,\r<br />\nMichael<br />\n",
    "PostedDate": "2015-03-16T07:30:53.857-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]