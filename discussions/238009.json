[
  {
    "Id": "534385",
    "ThreadId": "238009",
    "Html": "\r\n<p>I have a view called HomeView that has a nested view called HelloView. HomeView has no view model, but the nested HelloView does. I am trying to connect HelloViewModel to HelloView using an import in HelloView. However this is not working - the view model\r\n reference is null. Can someone please suggest how to do this? My code is shown below:</p>\r\n<pre>***** HomeView.xaml *****\r\n&lt;UserControl ...&gt;\r\n    &lt;Grid x:Name=&quot;LayoutRoot&quot;&gt;\r\n        &lt;StackPanel&gt;\r\n            &lt;TextBlock Text=&quot;Home&quot; /&gt;\r\n            &lt;view:HelloView x:Name=&quot;helloView&quot;/&gt;\r\n        &lt;/StackPanel&gt;\r\n    &lt;/Grid&gt;\r\n&lt;/UserControl&gt;\r\n\r\n\r\n***** HomeView.xaml.cs *****\r\n[ViewExport(RegionName = &quot;MainRegion&quot;)]\r\n[PartCreationPolicy(CreationPolicy.NonShared)]\r\npublic partial class HomeView : UserControl\r\n{\r\n    public HomeView()\r\n    {\r\n        InitializeComponent();\r\n    }\r\n}\r\n\r\n\r\n***** HelloView.xaml *****\r\n&lt;UserControl ...&gt;\r\n    &lt;StackPanel x:Name=&quot;LayoutRoot&quot; Margin=&quot;10&quot;&gt;\r\n        &lt;StackPanel Orientation=&quot;Horizontal&quot; VerticalAlignment=&quot;Top&quot;&gt;\r\n            &lt;TextBlock Text=&quot;Name&quot; VerticalAlignment=&quot;Center&quot; /&gt;\r\n            &lt;TextBox Width=&quot;100&quot; VerticalAlignment=&quot;Center&quot; Margin=&quot;10 0 0 0&quot;\r\n                     Text=&quot;{Binding Path=Name, Mode=TwoWay}&quot; /&gt;\r\n            &lt;Button Content=&quot;Submit&quot; VerticalAlignment=&quot;Center&quot; Margin=&quot;10 0 0 0&quot;\r\n                    Command=&quot;{Binding SubmitCommand}&quot;/&gt;\r\n        &lt;/StackPanel&gt;\r\n        &lt;TextBlock Text=&quot;{Binding Message}&quot; Margin=&quot;0 10 0 0&quot; Foreground=&quot;Red&quot; /&gt;\r\n    &lt;/StackPanel&gt;\r\n&lt;/UserControl&gt;\r\n\r\n\r\n***** HelloView.xaml.cs *****\r\n[Export]\r\n[PartCreationPolicy(CreationPolicy.NonShared)]\r\npublic partial class HelloView : UserControl\r\n{\r\n    public HelloView()\r\n    {\r\n        InitializeComponent();\r\n    }\r\n\r\n    [Import]\r\n    public IHelloViewModel ViewModel\r\n    {\r\n        set { this.DataContext = value; }\r\n    }\r\n}\r\n\r\n\r\n***** IHelloViewModel.cs *****\r\npublic interface IHelloViewModel\r\n{\r\n}\r\n\r\n***** HelloViewModel.cs *****\r\n[Export(typeof(IHelloViewModel))]\r\n[PartCreationPolicy(CreationPolicy.NonShared)]\r\npublic class HelloViewModel : NotificationObject, IHelloViewModel\r\n{\r\n    public HelloViewModel()\r\n    {\r\n        this.SubmitCommand = new DelegateCommand&lt;object&gt;(this.OnSubmit);\r\n    }\r\n\r\n    private void OnSubmit(object obj)\r\n    {\r\n        Message = &quot;Hello &quot; &#43; Name;\r\n    }\r\n\r\n    private string _name;\r\n    public string Name\r\n    {\r\n        get { return _name; }\r\n        set\r\n        {\r\n            if (value != _name)\r\n            {\r\n                _name = value;\r\n                this.RaisePropertyChanged(&quot;Name&quot;);\r\n            }\r\n        }\r\n    }\r\n\r\n    private string _message;\r\n    public string Message\r\n    {\r\n        get { return _message; }\r\n        set\r\n        {\r\n            if (value != _message)\r\n            {\r\n                _message = value;\r\n                this.RaisePropertyChanged(&quot;Message&quot;);\r\n            }\r\n        }\r\n    }\r\n\r\n    public ICommand SubmitCommand { get; private set; }\r\n}\r\n</pre>\r\n<p>Interesting thing is that if I export the nested view (HelloView) into the MainRegion instead of the parent view (HomeView), then HelloView gets properly connected to HelloViewModel and everything works perfectly. So I have a hunch that by nesting HelloView,\r\n its construction does not go through MEF.</p>\r\n<p>Thanks.</p>\r\n<p>Naresh</p>\r\n",
    "PostedDate": "2010-12-11T08:27:04.583-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "535157",
    "ThreadId": "238009",
    "Html": "\r\n<p id=\"x_25f8f8d0-e913-012d-f9d2-12313b100b2d\">Hi Naresh,</p>\r\n<p id=\"x_25f90070-e913-012d-f9d3-12313b100b2d\">Based on my understanding, you are trying to instantiate your HelloView from the HomeView.xaml. It is likely\r\n<strong>MEF</strong> is not satisfying the import of your viewmodel, since the view is instantiated in the XAML.</p>\r\n<p id=\"x_25f90980-e913-012d-f9d4-12313b100b2d\">You might try the following approaches to solve this issue:</p>\r\n<ul>\r\n<li>You could use the <strong>ServiceLocator</strong> to get the instance of your\r\n<em>viewmodel</em>. For example: </li></ul>\r\n<blockquote>\r\n<p id=\"x_25f912b0-e913-012d-f9d5-12313b100b2d\">public HelloView() <br>\r\n{ <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; this.InitializeComponent();</p>\r\n<p id=\"x_25f91db0-e913-012d-f9d6-12313b100b2d\">this._helloViewModel = ServiceLocator.Current.GetInstance&lt;IHelloViewModel&gt;();</p>\r\n<p id=\"x_25f928a0-e913-012d-f9d7-12313b100b2d\">} <br>\r\n&hellip;</p>\r\n</blockquote>\r\n<ul>\r\n<li>Another approach might be to add a region to your HomeView.xaml using <strong>\r\nScoped Regions</strong> and register your HelloView in it. That way, your view will be composed when it gets added to that region. You can read more about in\r\n<a href=\"http://msdn.microsoft.com/en-us/library/ff921098%28v=PandP.40%29.aspx\">Chapter 7: Composing the User Interface</a>.\r\n</li></ul>\r\n<p id=\"x_25f933e0-e913-012d-f9d8-12313b100b2d\">&nbsp;</p>\r\n<ul>\r\n<li>On the other hand, you could try using the <em>SatisfyImports</em> method from\r\n<strong>CompositionInitializer</strong> class to satisfy your imports when the HelloView is added. You can read about it\r\n<a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.composition.compositioninitializer%28v=vs.95%29.aspx\">\r\nhere</a>. </li></ul>\r\n<p id=\"x_25f94290-e913-012d-f9d9-12313b100b2d\">&nbsp;</p>\r\n<p id=\"x_25f952f0-e913-012d-f9da-12313b100b2d\">I hope you find this information useful.</p>\r\n<p id=\"x_25f96240-e913-012d-f9db-12313b100b2d\">Thanks,</p>\r\n<p>Miguel Bronzovic<br>\r\n<a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n",
    "PostedDate": "2010-12-13T11:58:38.48-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "535666",
    "ThreadId": "238009",
    "Html": "\r\n<p>Thanks Miguel. I like your approach #2. However, I was able to achieve the desired result using a simple region, did not have to create a scoped region. Any reason you suggested a scoped region?</p>\r\n<p>Here's my modified code:</p>\r\n<pre>***** HomeView.xaml *****\r\n&lt;UserControl ...&gt;\r\n    &lt;Grid x:Name=&quot;LayoutRoot&quot;&gt;\r\n        &lt;StackPanel&gt;\r\n            &lt;TextBlock Text=&quot;Home&quot; /&gt;\r\n            &lt;ContentControl\r\n                prism:RegionManager.RegionName=&quot;HomeContentRegion&quot; /&gt;\r\n        &lt;/StackPanel&gt;\r\n    &lt;/Grid&gt;\r\n&lt;/UserControl&gt;\r\n\r\n***** HelloView.xaml.cs *****\r\n[ViewExport(RegionName = &quot;HomeContentRegion&quot;)]\r\n[PartCreationPolicy(CreationPolicy.NonShared)]\r\npublic partial class HelloView : UserControl\r\n{\r\n    public HelloView()\r\n    {\r\n        InitializeComponent();\r\n    }\r\n\r\n    [Import]\r\n    public IHelloViewModel ViewModel\r\n    {\r\n        set { this.DataContext = value; }\r\n    }\r\n}\r\n</pre>\r\n<p>Also, I think I have seen CreationPolicy.Shared on views in some examples. Any reason why a view would be marked as Shared?</p>\r\n<p>Thanks.</p>\r\n<p>Naresh</p>\r\n",
    "PostedDate": "2010-12-14T09:44:12.707-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "535732",
    "ThreadId": "238009",
    "Html": "\r\n<p>Hi Naresh,</p>\r\n<p>Thanks for sharing this with the rest of the community, since it might help other users in a similar scenario as you mentioned.</p>\r\n<p>The reason I suggested you to use Scoped Region is that, when you instantiate a view which defines a region, the view will inherit the parent container&acute;s\r\n<strong>RegionManager</strong>. Since every time in your application creates more than one instance of that view, each instance would attempt to register its region with the parent\r\n<strong>RegionManager</strong>. <strong>RegionManager</strong> allows only uniquely named regions; therefore, the second registration would produce an error. To avoid these kinds of errors, you could use\r\n<strong>Scoped Regions</strong>, so that each time a new instance of your view is created, a new\r\n<strong>RegionManager </strong>is attached to it.</p>\r\n<p>Regarding your last question, depending on your desired scenario you could benefit from having a view export marked as Shared. For example, if you wish to keep certain state (such as the checked property of a checkbox) in your view even when it's removed\r\n from a region, retrieving the same instance of the view each time you compose it could be useful.</p>\r\n<p>You can read more about this <a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.composition.creationpolicy.aspx\">\r\nhere</a>.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br>\r\n<a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-12-14T11:27:58.057-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "535834",
    "ThreadId": "238009",
    "Html": "\r\n<p>Thanks Miguel. That clarifies both my questions.</p>\r\n<p>Naresh</p>\r\n",
    "PostedDate": "2010-12-14T15:08:41.933-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]