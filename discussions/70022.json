[
  {
    "Id": "238459",
    "ThreadId": "70022",
    "Html": "<p>I'm working on an app that is to display a complex object. Because the object is so complex I've seperated the details over several tabs and some tabs contain accordions and grids to further display the object. There's quite some logic involved so I'd like to seperate this into several modules (user controls) to make it maintainable. I'm currently struggling with the way to provide the data to each module / user control that it needs to show.</p>\r\n<p>Let's assume my object looks like this:</p>\r\n<p>Customer<br>&nbsp; - Customer details<br>&nbsp;&nbsp;- Orders<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- Order 1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Products<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Product&nbsp;A<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Product B<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- Order 2<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Product A<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- Product B</p>\r\n<p>I want to show the customer details on one tab using one module or user control and show the list of orders&nbsp;on a different tab using another module or user control. Let's say I have a page with a view model that exposes the Customer object. On the page I have a tab control with two tabs.&nbsp;How do I bind the Customer details and Orders each to a seperate module on a tab? How do I get the Customer details in the view model so that I can expose additional properties to the view based on data in the object?</p>\r\n<p>I currently tried the view first approach in which I have a property CustomerDetails on my user control that I host on one of the tabs. The view hosts the view model inside its Resources collection.&nbsp;The page binds the Customer details of the Customer object to the CustomerDetails property of the control. This gives me access to the CustomerDetails in the view, but I need it in the view model too. I tried binding the CustomerDetails property to a property on the view model, but this a) does not work if I do it in XAML because you can't bind a property to an object in the resources collection and b) does not work from code since the binding doesn't fire.</p>\r\n<p>I'm sorry if my question is a little vague, but my head won't stop spinning once I started working with Prism.</p>",
    "PostedDate": "2009-09-24T12:27:36.33-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "238999",
    "ThreadId": "70022",
    "Html": "<p id=e78936d0-8c47-012c-d5bb-12313b003871>Hi,</p>\r\n<p id=e7895600-8c47-012c-d5bc-12313b003871>Remember that you display views in regions (not modules), while a module can have none, one or multiple views. This thread explain this in more detail:</p>\r\n<ul>\r\n<li><a href=\"View.aspx?ThreadId=59827\">Confirmation of understanding</a></li>\r\n<li><a href=\"View.aspx?ThreadId=62400\">Manually load module</a></li>\r\n</ul>\r\n<p id=e7897580-8c47-012c-d5bd-12313b003871>On to your particular situation, first I would define the Views I want to show. As far as I understand, in your scenario they would be:</p>\r\n<ul>\r\n<li>CustomerDetailsView (with a CustomerDetailsViewModel)</li>\r\n<li>Order (with order ViewModel, and just make product a list/datagrid with products for the order).</li>\r\n</ul>\r\n<p id=e7899b50-8c47-012c-d5be-12313b003871>To use the View First approach (meaning that you build and &ldquo;talk&rdquo; to the view), you can use code like this:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> CustomerView\r\n{\r\n    <span style=\"color:Blue\">public</span> CustomerView(CustomerDetailsViewModel model,&hellip;)\r\n    {\r\n           <span style=\"color:Blue\">this</span>.DataContext = model;\r\n           <span style=\"color:Green\">//more code here&hellip;</span>\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p id=e78b1b50-8c47-012c-d5c7-12313b003871>This way, you can simply bind to your ViewModel in your Views XAML. You can read more about Prism and MVVM in the following:</p>\r\n<ul>\r\n<li><a href=\"http://blogs.msdn.com/erwinvandervalk/archive/2009/08/12/how-do-i-do-with-the-model-view-viewmodel-pattern.aspx\">how do i do&hellip; With the Model-View-ViewModel pattern</a><em> </em></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/magazine/dd419663.aspx\">WPF Apps With The Model-View-ViewModel Design Pattern</a></li>\r\n</ul>\r\n<p id=e78b6180-8c47-012c-d5c8-12313b003871>You might probably find the <a href=\"http://msdn.microsoft.com/en-us/library/dd458919.aspx\">Prism-v2 RI</a> application useful, as it has different views, and shows different ways of binding Views-ViewModels and displaying the views.</p>\r\n<p id=e78ba780-8c47-012c-d5c9-12313b003871>Please let me know if this helps.</p>\r\n<p id=e78be580-8c47-012c-d5ca-12313b003871>Damian Schenkelman    <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2009-09-25T15:05:32.463-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]