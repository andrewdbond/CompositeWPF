[
  {
    "Id": "410413",
    "ThreadId": "201498",
    "Html": "<p>My transitions framework works on the content change of a content  based control (to re-write to work otherwise is a non-starter there's  too much code that relies on this structure). It transitions the old to  new content on the contentchanged method override. However the current  behavior of Composite/Prism sets the content property of a region  content control to null before setting it to the new view value. This  causes the transition to animate to a null / blank view then transition  from the blank view to the new view, which as you can imagine looks  pretty terrible. The closest I've gotten to avoid this is by writing a  custom animatedcontentcontrol that overrides oncontentchanged and  ignores null content, the problem with this solution is that it breaks  the .Remove functionality of a region manager.</p>\r\n<p>I have tried  leveraging custom RegionBehaviors, and RegionAdapters but I can't seem  to find the method override or event hook I need override to view change  behavior of going to null content before new content when .Activate is  called.</p>\r\n<p>Any tips on how to solve this?</p>",
    "PostedDate": "2010-02-26T18:31:10.9-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "412679",
    "ThreadId": "201498",
    "Html": "<p>Ok, I was able to solve this issue, the gist of it was that I:</p>\r\n<p>1.) Created a new region type and called it <strong>AnimatedSingleActiveRegion</strong>, it's identical to <strong>SingleActiveRegion </strong>except I changed the <strong>Activate </strong>override to deactivate the old view <strong>AFTER</strong> activating the new view:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">void</span> Activate(<span style=\"color:Blue\">object</span> view)\r\n{\r\n<span style=\"color:Blue\">     object</span> currentActiveView = ActiveViews.FirstOrDefault();\r\n\r\n<span style=\"color:Blue\">     base</span>.Activate(view);\r\n\r\n<span style=\"color:Blue\">     if</span> (currentActiveView != <span style=\"color:Blue\">null</span> &amp;&amp; currentActiveView != view &amp;&amp; <span style=\"color:Blue\">this</span>.Views.Contains(currentActiveView))\r\n     {\r\n<span style=\"color:Blue\">          base</span>.Deactivate(currentActiveView);\r\n     }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>2.) Created a new region adapter, identical to the ContentControlRegionAdapter named <strong>AnimatedContentControlRegionAdapter</strong>. This adapts a custom control I created that inherits from ContentControl named <strong>AnimatedContentControl</strong>. The create region override returns a region of type <strong>AnimatedSingleActiveRegion</strong>.</p>\r\n<p>3.) In my bootstrapper I added a mapping for the new region adapter.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">override</span> RegionAdapterMappings ConfigureRegionAdapterMappings()\r\n{\r\n     RegionAdapterMappings mappings = <span style=\"color:Blue\">base</span>.ConfigureRegionAdapterMappings();\r\n\t\t\t\r\n     mappings.RegisterMapping(<span style=\"color:Blue\">typeof</span>(AnimatedContentControl), Container.Resolve&lt;AnimatedContentControlRegionAdapter&gt;());\r\n        <span style=\"color:Blue\"><br>     return</span> mappings;\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>4.) My <strong>AnimatedContentControl</strong> custom control inherits from Content Control and the root element for its default style control template is a <strong><a title=TransitionElement href=\"http://www.codeplex.com/transitionals\">TransitionElement</a> </strong>from the Transitionals CodePlex project. The default style (generic.xaml) of the control looks like this:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">ResourceDictionary</span> <span style=\"color:Red\">xmlns</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:Black\">&quot;</span>\r\n                    <span style=\"color:Red\">xmlns:x</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:Black\">&quot;</span>\r\n                    <span style=\"color:Red\">xmlns:local</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">clr-namespace:Mass.Infrastructure.Controls</span><span style=\"color:Black\">&quot;</span>\r\n                    <span style=\"color:Red\">xmlns:transc</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">clr-namespace:Transitionals.Controls;assembly=Transitionals</span><span style=\"color:Black\">&quot;</span>\r\n                    <span style=\"color:Red\">xmlns:transt</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">clr-namespace:Transitionals.Transitions;assembly=Transitionals</span><span style=\"color:Black\">&quot;</span>\r\n                    <span style=\"color:Red\">xmlns:trans</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">clr-namespace:Transitionals;assembly=Transitionals</span><span style=\"color:Black\">&quot;</span>\r\n                    <span style=\"color:Red\">xmlns:refl</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">clr-namespace:System.Reflection;assembly=mscorlib</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n\r\n\t<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Style</span> <span style=\"color:Red\">TargetType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">local:AnimatedContentControl</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n\t\t<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Setter</span> <span style=\"color:Red\">Property</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Template</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n\t\t\t<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Setter.Value</span><span style=\"color:Blue\">&gt;</span>\r\n\t\t\t\t<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">ControlTemplate</span> <span style=\"color:Red\">TargetType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">local:AnimatedContentControl</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n\t\t\t\t\t<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">transc</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">TransitionElement</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">TransitionBox</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n\t\t\t\t\t\t<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">transc</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">TransitionElement.Transition</span><span style=\"color:Blue\">&gt;</span>\r\n\t\t\t\t\t\t\t<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">transt</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">RotateTransition</span> <span style=\"color:Red\">Angle</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">45</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n\t\t\t\t\t\t<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">transc</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">TransitionElement.Transition</span><span style=\"color:Blue\">&gt;</span>\r\n\t\t\t\t\t<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">transc</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">TransitionElement</span><span style=\"color:Blue\">&gt;</span>\r\n\t\t\t\t<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">ControlTemplate</span><span style=\"color:Blue\">&gt;</span>\r\n\t\t\t<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Setter.Value</span><span style=\"color:Blue\">&gt;</span>\r\n\t\t<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Setter</span><span style=\"color:Blue\">&gt;</span>\r\n\t<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Style</span><span style=\"color:Blue\">&gt;</span>\r\n\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">ResourceDictionary</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>5.) The code for the AnimatedContentControl looks like this:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> AnimatedContentControl : ContentControl\r\n    {\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">const</span> <span style=\"color:Blue\">string</span> EmptyPendingContent = <span style=\"color:#A31515\">&quot;AnimatedContentControlEmptyState&quot;</span>;\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">bool</span> _isInitialLoad = <span style=\"color:Blue\">true</span>;\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">object</span> _pendingContent = EmptyPendingContent;\r\n        <span style=\"color:Blue\">private</span> TransitionElement _transitionBox;\r\n\r\n\r\n        <span style=\"color:Blue\">public</span> AnimatedContentControl()\r\n        {\r\n            DefaultStyleKey = <span style=\"color:Blue\">typeof</span> (AnimatedContentControl);\r\n\r\n            ApplyTemplate();\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">void</span> OnApplyTemplate()\r\n        {\r\n            _transitionBox = (TransitionElement) GetTemplateChild(<span style=\"color:#A31515\">&quot;TransitionBox&quot;</span>);\r\n\r\n            <span style=\"color:Blue\">base</span>.OnApplyTemplate();\r\n        }\r\n\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">override</span> <span style=\"color:Blue\">void</span> OnContentChanged(<span style=\"color:Blue\">object</span> oldContent, <span style=\"color:Blue\">object</span> newContent)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (_transitionBox != <span style=\"color:Blue\">null</span>)\r\n            {               \r\n                <span style=\"color:Blue\">if</span> (_transitionBox.IsTransitioning)\r\n                {\r\n                    _pendingContent = newContent;\r\n                    <span style=\"color:Blue\">return</span>;\r\n                }\r\n\r\n\r\n                _isInitialLoad = <span style=\"color:Blue\">false</span>;\r\n\r\n\r\n                TransitionEventHandler[] @transitionEndedDelegateCopy = {<span style=\"color:Blue\">null</span>};\r\n                TransitionEventHandler transitionEndedDelegate = <span style=\"color:Blue\">delegate</span>\r\n                                                                     {\r\n                                                                         _transitionBox.TransitionEnded -=\r\n                                                                             @transitionEndedDelegateCopy[0];\r\n\r\n\r\n                                                                         <span style=\"color:Blue\">if</span> (!(_pendingContent <span style=\"color:Blue\">is</span> <span style=\"color:Blue\">string</span>) ||\r\n                                                                             (<span style=\"color:Blue\">string</span>) _pendingContent !=\r\n                                                                             EmptyPendingContent)\r\n                                                                         {\r\n                                                                             <span style=\"color:Blue\">object</span> pendingContent = _pendingContent;\r\n                                                                             _pendingContent = EmptyPendingContent;\r\n\r\n\r\n                                                                             OnContentChanged(newContent,\r\n                                                                                              pendingContent);\r\n                                                                         }\r\n                                                                     };\r\n\r\n                @transitionEndedDelegateCopy[0] = transitionEndedDelegate;\r\n                _transitionBox.TransitionEnded += transitionEndedDelegate;\r\n\r\n                _transitionBox.Content = newContent;\r\n            }\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-03-01T06:11:33.153-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "440236",
    "ThreadId": "201498",
    "Html": "Dear JoeGershgorin\r\n   \r\n    Can you pl provide me the code with example in Vb.Net \r\n\r\nThanks\r\nJignesh\r\n",
    "PostedDate": "2010-05-07T00:45:28.693-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "442199",
    "ThreadId": "201498",
    "Html": "<p>JoeGershgorin, I have followed your example here but stil see the blank page in between the translations, is the part where you override the Active method in&nbsp; suppose to supress the <strong>AnimatedSingleActiveRegion </strong> blank page? The Active method is only being fired once per transition for me.<strong><br></strong></p>",
    "PostedDate": "2010-05-12T11:37:17.853-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "503970",
    "ThreadId": "201498",
    "Html": "<p>2Joe: it's awesome!</p>\r\n<p>2<a id=\"ctl00_ctl00_MasterContent_Content_PostRepeater_ctl06_UserNameLink\" href=\"http://www.codeplex.com/site/users/view/Ambog36\">Ambog36</a>: You probably derived<span style=\"color:#000000\"> AnimatedSingleActiveRegion </span>from <span style=\"color:#000000\">SingleActiveRegion instead of Region.</span></p>",
    "PostedDate": "2010-10-07T16:11:17.993-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]