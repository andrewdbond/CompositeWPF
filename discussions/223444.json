[
  {
    "Id": "480016",
    "ThreadId": "223444",
    "Html": "<p>Hi,</p>\r\n<p>I am pretty new with both MEF and Prism. What I know is (correct me if I am wrong), Prism sits on top of Unity for module discovery. MEF may not be a parallel technology to Unity but helps with IoC. As I saw in Prism Drop 4, there is a seperate Dll for MEF extensions. I wanted to know the benifits of using MEF extensions PRISM&nbsp;rather than using the regular PRISM? Are there any added benefits or is it going to give me performance improvements?</p>\r\n<p>Regards</p>\r\n<p>Abhay</p>",
    "PostedDate": "2010-08-12T23:16:23.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "480261",
    "ThreadId": "223444",
    "Html": "<p>Hi Abhay,</p>\r\n<p>Nice to see that you started looking at Prism. First of all,&nbsp;it could be&nbsp;useful for you to know that Prism is agnostic&nbsp;of the users&rsquo;&nbsp;choice for&nbsp;using MEF, Unity&nbsp;or any other IoC&nbsp;in their applications.&nbsp;However, MEF and Unity are the recommended approaches by the product team.</p>\r\n<p>Regarding to&nbsp;MEF, <strong><a href=\"http://blogs.msdn.com/b/gblock/archive/2010/06/03/mef-has-shipped.aspx\">it&nbsp;has shipped in .NET 4 and Silverlight 4</a></strong>, and&nbsp;has been&nbsp;available&nbsp;as of Prism v4. Also it is used in Visual Studio 2010&nbsp;as its platform for extensibility.</p>\r\n<p>MEF was created to simplify the design of extensible applications and components. When using MEF you could find that it is&nbsp;easy to understand as well as to&nbsp;make your application easy to extend.&nbsp;Compared to Unity, it is more than a plain lightweight dependency injection (DI)&nbsp;container, since it has some aspects of IoC, but it is not a general purpose DI container. For more information about MEF you could take a look at the following links:</p>\r\n<ul>\r\n<li><a href=\"http://mef.codeplex.com/Thread/View.aspx?ThreadId=35083\">MEF vs. Unity vs. System.AddIn... Also, is Microsoft involved?</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd460648.aspx\">Managed Extensibility Framework Overview</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd460648.aspx#what_mef_provides\">What MEF Provides</a> </li>\r\n<li><a href=\"http://mef.codeplex.com/\">MEF codeplex site</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/magazine/ee291628.aspx\">Building Composable Apps in .NET 4 with the Managed Extensibility Framework</a></li>\r\n</ul>\r\n<p>As for the performance there is no official comparison between these two technologies. Nevertheless, you could check the following links related&nbsp;to this topic:</p>\r\n<ul>\r\n<li><a href=\"http://mef.codeplex.com/Thread/View.aspx?ThreadId=211971\">MEF in the real world</a> </li>\r\n<li><a href=\"http://mef.codeplex.com/Thread/View.aspx?ThreadId=71848\">MEF performance</a></li>\r\n<li><a href=\"http://mef.codeplex.com/Thread/View.aspx?ThreadId=71848\">MEF, High Performance Application (multi threaded, multiple window threads)</a></li>\r\n</ul>\r\n<p>Please let me know if this helps.</p>\r\n<p>Fernando Antivero <br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>",
    "PostedDate": "2010-08-13T09:09:20.29-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]