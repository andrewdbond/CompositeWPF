[
  {
    "Id": "217202",
    "ThreadId": "63877",
    "Html": "<div style=\"color:Black;background-color:White\">\r\n<pre>Hi All,</pre>\r\n<pre>I'm trying to remove a view from a TabControl following this example:</pre>\r\n<pre><a href=\"http://blogs.infosupport.com/blogs/willemm/archive/2008/07/31/Creating-closeable-tabitems-for-use-in-CompositeWPF.aspx\">http://blogs.infosupport.com/blogs/willemm/archive/2008/07/31/Creating-closeable-tabitems-for-use-in-CompositeWPF.aspx</a></pre>\r\n<pre>I have a tabbed 'MainRegion' inside the Shell window:</pre>\r\n<pre>&lt;Window x:Class=<span style=\"color:#A31515\">&quot;Shell&quot;</span>&gt;\r\n&lt;Grid&gt;\r\n     &lt;TabControl cal:RegionManager.RegionName=<span style=\"color:#A31515\">&quot;MainRegion&quot;</span> Style=<span style=\"color:#A31515\">&quot;{DynamicResource Shell.MainRegion}&quot;</span>&gt;\r\n      &lt;/TabControl&gt;\r\n&lt;/Grid&gt;\r\n&lt;/Window&gt;</pre>\r\n<pre>Then add some views from some module:</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre>_regionManager.Regions[&quot;MainRegion&quot;].Add(myView1);</pre>\r\n</div>\r\n</pre>\r\n<pre>Each TabItem has a close button calling a static command (CloseTabItemCommand):</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> Commands\r\n</span>{\r\n        <span style=\"color:Blue\">static</span> Commands()\r\n        {\r\n            CloseTabItemCommand = <span style=\"color:Blue\">new</span> DelegateCommand&lt;TabItem&gt;(CloseTabItem);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> DelegateCommand&lt;TabItem&gt; CloseTabItemCommand { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">set</span>; }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> CloseTabItem(TabItem tabItem)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (tabItem != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                FrameworkElement view = tabItem.Content <span style=\"color:Blue\">as</span> FrameworkElement;\r\n                TabControl tabControl = TryFindParent&lt;TabControl&gt;(tabItem);\r\n                <span style=\"color:Blue\">var</span> regionName = RegionManager.GetRegionName(tabControl);\r\n                <span style=\"color:Blue\">var</span> rm = RegionManager.GetRegionManager(view);\r\n                                \r\n                rm.Regions[regionName].Remove(view);\r\n            }\r\n        }\r\n}\r\n</pre>\r\n</div>\r\n</pre>\r\n<pre>The command executes perfectly, and inside this method:  '<span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> CloseTabItem(TabItem tabItem)' i can get the correct tabItem, tabControl and view.</pre>\r\n<pre>The problem is that RegionManager.GetRegionManager(view) returns the region manager that manage regions inside the scope of the view,</pre>\r\n<pre>and i need the region manager that can remove the view from the 'MainRegion'.</pre>\r\n<pre>Any ideas?</pre>\r\n<pre>Thanks</pre>\r\n<pre>Ezequiel</pre>\r\n</div>",
    "PostedDate": "2009-07-29T08:10:16.107-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "217266",
    "ThreadId": "63877",
    "Html": "<p>I think that a lot of us are trying to get working prism with a module - for instance customers - that loads in a tabcontrol many times.</p>\r\n<p>For instance, I'm working in a tab with customer A and I want to open in a second tab customer B.</p>\r\n<p>May be someone can post a complete sample of how to get a module working like that, and of course - like Ezequiel asks - how to save / close individual tabs ?</p>\r\n<p>I'm sure it will be a great step in a wider adoption of prism, I saw many discutions trying to get this behavieurs.</p>\r\n<p>Thaks in advance</p>\r\n<p>Marcos</p>",
    "PostedDate": "2009-07-29T10:16:41.227-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "217273",
    "ThreadId": "63877",
    "Html": "<p>Hi Ezequiel,</p>\r\n<p>There is not an out of the box way in Prism to get the <strong>RegionManager </strong>of the <strong>TabRegion</strong> in this kind of situation. I do not know you exact scenario, but I assume from what you explained that each of your Tabitems creates a scoped region manager for itself. I can think of two different possibilities to get the <strong>RegionManager</strong> that contains the <strong>TabReigon</strong> in this scenario.</p>\r\n<ol>\r\n<li><span style=\"font-size:11pt\" lang=EN-US>If it is the RegionManager from the entire application (as it appears to be because it is in the Shell), you could get it through the <strong>UnityContainer</strong>. Your code would look like this</span> </li>\r\n<pre><span style=\"color:blue\" lang=EN-US>private</span><span style=\"color:black\" lang=EN-US> </span><span style=\"color:blue\" lang=EN-US>static</span><span style=\"color:black\" lang=EN-US> </span><span style=\"color:blue\" lang=EN-US>void</span><span style=\"color:black\" lang=EN-US> CloseTabItem(TabItem tabItem)</span></pre>\r\n<pre><span style=\"color:black\" lang=EN-US>{</span></pre>\r\n<pre><span style=\"color:blue\" lang=EN-US>if</span><span style=\"color:black\" lang=EN-US> (tabItem != </span><span style=\"color:blue\" lang=EN-US>null</span><span style=\"color:black\" lang=EN-US>)</span></pre>\r\n<pre><span style=\"color:black\" lang=EN-US>{</span></pre>\r\n<pre><span style=\"color:black\" lang=EN-US>FrameworkElement view = tabItem.Content </span><span style=\"color:blue\" lang=EN-US>as</span><span style=\"color:black\" lang=EN-US> FrameworkElement;</span></pre>\r\n<pre><span style=\"color:black\" lang=EN-US>TabControl tabControl = TryFindParent&lt;TabControl&gt;(tabItem);</span></pre>\r\n<pre><span style=\"color:blue\" lang=EN-US>var</span><span style=\"color:black\" lang=EN-US> regionName = RegionManager.GetRegionName(tabControl);</span></pre>\r\n<pre><span style=\"color:blue\" lang=EN-US>var</span><span style=\"color:black\" lang=EN-US> rm = container.Resolve&lt;IRegionManager&gt;();</span></pre>\r\n<pre><span style=\"color:black\" lang=EN-US>rm.Regions[regionName].Remove(view);</span></pre>\r\n<pre><span style=\"color:black\" lang=EN-US>}</span></pre>\r\n<pre><span style=\"color:black\" lang=EN-US>}</span></pre>\r\n<li><span style=\"font-size:11pt\" lang=EN-US>If the RegionManager is another scoped RegionManager you could keep a reference to it after you add the view with the new scope, and either pass it as a parameter so it can be used in this method, or <a href=\"http://msdn.microsoft.com/en-us/library/dd203134.aspx\">register it in the container</a> (with an ID) so you have access to it.</span>&nbsp;</li>\r\n</ol>\r\n<p>Please let me know if this helps.</p>\r\n<p>Damian Schenkelman<br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2009-07-29T10:27:59.673-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]