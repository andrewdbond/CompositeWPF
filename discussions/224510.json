[
  {
    "Id": "483612",
    "ThreadId": "224510",
    "Html": "<p>Hi,</p>\r\n<p>I'm fairly new to prism and have undertaken a WPF&nbsp;project using it. A concept that I have not come across so far is the idea of having a standard Menu bar in the Shell but having Menu Items populated by Prism modules so that commands in said modules can be triggered from the menu. I would have thought that a module could have a &quot;menu view&quot; that injects into the menu bar just like you can inject a view into a ContentControl or TabControl but I can't see how to do this currently. Has anyone tried to do something similar?</p>\r\n<p>Regards,</p>\r\n<p>Neil</p>",
    "PostedDate": "2010-08-23T07:17:06.073-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "484089",
    "ThreadId": "224510",
    "Html": "<p>&nbsp;</p>\r\n<p><span style=\"font-family:'Microsoft Sans Serif';color:black;font-size:10pt\">Hi,</span></p>\r\n<p>Just the question that was formulating in my mind as I start the planning of a rewrite to an application I wrote a few years ago using CAB.<br>(This previous one being generated for me by Deklarit)<br>Anyway, I think the main idea is to hide the implementation of the controls used to provide the menu - whether you might use MS ones, or those from DevExpress or Infragistics, etc.<br>So it seems to me that the module needs to request its menus via a service - then developers in the team developing modules need no references to actual UI controls. The modules need to subscribe to events to receive the users actions.<br><br>That&rsquo;s what I&rsquo;m looking into, so if others have more words of wisdom, I think both of us would like to hear.<br><br>John</p>\r\n<p><span style=\"font-family:'Microsoft Sans Serif';color:black;font-size:10pt\">&nbsp;</span></p>\r\n<p><br><br><br><br></p>",
    "PostedDate": "2010-08-24T05:45:51.757-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "484095",
    "ThreadId": "224510",
    "Html": "<p>Now I've been reminded of the correct terms, heres a question posted here</p>\r\n<p>﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿﻿<span style=\"color:black;font-size:10pt\"><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=43929\">http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=43929</a></span></p>\r\n<p><span style=\"color:black;font-size:10pt\">and the authors project</span></p>\r\n<p><span style=\"color:black;font-size:10pt\">﻿﻿﻿﻿﻿<a href=\"http://www.codeproject.com/KB/silverlight/UIExtensionSites.aspx\">http://www.codeproject.com/KB/silverlight/UIExtensionSites.aspx</a></span></p>\r\n<p><span style=\"color:black;font-size:10pt\">John<br></span></p>",
    "PostedDate": "2010-08-24T05:57:18.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "484278",
    "ThreadId": "224510",
    "Html": "<p>I would go about this by creating a menu module that encapsulates the display of MenuControl in its proper region [i.e. MenuBarRegion&nbsp;etc.]. The MenuModule will also expose a Service [e.g. IMenuService] that lets other modules add MenuGroups and SubGroups to the Menu Instance managed by the module. You'd need to make sure MenuModule loads before any other modules.</p>\r\n<p>Other Modules can resolve an instance of IMenuService and call the proper methods to add their menu items when the modules are initializing. And it would be better if these modules can also specify the command to execute when the menu item is selected so that those events are handled locally by&nbsp; the modules and not by the menu module.</p>\r\n<p>Hope this helpts</p>\r\n<p>Ravi</p>",
    "PostedDate": "2010-08-24T11:27:31.63-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "484380",
    "ThreadId": "224510",
    "Html": "<p>I actually achieved my goal with a Prism Event, it seems to work rather well too. I'll try and share it here:</p>\r\n<p>I defined an Event and Parameters that would allow me to set up both a Menu Item and a ToolBar item optionally.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">    public</span> <span style=\"color:blue\">class</span> RegisterMenuCommandEvent : CompositePresentationEvent&lt;MenuCommandEntry&gt;\r\n    {\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MenuCommandEntry\r\n    {\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> MenuCatagory { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> MenuItemName { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">object</span> ToolTip { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> OnToolBar { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">object</span> ToolbarContent { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n        <span style=\"color:blue\">public</span> ICommand Command { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">public</span> KeyGesture KeyGesture { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Then I hooked up my Shell to subscribe to this event. The shell contains a Menu control and a ToolBarTray control. Here is my Shell code:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> Shell : Window\r\n    {\r\n        <span style=\"color:blue\">public</span> Dictionary&lt;<span style=\"color:blue\">string</span>, MenuItem&gt; MenuByCategory { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">public</span> Dictionary&lt;<span style=\"color:blue\">string</span>, ToolBar&gt; ToolBarByCategory { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n        <span style=\"color:blue\">public</span> Shell(IEventAggregator eventAggregator)\r\n        {\r\n            InitializeComponent();\r\n            <span style=\"color:blue\">this</span>.Closing += <span style=\"color:blue\">new</span> System.ComponentModel.CancelEventHandler(Shell_Closing);\r\n\r\n            <span style=\"color:blue\">this</span>.MenuByCategory = <span style=\"color:blue\">new</span> Dictionary&lt;<span style=\"color:blue\">string</span>, MenuItem&gt;();\r\n            <span style=\"color:blue\">this</span>.ToolBarByCategory = <span style=\"color:blue\">new</span> Dictionary&lt;<span style=\"color:blue\">string</span>, ToolBar&gt;();\r\n\r\n            <span style=\"color:blue\">this</span>.RegisterMenuCommandEvent = eventAggregator.GetEvent&lt;RegisterMenuCommandEvent&gt;();\r\n            <span style=\"color:blue\">this</span>.RegisterMenuCommandEvent.Subscribe(RegisterMenuCommand);\r\n        }\r\n\r\n...\r\n\r\n        <span style=\"color:blue\">#region</span> Events\r\n\r\n        <span style=\"color:blue\">public</span> RegisterMenuCommandEvent RegisterMenuCommandEvent { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RegisterMenuCommand(MenuCommandEntry menuCommand)\r\n        {\r\n            <span style=\"color:blue\">if</span> (menuCommand.KeyGesture != <span style=\"color:blue\">null</span>)\r\n                <span style=\"color:blue\">this</span>.InputBindings.Add(<span style=\"color:blue\">new</span> InputBinding(menuCommand.Command, menuCommand.KeyGesture));\r\n\r\n            AddToMenu(menuCommand);\r\n\r\n            <span style=\"color:blue\">if</span> (menuCommand.OnToolBar)\r\n                AddToToolbar(menuCommand);\r\n        }     \r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> AddToMenu(MenuCommandEntry menuCommand)\r\n        {\r\n            <span style=\"color:blue\">if</span> (!<span style=\"color:blue\">this</span>.MenuByCategory.ContainsKey(menuCommand.MenuCatagory))\r\n            {\r\n                <span style=\"color:blue\">this</span>.MenuByCategory[menuCommand.MenuCatagory] = <span style=\"color:blue\">new</span> MenuItem() { Header = menuCommand.MenuCatagory };\r\n                <span style=\"color:blue\">this</span>.MenuBar.Items.Add(<span style=\"color:blue\">this</span>.MenuByCategory[menuCommand.MenuCatagory]);\r\n            }\r\n\r\n            <span style=\"color:blue\">string</span> inputGestureText = menuCommand.KeyGesture != <span style=\"color:blue\">null</span> ? menuCommand.KeyGesture.GetDisplayStringForCulture(CultureInfo.CurrentCulture) : <span style=\"color:blue\">null</span>;\r\n            <span style=\"color:blue\">this</span>.MenuByCategory[menuCommand.MenuCatagory].Items.Add(<span style=\"color:blue\">new</span> MenuItem() { Header = menuCommand.MenuItemName, Command = menuCommand.Command, InputGestureText = inputGestureText });\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> AddToToolbar(MenuCommandEntry menuCommand)\r\n        {\r\n            <span style=\"color:blue\">if</span> (!<span style=\"color:blue\">this</span>.ToolBarByCategory.ContainsKey(menuCommand.MenuCatagory))\r\n            {\r\n                <span style=\"color:blue\">this</span>.ToolBarByCategory[menuCommand.MenuCatagory] = <span style=\"color:blue\">new</span> ToolBar();\r\n                <span style=\"color:blue\">this</span>.ToolBarTray.ToolBars.Add(<span style=\"color:blue\">this</span>.ToolBarByCategory[menuCommand.MenuCatagory]);\r\n            }\r\n\r\n            <span style=\"color:blue\">if</span> (menuCommand.ToolbarContent <span style=\"color:blue\">is</span> Image)\r\n            {\r\n                Image image = menuCommand.ToolbarContent <span style=\"color:blue\">as</span> Image;\r\n                image.Style = <span style=\"color:blue\">this</span>.Resources[<span style=\"color:#a31515\">&quot;ToolBarImageStyle&quot;</span>] <span style=\"color:blue\">as</span> Style;\r\n            }\r\n\r\n            <span style=\"color:blue\">this</span>.ToolBarByCategory[menuCommand.MenuCatagory].Items.Add(<span style=\"color:blue\">new</span> Button() { Content = menuCommand.ToolbarContent, Command = menuCommand.Command, ToolTip = menuCommand.ToolTip });\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n        \r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>That's pretty much it! Here's an example of one of my modules registering a menu and toolbar item:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RegisterCommands()\r\n        {\r\n            Image newIcon = <span style=\"color:blue\">new</span> Image();\r\n            newIcon.Source = <span style=\"color:blue\">new</span> BitmapImage(<span style=\"color:blue\">new</span> Uri(<span style=\"color:#a31515\">@&quot;/RBC1a.Client.Infrastructure;component/Images/new_48x48.png&quot;</span>, UriKind.Relative));\r\n\r\n            MenuCommandEntry newMenuCommand = <span style=\"color:blue\">new</span> MenuCommandEntry();\r\n            newMenuCommand.MenuCatagory = <span style=\"color:#a31515\">&quot;Volunteers&quot;</span>;\r\n            newMenuCommand.MenuItemName = <span style=\"color:#a31515\">&quot;New&quot;</span>;\r\n            newMenuCommand.ToolTip = <span style=\"color:#a31515\">&quot;New Volunteer&quot;</span>;\r\n            newMenuCommand.Command = VolunteerCommands.NewCommand;\r\n            newMenuCommand.KeyGesture = <span style=\"color:blue\">new</span> KeyGesture(Key.N, ModifierKeys.Control);          \r\n            newMenuCommand.ToolbarContent = newIcon;\r\n            newMenuCommand.OnToolBar = <span style=\"color:blue\">true</span>;\r\n            <span style=\"color:blue\">this</span>.RegisterMenuCommandEvent.Publish(newMenuCommand);\r\n\r\n            Image deleteIcon = <span style=\"color:blue\">new</span> Image();\r\n            deleteIcon.Source = <span style=\"color:blue\">new</span> BitmapImage(<span style=\"color:blue\">new</span> Uri(<span style=\"color:#a31515\">@&quot;/RBC1a.Client.Infrastructure;component/Images/delete_48x48.png&quot;</span>, UriKind.Relative));\r\n\r\n            MenuCommandEntry deleteMenuCommand = <span style=\"color:blue\">new</span> MenuCommandEntry();\r\n            deleteMenuCommand.MenuCatagory = <span style=\"color:#a31515\">&quot;Volunteers&quot;</span>;\r\n            deleteMenuCommand.MenuItemName = <span style=\"color:#a31515\">&quot;Delete&quot;</span>;\r\n            deleteMenuCommand.ToolTip = <span style=\"color:#a31515\">&quot;Delete Volunter(s)&quot;</span>;\r\n            deleteMenuCommand.Command = VolunteerCommands.DeleteCommand;\r\n            deleteMenuCommand.KeyGesture = <span style=\"color:blue\">new</span> KeyGesture(Key.D, ModifierKeys.Control);  \r\n            deleteMenuCommand.ToolbarContent = deleteIcon;\r\n            deleteMenuCommand.OnToolBar = <span style=\"color:blue\">true</span>;\r\n            <span style=\"color:blue\">this</span>.RegisterMenuCommandEvent.Publish(deleteMenuCommand);\r\n        }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Whether this is the best approach or not, who knows, but its working nicely for me!</p>\r\n<p>Cheers,</p>\r\n<p>Neil</p>\r\n<p>﻿﻿﻿</p>",
    "PostedDate": "2010-08-24T14:51:01.947-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "508453",
    "ThreadId": "224510",
    "Html": "<p>Why did you choose the event aproach instead of shared service aproach.<br>I see that your event has been published just one time for each metod. For this purpos wasn't better a public serivece used by all modules for publish his menu or toolbar items?</p>\r\n<p>regard.</p>",
    "PostedDate": "2010-10-17T07:17:31.25-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]