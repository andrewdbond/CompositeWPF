[
  {
    "Id": "829273",
    "ThreadId": "353784",
    "Html": "\r\n<p>Do you have an example application with your recommended approach for Handling NavigationFailed, i.e. exceptions thrown in the Navigation process?</p>\r\n<p>My problem is that I am using the&nbsp;INavigationAware interface, and based on parameters passed through to the ViewModel I want to get data from the database. Any errors in this process, shouldn't really be being handled by the navigation process, as I\r\n don't think it has much to do with navigation problems, as the actual navigation still completes. For example if I am unable to connect to the database, this isn't a navigation issue, and should be handled differently.</p>\r\n<p>I think the try catch on RequestNavigate should only really catch RegionNavigation exception's, not all Exception's. You should know when navigation errors are likely to occur, so throw navigationexceptions, anything you are not expecting should be picked\r\n up by the application's unhandled exceptions handler.</p>\r\n",
    "PostedDate": "2012-04-27T01:45:24.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "829488",
    "ThreadId": "353784",
    "Html": "<p>Hi,</p>\n<p>Based on my understanding, when an exception is raised during a navigation request the exception will be cached by the <strong>RegionNavigationService </strong>as you mentioned. However, when a navigation request fails, the <strong>NavigationFailed </strong>event will also be raised and the <strong>RegionNavigationFailedEventArgs </strong>that will be passed through this event will contain the aforementioned exception in its <strong>Error </strong>property. Therefore, a possible approach could be to subscribe to the <strong>NavigationFailed </strong>event before performing the <strong>NavigationRequest </strong>in order to receive any possible exceptions through that event.</p>\n<p>You can find more information about this in the following blog post:</p>\n<ul>\n<li><a href=\"http://blogs.southworks.net/gmaliandi/2011/08/how-to-prevent-region-navigation-from-hiding-%20exceptions-in-prism/\">How to prevent Region Navigation from hiding exceptions in Prism</a> </li>\n</ul>\n<p>Also, if you believe that this behavior should be changed so that the exceptions are not swallowed, you can vote in the following work item so that the team can analyze this request for future releases:</p>\n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/workitem/8613\">Change RegionManager.RequestNavigate so it doesn't swallow exceptions</a> </li>\n</ul>\n<p>I hope you find this useful,</p>\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-04-27T11:24:36.69-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "832121",
    "ThreadId": "353784",
    "Html": "<p>But if you were to subscribe to this failed event? How exactly would you recommend implementing this? Do you have a sample app?</p>",
    "PostedDate": "2012-05-04T04:09:09.627-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "832275",
    "ThreadId": "353784",
    "Html": "<p><br />Hi James,</p>\r\n<p>You could find more information about this and a possible example on how to subscribe to the <strong>NavigationFailed </strong>Event in Karl Shifflett's <a href=\"http://blogs.msdn.com/b/kashiffl/archive/2010/10/04/prism-v4-region-navigation-pipeline.aspx\">Prism v4 Region Navigation Pipeline</a>. (<strong>Region.NavigationService.NavigationFailed</strong><em> Event section</em>).</p>\r\n<p>The sample application provided in this blog post implements this approach. Particularly you could check how the <strong>NavigationFailed </strong>Event  is subscribed and handled in the <strong>ShellView </strong>code behind.</p>\r\n<p>Also, another approach to retrieve any exception that was thrown during navigation could be using the third optional argument in the <strong>RequestNavigate </strong>method, which allows to pass an <strong>Action&lt;NavigationResult&gt;</strong> callback. This delegate will be called at the end of the navigation request process, passing the result of the navigation request. The <strong>NavigationResult </strong>class defines properties that provide information about the navigation operation. The <strong>Result </strong>property indicates whether or not navigation succeeded. If navigation failed, the <strong>Error </strong>property provides a reference to any exception that was thrown during navigation, this is also explained in the aforementioned blog post.</p>\r\n<p>I hope you find this handy,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-05-04T10:12:42.707-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "833496",
    "ThreadId": "353784",
    "Html": "<p>Thanks for getting back to me.</p>\r\n<p>So for the NavigationFailed event, I would need to hookup events on a region by region basis? In my application I have a lot of different regions, and contextual regions. This doesn't seem to lend itself too well. I understand if you have one region and navigating using the navigationservice of that region. But I don't use that the majority of the time, I am often navigating to various different regions.</p>\r\n<p>Or I would have to do it on each navigation and declare a callback? My worry with this is, that with a few developers working on the project, they may well forget to add a callback, then suddenly errors are getting hidden.</p>\r\n<p>Ideally I would just have one hookup of the event in like the shell and handle it somewhere centrally. Is this not possible?</p>\r\n<p>I'm not sure what's best to do. I'm a bit worried that in either of these scenario's that exceptions will get hidden as someone has forgotten to wire something up. Anything that we have forgotten to handle should really be handled by the unhandled exception manager, therefore alerting us to do something with it.</p>",
    "PostedDate": "2012-05-08T08:13:48.37-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "833569",
    "ThreadId": "353784",
    "Html": "<p>Hi,</p>\n<p>Based on my understanding, a possible approach for handling the <strong>NavigationFailed </strong>event centrally for example in your shell like you mentioned, could be by subscribing to the <strong>Regions.CollectionChanged</strong> event, so that when a new region is added you could subscribe your centralize handler to the <strong>NavigationFailed </strong>event of this new region.</p>\n<p>For example the code in you <strong>ShellViewModel </strong>could look like in the following code snippet:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">public</span> ShellViewModel(IRegionManager regionManager)\n{\n            _regionManager = regionManager;\n\n            (...)\n\n            _regionManager.Regions.CollectionChanged += Regions_CollectionChanged;\n}\n\n(...)\n\n<span style=\"color: blue;\">void</span> Regions_CollectionChanged(<span style=\"color: blue;\">object</span> sender, NotifyCollectionChangedEventArgs e)\n{\n            <span style=\"color: blue;\">if</span>(e.Action == NotifyCollectionChangedAction.Add) {\n                <span style=\"color: blue;\">var</span> list = e.NewItems;\n                <span style=\"color: blue;\">foreach</span>(<span style=\"color: blue;\">var</span> item <span style=\"color: blue;\">in</span> list) {\n                    <span style=\"color: blue;\">var</span> region = item <span style=\"color: blue;\">as</span> Region;\n                    region.NavigationService.NavigationFailed += NavigationService_NavigationFailed;\n                }\n            }\n}\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>Regards,</p>\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-05-08T10:45:44.347-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "833862",
    "ThreadId": "353784",
    "Html": "<p>I would also need to somehow do this with my scoped region manager's wouldn't I? As I have multiple instances of a region within a PatientView.</p>",
    "PostedDate": "2012-05-09T01:13:59.867-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "833878",
    "ThreadId": "353784",
    "Html": "<p>So... Presumably I would just have to do this where ever I have a scoped Region Manager?</p>",
    "PostedDate": "2012-05-09T01:39:12.953-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "834127",
    "ThreadId": "353784",
    "Html": "<p>Hi James,</p>\r\n<p>As you mentioned, following the approach proposed above, you would have to subscribe to the <strong>CollectionsChanged </strong>event of the <strong>Region </strong>collection of each <strong>RegionManager </strong>you are using in your application. How to do this will depend mostly on your personal preferences and the requirements of your scenario.</p>\r\n<p>As a possible approach to extrapolate the aforementioned approach for multiple region managers, you could create a simple <strong>Shared Service</strong> which could subscribe to the <strong>CollectionChanged </strong>event of each region manager and expose an event which could be raised when a navigation request in any <strong>Region </strong>fails. For example, each time you inject a view with a scoped region manager, you pass that region manager to the service so that it will subscribe to its <strong>CollectionChanged </strong>event like in the above code snippet (it is not necessary to store the <strong>RegionManager </strong>inside the service, only the subscription.) Then, the <strong>Shell </strong>could subscribe to the event exposed by this service and when a navigation request fails the <strong>Shell </strong>will be notified of this through this event.</p>\r\n<p>You can find more information about Shared Services in the following section of the documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28v=pandp.40%29.aspx#sec7\">Chapter 9: Communicating Between Loosely Coupled Components - Shared Services</a></li>\r\n</ul>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-05-09T10:46:28.64-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "834426",
    "ThreadId": "353784",
    "Html": "<p>Cool yep thanks for all your help.</p>",
    "PostedDate": "2012-05-10T00:46:41.167-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1214401",
    "ThreadId": "353784",
    "Html": "Anyway you could set a flag of some sort to throw these error's normally? It has turned into a bit of a mess in my application wiring and un-wiring these events everywhere as it has grown more complex.\r<br />\n<br />\nIn 4.2 perhaps??<br />\n",
    "PostedDate": "2014-02-25T03:45:30.9-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1214746",
    "ThreadId": "353784",
    "Html": "Hi James, \r<br />\n<br />\nBased on my understanding <strong>Prism 4.2</strong> would not have changed this behaviour yet. as the following download site describes the list of updates performed.<br />\n<h1></h1>\n<ul>\n<li>\n<a href=\"https://compositewpf.codeplex.com/releases/view/117297\" rel=\"nofollow\">Prism 4.2 for .NET 4.5</a><br />\n</li>\n</ul>\nHowever, the following item related to this issue is open so you could vote for making the <strong><em>P&amp;P team</em></strong> fix it and update the library on a future release:<br />\n<h1></h1>\n<ul>\n<li>\n<a href=\"https://compositewpf.codeplex.com/workitem/8613\" rel=\"nofollow\">Change RegionManager.RequestNavigate so it doesn't swallow exceptions</a><br />\n</li>\n</ul>\nAnyway, you could always be able to modify the <strong>Prism Library</strong> and make the <strong><em>ExecuteNavigation()</em></strong> actually throws the exceptions as <strong><em>Guido Maliandi</em></strong> tells in his <a href=\"http://blogs.southworks.net/gmaliandi/2011/08/how-to-prevent-region-navigation-from-hiding-exceptions-in-prism/\" rel=\"nofollow\">post</a>.\r<br />\n<br />\nRegards.\r<br />\n<br />\nGabriel Ostrowsky\r<br />\n<a href=\"https://blogs.southworks.net/gostrowsky\" rel=\"nofollow\">https://blogs.southworks.net/gostrowsky</a><br />\n",
    "PostedDate": "2014-02-25T10:40:56.847-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1214995",
    "ThreadId": "353784",
    "Html": "Thank you! \r<br />\n<br />\nIt appears I must have already voted on this unfortunately and not remembered.\r<br />\n<br />\nHow would I go about modifying the library? Any chance of an example?<br />\n",
    "PostedDate": "2014-02-26T00:37:34.623-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1215215",
    "ThreadId": "353784",
    "Html": "Hi James,\r<br />\n<br />\nAs Guido Maliandi describes in his post linked above, you could modify the <strong><em>Catch</em></strong> block inside the <strong><em>ExecuteNavigation()</em></strong> method at <strong>RegionNavigationService</strong>. Therefore, you could rethrow the exception on the catch block after the <strong><em>NotifyNavigationFailed()</em></strong> call so the exception could be handled upwards on the call stack.\r<br />\n<br />\nBearing in mind that you would modify a service class, there are 2 alternatives for doing this:<br />\n<h1></h1>\n<ol>\n<li>Instead of adding all <strong>Prism Library</strong> assemblies, you could add the project <strong><em>Prism.Desktop.csproj</em></strong> to your solution instead, and then modify the <strong>RegionNavigationService</strong> class.</li>\n<li>Create a <strong>CustomRegionNavigationService</strong> class with the modification explained above, and then register this service on the <strong>BootStrapper</strong> before registering the default one. The <strong><em>ConfigureContainer()</em></strong> method would look like as follows:</li>\n</ol>\n<div style=\"color:Black;background-color:White;\"><pre>\r\n <span style=\"color:Blue;\">protected</span> <span style=\"color:Blue;\">override</span> <span style=\"color:Blue;\">void</span> ConfigureContainer()\n {\n      RegisterTypeIfMissing(<span style=\"color:Blue;\">typeof</span>(IRegionNavigationService), <span style=\"color:Blue;\">typeof</span>(CustomRegionNavigationService), <span style=\"color:Blue;\">false</span>);\n       \n      <span style=\"color:Blue;\">base</span>.ConfigureContainer();\n }\r\n</pre></div>I hope this helped you, \r<br />\nRegards.\r<br />\n<br />\nGabriel Ostrowsky.\r<br />\n<a href=\"https://blogs.southworks.net/gostrowsky\" rel=\"nofollow\">https://blogs.southworks.net/gostrowsky</a><br />\n",
    "PostedDate": "2014-02-26T09:17:38.643-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1215983",
    "ThreadId": "353784",
    "Html": "Cool thanks, so I've created a CustomRegionNavigationService and changed the following. Is this correct?<br />\n<pre><code>    private void ExecuteNavigation(NavigationContext navigationContext, object[] activeViews, Action&lt;NavigationResult&gt; navigationCallback)\n    {\n        try\n        {\n            NotifyActiveViewsNavigatingFrom(navigationContext, activeViews);\n\n            Tuple&lt;object, IRegionManager&gt; tuple = this.regionNavigationContentLoader.LoadContent(this.Region, navigationContext);\n\n            // Raise the navigating event just before activing the view.\n            this.RaiseNavigating(navigationContext);\n\n            this.Region.Activate(tuple.Item1);\n\n            // Update the navigation journal before notifying others of navigaton\n            IRegionNavigationJournalEntry journalEntry = this.serviceLocator.GetInstance&lt;IRegionNavigationJournalEntry&gt;();\n            journalEntry.Uri = navigationContext.Uri;\n            this.journal.RecordNavigation(journalEntry);\n\n            // The view can be informed of navigation\n            InvokeOnNavigationAwareElement(tuple.Item1, (n) =&gt; n.OnNavigatedTo(navigationContext));\n\n            navigationCallback(new CustomNavigationResult(navigationContext, true, tuple.Item2));\n\n            // Raise the navigated event when navigation is completed.\n            this.RaiseNavigated(navigationContext);\n        }\n        catch (Exception e)\n        {\n            this.NotifyNavigationFailed(navigationContext, navigationCallback, e);\n            throw e;\n        }\n    }\n</code></pre>\n\nand<br />\n<pre><code>    public void RequestNavigate(Uri target, Action&lt;NavigationResult&gt; navigationCallback)\n    {\n        if (navigationCallback == null) throw new ArgumentNullException(&quot;navigationCallback&quot;);\n\n        try\n        {\n            this.DoNavigate(target, navigationCallback);\n        }\n        catch (Exception e)\n        {\n            this.NotifyNavigationFailed(new NavigationContext(this, target), navigationCallback, e);\n            throw e;\n        }\n    }</code></pre>\n\n",
    "PostedDate": "2014-02-28T00:42:21.667-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1216149",
    "ThreadId": "353784",
    "Html": "Hi James,\r<br />\n<br />\nThe changes you mentioned would be correct. That way, the <strong><em>RequestNavigate()</em></strong> method would throw the exception in order to let you handle it on the method that calls the <strong>Navigation</strong>.\r<br />\n<br />\nNevertheless, I would like to point out to you that there are two different alternatives of rethrowing the exception and you may want to consider the best option for your implementation:<br />\n<h1></h1>\n<ul>\n<li>\n<strong>throw e;</strong> would make the stack trace reset to the current catch location, which could be significantly different from where the original exception was thrown. It is considered as a CA violation.<br />\n</li>\n<li>\n<strong>throw;</strong> however, would preserve the original stack trace so you would be able to properly debug the issue.<br />\n</li>\n</ul>\nYou can find more information on the following <strong>MSDN</strong> links:<br />\n<h1></h1>\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/1ah5wsex.aspx\" rel=\"nofollow\">throw (C# Reference)</a></li>\n<li>\n<a href=\"http://msdn.microsoft.com/en-us/library/ms182363.aspx\" rel=\"nofollow\">CA2200: Rethrow to preserve stack details</a><br />\n</li>\n</ul>\nRegards.\r<br />\nGabriel Ostrowsky.\r<br />\n<a href=\"https://blogs.southworks.net/gostrowsky\" rel=\"nofollow\">https://blogs.southworks.net/gostrowsky</a><br />\n",
    "PostedDate": "2014-02-28T07:13:46.987-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1216215",
    "ThreadId": "353784",
    "Html": "I see! I didn't know that no. Thanks for your help!<br />\n",
    "PostedDate": "2014-02-28T09:15:21.433-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]