[
  {
    "Id": "228766",
    "ThreadId": "67307",
    "Html": "<p>When databinding within a module what is the best practice for event routing?&nbsp; I have been working with the pure XAML code here <a href=\"http://blogs.msdn.com/tolong/archive/2006/12/20/bind-controls-to-rss-feed-using-wpf.aspx\">http://blogs.msdn.com/tolong/archive/2006/12/20/bind-controls-to-rss-feed-using-wpf.aspx</a>.&nbsp; In that XAML we have a xmldataprovider and we are&nbsp;calling an&nbsp;rss &lt;link&gt; through XPath query&nbsp;by&nbsp;wrapping a stackpanel, dockpanel, listbox, and frame in the same binding.&nbsp; Works great in pur XAML if everything is in the same window, control, or view.</p>\r\n<p>I broke the frame out into a seperate region from the listbox control to leverage the composite application approach.&nbsp; When a new feed is selected in the listbox I would like the selectionchanged event&nbsp;(or some property changing event - or any event)&nbsp;to notify the frame that its XPath=link source has changed.&nbsp; Since I am working within a module I would prefer this to be in pure XAML, but it seems like I need to do some code behind and event routing.&nbsp; Since the event and source change occurs within a view should I use INotifypropertychange - or should I somehow leverage the IEventAggregator since I am working within a composite application and attempting to use the CAL practice guidance?</p>\r\n<p>Conceptually it seems like I could tackle the problem either way.&nbsp; However, my approaches to date have failed in part because I cannot find a method type that updates the frame source XPath through databinding.&nbsp; I would like to avoid&nbsp;parsing the XPath link and then passing a string (XPath to string would be the method I assume).&nbsp; This seems to defeat the whole&nbsp;purpose of inheretance, and the fact that the XPath is supposed to grab the link through binding with no-muss-no-fuss.&nbsp; Any suggestions would be greatly appreciated.&nbsp; Examples would be even more so.</p>",
    "PostedDate": "2009-08-28T09:33:40.637-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "229415",
    "ThreadId": "67307",
    "Html": "<p>Hi</p>\r\n<p>If I understand your scenario correctly you have two different views in the same module. One of them has a listbox (lets call it <strong>ListBoxView</strong>)and the other one shows some information in a frame, changing a source based on the selected item in the ListBoxView (lets call this <strong>FrameView</strong>). You can use the <a href=\"http://msdn.microsoft.com/en-us/magazine/dd458800.aspx\">MVVM pattern</a> which will allow you to maximize the usage of databinding and reduce the view's code behind. One possible way to achieve this interaction would be like this:</p>\r\n<ol>\r\n<li>Have a property in the ViewModel of the <strong>ListboxView</strong> that relates to the currently selected item. </li>\r\n<li>Publish an event, which as you said can be NotifyPropertyChanged, which can be handled by a component in the module that is in charge of orchestrating the entire module's interaction. It can be something like a controller. </li>\r\n<li>The controller handles the event by updating in the FrameViewModel's &quot;Source&quot; property. This propery is binded in XAML to the Frame's source property. </li>\r\n</ol>\r\n<p>A couple of months ago we created a <a href=\"http://blogs.southworks.net/dschenkelman/2009/06/23/webbrowser-control-quickstart-for-the-composite-application-guidance-for-wpf-and-silverlight-prism-v2/\">demo application</a> that leverages a similar scenario. Not all functionality is implemented as I explained above, but it can be a good starting point.</p>\r\n<p>Please let me know if this helps.</p>\r\n<p>Damian Schenkelman    <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2009-08-31T10:35:53.383-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]