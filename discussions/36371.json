[
  {
    "Id": "120641",
    "ThreadId": "36371",
    "Html": "If my module through an exception, the the GUI does not handle it...<br>\r\nWhat can I do about it?<br>\r\nThankx, Harry\r\n",
    "PostedDate": "2008-09-24T07:45:19.88-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "120699",
    "ThreadId": "36371",
    "Html": "<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:Calibri\">Hi</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:Calibri\">&nbsp;</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:Calibri\">You can subscribe to the <b>UnhandledException</b> event of the Current Application Domain to handle all the exceptions in the Shell project. </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:Calibri\">Take a look to the <b>App</b> class located in the <b>StockTraderRI</b> project of the <b>Stock Trader Reference Implementation</b> source code. The reference implementation also uses the </span><a href=\"http://msdn.microsoft.com/en-us/library/cc511522.aspx\"><span style=\"font-family:Calibri\">Exception Handling Application Block</span></a><span style=\"font-family:Calibri\"> to handle the exceptions. The following code is and abstract of the <b>App</b> class.</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:Calibri\">&nbsp;</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;color:green;font-family:'Courier New'\">// App class</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\">private</span><span style=\"font-size:10pt;font-family:'Courier New'\"> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> RunInReleaseMode()</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;color:#2b91af;font-family:'Courier New'\">AppDomain</span><span style=\"font-size:10pt;font-family:'Courier New'\">.CurrentDomain.<b>UnhandledException</b> += <b>AppDomainUnhandledException</b>;</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\">try</span> </p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;font-family:'Courier New'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt 1in\"><span style=\"font-size:10pt;color:#2b91af;font-family:'Courier New'\">UnityBootstrapper</span><span style=\"font-size:10pt;font-family:'Courier New'\"> bootstrapper = <span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">StockTraderRIBootstrapper</span>();</span></p>\r\n<p style=\"margin:0in 0in 0pt 1in\"><span style=\"font-size:10pt;font-family:'Courier New'\">bootstrapper.Run();</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;font-family:'Courier New'\">}</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\">catch</span><span style=\"font-size:10pt;font-family:'Courier New'\"> (<span style=\"color:#2b91af\">Exception</span> ex)</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;font-family:'Courier New'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt 1in\"><span style=\"font-size:10pt;font-family:'Courier New'\">HandleException(ex);</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;font-family:'Courier New'\">}</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">}</span></p>\r\n<p style=\"margin:0in 0in 0pt 26.4pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\">private</span><span style=\"font-size:10pt;font-family:'Courier New'\"> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> <b>AppDomainUnhandledException</b>(<span style=\"color:blue\">object</span> sender, <span style=\"color:#2b91af\">UnhandledExceptionEventArgs</span> e)</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;font-family:'Courier New'\">HandleException(e.ExceptionObject <span style=\"color:blue\">as</span> <span style=\"color:#2b91af\">Exception</span>);</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">}</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\">private</span><span style=\"font-size:10pt;font-family:'Courier New'\"> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> HandleException(<span style=\"color:#2b91af\">Exception</span> ex)</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\">if</span><span style=\"font-size:10pt;font-family:'Courier New'\"> (ex == <span style=\"color:blue\">null</span>)</span></p>\r\n<p style=\"margin:0in 0in 0pt 1in\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\">return</span><span style=\"font-size:10pt;font-family:'Courier New'\">;</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;color:#2b91af;font-family:'Courier New'\">ExceptionPolicy</span><span style=\"font-size:10pt;font-family:'Courier New'\">.HandleException(ex, <span style=\"color:#a31515\">&quot;Default Policy&quot;</span>);</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;color:#2b91af;font-family:'Courier New'\">MessageBox</span><span style=\"font-size:10pt;font-family:'Courier New'\">.Show(StockTraderRI.Properties.<span style=\"color:#2b91af\">Resources</span>.UnhandledException);</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;color:#2b91af;font-family:'Courier New'\">Environment</span><span style=\"font-size:10pt;font-family:'Courier New'\">.Exit(1);</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">}</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:Calibri\">&nbsp;</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:Calibri\">Please let me know if this helps.</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">Mariano Converti</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><a href=\"http://blogs.southworks.net/mconverti\"><span><span style=\"font-family:Calibri\">http://blogs.southworks.net/mconverti</span></span></a> </p>\r\n",
    "PostedDate": "2008-09-24T10:46:06.677-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "120842",
    "ThreadId": "36371",
    "Html": "Thankx&nbsp;Mariano. I have implemented it and it works for some of the exceptions.<br>\r\nIt does not work for exceptions, which happens in another &quot;module&quot; / &quot;types&quot;.<br>\r\n<br>\r\nI have my shell where I load 2 modules:<br>\r\n<br>\r\n<p><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">return</span></span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">new</span></span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">StaticModuleEnumerator</span></span><span style=\"font-size:13px\">()<br>\r\n</span><span style=\"font-size:13px\">.AddModule(</span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">typeof</span></span><span style=\"font-size:13px\">(Xxx.WpfUi.FormDocumentModule.</span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">FormDocumentModule</span></span><span style=\"font-size:13px\">))<br>\r\n</span><span style=\"font-size:13px\">.AddModule(</span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">typeof</span></span><span style=\"font-size:13px\">(Xxx.WpfUi.CommonModule.</span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">CommonModule</span></span><span style=\"font-size:13px\">));<br>\r\n<br>\r\nIn <span style=\"font-size:13px\">Xxx.WpfUi.CommonModule.<span style=\"color:#2b91af\"><span style=\"color:#2b91af\">CommonModule</span></span></span> I register the following type:<br>\r\n<br>\r\n<span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">this</span></span><span style=\"font-size:13px\">.unityContainer.RegisterType&lt;Xxx.Manager.</span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">Context</span></span><span style=\"font-size:13px\">&gt;(</span><span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">new</span></span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">ContainerControlledLifetimeManager</span></span><span style=\"font-size:13px\">());<br>\r\n</span><br>\r\nI then use this type in&nbsp;<span style=\"font-size:13px\">Xxx.WpfUi.FormDocumentModule.<span style=\"color:#2b91af\"><span style=\"color:#2b91af\">FormDocumentModule</span></span></span>.<br>\r\n<span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\"><br>\r\npublic</span></span><span style=\"font-size:13px\"> XxxPresenter(</span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">IUnityContainer</span></span><span style=\"font-size:13px\"> container, </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">IRegionManager</span></span><span style=\"font-size:13px\"> regionManager, </span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">IFormDocumentNavigationView</span></span><span style=\"font-size:13px\"> view, Xxx.Manager.</span><span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">Context</span></span><span style=\"font-size:13px\"> dataContext) <br>\r\n<br>\r\n</span>If an exception occurs in the&nbsp;Xxx.Manager.<span style=\"color:#2b91af;font-size:13px\"><span style=\"color:#2b91af;font-size:13px\">Context </span></span>it does not get thrown back to the module.<br>\r\n<br>\r\nAny idea why this is?</span></p>\r\n",
    "PostedDate": "2008-09-24T22:35:24.37-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "477435",
    "ThreadId": "36371",
    "Html": "<p>This may not be the correct place to post this, but I'm rather new to Prism and this discussion seems close to what I want to figure out how to do.</p>\r\n<p>I'm looking for a way to catch any and all unhandled exceptions in my WPF Browser Application at the Shell instead of the App. This way we can have a universal error response to indicate a problem has arisen to the user. Any indication to how I can accomplish this would be greatly appreciated.</p>",
    "PostedDate": "2010-08-06T09:44:01.84-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "560878",
    "ThreadId": "36371",
    "Html": "\r\n<p>I am having the same issues as iwhp1.&nbsp; I implemented the code provided by Mariano (and the StockTraderRI example project) in app.xaml.cs&nbsp;but I cannot get the\r\n<strong>AppDomainUnhandledException</strong>&nbsp;to handle any expections that occur&nbsp;in a module.&nbsp; Our hope was to pass all errors on to that exception handler, so we are actually catching and rethrowing errors with the intention of that handler\r\n dealing with them all.&nbsp;</p>\r\n<p>We have considered creating a separate module for error handling and passing errors to that module when we catch them, but we would still like something in place for any unhandled errors that may occur.</p>\r\n<p>Any help on this would be appreciated.</p>\r\n",
    "PostedDate": "2011-02-04T09:29:52.243-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "720641",
    "ThreadId": "36371",
    "Html": "<p>Thanks a lot, It was really helpfull i was stuck in this problem</p>\r\n<p>&nbsp;</p>\r\n<p>Vikram</p>",
    "PostedDate": "2012-01-04T22:14:41.997-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]