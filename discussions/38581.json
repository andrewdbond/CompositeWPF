[
  {
    "Id": "127984",
    "ThreadId": "38581",
    "Html": "Hi,<br>\r\nHow can I get an instance of the module, which has been initiated inside the Shell application?<br>\r\n<br>\r\nThanks,<br>\r\n<br>\r\nMorteza\r\n",
    "PostedDate": "2008-10-27T04:34:51.24-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "128289",
    "ThreadId": "38581",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi,</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">If you are overriding the <b>InitializeModules()</b> method, you could register the instance of the module and give a name to  it, so that you can get it via the Container as follows:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:#00b050;font-family:'courier new'\">//Creating the module</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:#4bacc6;font-family:'courier new'\">IModule</span><span style=\"font-size:10pt;font-family:'courier new'\"> myModule = myContainer.Resolve&lt;<span style=\"color:#4bacc6\">MyModule</span>&gt;();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">myContainer.RegisterInstance&lt;<span style=\"color:#4bacc6\">IModule</span>&gt;(<span style=\"color:#c00000\">&quot;MyModule&quot;</span>, myModule);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">If you are using any of the module enumerators together with the module loader, you may follow this approach registering the instance of the module inside the constructor of the module. I.e: </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">public</span><span style=\"font-size:10pt;font-family:'courier new'\"> MyModule(<span style=\"color:#4bacc6\">IUnityContainer</span> container)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    container.RegisterInstance&lt;<span style=\"color:#4bacc6\">IModule</span>&gt;(<span style=\"color:#c00000\">&quot;MyModule&quot;</span>, <span style=\"color:blue\">this</span>);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d;font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Then, to retrieve the right instance of the IModule class you could use the container in the following way:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:#00b050;font-family:'courier new'\">//Retrieving the module</span> </p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:#4bacc6;font-family:'courier new'\">IModule</span><span style=\"font-size:10pt;font-family:'courier new'\"> myModule = myContainer.Resolve&lt;<span style=\"color:#4bacc6\">IModule</span>&gt;(<span style=\"color:#c00000\">&quot;MyModule&quot;</span>);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d;font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">If these are not your scenario, please provide more information about it.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hope it helps.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Ignacio Baumann Fonay</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><a href=\"http://blogs.southworks.net/ibaumann/\"><span style=\"color:#0000ff;font-family:calibri\">http://blogs.southworks.net/ibaumann/</span></a> </p>\r\n",
    "PostedDate": "2008-10-28T07:07:55.48-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "128526",
    "ThreadId": "38581",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">Hi,</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">Thank you very much for the explanation. I began to look at composite WPF this week and as I can see, there is much to learn. I began with the HelloWorld hands on and I wanted to send a click event from the module to the shell and close the whole application by calling Close inside the shell, but I stuck on how I can get hold on the right instance of the module. Now I’m going thru all the quick start and I’m looking into EventAggregation.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">I tried your way, but some how I couldn’t get the correct container inside the shell(I think). I used the following code inside the Shell.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"> </p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:#2b91af;font-family:'courier new'\">IUnityContainer</span><span style=\"font-size:10pt;font-family:'courier new'\"> myContainer = <span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">UnityContainer</span>();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:#2b91af;font-family:'courier new'\">IModule </span><span style=\"font-size:10pt;font-family:'courier new'\">myModule = myContainer.Resolve&lt;<span style=\"color:#2b91af\">IModule</span>&gt;(<span style=\"color:#a31515\">&quot;MyModule&quot;</span>);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">But this always end up with the exception</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">“ <span style=\"color:red\">IModule, is an interface and cannot be constructed. Are you missing a type mapping? (Strategy type Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy, index 2)”</span>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">I tried to use the module type as well with the same result. Anyway I will change my way of thinking and try to use the framework instead for passing the events.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">Thank you so much for your time.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">Best Regards</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">Morteza </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"></span></p>\r\n</span></p>\r\n",
    "PostedDate": "2008-10-29T01:13:09.56-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "128631",
    "ThreadId": "38581",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi,</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">The exception you are getting happens as you are creating a new container and, when the container tries to resolve the IModule interface, it doesn’t find any instance registered with that interface so it tries to build the interface.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:calibri\">If you are trying to send events between modules and shell, you should use the </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707867.aspx\"><span style=\"color:#0000ff;font-family:calibri\">EventAggregator</span></a><span style=\"font-family:calibri\"> service (as you are looking into the Event Aggregation QuickStart now). Perhaps, you may find helpful the following articles:</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 54.6pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707855.aspx\"><span style=\"color:#0000ff;font-family:calibri\">How to: Create and Publish Events</span></a><span style=\"font-family:calibri\">.</span>\r\n<p style=\"margin:0cm 0cm 0pt 54.6pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707892.aspx\"><span style=\"color:#0000ff;font-family:calibri\">How to: Subscribe and Unsubscribe to Events</span></a><span style=\"font-family:calibri\">.</span>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:calibri\">If you want to perform logic behind the Shell, I recommend you to provide the Shell with a Presenter (as shown in the </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707869.aspx\"><span style=\"color:#0000ff;font-family:calibri\">StockTrader Reference Implementation</span></a><span style=\"font-family:calibri\">) or with a Presentation Model (as shown in </span><a href=\"http://blogs.southworks.net/jdominguez/2008/09/presentation-model-with-datatemplates-in-compositewpf-prism-sample/\"><span style=\"color:#0000ff;font-family:calibri\">Presentation Model with DataTemplates in CompositeWPF (Prism) Sample</span></a><span style=\"font-family:calibri\">; this is a little more advanced topic). Then, for example, when resolving the presenter, you can get the container via the constructor, as follows:</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:#00b050;font-family:'courier new'\">//ShellPresenter.cs</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">public</span><span style=\"font-size:10pt;font-family:'courier new'\"> ShellPresenter(<span style=\"color:#4bacc6\">IShellView</span> view, <span style=\"color:#4bacc6\">IUnityContainer</span> container)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    View = view;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    Container = container;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">public</span><span style=\"font-size:10pt;font-family:'courier new'\"> <span style=\"color:#4bacc6\">IShellView</span> View { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">private</span> <span style=\"color:blue\">set</span>; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">public</span><span style=\"font-size:10pt;font-family:'courier new'\"> <span style=\"color:#4bacc6\">IUnityContainer</span> Container { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">private</span> <span style=\"color:blue\">set</span>; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"><b><i>NOTE:</i></b><i><span> The IShellView is an interface you provide to register and get the Shell window, as shown in the <b>StockTrader Reference Implementation</b>.</span></i></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d;font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">However, you must take into account that the Shell is created <b><i>before</i></b> the modules are loaded, so you must find a way to notify the presenter (or the PM) when these have finished loading. One possible approach would be to override the <b>InitializeModules()</b> method in the <b>Bootstrapper</b> and, after calling base.InitializeModules(), notify the presenter:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">protected override void</span><span style=\"font-size:10pt;font-family:'courier new'\"> InitializeModules()</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    <span style=\"color:blue\">base</span>.InitializeModules();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    <span style=\"color:#00b050\">//notify via the EventAggregator or the interface</span>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d;font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Moreover, if you have only one Shell window, you may retrieve it as follows:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:#4bacc6;font-family:'courier new'\">Window</span><span style=\"font-size:10pt;font-family:'courier new'\"> mainWindow = <span style=\"color:#4bacc6\">Application</span>.Current.MainWindow;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Please, let me know if this helps.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Ignacio Baumann Fonay</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><a href=\"http://blogs.southworks.net/ibaumann/\"><span style=\"color:#0000ff;font-family:calibri\">http://blogs.southworks.net/ibaumann/</span></a> </p>\r\n</span></p>\r\n</span></p>\r\n</span></p>\r\n",
    "PostedDate": "2008-10-29T08:26:44.15-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "128682",
    "ThreadId": "38581",
    "Html": "Hi,<br>\r\nThanks a lot, and yes, it helped a great deal. I followed the quick starts and managed to create an EventService for my application. Now it is totally possible to publish and subscribe to event using EventService in both directions, Shell to Modules and Modules to Shell. I did actually used presenter and interface for Shell, which made the communication more easy to implement and understand. Thank you again for the great support.<br>\r\n<br>\r\nBest Regards<br>\r\nMorteza\r\n",
    "PostedDate": "2008-10-29T11:22:35.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "686730",
    "ThreadId": "38581",
    "Html": "<p>I know this post is already really old but I'm trying to get exactly the same, just with MEF.</p>\r\n<p>I loaded a module of a specific interface (ILoginModule), which provides eventhandler-methods. After loading the module I need to register the event handler with the specific event (from the WebContext.Current.Authentication).</p>\r\n<p>Trying to resolve the container in the initializeMethod() like &nbsp;Container.GetExportedValue&lt;ILoginModule&gt;() doesn't work. But the element is surely inside the container, because I can see it by debugging the project inside the&nbsp;Container.Catalog.Parts-Attribute.</p>\r\n<p>&nbsp;</p>\r\n<p>Any suggestions how I could reach the ILoginModule-instance in order to register the eventhandlers automatically?</p>",
    "PostedDate": "2011-10-20T00:25:48.127-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "686835",
    "ThreadId": "38581",
    "Html": "<p>Hi,</p>\r\n<p>In my opinion, it would be better to place the logic for your component in a shared service rather than the module class itself. Module classes (those that implement the <strong>IModule </strong>interface) are usually used just to perform initialization logic for the module's components, i.e. to export views to regions and services to the container, and perhaps a little configuration stuff, but not the actual logic.</p>\r\n<p>You could have for example a login service, exported to the container using an <strong>ILoginService </strong>interface as the contract type, and thus retrieved by other dependent components in the form of an import, using constructor injection, the service locator, or any other way you find most comfortable from retrieving it from the container.</p>\r\n<p>You can find more about shared services in the following section from the Communication Chapter in the Prism MSDN Documentation:</p>\r\n<p><strong></strong><strong><a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28PandP.40%29.aspx#sec7\">Shared Services</a></strong></p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi&nbsp;<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-10-20T05:49:35.287-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "686846",
    "ThreadId": "38581",
    "Html": "<p>Thank you for your reply! :)</p>\n<p>But I'm not sure how a service could solve the \"problem\"?<br /> Maybe I should provide some more informations...</p>\n<p>I have an Interface ILogiModule, which has for instance 2 methods:</p>\n<p><span style=\"white-space: pre;\">&nbsp;</span>void LoggedIn();<br /> <span style=\"white-space: pre;\">&nbsp;</span>void LoggedOut();</p>\n<p>Additionally I'm using for a Silverlight-Application the Authentication-Service from ASP.NET via WCF RIA Services.</p>\n<p>Currently I register the eventhandler in the Initialize-Methods for each ILoginModule-implementation. For instance in the FormsLoginModule : IloginModule inside the Initialize() Method:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre>        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Initialize()\n        {\n            WebContext.Current.Authentication.LoggedIn += <span style=\"color: blue;\">this</span>.LoggedIn;\n            WebContext.Current.Authentication.LoggedOut += <span style=\"color: blue;\">this</span>.LoggedOut;\n        }\nand also the same for a WindowsLoginModule : ILoginModule.<br />&nbsp;</pre>\n<pre>Because I'm planing to give other developers the possibility to program against the ILoginModule-Interface would it be cool, to move this code snipped above into the bootstrapper,<br />so that an ILoginModule-programer could trust the application, that it calls the LoggedIn()/LoggedOut() methods without caring about when or how they are callen.</pre>\n<pre>With a service I still need to register each module inside in the module to the events - either for the ASP.NET-Authentication event's (as above) or to the events of a service (like shown in your link).&nbsp;</pre>\n<pre>I hope I could make it a little bit more clear and that I haven't overlooked anything in your posted article, which would solve my plans better.</pre>\n</div>",
    "PostedDate": "2011-10-20T06:21:41.88-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "686894",
    "ThreadId": "38581",
    "Html": "<p>Hi,</p>\r\n<p>You could place the methods and events that you're currently defining in your <strong>ILoginModule </strong>interface on a service that implements its own interface. The interface for that service could be placed on an infrastructure project, which would be then referenced throughout all your modules, and the module containing that service will only be concerned with exporting this particular implementation of that service in the container, so that other components (possibly placed in other modules that do not reference the module that defines the implementation) can consume it only knowing the interface.</p>\r\n<p>To understand this, it's important to know that modules are mainly intended to group a set of functionality in the form of services and views; the <strong>IModule </strong>interface in this context is just a useful way to make sure that an <strong>Initialize </strong>method will be called as soon as the module project is loaded, so as to define a safe place to put all the initialization logic. While in theory your <strong>IModule </strong>class could contain authentication logic, it would be, in my opinion, mixing the responsibilities of your  objects (as your module class would be responsible for both  authenticating, and initializing miscellaneous views and services).</p>\r\n<p>In your case, you could abstract the precise details of the Authentication-Service from ASP.NET that you consume through WCF Ria Services inside your service, and only expose it through an interface, so that other programmers do not need to be aware of the internals of your solution for authenticating; they will just have a notion of what it is to \"log in\" and to \"log out\" using a service retrieved from the container.</p>\r\n<p>You might find the following blog post useful, which shows a possible scenario where the aforementioned approach is implemented:<a href=\"http://blogs.southworks.net/gmaliandi/2011/10/authentication-and-role-based-authorization-in-prism-v4/\"></a></p>\r\n<p><a href=\"http://blogs.southworks.net/gmaliandi/2011/10/authentication-and-role-based-authorization-in-prism-v4/\">Authentication and role based authorization in Prism v4</a> (even though the blog post shows an example using a mocked services, the idea should be the same for a real one using WCF Ria Services)</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi&nbsp;<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-10-20T07:18:03.687-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]