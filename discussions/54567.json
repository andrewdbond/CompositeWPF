[
  {
    "Id": "183993",
    "ThreadId": "54567",
    "Html": "<div>Hi,</div><div><br></div><div>I've created a dynamic search system and i've got a number of different View's to display the results.</div><div><br></div><div>I've got a SearchCompletedEvent&lt;T&gt; Composite event and i'd like to dynamically raise the event based on the type rather than calling</div><div><br></div><div>if (this.SearchType.Type == typeof(Vehicle)</div><div>{</div><div><span style=\"white-space:pre\">\t</span>_eventAggregator.GetEvent&lt;SearchCompletedEvent&lt;Vehicle&gt;&gt;().Publish(results);<br></div><div>}</div><div>else if (this.SearchType.Type == typeof(Manufacturer)</div><div>{</div><div><div><span style=\"white-space:pre\">\t</span>_eventAggregator.GetEvent&lt;SearchCompletedEvent&lt;Manufacturer&gt;&gt;().Publish(results);<br></div><div>}</div><div><br></div><div>I'd prefer to do something like </div><div><br></div><div><div>Type genericType = typeof(SearchCompletedEvent&lt;&gt;).MakeGenericType(this.SearchType.Type);</div><div>_eventAggregator.GetEvent&lt;genericType&gt;().Publish(results);</div><div><br></div><div>I know the above dosnt work - but hopefully it will illustrate what i'm trying to get to.</div><div><br></div><div>Does anyone know how to do this?  Or alternatively have any better solutions for doing something similar?</div><div><br></div><div>Any help greatly appreciated!</div><div><br></div><div>Thanks,</div><div><br>Andy</div></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div></div>",
    "PostedDate": "2009-04-27T02:13:08.087-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "184692",
    "ThreadId": "54567",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi Andy,</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">It might not be the best approach, but there is a way of dynamically creating TEventTypes by reflection. Keep in mind that using reflection might have some performance side effects (especially if you are going to call this method several times).</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">You will also have to invoke the publish method by reflection, so maybe another approach might be better (in performance, testability, etc).</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Having said that, the way to dynamically get the event would be as follows:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:#2b91af;font-family:'courier new'\">      Type</span><span style=\"font-size:10pt;font-family:'courier new'\"> genericType = <span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">SearchCompletedEvent</span>&lt;&gt;).MakeGenericType(</span><span style=\"font-size:9.5pt;color:#30332d;font-family:'segoe ui','sans-serif'\">this.SearchType.Type);</span> </p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">      <span style=\"color:#2b91af\">MethodInfo</span> getEventMethod = _eventAggregator.GetType().GetMethod(<span style=\"color:#a31515\">&quot;GetEvent&quot;</span>);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">      <span style=\"color:#2b91af\">MethodInfo</span> genericGetEventMethod = getEventMethod.MakeGenericMethod(<span style=\"color:blue\">new</span> <span style=\"color:#2b91af\">Type</span>[] { genericType });</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">object</span><span style=\"font-size:10pt;font-family:'courier new'\"> eventToPublish = genericGetEventMethod.Invoke(<span style=\"color:blue\">this</span>._eventAggregator, <span style=\"color:blue\">null</span>);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">You have the event now, but you won't be able to cast it (things like</span><span style=\"font-size:10pt;font-family:'courier new'\"> (<span style=\"color:#2b91af\">SearchCompletedEvent</span>&lt;<span style=\"color:blue\">object</span>&gt;) eventToPublish) </span><span style=\"font-family:calibri\">won't work) and the base class <b>EventBase</b> has no <b>Publish</b> method, so you will have to invoke <b>Publish()</b> by reflection as well. You can do this as follows:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">                </span><span style=\"font-size:10pt;color:#2b91af;font-family:'courier new'\">MethodInfo</span><span style=\"font-size:10pt;font-family:'courier new'\"> publishMethod = eventToPublish.GetType().GetMethod(<span style=\"color:#a31515\">&quot;Publish&quot;</span>);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">      publishMethod.Invoke(eventToPublish, <span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>[] { <span style=\"color:blue\">null</span> });</span> </p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Though it's a different approach, you might find the  following solution suitable: <span style=\"color:#1f497d\">y</span>ou can define a generic abstract class ( for example <b>Searchable&lt;T&gt;</b> in for scenario) that  defines a <b>GetEvent</b> method as follows:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">public</span><span style=\"font-size:10pt;font-family:'courier new'\"> <span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">Searchable</span>&lt;T&gt;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">            {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">            <span style=\"color:blue\">public</span> <span style=\"color:#2b91af\">SearchCompletedEvent</span>&lt;T&gt; GetEvent(<span style=\"color:#2b91af\">IEventAggregator</span> _eventAggregator)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">            {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">                <span style=\"color:blue\">return</span> _eventAggregator.GetEvent&lt;<span style=\"color:#2b91af\">SearchCompletedEvent</span>&lt;T&gt;&gt;();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">            </span><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">      }</span> </p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">All the classes that you want to publish a <b>SearchCompletedEvent</b> can now inherit from this class. For example:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;color:blue;font-family:'courier new'\">public</span><span style=\"font-size:10pt;font-family:'courier new'\"> <span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">Vehicle</span> : <span style=\"color:#2b91af\">Searchable</span>&lt;<span style=\"color:#2b91af\">Vehicle</span>&gt;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">      .....</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 35.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">This way you will enable you to do something like </span><span style=\"font-size:9.5pt;color:#30332d;font-family:'segoe ui','sans-serif'\">this.SearchType.GetEvent(this._eventAggregator).publish(result) </span><span style=\"font-family:calibri\">without using reflection. <b>Drawback:</b> you will have to review the class  hierarchy<span style=\"color:#1f497d\">.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hope it helps!</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Matias Bonaventura</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><a href=\"http://blogs.southworks.net/\"><span style=\"font-family:calibri\">http://blogs.southworks.net/matiasb</span></a></p>\r\n",
    "PostedDate": "2009-04-28T13:28:11.033-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "211668",
    "ThreadId": "54567",
    "Html": "<p>Thanks very much for that Martias, much appreciated!</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-14T03:58:22.613-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]