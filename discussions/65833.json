[
  {
    "Id": "223960",
    "ThreadId": "65833",
    "Html": "<p>Hi,</p>\r\n<p>I have a question in Command. As you know, in SL3, Prism only supply&nbsp;the button click&nbsp;event such as:</p>\r\n<p>cal:Click.Command=&quot;{Binding Path=XXCommand}&quot;</p>\r\n<p>,but when I want to bind any control's&nbsp;event to a Command such as TextBlock's MouseLeftButtonUp event:</p>\r\n<p>private void FlightPlanning_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)</p>\r\n<p>, how to do the binding&nbsp;to it?</p>",
    "PostedDate": "2009-08-15T20:59:09.023-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "224046",
    "ThreadId": "65833",
    "Html": "<p>I have created a snippet out of the PRISM command for use with any control and have the entire snippet embedded here for use. You would place this in your C# snippet area (My Documents\\Visual Studio 2008\\Code Snippets\\Visual C#\\My Code Snippets) and use it by <strong>slcmd</strong>. The snippet is a work in progress but gets you what you are looking for and all you need to do is name the class and the control type. You would create class file where you want it and then delete the actual class definition in that file to begin:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n...\r\n\r\n<span style=\"color:Blue\">namespace</span> MyNamespace.Commands\r\n{\r\n    slcmd\r\n}\r\n</pre>\r\n</div>\r\n<p>This will create you what you need for commanding any event on any control. For example you would create the Click class file and then enter Click for the class name and ButtonBase for the control to create the one PRISM supports by default.</p>\r\n<p>UPDATE: BTW, the $commandname$CommandBehavior class that is created was templated from the Loaded event and so you will probably need to rewrite the methods when you create the command but it is a start.</p>\r\n<p>HTH</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;?</span><span style=\"color:#A31515\">xml</span> <span style=\"color:Red\">version</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">1.0</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">encoding</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">utf-8</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">?&gt;</span>\r\n<span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">CodeSnippets</span> <span style=\"color:Red\">xmlns</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n  <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">CodeSnippet</span> <span style=\"color:Red\">Format</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">1.0.0</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Header</span><span style=\"color:Blue\">&gt;</span>\r\n      <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">SnippetTypes</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">SnippetType</span><span style=\"color:Blue\">&gt;</span>Expansion<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">SnippetType</span><span style=\"color:Blue\">&gt;</span>\r\n      <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">SnippetTypes</span><span style=\"color:Blue\">&gt;</span>\r\n      <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Title</span><span style=\"color:Blue\">&gt;</span>Silverlight Commanding Class Definition<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Title</span><span style=\"color:Blue\">&gt;</span>\r\n      <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Shortcut</span><span style=\"color:Blue\">&gt;</span>slcmd<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Shortcut</span><span style=\"color:Blue\">&gt;</span>\r\n      <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Description</span><span style=\"color:Blue\">&gt;</span>Create a Silverlight Command Class<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Description</span><span style=\"color:Blue\">&gt;</span>\r\n      <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Author</span><span style=\"color:Blue\">&gt;</span>Fred Hirschfeld<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Author</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Header</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Snippet</span><span style=\"color:Blue\">&gt;</span>\r\n      <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Declarations</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Literal</span> <span style=\"color:Red\">Editable</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">true</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n          <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">ID</span><span style=\"color:Blue\">&gt;</span>commandname<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">ID</span><span style=\"color:Blue\">&gt;</span>\r\n          <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">ToolTip</span><span style=\"color:Blue\">&gt;</span>Name of the command to create.<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">ToolTip</span><span style=\"color:Blue\">&gt;</span>\r\n          <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Default</span><span style=\"color:Blue\">&gt;</span>MyCommand<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Default</span><span style=\"color:Blue\">&gt;</span>\r\n          <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Function</span><span style=\"color:Blue\">&gt;</span>\r\n          <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Function</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Literal</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Literal</span> <span style=\"color:Red\">Editable</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">true</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n          <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">ID</span><span style=\"color:Blue\">&gt;</span>controlType<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">ID</span><span style=\"color:Blue\">&gt;</span>\r\n          <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">ToolTip</span><span style=\"color:Blue\">&gt;</span>The type of control this command applies to.<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">ToolTip</span><span style=\"color:Blue\">&gt;</span>\r\n          <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Default</span><span style=\"color:Blue\">&gt;</span>Control<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Default</span><span style=\"color:Blue\">&gt;</span>\r\n          <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Function</span><span style=\"color:Blue\">&gt;</span>\r\n          <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Function</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Literal</span><span style=\"color:Blue\">&gt;</span>\r\n      <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Declarations</span><span style=\"color:Blue\">&gt;</span>\r\n      <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Code</span> <span style=\"color:Red\">Language</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">csharp</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;![CDATA[</span><span style=\"color:Gray\">\r\npublic static class $commandname$\r\n    {\r\n        private static readonly DependencyProperty $commandname$CommandBehaviorProperty = DependencyProperty.RegisterAttached(\r\n            &quot;$commandname$CommandBehavior&quot;,\r\n            typeof($commandname$CommandBehavior),\r\n            typeof($commandname$),\r\n            null);\r\n\r\n\r\n        /// &lt;summary&gt;\r\n        /// Command to execute on ?? event.\r\n        /// &lt;/summary&gt;\r\n        public static readonly DependencyProperty CommandProperty = DependencyProperty.RegisterAttached(\r\n            &quot;Command&quot;,\r\n            typeof(ICommand),\r\n            typeof($commandname$),\r\n            new PropertyMetadata(OnSetCommandCallback));\r\n\r\n        /// &lt;summary&gt;\r\n        /// Command parameter to supply on command execution.\r\n        /// &lt;/summary&gt;\r\n        public static readonly DependencyProperty CommandParameterProperty = DependencyProperty.RegisterAttached(\r\n            &quot;CommandParameter&quot;,\r\n            typeof(object),\r\n            typeof($commandname$),\r\n            new PropertyMetadata(OnSetCommandParameterCallback));\r\n\r\n\r\n        /// &lt;summary&gt;\r\n        /// Sets the &lt;see cref=&quot;ICommand&quot;/&gt; to execute on the $$ event.\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=&quot;element&quot;&gt;$controlType$ dependency object to attach command&lt;/param&gt;\r\n        /// &lt;param name=&quot;command&quot;&gt;Command to attach&lt;/param&gt;\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(&quot;Microsoft.Design&quot;, &quot;CA1011:ConsiderPassingBaseTypesAsParameters&quot;, Justification = &quot;Only works for buttonbase&quot;)]\r\n        public static void SetCommand($controlType$ element, ICommand command)\r\n        {\r\n            element.SetValue(CommandProperty, command);\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Retrieves the &lt;see cref=&quot;ICommand&quot;/&gt; attached to the &lt;see cref=&quot;ButtonBase&quot;/&gt;.\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=&quot;element&quot;&gt;$controlType$ containing the Command dependency property&lt;/param&gt;\r\n        /// &lt;returns&gt;The value of the command attached&lt;/returns&gt;\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(&quot;Microsoft.Design&quot;, &quot;CA1011:ConsiderPassingBaseTypesAsParameters&quot;, Justification = &quot;Only works for buttonbase&quot;)]\r\n        public static ICommand GetCommand($controlType$ element)\r\n        {\r\n            return element.GetValue(CommandProperty) as ICommand;\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Sets the value for the CommandParameter attached property on the provided &lt;see cref=&quot;$controlType$&quot;/&gt;.\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=&quot;element&quot;&gt;$controlType$ to attach CommandParameter&lt;/param&gt;\r\n        /// &lt;param name=&quot;parameter&quot;&gt;Parameter value to attach&lt;/param&gt;\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(&quot;Microsoft.Design&quot;, &quot;CA1011:ConsiderPassingBaseTypesAsParameters&quot;, Justification = &quot;Only works for buttonbase&quot;)]\r\n        public static void SetCommandParameter($controlType$ element, object parameter)\r\n        {\r\n            element.SetValue(CommandParameterProperty, parameter);\r\n        }\r\n\r\n        /// &lt;summary&gt;\r\n        /// Gets the value in CommandParameter attached property on the provided &lt;see cref=&quot;$controlType$&quot;/&gt;\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=&quot;element&quot;&gt;$controlType$ that has the CommandParameter&lt;/param&gt;\r\n        /// &lt;returns&gt;The value of the property&lt;/returns&gt;\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(&quot;Microsoft.Design&quot;, &quot;CA1011:ConsiderPassingBaseTypesAsParameters&quot;, Justification = &quot;Only works for buttonbase&quot;)]\r\n        public static object GetCommandParameter($controlType$ element)\r\n        {\r\n            return element.GetValue(CommandParameterProperty);\r\n        }\r\n\r\n        private static void OnSetCommandCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            $controlType$ element = dependencyObject as $controlType$;\r\n            if (element != null)\r\n            {\r\n                $commandname$CommandBehavior behavior = GetOrCreateBehavior(element);\r\n                behavior.Command = e.NewValue as ICommand;\r\n            }\r\n        }\r\n\r\n        private static void OnSetCommandParameterCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            $controlType$ element = dependencyObject as $controlType$;\r\n            if (element != null)\r\n            {\r\n                $commandname$CommandBehavior behavior = GetOrCreateBehavior(element);\r\n                behavior.CommandParameter = e.NewValue;\r\n            }\r\n        }\r\n\r\n        private static $commandname$CommandBehavior GetOrCreateBehavior($controlType$ element)\r\n        {\r\n            $commandname$CommandBehavior behavior = element.GetValue($commandname$CommandBehaviorProperty) as $commandname$CommandBehavior;\r\n            if (behavior == null)\r\n            {\r\n                behavior = new $commandname$CommandBehavior(element);\r\n                element.SetValue($commandname$CommandBehaviorProperty, behavior);\r\n            }\r\n\r\n            return behavior;\r\n        }\r\n    }\r\n\r\n    public class $commandname$CommandBehavior : CommandBehaviorBase&lt;$controlType$&gt;\r\n    {\r\n        public $commandname$CommandBehavior($controlType$ element)\r\n            : base(element)\r\n        {\r\n            // TODO: Hook into the event of the control\r\n            $end$\r\n        }\r\n\r\n        private void Element_Loaded(object sender, RoutedEventArgs e)\r\n        {\r\n            // TODO: Setup the command parameter if appropriate.\r\n            //this.CommandParameter = null;\r\n\r\n            ExecuteCommand();\r\n        }\r\n    }</span><span style=\"color:Blue\">]]&gt;</span>\r\n      <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Code</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Snippet</span><span style=\"color:Blue\">&gt;</span>\r\n  <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">CodeSnippet</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">CodeSnippets</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>",
    "PostedDate": "2009-08-16T10:44:46.787-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "224047",
    "ThreadId": "65833",
    "Html": "<p>Hi, <a id=\"ctl00_ctl00_MasterContent_Content_PostRepeater_ctl02_UserNameLink\" href=\"http://www.codeplex.com/site/users/view/fredhirschfeld\">fredhirschfeld</a>,</p>\r\n<p>Thank you for your reply. But maybe you misunderstand my problem.</p>\r\n<p>I want to click on the TextBlock and fire its MouseLeftButtonUp event. Today I studied into how Button's click&nbsp;event in Prism&nbsp;and TextBox's KeyDown event in RI, I found they both inherit from base class Control, which apply for the Prism definition:</p>\r\n<p>public class CommandBehaviorBase&lt;T&gt;&nbsp;where T: Control</p>\r\n<p>, but TextBlock doesn't inherit from Control, so I find no way to implement Command mechinism on it.</p>\r\n<p>Your code is fine, which is the same as I wrote before, so it's no use. I think the probelm can be summarize to: how to implement the Command on the controls that not implement from Control?</p>",
    "PostedDate": "2009-08-16T10:56:53.347-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "224057",
    "ThreadId": "65833",
    "Html": "<p>You will need to create your own CommandBehaviorBase&lt;T&gt; class based on the original and remove that restriction.</p>",
    "PostedDate": "2009-08-16T12:12:44.533-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "224106",
    "ThreadId": "65833",
    "Html": "<p>Does TextBlock must inherit from CommandBehaviorBase&lt;T&gt;?</p>\r\n<p>I know someone write code like this:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> StoryboardCommandBehavior : ICommand, IProcessingCommand\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">bool</span> CanExecute(<span style=\"color:Blue\">object</span> parameter) { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">true</span>; }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> EventHandler CanExecuteChanged;\r\n        <span style=\"color:Blue\">public</span> ICommand Command { <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">this</span>; } }\r\n        <span style=\"color:Blue\">public</span> ProcessingOrderEnum ProcessingOrder { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n\r\n        <span style=\"color:Blue\">public</span> StoryboardCommandBehavior()\r\n        {\r\n            ProcessingOrder = ProcessingOrderEnum.PreProcessing;\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> UpdateTargetName()\r\n        {\r\n            <span style=\"color:Blue\">if</span> (!String.IsNullOrEmpty(TargetName))\r\n            {\r\n                Storyboard.Stop();\r\n                Storyboard.Children.ToList().ForEach(time =&gt; time.SetValue(Storyboard.TargetNameProperty, TargetName));\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> Storyboard Storyboard {<span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>;}\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> TargetName {<span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>;}\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> Execute(<span style=\"color:Blue\">object</span> parameter)\r\n        {\r\n            UpdateTargetName();\r\n            Storyboard.Begin();\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>What's the difference?&nbsp;</p>",
    "PostedDate": "2009-08-16T18:21:11.17-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "224459",
    "ThreadId": "65833",
    "Html": "<p>Anyone else can help me for this issue?</p>\r\n<p>Today I try to write a MouseLeftButtonUp behavior as follow, but failed, I don't know the reason:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MouseLeftButtonUp\r\n    </span>{\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> DependencyProperty MouseLeftButtonUpCommandBehaviorProperty = DependencyProperty.RegisterAttached(\r\n            <span style=\"color:#A31515\">&quot;MouseLeftButtonUpCommandBehavior&quot;</span>,\r\n            <span style=\"color:Blue\">typeof</span>(MouseLeftButtonUpCommandBehavior),\r\n            <span style=\"color:Blue\">typeof</span>(MouseLeftButtonUp),\r\n            <span style=\"color:Blue\">null</span>);\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Command to execute on MouseLeftButtonUp event.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> DependencyProperty CommandProperty = DependencyProperty.RegisterAttached(\r\n            <span style=\"color:#A31515\">&quot;Command&quot;</span>,\r\n            <span style=\"color:Blue\">typeof</span>(ICommand),\r\n            <span style=\"color:Blue\">typeof</span>(MouseLeftButtonUp),\r\n            <span style=\"color:Blue\">new</span> PropertyMetadata(OnSetCommandCallback));\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Command parameter to supply on command execution.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> DependencyProperty CommandParameterProperty = DependencyProperty.RegisterAttached(\r\n            <span style=\"color:#A31515\">&quot;CommandParameter&quot;</span>,\r\n            <span style=\"color:Blue\">typeof</span>(<span style=\"color:Blue\">object</span>),\r\n            <span style=\"color:Blue\">typeof</span>(MouseLeftButtonUp),\r\n            <span style=\"color:Blue\">new</span> PropertyMetadata(OnSetCommandParameterCallback));\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Sets the &lt;see cref=&quot;ICommand&quot;/&gt; to execute on the MouseLeftButtonUp event.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;textBlock&quot;&gt;</span><span style=\"color:Green\">TextBlock dependency object to attach command&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;command&quot;&gt;</span><span style=\"color:Green\">Command to attach&lt;/param&gt;</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> SetCommand(TextBlock textBlock, ICommand command)\r\n        {\r\n            textBlock.SetValue(CommandProperty, command);\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Retrieves the &lt;see cref=&quot;ICommand&quot;/&gt; attached to the &lt;see cref=&quot;TextBlock&quot;/&gt;.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;textBlock&quot;&gt;</span><span style=\"color:Green\">TextBlock containing the Command dependency property&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;returns&gt;</span><span style=\"color:Green\">The value of the command attached&lt;/returns&gt;</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> ICommand GetCommand(TextBlock textBlock)\r\n        {\r\n            <span style=\"color:Blue\">return</span> textBlock.GetValue(CommandProperty) <span style=\"color:Blue\">as</span> ICommand;\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Sets the value for the CommandParameter attached property on the provided &lt;see cref=&quot;TextBlock&quot;/&gt;.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;buttonBase&quot;&gt;</span><span style=\"color:Green\">TextBlock to attach CommandParameter&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;parameter&quot;&gt;</span><span style=\"color:Green\">Parameter value to attach&lt;/param&gt;</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> SetCommandParameter(TextBlock textBlock, <span style=\"color:Blue\">object</span> parameter)\r\n        {\r\n            textBlock.SetValue(CommandParameterProperty, parameter);\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets the value in CommandParameter attached property on the provided &lt;see cref=&quot;ButtonBase&quot;/&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;buttonBase&quot;&gt;</span><span style=\"color:Green\">TextBlock that has the CommandParameter&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;returns&gt;</span><span style=\"color:Green\">The value of the property&lt;/returns&gt;</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">object</span> GetCommandParameter(TextBlock textBlock)\r\n        {\r\n            <span style=\"color:Blue\">return</span> textBlock.GetValue(CommandParameterProperty);\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> OnSetCommandCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            TextBlock textBlock = dependencyObject <span style=\"color:Blue\">as</span> TextBlock;\r\n            <span style=\"color:Blue\">if</span> (textBlock != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                MouseLeftButtonUpCommandBehavior behavior = GetOrCreateBehavior(textBlock);\r\n                behavior.Command = e.NewValue <span style=\"color:Blue\">as</span> ICommand;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> OnSetCommandParameterCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\r\n        {           \r\n            TextBlock textBlock = dependencyObject <span style=\"color:Blue\">as</span> TextBlock;\r\n            <span style=\"color:Blue\">if</span> (textBlock != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                MouseLeftButtonUpCommandBehavior behavior = GetOrCreateBehavior(textBlock);\r\n                behavior.CommandParameter = e.NewValue;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> MouseLeftButtonUpCommandBehavior GetOrCreateBehavior(TextBlock textBlock)\r\n        {\r\n            MouseLeftButtonUpCommandBehavior behavior = textBlock.GetValue(MouseLeftButtonUpCommandBehaviorProperty) <span style=\"color:Blue\">as</span> MouseLeftButtonUpCommandBehavior;\r\n            <span style=\"color:Blue\">if</span> (behavior == <span style=\"color:Blue\">null</span>)\r\n            {\r\n                behavior = <span style=\"color:Blue\">new</span> MouseLeftButtonUpCommandBehavior(textBlock);\r\n                textBlock.SetValue(MouseLeftButtonUpCommandBehaviorProperty, behavior);\r\n            }\r\n\r\n            <span style=\"color:Blue\">return</span> behavior;\r\n        }\r\n    }\r\n</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MouseLeftButtonUpCommandBehavior : CommandBehaviorBase&lt;TextBlock&gt;\r\n    </span>{\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Initializes a new instance of the &lt;see cref=&quot;ButtonBaseClickCommandBehavior&quot;/&gt; class and hooks up the Click event of </span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;paramref name=&quot;clickableObject&quot;/&gt;</span><span style=\"color:Green\"> to the ExecuteCommand() method. </span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;clickableObject&quot;&gt;</span><span style=\"color:Green\">The clickable object.&lt;/param&gt;</span>\r\n        <span style=\"color:Blue\">public</span> MouseLeftButtonUpCommandBehavior(TextBlock clickableObject)\r\n            : <span style=\"color:Blue\">base</span>(clickableObject)\r\n        {\r\n            clickableObject.MouseLeftButtonUp += OnMouseLeftButtonUp;\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> OnMouseLeftButtonUp(<span style=\"color:Blue\">object</span> sender, MouseButtonEventArgs e)\r\n        {\r\n            ExecuteCommand();\r\n        }\r\n</pre>\r\n</div>\r\n</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> CommandBehaviorBase&lt;T&gt;\r\n        where T : FrameworkElement\r\n    </span>{\r\n        <span style=\"color:Blue\">private</span> ICommand command;\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">object</span> commandParameter;\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">readonly</span> WeakReference targetObject;\r\n\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Constructor specifying the target object.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;targetObject&quot;&gt;</span><span style=\"color:Green\">The target object the behavior is attached to.&lt;/param&gt;</span>\r\n        <span style=\"color:Blue\">public</span> CommandBehaviorBase(T targetObject)\r\n        {\r\n            <span style=\"color:Blue\">this</span>.targetObject = <span style=\"color:Blue\">new</span> WeakReference(targetObject);\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Corresponding command to be execute and monitored for &lt;see cref=&quot;ICommand.CanExecuteChanged&quot;/&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Blue\">public</span> ICommand Command\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> command; }\r\n            <span style=\"color:Blue\">set</span>\r\n            {\r\n                <span style=\"color:Blue\">if</span> (<span style=\"color:Blue\">this</span>.command != <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    <span style=\"color:Blue\">this</span>.command.CanExecuteChanged -= <span style=\"color:Blue\">this</span>.CommandCanExecuteChanged;\r\n                }\r\n\r\n                <span style=\"color:Blue\">this</span>.command = value;\r\n                <span style=\"color:Blue\">if</span> (<span style=\"color:Blue\">this</span>.command != <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    <span style=\"color:Blue\">this</span>.command.CanExecuteChanged += <span style=\"color:Blue\">this</span>.CommandCanExecuteChanged;\r\n                    UpdateEnabledState();\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> The parameter to supply the command during execution</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">object</span> CommandParameter\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">this</span>.commandParameter; }\r\n            <span style=\"color:Blue\">set</span>\r\n            {\r\n                <span style=\"color:Blue\">if</span> (<span style=\"color:Blue\">this</span>.commandParameter != value)\r\n                {\r\n                    <span style=\"color:Blue\">this</span>.commandParameter = value;\r\n                    <span style=\"color:Blue\">this</span>.UpdateEnabledState();\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Object to which this behavior is attached.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Blue\">protected</span> T TargetObject\r\n        {\r\n            <span style=\"color:Blue\">get</span>\r\n            {\r\n                <span style=\"color:Blue\">return</span> targetObject.Target <span style=\"color:Blue\">as</span> T;\r\n            }\r\n        }\r\n\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Updates the target object's IsEnabled property based on the commands ability to execute.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">virtual</span> <span style=\"color:Blue\">void</span> UpdateEnabledState()\r\n        {\r\n            <span style=\"color:Blue\">if</span> (TargetObject == <span style=\"color:Blue\">null</span>)\r\n            {\r\n                <span style=\"color:Blue\">this</span>.Command = <span style=\"color:Blue\">null</span>;\r\n                <span style=\"color:Blue\">this</span>.CommandParameter = <span style=\"color:Blue\">null</span>;\r\n            }\r\n            <span style=\"color:Blue\">else</span> <span style=\"color:Blue\">if</span> (<span style=\"color:Blue\">this</span>.Command != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                <span style=\"color:Green\">//TargetObject.IsEnabled = this.Command.CanExecute(this.CommandParameter);</span>\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> CommandCanExecuteChanged(<span style=\"color:Blue\">object</span> sender, EventArgs e)\r\n        {\r\n            <span style=\"color:Blue\">this</span>.UpdateEnabledState();\r\n        }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Executes the command, if it's set, providing the &lt;see cref=&quot;CommandParameter&quot;/&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">virtual</span> <span style=\"color:Blue\">void</span> ExecuteCommand()\r\n        {\r\n            <span style=\"color:Blue\">if</span> (<span style=\"color:Blue\">this</span>.Command != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                <span style=\"color:Blue\">this</span>.Command.Execute(<span style=\"color:Blue\">this</span>.CommandParameter);\r\n            }\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>",
    "PostedDate": "2009-08-17T07:34:37.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]