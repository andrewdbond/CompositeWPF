[
  {
    "Id": "445483",
    "ThreadId": "213315",
    "Html": "<p>Hi Guys,</p>\r\n<p>I've been studying Prism for past two days and have a question - why not have a Singleton instance of a IUnityContainer instead of injecting it everywhere, what's the point of writing additional code, I just dont get it. I'm building an Silverlight app using the MVVM model and want to use the IUnityContainer to resolve services inside my ViewModels. Also I'd like my ViewModels to be declared in the xaml resources, it brings some advantages with it. If I want to use Prism (Unity) I end up in an situation (which is shown in one of the prism videos) where the service is manually attached to the ViewModel from the View, it's too laborious and ugly. It might be that I'm missing something, any thoughts are very welcome.</p>\r\n<p>Regards,</p>\r\n<p>Stevo</p>",
    "PostedDate": "2010-05-20T10:01:45.55-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "450746",
    "ThreadId": "213315",
    "Html": "<p id=413b0450-4fd5-012d-29e6-1231390f0921>Hi Stevo,</p>\r\n<p id=413b1000-4fd5-012d-29e7-1231390f0921>Each time you inject the  UnityContainer, the same instance is resolved, since internally it is  registered as a Singleton instance. You can confirm that by checking the  <a href=\"http://msdn.microsoft.com/en-us/library/system.object.gethashcode.aspx\">HashCode</a> of the different references to the container throughout your  application; they are the equal, showing that they all point to the same  instance.</p>\r\n<p id=413b2150-4fd5-012d-29e8-1231390f0921>If you are  referring to having, for example, a static property instead of injecting  the container, you must take into account that in that case you would  have a direct reference to that static property in every component that  uses the container, thus losing the <a href=\"http://msdn.microsoft.com/en-us/library/ff660859(PandP.20).aspx\">benefits  of Dependency Injection</a>. That is, you would lose testability, as  well as lifetime management for the container itself, among other  benefits.</p>\r\n<p id=4cc75210-509e-012d-aabb-12313b04bc71>On the other  hand, if you want your ViewModel to get a reference to a service, a  possible approach would be to use <a href=\"http://msdn.microsoft.com/en-us/library/ff649029.aspx\">Constructor  Injection</a>. It&rsquo;s not necessary to inject the Unity Container and  then resolve the services through it. The code for that would look like  this:</p>\r\n<p id=4cc77640-509e-012d-aabc-12313b04bc71>public  MyModuleViewModel(IService myService, IAnotherService myOtherService)</p>\r\n<p id=4cc79800-509e-012d-aabd-12313b04bc71>{</p>\r\n<p id=4cc7b8d0-509e-012d-aabe-12313b04bc71>this.myService = myService;</p>\r\n<p id=4cc7d8a0-509e-012d-aabf-12313b04bc71>this.myOtherService =  myOtherService;</p>\r\n<p id=4cc7f9b0-509e-012d-aac0-12313b04bc71>(&hellip;)</p>\r\n<p id=4cc81b10-509e-012d-aac1-12313b04bc71>}</p>\r\n<p id=4cc83c90-509e-012d-aac2-12313b04bc71>As for declaring the ViewModel  in XAML resources, if you meant that you would prefer to instantiate  the ViewModel directly in the XAML, like this:</p>\r\n<p id=4cc86330-509e-012d-aac3-12313b04bc71>&lt;UserControl.DataContext&gt;    <br>&lt;MyViewModel/&gt;    <br>&lt;/UserControl.DataContext&gt;</p>\r\n<p id=4cc88ed0-509e-012d-aac4-12313b04bc71>you would be losing the  benefits of Constructor Injection, as the XAML would be instantiating  the ViewModel through a default constructor (if the ViewModel didn&rsquo;t  have one, it would throw an exception).</p>\r\n<p id=4cc8bee0-509e-012d-aac5-12313b04bc71>The classic approach to have  access to the ViewModel in the View&rsquo;s XAML is to add the ViewModel as  the DataContext of the View programmatically. The code for that would  look like this:</p>\r\n<p id=4cc8f470-509e-012d-aac6-12313b04bc71>public  MyView(IMyModuleViewModel viewModel) { InitializeComponent(); this.DataContext = viewModel; }</p>\r\n<p id=4cc92d80-509e-012d-aac7-12313b04bc71>That way you would have  access to the ViewModel from your XAML, when you use bindings.</p>\r\n<p id=413b5120-4fd5-012d-29ea-1231390f0921>I hope you find this  helpful.</p>\r\n<p id=413b6770-4fd5-012d-29eb-1231390f0921>Guido Leandro Maliandi    <br><a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2010-06-02T11:08:32.473-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "451112",
    "ThreadId": "213315",
    "Html": "<p>Hi Guido,</p>\r\n<p>&nbsp;</p>\r\n<p>thanks for the reply. I understand most of the things what you refer to. However I don't understand how would I loose testability (I can assign whatever instance I want to to the static singleton property that can be available during testing) and what exactly you mean by lifetime managment (One signleton that's alive as long as the application is alive)?</p>\r\n<p>Our application structure is following - main silverlight + .web projects and X-number of modules (other projects). The main silverlight project has Shell, bootstrapper, DomainContexts, service interfaces and lots of common classes in it. Each module has the main references the main silverlight application and implements its own specific views and services, thus has access to all the common stuf, where the UnityContainer singleton resides.</p>\r\n<p>Regards,</p>\r\n<p>Stevo</p>",
    "PostedDate": "2010-06-03T02:59:03.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "508002",
    "ThreadId": "213315",
    "Html": "<p id=321947d0-8eee-012d-f7df-12313b101d25>Hi,</p>\r\n<p id=be2336b0-b9e4-012d-5592-123139180331>If  you followed the approach you&rsquo;ve mentioned, you would be losing  lifetime management because, if you use a static property, that instance  of the container will be kept in memory for as long as the application  runs. You can read more about Lifetime Managers in <a href=\"http://msdn.microsoft.com/en-us/library/ff647854.aspx\">this article</a> from the Unity Documentation.</p>\r\n<p id=dcb92d40-b2db-012d-3879-123139183160>As  for the loss of testability, although you would be able to mock the  implementation of the container by assigning whatever instance you want  to the static property, that would imply mixing your production code  with your testing code. If, for example, you had the following code:</p>\r\n<p id=be2366f0-b9e4-012d-5594-123139180331>public class MyClass    <br>{     <br>&nbsp;&nbsp;&nbsp; private IUnityContainer container;     <br>&nbsp;&nbsp;&nbsp; public MyClass()     <br>&nbsp;&nbsp;&nbsp; {     <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container = StaticContainer.GetInstance();     <br>&nbsp;&nbsp;&nbsp; }     <br>}</p>\r\n<p id=be2385e0-b9e4-012d-5595-123139180331>public class StaticContainer    <br>{     <br>&nbsp;&nbsp;&nbsp; private static IUnityContainer container;     <br>&nbsp;&nbsp;&nbsp; public static bool Testing;     <br>&nbsp;&nbsp;&nbsp; public static IUnityContainer GetInstance()     <br>&nbsp;&nbsp;&nbsp; {     <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if StaticContainer.Testing     <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return MockContainer();</p>\r\n<p id=be23aae0-b9e4-012d-5596-123139180331>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if container == null    <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container = new UnityContainer();     <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return container;     <br>&nbsp;&nbsp;&nbsp; }     <br>}</p>\r\n<p id=be23d320-b9e4-012d-5597-123139180331>You  would give the production code the possibility of running the mock  instances. In addition to that, in case there were a large number of  different mocks, the StaticContainer class would have to be responsible  for knowing which mock to use.</p>\r\n<p id=be2401a0-b9e4-012d-5598-123139180331>&nbsp;</p>\r\n<p id=32197250-8eee-012d-f7e1-12313b101d25>Fernando Antivero    <br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>",
    "PostedDate": "2010-10-15T13:28:03.347-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]