[
  {
    "Id": "240141",
    "ThreadId": "70497",
    "Html": "<p>I've just started doing the Quickstarts, so be kind....</p>\r\n<p>I&nbsp;see in&nbsp;the Modularity quickstarts how&nbsp;modules can be&nbsp;loaded&nbsp;(config, directory, in-code). &nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n<p>But then the very next quickstart - View Discovery - doesn't appear to use any of these methods.&nbsp;&nbsp;</p>\r\n<p>The InitializeModules method of its Bootstrapper simply does a Container.Resolve of the module type, with no apparent interaction with&nbsp;a ModuleCatalog (ie, it doesn't override GetModuleCatalog).</p>\r\n<p>To further add to my confusion, the docs state &quot;If you are using the UnityBootstrapper [which the View Discovery&nbsp;quickstart does], you must provide a module catalog instance; if you do not, a run-time exception is thrown&quot;.</p>\r\n<p>Since&nbsp;it doesn't get a run-time exception, I assume that&nbsp;the&nbsp;View Discovery quickstart is &quot;providing&quot; a module catalog. But where? And how do the modules get added to it?&nbsp;</p>\r\n<p>Thanks!</p>\r\n<p>DT</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-29T12:31:30.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "240191",
    "ThreadId": "70497",
    "Html": "<p>I&rsquo;m also starting with Prism so I&rsquo;ll also ask for kindness, If you check the References in the Solution Explorer you&rsquo;ll find there&rsquo;s one for the UIComposition.Modules.Employee and UIComposition.Modules.Project, you&rsquo;ll also find using clauses in the Bootstrapper, since the project knows about the classes the container can solve them, this is another way for loading modules, is the easiest, but not the best for obvious reasons IMHO.</p>",
    "PostedDate": "2009-09-29T16:01:40.38-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "240401",
    "ThreadId": "70497",
    "Html": "<p>Yeah, I saw the references and using statements.&nbsp;</p>\r\n<p>Although&nbsp;it's still not&nbsp;clear to me&nbsp;how/where those references &quot;automatically&quot; cause the container to be aware of the modules, or to populate the module catalog.&nbsp; I stepped into the container, but&nbsp;I must have missed that bit.&nbsp;</p>\r\n<p>But as you said, having hard-coded references isn't&nbsp;the &quot;best&quot; way (IMHO, it's not even in the top ten list of alternatives), given that&nbsp;the&nbsp;idea is to de-couple the app.</p>\r\n<p>It's unfortunate that the quickstart used that technique, if&nbsp;the intent of the &quot;guidance&quot; is to illustrate best practices.</p>\r\n<p>DT&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-30T06:30:22.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "252451",
    "ThreadId": "70497",
    "Html": "<p>I'm also a starter one, I am confused and still is not clear to me the same question (specially in the Silverlight quickstart project, because the reflection library isn't implemented).</p>\r\n<p>Is there any important&nbsp;reason to&nbsp;override IntializeModules instead of GetModuleCatalog?&nbsp;</p>\r\n<p>JS</p>",
    "PostedDate": "2009-11-02T08:05:42.777-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]