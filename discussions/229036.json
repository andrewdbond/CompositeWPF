[
  {
    "Id": "500037",
    "ThreadId": "229036",
    "Html": "<p>Hi All,</p>\r\n<p>I have a view which is loaded from a module using prism (set to onDemand). When I close the form with an X on the top left the following method i wrote is invoked..</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>   <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> CloseCommand(<span style=\"color:blue\">object</span> Object)\r\n   {\r\n            IRegion region = regionManager.Regions[RegionNames.MainRegion];\r\n            Control viewToLoad = region.GetView(viewName) <span style=\"color:blue\">as</span> Control;\r\n            region.Remove(viewToLoad);\r\n   }\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>While this successfully removes the view from the region manager it does not remove it from memory. The DeConstructor on my view is never called. In fact if i open and close the view several times i can see new objects are being created and memory keeps going up.</p>\r\n<p>The view is a added to a grid in my shell project..</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>&lt;Grid x:Name=<span style=\"color:#a31515\">&quot;MainRegion&quot;</span> prism:RegionManager.RegionName=<span style=\"color:#a31515\">&quot;MainRegion&quot;</span> Margin=<span style=\"color:#a31515\">&quot;8&quot;</span>/&gt;<br><br>\r\n</pre>\r\n</div>\r\n<p>I suspect the view should also be removed from this grid but i do not know how to access the grid from the calling view..</p>\r\n<p>Whats the best way to correctly remove views from memory to avoid this problem?</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<pre style=\"font-family:consolas\"><pre style=\"font-family:consolas\"><br></pre>\r\n</pre>",
    "PostedDate": "2010-09-29T08:06:09.22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "500112",
    "ThreadId": "229036",
    "Html": "<p>Hi,</p>\r\n<p>Thanks for reporting that, since it might help to users with similar  scenarios. The approach that you used for removing the view seems to be correct.</p>\r\n<p>On the other hand, if you do not have any other reference to&nbsp;the views in  your application, they should be removed when the garbage collection occurs. But  this&nbsp;is not possible to&nbsp;predict when it will&nbsp;occur. Probably, this is why you  are seeing that your memory are going up.</p>\r\n<p>I would recommend you to try adding a button (in the toolbar of your app) that force to collect to the garbage collector&nbsp;using the following code:</p>\r\n<pre>public void YourButtonClickCommand(object Object)\r\n{<br>    GC.Collect();<br><br><br>}</pre>\r\n<p>Then if after executing this code you realize that your memory is released,  it means that&nbsp;you do not have a leak over there. But if this does not release, I  would recommend you to check if your application keeps a reference of your  views (e.g. your region).</p>\r\n<p><strong>Please take into account that this is just a test. After this test, you have to remove this from your application.</strong></p>\r\n<p>If you continue experiencing this situation, could you send a repro sample?.</p>\r\n<p>I hope this help.</p>\r\n<p>Fernando Antivero <br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>",
    "PostedDate": "2010-09-29T10:32:30.357-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "500117",
    "ThreadId": "229036",
    "Html": "<div class=WordSection1><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">Hi,</span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">I think it is the Grid object (my region) which is keeping ahold of the object. I believe I have solved it now by creating a GridAdaptor which can add and remove objects from the grid. </span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p><p class=MsoListParagraph style=\"text-indent:-.25in\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"><span style=\"\">1)<span style=\"font:7.0pt\">      </span></span></span><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">In Bootstraper.cs I added</span></p><p class=MsoListParagraph><span style=\"font-size:10.0pt;font-family:Consolas;color:#2B91AF\"> </span></p><p class=MsoListParagraph><span style=\"font-size:10.0pt;font-family:Consolas;color:#2B91AF\">RegionAdapterMappings</span><span style=\"font-size:10.0pt;font-family:Consolas\"> mappings = <span style=\"color:blue\">base</span>.ConfigureRegionAdapterMappings();<br>mappings.RegisterMapping(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2B91AF\">Grid</span>), Container.Resolve&lt;<span style=\"color:#2B91AF\">GridRegionAdapter</span>&gt;());<br><span style=\"color:blue\">return</span> mappings;</span></p><p class=MsoListParagraph><span style=\"font-size:10.0pt;font-family:Consolas\"> </span></p><p class=MsoListParagraph style=\"text-indent:-.25in\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"><span style=\"\">2)<span style=\"font:7.0pt\">      </span></span></span><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">In GridRegionAdaptor.cs I added code to handle the added and remove of views</span></p><p class=MsoListParagraph><span style=\"font-size:10.0pt;font-family:Consolas;color:blue\"> </span></p><p class=MsoListParagraph style=\"margin-left:1.5in\"><span style=\"font-size:10.0pt;font-family:Consolas;color:blue\">using</span><span style=\"font-size:10.0pt;font-family:Consolas\"> System;<br><span style=\"color:blue\">using</span> System.Collections.Specialized;<br><span style=\"color:blue\">using</span> System.Windows;<br><span style=\"color:blue\">using</span> System.Windows.Controls;<br><span style=\"color:blue\">using</span> Microsoft.Practices.Prism.Regions;<br> <br><span style=\"color:blue\">namespace</span> Infor.Common.RegionAdapters<br>{<br>    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;summary&gt;</span><br>    <span style=\"color:gray\">///</span><span style=\"color:green\"> Used to Assist in Selecting Rows in the Dual List Exchange.</span><br>    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;/summary&gt;</span><br>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> <span style=\"color:#2B91AF\">GridRegionAdapter</span> : <span style=\"color:#2B91AF\">RegionAdapterBase</span>&lt;<span style=\"color:#2B91AF\">Grid</span>&gt;<br>    {<br>        <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;summary&gt;</span><br>        <span style=\"color:gray\">///</span><span style=\"color:green\"> Initializes a new instance of </span><span style=\"color:gray\">&lt;see cref=&quot;GridRegionAdapter&quot;/&gt;</span><span style=\"color:green\">.</span><br>        <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;/summary&gt;</span><br>        <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;param name=&quot;regionBehaviorFactory&quot;&gt;</span><span style=\"color:green\">The factory used to create the region behaviors to attach to the created regions.</span><span style=\"color:gray\">&lt;/param&gt;</span><br>        <span style=\"color:blue\">public</span> GridRegionAdapter(<span style=\"color:#2B91AF\">IRegionBehaviorFactory</span> behaviorFactory) :<br>            <span style=\"color:blue\">base</span>(behaviorFactory)<br>        { }<br> <br>        <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;summary&gt;</span><br>        <span style=\"color:gray\">///</span><span style=\"color:green\"> Adapts a </span><span style=\"color:gray\">&lt;see cref=&quot;Grid&quot;/&gt;</span><span style=\"color:green\"> to an </span><span style=\"color:gray\">&lt;see cref=&quot;IRegion&quot;/&gt;</span><span style=\"color:green\">.</span><br>        <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;/summary&gt;</span><br>        <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;param name=&quot;region&quot;&gt;</span><span style=\"color:green\">The new region being used.</span><span style=\"color:gray\">&lt;/param&gt;</span><br>        <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;param name=&quot;regionTarget&quot;&gt;</span><span style=\"color:green\">The object to adapt.</span><span style=\"color:gray\">&lt;/param&gt;</span><br>        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Adapt(<span style=\"color:#2B91AF\">IRegion</span> region, <span style=\"color:#2B91AF\">Grid</span> regionTarget)<br>        {<br>            region.Views.CollectionChanged += (s, e) =&gt;<br>            {<br>                <span style=\"color:green\">//Add</span><br>                <span style=\"color:blue\">if</span> (e.Action == <span style=\"color:#2B91AF\">NotifyCollectionChangedAction</span>.Add)<br>                {<br>                    <span style=\"color:blue\">foreach</span> (<span style=\"color:#2B91AF\">FrameworkElement</span> element <span style=\"color:blue\">in</span> e.NewItems)<br>                    {<br>                        regionTarget.Children.Add(element);<br>                    }<br>                }<br> <br>                <span style=\"color:green\">//Removal</span><br>                <span style=\"color:blue\">if</span> (e.Action == <span style=\"color:#2B91AF\">NotifyCollectionChangedAction</span>.Remove)<br>                {<br>                   <span style=\"color:green\">// regionTarget.Children.Remove(element);</span><br>                    <span style=\"color:blue\">foreach</span> (<span style=\"color:#2B91AF\">FrameworkElement</span> element <span style=\"color:blue\">in</span> e.OldItems)<br>                    {<br>                        regionTarget.Children.Remove(element);<br>                    }<br>               }<br>            };<br>        }<br> <br>        <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;summary&gt;</span><br>        <span style=\"color:gray\">///</span><span style=\"color:green\"> Creates a new instance of </span><span style=\"color:gray\">&lt;see cref=&quot;Region&quot;/&gt;</span><span style=\"color:green\">.</span><br>        <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;/summary&gt;</span><br>        <span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\">&lt;returns&gt;</span><span style=\"color:green\">A new instance of </span><span style=\"color:gray\">&lt;see cref=&quot;Region&quot;/&gt;</span><span style=\"color:green\">.</span><span style=\"color:gray\">&lt;/returns&gt;</span><br>        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:#2B91AF\">IRegion</span> CreateRegion()<br>        {<br>            <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> <span style=\"color:#2B91AF\">Region</span>();<br>        }<br>    }<br>}</span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">After implementing this memory goes down and the deconstructor is called for my view..</span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">HTH Others..</span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">Thanks</span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p><p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p><div><div style=\"border:none;border-top:solid #B5C4DF 1.0pt;padding:3.0pt 0in 0in 0in\"><p class=MsoNormal><b><span style=\"font-size:10.0pt;font-family:'Tahoma','sans-serif'\">From:</span></b><span style=\"font-size:10.0pt;font-family:'Tahoma','sans-serif'\"> fantivero [mailto:notifications@codeplex.com] <br><b>Sent:</b> Wednesday, September 29, 2010 1:33 PM<br><b>To:</b> Tim James McConechy<br><b>Subject:</b> Re: How to Remove A View From Memory When Closed. [CompositeWPF:229036]</span></p></div></div><p class=MsoNormal> </p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">From: fantivero</span></p><div style=\"margin-bottom:24.0pt\" id=ThreadNotificationPostBody><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">Hi,</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">Thanks for reporting that, since it might help to users with similar scenarios. The approach that you used for removing the view seems to be correct.</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">On the other hand, if you do not have any other reference to the views in your application, they should be removed when the garbage collection occurs. But this is not possible to predict when it will occur. Probably, this is why you are seeing that your memory are going up.</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">I would recommend to you to try adding a button (in the toolbar of your app) to force to collect to the garbage collector using the following code:</span></p><pre><span style=\"font-size:11.5pt\">public void YourButtonClickCommand(object Object)</span></pre><pre><span style=\"font-size:11.5pt\">{<br>    GC.Collect();<br><br><br>}</span></pre><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">Then if after executing this code you realize that your memory is released, it means that you do not have a leak over there. But if this does not release, I would recommend you to check if your application is keeping a reference of your views (e.g. your region).</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">If you continue experiencing this situation, you could send a repro sample of your scenario.</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">I hope this help.</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">Fernando Antivero <br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></span></p></div><div style=\"border:none;border-top:solid #CCCCCC 1.0pt;padding:0in 0in 0in 0in\" id=ThreadNotificationFooter><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">Read the <a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=229036&ANCHOR#Post500112\">full discussion online</a>.</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">To add a post to this discussion, reply to this email (<a href=\"mailto:CompositeWPF@discussions.codeplex.com?subject=[CompositeWPF:229036]\">CompositeWPF@discussions.codeplex.com</a>)</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">To start a new discussion for this project, email <a href=\"mailto:CompositeWPF@discussions.codeplex.com\">CompositeWPF@discussions.codeplex.com</a></span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">You are receiving this email because you subscribed to this discussion on CodePlex. You can <a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/229036\">unsubscribe</a> on CodePlex.com.</span></p><p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at CodePlex.com</span></p></div></div>",
    "PostedDate": "2010-09-29T10:49:15.603-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "500120",
    "ThreadId": "229036",
    "Html": "<p>Hi,</p>\r\n<p>Thanks for sharing your findings with the rest of the community, since it is really valuable. Nice to see that you solved this scenario.</p>\r\n<p>Fernando Antivero <br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-09-29T10:53:07.423-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526239",
    "ThreadId": "229036",
    "Html": "\r\n<p>Hi Fernando,</p>\r\n<p>I have the same GridRegionAdapter in my application. The way I handle swithcing views in a region is using RequestNavigate (which implies I'm using MEF).</p>\r\n<p>Problem is the grid region adapter doesnt seem to get called for &quot;Remove&quot; action because I never call the region.Remove(view) and it piles up views on top of each other.</p>\r\n<p>I thought this should have been handled by the RegionManager.RequestNavigate. I have my views decorated with [RegionMemberLifetime(KeepAlive = false)] which ideally should have invoked the remove action when navigated away from.</p>\r\n<p>Is my understanding incorrect or should I be explicitly calling a region.Remove to invoke the Remove action so that my GridRegionAdapter captures it?</p>\r\n<p>Thanks.</p>\r\n",
    "PostedDate": "2010-11-23T22:12:47.933-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526241",
    "ThreadId": "229036",
    "Html": "\r\n<p>Hi fernando,</p>\r\n<p>I found the solution myself. I changed the following</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> IRegion CreateRegion()\r\n{\r\n<span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Region();\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>to</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> IRegion CreateRegion()\r\n{\r\n<span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> SingleActiveRegion();\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>and it works well now.</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-23T22:27:20.66-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]