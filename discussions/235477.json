[
  {
    "Id": "524902",
    "ThreadId": "235477",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I am trying to make use of the AnimatedTabControl from the RI of Prism 4 and kind of stuck on how to prevent the user from switching the tabs when there are changes yet to be comitted.</p>\r\n<p>Basically I would like to confirm&nbsp;if they want to loose the change and navigate to the other view of stay in the same view when a tab header is clicked.</p>\r\n<p>I also tried to make changes to the AnimatedTabControl code itself, even that dose not work.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected override void OnSelectionChanged(SelectionChangedEventArgs args)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (args.RemovedItems.Count &gt; 0)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool allowNavigation = true;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var switching = ((TabItem)args.RemovedItems[0]).Content as IViewSwitching;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (switching != null) { allowNavigation = switching.CanNavigateOut(); }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (allowNavigation)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.RestoreBufferedTabItemContent();</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Put the &quot;old&quot; view in a buffer so we can still show it to perform the starting animation with it<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.previousSelectedTabItem = (TabItem)args.RemovedItems[0];<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.previousSelectedTabItemContent = (FrameworkElement)this.previousSelectedTabItem.Content;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.previousSelectedTabItem.Content = null;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.CurrentView.Visibility = Visibility.Collapsed;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.BufferView.Content = this.previousSelectedTabItemContent;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.StartingTransition.Begin();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"text-decoration:underline\"><strong> this.SelectedItem = args.RemovedItems[0];</strong></span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;but that throws an exception as it goes to recursion. Would appriciate any help to solve this.</p>\r\n<p>Thanks,Kiran</p>\r\n",
    "PostedDate": "2010-11-21T02:39:45.947-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "525943",
    "ThreadId": "235477",
    "Html": "\r\n<p>Hi Kiran,</p>\r\n<p>You might find these blog posts from <a href=\"http://www.softinsight.com/bnoyes\">\r\nBrian Noyes</a> useful for achieving your purpose:</p>\r\n<ul>\r\n<li><a href=\"http://www.softinsight.com/bnoyes/2009/12/08/DetectingTheActiveViewInAPrismApp.aspx\">Detecting the Active View in a Prism App</a>\r\n</li><li><a href=\"http://www.softinsight.com/bnoyes/2009/09/05/SupportingGracefulShutdownAndSavingOnCloseFromAWPFPrismApp.aspx\">Supporting Graceful Shutdown and Saving on Close From a WPF Prism App</a>\r\n</li></ul>\r\n<p>Even though they are targeting slightly different scenarios, you could follow a similar approach as the ones described in the blog posts for your situation.</p>\r\n<p>You might also find the <strong><a href=\"http://msdn.microsoft.com/en-us/library/microsoft.practices.composite.presentation.regions.behaviors.regionactiveawarebehavior.aspx\">RegionActiveAwareBehavior</a></strong> behavior useful for your scenario.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2010-11-23T09:04:57.423-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526467",
    "ThreadId": "235477",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Thanks for your reply, but I don't really understand how I can prevent the the Prism shell from switching the Tab as I see no events I can hook in to. In the example link you provided, there is a &#65279;&#65279;&#65279;&#65279;OnWindowClosing where we can cancle the action, but&nbsp;with\r\n the RegionAdaptor on the TabControl there is no such option.</p>\r\n<p>Is there an event I can hook in to, I have already tried to change the &#65279;&#65279;&#65279;OnSelectionChanged but dose not help much.</p>\r\n<p>Regards, Kiran</p>\r\n",
    "PostedDate": "2010-11-24T07:51:44.24-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526550",
    "ThreadId": "235477",
    "Html": "\r\n<p>Hi Kiran,</p>\r\n<p>In Prism, one of the default behaviors attached to regions is the <a href=\"http://msdn.microsoft.com/en-us/library/microsoft.practices.composite.presentation.regions.behaviors.regionactiveawarebehavior.aspx\">\r\nRegionActiveAwareBehavior</a>. So if you implement <a href=\"http://msdn.microsoft.com/en-us/library/microsoft.practices.composite.iactiveaware.aspx\">\r\nIActiveAware</a> in your views, they will be notified when the view is activated or deactivated (through the Region.Activate and Region.Deactivate methods), thus modifying the\r\n<a href=\"http://msdn.microsoft.com/en-us/library/microsoft.practices.composite.iactiveaware.isactive.aspx\">\r\nIsActive</a> property of your view. When an object that implements IActiveAware changes its\r\n<a href=\"http://msdn.microsoft.com/en-us/library/microsoft.practices.composite.iactiveaware.isactive.aspx\">\r\nIsActive</a> property, you could raise the <a href=\"http://msdn.microsoft.com/en-us/library/microsoft.practices.composite.iactiveaware.isactivechanged.aspx\">\r\nIsActiveChanged</a> event, so you can hook to that event and implement the necessary logic to cancel the action if needed.</p>\r\n<p>That said, take into account that when you switch tabs in a <strong>TabControl\r\n</strong>Region, the views are being activated/deactivated accordingly, so the aforementioned seems to be a possible approach for achieving your scenario.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2010-11-24T10:16:49.597-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "527028",
    "ThreadId": "235477",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I tried the following you mentioned, but its resulting in the blank screen displayed on the first pass. and after that it has no faffect. do you&nbsp;see anything wrong in my approach.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">        private</span> <span style=\"color:blue\">bool</span> _isActive;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> IsActive\r\n        {\r\n            <span style=\"color:blue\">get</span>\r\n            {\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>._isActive;\r\n\r\n            }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>._isActive != value)\r\n                {\r\n                    <span style=\"color:blue\">this</span>._isActive = value;\r\n                    <span style=\"color:green\">// Fire IsActiveChanged event</span>\r\n                    RaiseIsActiveChanged();<span style=\"color:green\">//Your logic to fire the event</span>\r\n                    <span style=\"color:blue\">this</span>.RaisePropertyChanged(<span style=\"color:#a31515\">&quot;IsActive&quot;</span>);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> EventHandler IsActiveChanged;\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n        <span style=\"color:blue\">public</span> UpdateView MainView { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RaiseIsActiveChanged()\r\n        {\r\n            <span style=\"color:blue\">var</span> handler = <span style=\"color:blue\">this</span>.IsActiveChanged;\r\n            <span style=\"color:blue\">if</span> (handler != <span style=\"color:blue\">null</span>)\r\n            {\r\n                handler(<span style=\"color:blue\">this</span>, EventArgs.Empty);\r\n            }\r\n        }\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> MasterDataViewModel_IsActiveChanged(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n        {\r\n            <span style=\"color:blue\">if</span> (IsActive == <span style=\"color:blue\">false</span>)\r\n            {\r\n                <span style=\"color:green\">//bool allowNavigation = DataService.CanNavigateOutOfView();</span>\r\n                <span style=\"color:blue\">bool</span> allowNavigation = <span style=\"color:blue\">false</span>;\r\n                <span style=\"color:blue\">if</span> (!allowNavigation)\r\n                {\r\n                    iRegionManager.Regions[<span style=\"color:#a31515\">&quot;MainRegion&quot;</span>].Activate(MainView);\r\n                    <span style=\"color:green\">//this.VisibilityService.EnterViewAnimation(ScreenTransitionAnimation.GrowInOut, MainView, null);</span>\r\n                }\r\n            }\r\n        }\r\n</pre>\r\n</div>\r\n<p>&#65279;in this sample MainView is the usercontrol that needs t o be activated and I for my testing I am setting its value while assigning the data context to the view. I can't understand what else needs to be done.</p>\r\n<p>Regards, Kiran</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-25T09:27:28.627-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "527238",
    "ThreadId": "235477",
    "Html": "\r\n<p>Hi Kiran,</p>\r\n<p>Please let me know if you implement this successfully.</p>\r\n<p>Thanks.</p>\r\n",
    "PostedDate": "2010-11-25T23:27:00.57-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "527247",
    "ThreadId": "235477",
    "Html": "\r\n<p>well I had no luck in getting it working...</p>\r\n<p>Regards, Kiran</p>\r\n",
    "PostedDate": "2010-11-25T23:42:36.51-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "527471",
    "ThreadId": "235477",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Based on my understanding, you are trying to prevent the switching of a TabItem. I created a spike for achieving this scenario, so you can download it from\r\n<a href=\"http://cid-60a74023ee1812bd.office.live.com/self.aspx/.Public/PreventTabSwichingSample.zip\">\r\nhere</a>.</p>\r\n<p>The application adds a handler to the <strong>Views.CollectionChanged</strong> event in the region (MainRegion) and contains 3 tabitems, so when the user tries to switch from the middle tab (<strong>HelloWorld1</strong> view) to any other, it shows a confirmation\r\n dialog. If the user click <strong>Cancel </strong>button, it will prevent the tab switching, as shown below.</p>\r\n<pre><span style=\"color:blue\">public partial class </span><span style=\"color:#2b91af\">Shell </span>: UserControl<br>{<br>    <span style=\"color:blue\">private readonly </span>IRegionManager _regionManager;<br>    <span style=\"color:blue\">private </span>IRegion _mainRegion;<br>    <span style=\"color:blue\">private </span>UserControl _dirtyView;<br><br>    <span style=\"color:blue\">public </span>Shell(IRegionManager regionManager)<br>    {<br>        InitializeComponent();<br>        _regionManager = regionManager;<br>        _regionManager.Regions.CollectionChanged &#43;= Regions_CollectionChanged;<br>    }<br><br>    <span style=\"color:blue\">private void </span>Regions_CollectionChanged(<span style=\"color:blue\">object </span>sender, NotifyCollectionChangedEventArgs e)<br>    {<br>        <span style=\"color:blue\">foreach </span>(<span style=\"color:blue\">var </span>region <span style=\"color:blue\">in </span>e.NewItems)<br>        {<br>            <span style=\"color:blue\">var </span>newRegion = (Region)region;<br>            <span style=\"color:blue\">if </span>(newRegion.Name == <span style=\"color:#a31515\">&quot;MainRegion&quot;</span>)<br>            {<br>                _mainRegion = newRegion;<br>                _mainRegion.ActiveViews.CollectionChanged &#43;= Views_CollectionChanged;<br>                _regionManager.Regions.CollectionChanged -= Regions_CollectionChanged;<br>            }<br>        }<br>    }<br><br>    <span style=\"color:blue\">private void </span>Views_CollectionChanged(<span style=\"color:blue\">object </span>sender, NotifyCollectionChangedEventArgs e)<br>    {<br><br>        <span style=\"color:blue\">if </span>(e.Action == NotifyCollectionChangedAction.Remove)<br>        {<br>            <span style=\"color:blue\">var </span>possibleDirtyView = e.OldItems[e.OldStartingIndex] <span style=\"color:blue\">as </span>UserControl;<br><br>            _dirtyView = <span style=\"color:blue\">null</span>;<br>            <span style=\"color:green\">// check whether your view is dirty                <br>            </span><span style=\"color:blue\">if </span>(possibleDirtyView != <span style=\"color:blue\">null </span>&amp;&amp;<br>                possibleDirtyView.GetType() == <span style=\"color:blue\">typeof</span>(HelloWorldModule.Views.HelloWorld1))<br>            {<br>                <span style=\"color:blue\">var </span>result = MessageBox.Show(<span style=\"color:#a31515\">&quot;Are you sure?&quot;</span>, <span style=\"color:#a31515\">&quot;Confirmation&quot;</span>, MessageBoxButton.OKCancel);<br>                <span style=\"color:blue\">if </span>(result == MessageBoxResult.Cancel)<br>                {<br>                    _dirtyView = possibleDirtyView;<br>                }<br>            }<br>        }<br><br>        <span style=\"color:green\">//if you have a dirty view active it<br>        </span><span style=\"color:blue\">if </span>(e.Action == NotifyCollectionChangedAction.Add<br>            &amp;&amp; _dirtyView != <span style=\"color:blue\">null</span>)<br>        {<br>            _mainRegion.Activate(_dirtyView);<br>        }<br>    }<br><br>}<br></pre>\r\n<p>Hope this helps.</p>\r\n<p>Fernando Antivero <br>\r\n<a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-26T11:49:18.747-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "528395",
    "ThreadId": "235477",
    "Html": "\r\n<p>Fernando Antivero,</p>\r\n<p>This is exactly what I was looking for. Thanks for helping me out again.</p>\r\n<p>Regards, Kiran</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-29T10:32:27.433-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "581040",
    "ThreadId": "235477",
    "Html": "<p>Hi,</p>\r\n<p>I am trying to get this solution to work, and although it seems fine in silverlight i can't seem to get it to work in WPF. &nbsp;The call to Activate() on the region does not seem to cause the view to stay on the current tab. &nbsp;Any ideas?</p>\r\n<p>&nbsp;</p>\r\n<p>Cheers</p>",
    "PostedDate": "2011-03-15T15:42:31.393-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "581648",
    "ThreadId": "235477",
    "Html": "<p>Hi,</p>\r\n<p>We've been able to reproduce the issue you've mentioned. From our first impression, this seems to be related to a possible timing issue in the <strong>SelectorItemsSourceSyncBehavior</strong>, which (from its summary):</p>\r\n<p><em>\"(...) keeps the items of the &lt;see cref=\"Selector\"/&gt; host control in synchronization with the &lt;see cref=\"IRegion\"/&gt;. This behavior also makes sure that, if you activate a view in a region, the SelectedItem is set. If you set the SelectedItem or SelectedItems (ListBox) then this behavior will also call Activate on the selected items. When calling Activate on a view, you can only select a single active view at a time. By setting the SelectedItems property of a listbox, you can set multiple views to active.\"</em></p>\r\n<p>The behavior subscribes to the Region's <strong>ActiveViews CollectionChanged </strong>event and the hosting selector's <strong>SelectionChanged</strong> event (which in your case is a tab control) in order to match them. However, when manually setting the <strong>SelectedItem</strong>, the <strong>ActiveViews </strong>collection is also modified, so in order not to fire the event twice, a boolean field called <strong>updatingActiveViewsInHostControlSelectionChanged</strong> is set to true, so that the handler for the <strong>ActiveViews </strong>collection changed event does no action (avoiding a loop that could lead to an unexpected behavior). After the synchronization has been made, the <strong>updatingActiveViewsInHostControlSelectionChanged </strong>is set back to false.<strong><br /></strong></p>\r\n<p>The problem we've found is that, when you switch to a view and click \"Cancel\", the <strong>HostControlSelectionChanged</strong> method is called to synchronize the Region's <strong>ActiveViews </strong>collection (which sets the <strong>updatingActiveViewsInHostControlSelectionChanged</strong> value to true), and immediately after, the <strong>Activate</strong> method is called on the Region, before the <strong>HostControlSelectionChanged </strong>has reached the finally statement in which the <strong>updatingActiveViewsInHostControlSelectionChanged </strong>is set back to false, so the change in the active view caused by calling the <strong>Activate </strong>method is not displayed, since it's not synchronized with the view.</p>\r\n<p>To illustrate this, here's a fragment of the code from the <strong>HostControlSelectionChanged </strong>and <strong>ActiveViews</strong>_<strong>CollectionChanged</strong> methods in the <strong>SelectorItemsSourceSyncBehavior</strong>:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> ActiveViews_CollectionChanged(<span style=\"color: blue;\">object</span> sender, NotifyCollectionChangedEventArgs e)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">this</span>.updatingActiveViewsInHostControlSelectionChanged)\r\n            {\r\n                <span style=\"color: green;\">// If we are updating the ActiveViews collection in the HostControlSelectionChanged, that</span>\r\n                <span style=\"color: green;\">// means the user has set the SelectedItem or SelectedItems himself and we don't need to do that here now</span>\r\n                <span style=\"color: blue;\">return</span>;\r\n            }\r\n\r\n            (...)\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> HostControlSelectionChanged(<span style=\"color: blue;\">object</span> sender, SelectionChangedEventArgs e)\r\n        {\r\n            <span style=\"color: blue;\">try</span>\r\n            {\r\n                <span style=\"color: green;\">// Record the fact that we are now updating active views in the HostControlSelectionChanged method.</span>\r\n                <span style=\"color: green;\">// This is needed to prevent the ActiveViews_CollectionChanged() method from firing.</span>\r\n                <span style=\"color: blue;\">this</span>.updatingActiveViewsInHostControlSelectionChanged = <span style=\"color: blue;\">true</span>;\r\n\r\n                (...)\r\n            }\r\n            <span style=\"color: blue;\">finally</span>\r\n            {\r\n                <span style=\"color: blue;\">this</span>.updatingActiveViewsInHostControlSelectionChanged = <span style=\"color: blue;\">false</span>;\r\n            }\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>One possible workaround for this would be to handle the dirty view confirmation directly at a control level, not passing through the region. That would imply, for example, subscribing to the TabControl's <strong>SelectionChanged</strong> event to handle the confirmation.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-03-16T12:26:29.723-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]