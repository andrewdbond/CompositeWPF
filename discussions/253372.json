[
  {
    "Id": "595168",
    "ThreadId": "253372",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I&rsquo;ve been wondering for a long time how to this problem with toolbars and menus for my Prism based application. This will be a very large application with lots of different functionality which is why it is important to get this right.</p>\r\n<p>I need a menu with common items such as Exit (File) and Cut, Copy, Paste, Undo, Redo (Edit), etc. The same goes for the toolbar, where there&rsquo;s a main toolbar with buttons for the same functionality.<br>\r\nFor example the Save command has to be specific for the current active view, and only that. How would you handle this?</p>\r\n<p>Now depending on the module, I need buttons that have common functionality for all views in that module. So when a view in a module gets requested, these buttons are added to the main toolbar, and when no more views from that module are active, the buttons\r\n are removed. Note that this is still the main toolbar &ndash; not a new toolbar in the same tray. How can I handle this adding and removing of buttons to the main toolbar? This main toolbar is defined in the Shell (with the buttons mentioned above).</p>\r\n<p>Buttons that a very view-specific will be shown in their own toolbar so they should not be a problem.</p>\r\n<p>I really hope that someone can help me see the solutions to these problems as they are a very important feature in our application.</p>\r\n<p>Thank you very much!</p>\r\n<p>Best regards,<br>\r\nTommy</p>\r\n",
    "PostedDate": "2011-04-11T01:44:27.18-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "595439",
    "ThreadId": "253372",
    "Html": "<p>Hi Tommy,</p>\r\n<p>Based on my understanding of your scenario, you might find Commanding concepts handy.</p>\r\n<p>In a composite scenario, the command handler is often a view model that does not have any associated elements in the visual tree or is not the focused element. To support this, Prism provides <strong>DelegateCommand</strong>, which allows you to call a delegate method when the command is executed, and <strong>CompositeCommand</strong>, which allows you to combine multiple commands. These commands are different from the built-in <strong>RoutedCommand</strong>, which will route command execution and handling up and down the visual tree.</p>\r\n<p><strong>CompositeCommands</strong> can be connected to several child commands.</p>\r\n<p>For example your application could have global <strong>CompositeCommands</strong> that are defined in the shell that have meaning across modules, such as Save or Cancel commands. Modules can then register their local commands with these global commands and participate in their execution.</p>\r\n<p>Additionally, you can read more about Commanding in <a href=\"http://msdn.microsoft.com/en-us/library/ff921122(PandP.40).aspx\">Chapter 9: Communicating Between Loosely Coupled Components</a>. Also, you might find the <a href=\"http://msdn.microsoft.com/en-us/library/ff921082(PandP.40).aspx\">Commanding QuickStart</a> useful.</p>\r\n<p>Please, let me know if this information helps you.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br /><a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-04-11T10:35:45.503-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "595450",
    "ThreadId": "253372",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>mbronzovic wrote:</strong><br />\r\n<p>Hi Tommy,</p>\r\n<p>Based on my understanding of your scenario, you might find Commanding concepts handy.</p>\r\n<p>In a composite scenario, the command handler is often a view model that does not have any associated elements in the visual tree or is not the focused element. To support this, Prism provides <strong>DelegateCommand</strong>, which allows you to call a delegate method when the command is executed, and <strong>CompositeCommand</strong>, which allows you to combine multiple commands. These commands are different from the built-in <strong>RoutedCommand</strong>, which will route command execution and handling up and down the visual tree.</p>\r\n<p><strong>CompositeCommands</strong> can be connected to several child commands.</p>\r\n<p>For example your application could have global <strong>CompositeCommands</strong> that are defined in the shell that have meaning across modules, such as Save or Cancel commands. Modules can then register their local commands with these global commands and participate in their execution.</p>\r\n<p>Additionally, you can read more about Commanding in <a href=\"http://msdn.microsoft.com/en-us/library/ff921122(PandP.40).aspx\">Chapter 9: Communicating Between Loosely Coupled Components</a>. Also, you might find the <a href=\"http://msdn.microsoft.com/en-us/library/ff921082(PandP.40).aspx\">Commanding QuickStart</a> useful.</p>\r\n<p>Please, let me know if this information helps you.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br /><a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a>&nbsp;</p>\r\n</blockquote>\r\n<p><br />Hi Miguel,</p>\r\n<p>Sorry if I didn't explain my problem correctly, but wiring up commands is not really my problem.</p>\r\n<p>Let me try to explain it. What I'm trying to get a grasp on is how I can show and hide each button. It might be really simple, but I haven't been able to find much information about it.</p>\r\n<p>Let's say that I have a toolbar with my common buttons such as Save. To this specific toolbar, i need to add other buttons from my modules. For example, I have a OrderModule with a view called OrderSummary. When this view is requested (or any other view in the OrderModule), I need to add a \"New Order\" button to this toolbar. When OrderModule no longer has an active view, the button should be removed again.</p>\r\n<p>I was thinking about creating a \"Service\" with methods for adding buttons to this toolbar (the toolbar is defined in the Shell). But where should I control when to add and remove module-wide buttons?</p>\r\n<p>Does it make any sense?</p>",
    "PostedDate": "2011-04-11T10:46:29.34-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "595535",
    "ThreadId": "253372",
    "Html": "<p>Tommy,</p>\r\n<p>One possible way to fulfill your goal could be set a region in the shell that can hold the buttons of the module, like a toolbar. When you load a module, in the <strong>Initialize</strong> method you could <em>inject a view</em> that holds these buttons that implements the specific functionality of your modules.</p>\r\n<p>On the other hand, you can also read <a href=\"http://compositewpf.codeplex.com/discussions/224510\">this thread</a> where a similar requirement is achieved in order to manage a custom menu toolbar.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br /><a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-04-11T14:09:09.003-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "596621",
    "ThreadId": "253372",
    "Html": "<p>Tommy,</p>\n<p>Like I had posted before on the WPF forums you can do it fairly simply with a centralized approach with a couple of ObservableCollection&lt;ControlType&gt;'s and just bind the collection to the controls on the shell via the ShellViewModel at start up. &nbsp;making  them a region is kinda of more work than is necessary. &nbsp;Then each module knows about the Service then and sends messages via the Service which sends the passed information to the subscribers in the ShellViewModel.</p>\n<p>You could create a custom object (hell it could be string value, \"viewmodelname:800\", name for removal/grouping, value for sorting) assigned to the Tag property to allow for removal based on criteria which view is active. &nbsp;When the view changes you would just run through your collection check the Tag property for the custom  information and remove it if it matches accordingly. &nbsp;Obviously you would need to make sure you global items aren't tagged with custom information so you accidentally don't remove them.</p>\n<p>One thing I wanted to point out but didn't exactly have the best way to describe it. &nbsp;I do use the MVVM Pattern but found that self-hydration of the Collections was cumbersome when responding to events so I moved the collections and the pub/sub to a Controller,  the controller is responsible for the Hydration of Collections in the ShellViewModel then. &nbsp;I hope that isn't confusing. &nbsp;It just seemed cleaner overall. &nbsp;It had code smell you could say.</p>\n<p>&nbsp;</p>\n<p>Morgan.</p>",
    "PostedDate": "2011-04-13T07:45:15.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "596669",
    "ThreadId": "253372",
    "Html": "<blockquote style=\"padding-bottom: 0px; font-style: italic; margin: 0.25em 1em 0px; padding-left: 0.25em; padding-right: 0.25em; padding-top: 0px; border: #ccc 0.1em solid;\"><strong>mvermef wrote:</strong><br />\r\n<p>Tommy,</p>\r\n<p>Like I had posted before on the WPF forums you can do it fairly simply with a centralized approach with a couple of ObservableCollection&lt;ControlType&gt;'s and just bind the collection to the controls on the shell via the ShellViewModel at start up. &nbsp;making them a region is kinda of more work than is necessary. &nbsp;Then each module knows about the Service then and sends messages via the Service which sends the passed information to the subscribers in the ShellViewModel.</p>\r\n<p>You could create a custom object (hell it could be string value, \"viewmodelname:800\", name for removal/grouping, value for sorting) assigned to the Tag property to allow for removal based on criteria which view is active. &nbsp;When the view changes you would just run through your collection check the Tag property for the custom information and remove it if it matches accordingly. &nbsp;Obviously you would need to make sure you global items aren't tagged with custom information so you accidentally don't remove them.</p>\r\n<p>One thing I wanted to point out but didn't exactly have the best way to describe it. &nbsp;I do use the MVVM Pattern but found that self-hydration of the Collections was cumbersome when responding to events so I moved the collections and the pub/sub to a Controller, the controller is responsible for the Hydration of Collections in the ShellViewModel then. &nbsp;I hope that isn't confusing. &nbsp;It just seemed cleaner overall. &nbsp;It had code smell you could say.</p>\r\n<p>&nbsp;</p>\r\n<p>Morgan.</p>\r\n</blockquote>\r\n<p><br />Exactly. Did you ever see my response on the WPF forum? :-)</p>\r\n<p>Do you have a sample implementation for that \"custom\" object? It seems a bit hacky to me, but I might be wrong about it.</p>",
    "PostedDate": "2011-04-13T08:56:53.88-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "597302",
    "ThreadId": "253372",
    "Html": "<p>I did :)</p>\r\n<p>As for the custom object right now I am just using a Integer value for sorting of the root menu items.&nbsp;Then just using a linq query + a loop to replace / insert the menu items. &nbsp;Also, you understand I don't remove from the menu ever since my current setup is a TabControl (MainRegion) for displaying content and I load data automatically on load. &nbsp;I will probably help this alittle with some reactive framework calls for an async feel, to make sure the UI isn't unresponsive, while the data is being pulled in.</p>\r\n<p>For the object you could use a 2 property class which is assigned to the Tag property (which is object type). &nbsp;Then just do some linq magic to do the inclusions/exclusions.</p>\r\n<p>I might being to the it most elegant way but it serves its purpose and works. &nbsp;I can say that I did do some searching all over for examples, did come across a few, but they did end up re-creating a new class with menuitem being part of it. &nbsp;They didn't feel very adaptive. &nbsp;I will probably work on something slightly better but this stuff atm isn't my day job. &nbsp;</p>",
    "PostedDate": "2011-04-14T09:56:42.513-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]