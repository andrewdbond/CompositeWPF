[
  {
    "Id": "673846",
    "ThreadId": "273120",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I am using Prism 4 as my app framework, trying to be as MVVM as possible.</p>\r\n<p>I ran into the following issue in a relatively simple scenario, in which I will kindly ask for your help:</p>\r\n<p>My Main window contains a tab control defined as a region. I inject 2 views (actually view models) to that region- so far so good. The second viewmodel added, binds to a view that defines another tabcontrol that is defined as a region.</p>\r\n<p>Now, the call:</p>\r\n<p>var model - _container.Resolve&lt;DynamicAddedViewModel&gt;();</p>\r\n<p>_regionaManager.AddToRegion(RegionNames.SecondReg, model)</p>\r\n<p>fails because there is no region by this name- where it does apear in the xaml of the view added to the first region.</p>\r\n<p>Can you please enlighten me?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks!</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-09-19T13:08:17.003-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "674218",
    "ThreadId": "273120",
    "Html": "<p>Hi,</p>\n<p>Based on my understanding of your scenario, as you are using View Model first approach, it's likely that your are defining your region inside a <strong>DataTemplate</strong>. Regions defined inside <strong>DataTemplates </strong> cannot be found by the <strong>RegionManagerRegistrationBehavior</strong> behavior. That might be the cause of your problem.<br /> You'll find more information regarding that in the following link:</p>\n<ul>\n<li>&nbsp;&nbsp;&nbsp; <a href=\"http://compositewpf.codeplex.com/discussions/237203\">Region defined in a view is not added to RegionManger.Regions collection</a> </li>\n<li>&nbsp;&nbsp;&nbsp; <a href=\"http://compositewpf.codeplex.com/discussions/264032\">Region inside UserControl</a> </li>\n</ul>\n<p>I hope you find this useful.</p>\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2011-09-20T07:53:45.56-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "674368",
    "ThreadId": "273120",
    "Html": "<p>Hi Agustin,</p>\r\n<p>Thanks for you reply. It is indeed useful and I see this is the case.</p>\r\n<p>I am just doing my first steps in prism, and I could use some help in either way described in the first link you pointed:</p>\r\n<p>1. I don't have a clue on how to add a region behavior that will create a region from a data template, source code is missing in the link of that other thread.</p>\r\n<p>2. Regarding the second option- using IRegionCollection.Add to add the region- does this mean that I have to write code in the code behind of \"MyView\" and define \"MyRegion\" with RegionManager.SetRegionName to get the IRegion first, then add it to the collection via RegionManagerExtensions ?</p>\r\n<p>My whole app is working with viewmodel first, and I'd hate to break it...</p>\r\n<p>I'd appreciate your help very much</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks.</p>",
    "PostedDate": "2011-09-20T12:41:54.567-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "674666",
    "ThreadId": "273120",
    "Html": "<p>Hello</p>\r\n<p>&nbsp;</p>\r\n<p>Same trouble here</p>\r\n<p>can you please give us hints on how to write a custom region behavior that discovers regions inside datatemplates ?</p>\r\n<p>Thanks</p>",
    "PostedDate": "2011-09-21T06:12:57.38-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "674957",
    "ThreadId": "273120",
    "Html": "<p>Hi,</p>\n<p>As Agustin said, the region is created, but it does not get registered by the <strong> RegionManagerRegistrationBehavior</strong> behavior. Based on my understanding, this is caused because the <strong>RegionManagerRegistrationBehavior</strong> tries to obtain the <strong>RegionManager </strong>from the visual parent of the element containing the region. As a <strong> DataTemplate </strong>doesn't have a visual parent, the <strong>RegionManagerRegistrationBehavior</strong> cannot found the <strong>RegionManager</strong> and the region is never registered. This is a known issue in Prism (there is a <a href=\"http://compositewpf.codeplex.com/workitem/3612\">work item</a> created in the issue tracker with a possible workaround modifying the Prism library).</p>\n<p>A simple workaround for this is using the view discovery approach (this is, using the <strong>RegisterViewWithRegion </strong>method of <strong>IRegionViewRegistry</strong>) as the view is injected in the region when its created.</p>\n<p>You can find a sample of this in the aforementioned thread (you can find the repro-sample stored <a href=\"https://skydrive.live.com/?cid=12A8B70137345033&amp;id=12A8B70137345033%21119#\"> here</a> with the name \"<strong>RegionInsideDataTemplateSample</strong>\").</p>\n<p>Another possible workaround for this in <strong>WPF </strong>is to define a custom <strong>UserControl </strong>that creates a <strong>RegionManager </strong>as a dynamic resource and set it as an attached property in the <strong>DataTemplate</strong>.</p>\n<p>As an example to do this, you could use something like the following:</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">    public</span> <span style=\"color: blue;\">class</span> ViewWithFixForRegionsInDataTemplates : UserControl\n    {\n        <span style=\"color: blue;\">bool</span> regionManagerFound = <span style=\"color: blue;\">false</span>;\n\n        <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> OnVisualParentChanged(DependencyObject oldParent)\n        {\n            <span style=\"color: blue;\">base</span>.OnVisualParentChanged(oldParent);\n\n            IRegionManager regionManager;\n\n            <span style=\"color: blue;\">if</span> ((regionManager = <span style=\"color: blue;\">this</span>.FindRegionManager(<span style=\"color: blue;\">this</span>)) != <span style=\"color: blue;\">null</span> &amp;&amp; !regionManagerFound)\n            {\n                <span style=\"color: blue;\">this</span>.Resources.Add(<span style=\"color: #a31515;\">\"RegionManager\"</span>, regionManager);\n                regionManagerFound = <span style=\"color: blue;\">true</span>;\n            }\n        }\n\n        <span style=\"color: blue;\">private</span> IRegionManager GetRegionmanager(DependencyObject element)\n        {\n            <span style=\"color: blue;\">return</span> element.GetValue(RegionManager.RegionManagerProperty) <span style=\"color: blue;\">as</span> IRegionManager;\n        }\n\n        <span style=\"color: blue;\">private</span> IRegionManager FindRegionManager(DependencyObject dependencyObject)\n        {\n            <span style=\"color: blue;\">var</span> regionmanager = <span style=\"color: blue;\">this</span>.GetRegionmanager(dependencyObject);\n            <span style=\"color: blue;\">if</span> (regionmanager != <span style=\"color: blue;\">null</span>)\n            {\n                <span style=\"color: blue;\">return</span> regionmanager;\n            }\n\n            DependencyObject parent = <span style=\"color: blue;\">null</span>;\n<span style=\"color: blue;\">#if</span> SILVERLIGHT\n                    FrameworkElement frameworkElement = dependencyObject <span style=\"color: blue;\">as</span> FrameworkElement;\n                    <span style=\"color: blue;\">if</span> (frameworkElement != <span style=\"color: blue;\">null</span>)\n                    {\n                        parent = frameworkElement.Parent;\n                    }\n<span style=\"color: blue;\">#else</span>\n            parent = LogicalTreeHelper.GetParent(dependencyObject);\n<span style=\"color: blue;\">#endif</span>\n            <span style=\"color: blue;\">if</span> (parent != <span style=\"color: blue;\">null</span>)\n            {\n                <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">this</span>.FindRegionManager(parent);\n            }\n\n            <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">null</span>;\n        }\n    }\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>This class, <strong>ViewWithFoxForRegionsInDataTemplate</strong>, is a <strong> UserControl </strong>from where a view can inherit.</p>\n<p>In order to use this, inside of the <strong>ContentTemplate </strong>of a <strong> ContentControl </strong>(or the control where the view with the region is injected) you need to write the following code:</p>\n<p>&lt;ContentControl.ContentTemplate&gt;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DataTemplate&gt;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ItemsControl prism:RegionManager.RegionManager=\"{DynamicResource RegionManager}\" prism:RegionManager.RegionName=\"RegionInsideDataTemplate\"&gt;&lt;/ItemsControl&gt;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/DataTemplate&gt;<br /> &lt;/ContentControl.ContentTemplate&gt;</p>\n<p>You can find a sample with this workaround stored <a href=\"https://skydrive.live.com/?cid=7890102b5b8bc928&amp;sc=documents&amp;uc=1&amp;id=7890102B5B8BC928%21103\"> here </a>with the name <strong>RegionInsideDataTemplateWithFix.</strong></p>\n<p>Again, note that this workaround only works with <strong>WPF</strong> as the <strong> UserControl ViewWithFoxForRegionsInDataTemplate</strong> does not work properly in <strong>Silverlight</strong>. The approach is still valid, however the <strong>RegionManager</strong> should be obtained through other means.</p>\n<p>I hope you find this useful,</p>\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\" target=\"_blank\">http://blogs.southworks.net/dcherubini</a></p>\n<div id=\"_mcePaste\" class=\"mcePaste\" style=\"position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;\">public class ViewWithFixForRegionsInDataTemplates : UserControl<br /> &nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool regionManagerFound = false;<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected override void OnVisualParentChanged(DependencyObject oldParent)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.OnVisualParentChanged(oldParent);<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IRegionManager regionManager;<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((regionManager = this.FindRegionManager(this)) != null &amp;&amp; !regionManagerFound)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.Resources.Add(\"RegionManager\", regionManager);<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; regionManagerFound = true;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private IRegionManager GetRegionmanager(DependencyObject element)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return element.GetValue(RegionManager.RegionManagerProperty) as IRegionManager;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private IRegionManager FindRegionManager(DependencyObject dependencyObject)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var regionmanager = this.GetRegionmanager(dependencyObject);<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (regionmanager != null)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return regionmanager;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DependencyObject parent = null;<br /> #if SILVERLIGHT<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //parent = System.Windows.Media.VisualTreeHelper.GetParent(dependencyObject);<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FrameworkElement frameworkElement = dependencyObject as FrameworkElement;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (frameworkElement != null)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parent = frameworkElement.Parent;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> #else<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parent = LogicalTreeHelper.GetParent(dependencyObject);<br /> #endif<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (parent != null)<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return this.FindRegionManager(parent);<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return null;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /> &nbsp;&nbsp;&nbsp; }\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> ViewWithFixForRegionsInDataTemplates : UserControl\n    {\n        <span style=\"color: blue;\">bool</span> regionManagerFound = <span style=\"color: blue;\">false</span>;\n\n        <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> OnVisualParentChanged(DependencyObject oldParent)\n        {\n            <span style=\"color: blue;\">base</span>.OnVisualParentChanged(oldParent);\n\n            IRegionManager regionManager;\n\n            <span style=\"color: blue;\">if</span> ((regionManager = <span style=\"color: blue;\">this</span>.FindRegionManager(<span style=\"color: blue;\">this</span>)) != <span style=\"color: blue;\">null</span> &amp;&amp; !regionManagerFound)\n            {\n                <span style=\"color: blue;\">this</span>.Resources.Add(<span style=\"color: #a31515;\">\"RegionManager\"</span>, regionManager);\n                regionManagerFound = <span style=\"color: blue;\">true</span>;\n            }\n        }\n\n        <span style=\"color: blue;\">private</span> IRegionManager GetRegionmanager(DependencyObject element)\n        {\n            <span style=\"color: blue;\">return</span> element.GetValue(RegionManager.RegionManagerProperty) <span style=\"color: blue;\">as</span> IRegionManager;\n        }\n\n        <span style=\"color: blue;\">private</span> IRegionManager FindRegionManager(DependencyObject dependencyObject)\n        {\n            <span style=\"color: blue;\">var</span> regionmanager = <span style=\"color: blue;\">this</span>.GetRegionmanager(dependencyObject);\n            <span style=\"color: blue;\">if</span> (regionmanager != <span style=\"color: blue;\">null</span>)\n            {\n                <span style=\"color: blue;\">return</span> regionmanager;\n            }\n\n            DependencyObject parent = <span style=\"color: blue;\">null</span>;\n<span style=\"color: blue;\">#if</span> SILVERLIGHT\n            <span style=\"color: green;\">//parent = System.Windows.Media.VisualTreeHelper.GetParent(dependencyObject);</span>\n                    FrameworkElement frameworkElement = dependencyObject <span style=\"color: blue;\">as</span> FrameworkElement;\n                    <span style=\"color: blue;\">if</span> (frameworkElement != <span style=\"color: blue;\">null</span>)\n                    {\n                        parent = frameworkElement.Parent;\n                    }\n<span style=\"color: blue;\">#else</span>\n            parent = LogicalTreeHelper.GetParent(dependencyObject);\n<span style=\"color: blue;\">#endif</span>\n            <span style=\"color: blue;\">if</span> (parent != <span style=\"color: blue;\">null</span>)\n            {\n                <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">this</span>.FindRegionManager(parent);\n            }\n\n            <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">null</span>;\n        }\n    }\n</pre>\n</div>\n</div>",
    "PostedDate": "2011-09-21T15:03:24.29-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "676290",
    "ThreadId": "273120",
    "Html": "<p>Hi,</p>\r\n<p>Thanks for your reply. Before I move on to a somewhat complicated solution, I'd like to try simple ones, because I am new to PRISM and assume that I ma not the first to do this:</p>\r\n<p>As mentioned, I am using viewmodel first approach and I am using view injection.</p>\r\n<p>My main window has a tab control defined as the Main Region. 2 tabs items are added thru:</p>\r\n<p>&nbsp;</p>\r\n<p>IRegionManager&nbsp;_regionManager&nbsp;=&nbsp;Container.Resolve&lt;IRegionManager&gt;();</p>\r\n<p>_regionManager.RegisterViewWithRegion(RegionNames.MainRegion,&nbsp;typeof(Pane1ViewModel));</p>\r\n<p>_regionManager.RegisterViewWithRegion(RegionNames.MainRegion,typeof(Pane2ViewModel));</p>\r\n<p>The Pane2 view model has a tabcontrol defined as a region DynamicRegion, and it has 2 buttons Add and clear, that should inject and remove a Pane3ViewModel from that tabcontrol.</p>\r\n<p>Adding:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var&nbsp;model&nbsp;=&nbsp;_container.Resolve&lt;Pane3ViewModel&gt;();</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.Header=&nbsp;(count++).ToString();</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;rm&nbsp;=&nbsp;_container.Resolve&lt;IRegionManager&gt;();</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rm.RegisterViewWithRegion(RegionNames.DynamicRegion,()=&gt;&nbsp;model);</p>\r\n<p>That works fine. and moving from pane1 to pane2 thru the tabcontrol, works fine too.</p>\r\n<p>Now when I try to remove them I try:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var&nbsp;rm&nbsp;=&nbsp;_container.Resolve&lt;IRegionManager&gt;();</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(rm.Regions.ContainsRegionWithName(RegionNames.DynamicRegion)) {</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;vms&nbsp;=&nbsp;new&nbsp;List&lt;object&gt;(rm.Regions[RegionNames.DynamicRegion].Views);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach&nbsp;(object&nbsp;vm&nbsp;in&nbsp;vms) {</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rm.Regions[RegionNames.GraphTestResultsRegion].Remove(vm);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;The problem is, that the region manager has ONLY the MainRegion registered, and I don't understand how can I remove those views.</p>\r\n<p>Actually, even after the first injection, with a breakpoint on the add function, just before the \"RegisterViewWithRegion\" call, there is no such region.</p>\r\n<p>I'd appreciate any help understanding this.</p>\r\n<p>Thanks,</p>\r\n<p>Yuvalic</p>",
    "PostedDate": "2011-09-25T02:30:41.273-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "676855",
    "ThreadId": "273120",
    "Html": "<p>Hi Yuvalic,</p>\r\n<p>As explained above above in my previous answer, when you have a <strong>Region </strong>defined inside a <strong>Template</strong>, that <strong>Region </strong>is never registered because the <strong>RegionManagerRegistrationBehavior</strong> cannot found the corresponding <strong>RegionManager </strong>to register the <strong>Region</strong>. This happens because the <strong>RegionManagerRegistrationBehavior</strong> tries to obtain the <strong>RegionManager</strong><strong></strong> from the <strong>Template</strong>. As the <strong>Template </strong>does not have a <strong>RegionManager</strong>, the <strong>RegionManagerRegistrationBehavior </strong>tries to obtain the <strong>RegionManager</strong><strong></strong> from the visual parent of the <strong>Template</strong>, but it does not have any visual parent. As a result, as the <strong>RegionManagerRegistrationBehavior</strong> cannot find any <strong>RegionManager</strong>, the <strong>Region </strong>is not registered.</p>\r\n<p>This is why the region \"DynamicRegion\", which is defined inside the template used to map the \"Pane3ViewModel\" view model to the view, is not contained in the <strong>RegionManager</strong>. Please note that, as mentioned above,&nbsp; this is currently <a href=\"http://compositewpf.codeplex.com/workitem/3612\">an issue</a> in Prism and, in order to avoid it, you might need to implement a workaround for it.</p>\r\n<p>As described above, a possible approach for this is to attach a <strong>RegionManager </strong>to the <strong>Template</strong>. This is can be done using, for example, the following code where, in this case, the <strong>ContentControl</strong> would be the one containing the \"DynamicRegion\" in the \"Pane3View\":</p>\r\n<p><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ContentControl</span> <span style=\"color: red;\">prism:RegionManager.RegionManager</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding ScopedRegionManager}</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">prism:RegionManager.RegionName</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">DynamicRegion</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span></p>\r\n<p>This sets a <strong>RegionManager </strong>as an attached property to the <strong>ContentControl </strong>so that the <strong>Region </strong>can be registered. Note that the <strong>RegionManager </strong>attached property could also be attached to the \"Pane3View\" as the <strong>RegionManagerRegistrationBehavior</strong> will search for that attached property in the <strong>ContentControl's </strong>visual parent. In this example, the <strong>RegionManager </strong>is obtained through a property in the view model, however, the method you use to obtain the corresponding <strong>RegionManager </strong>for that Region depends mostly of the requirements of you scenario. For example, you could use a obtain the <strong>RegionManager </strong>directly in the view model or through a <strong>Shared Service</strong>.</p>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\" target=\"_blank\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-09-26T13:52:29.95-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]