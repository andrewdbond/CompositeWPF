[
  {
    "Id": "590986",
    "ThreadId": "252332",
    "Html": "<p>Hi,</p>\n<p>&nbsp;</p>\n<p>I have an interesting situation and kind of stuck for now.<br /> <br /> I have a ToolbarView that I would like to reuse within my application. Therefore I would have three ViewModels that would use the same view. &nbsp;I thought I could create a base class or interface for the View's ctor in this case.</p>\n<p>Now I am actually already using an ItemsControl that is a region within my Shell:</p>\n<pre><span><div style=\"color: black; background-color: white;\"><pre>&lt;sdk:TabControl regions:RegionManager.RegionName=<span style=\"color: #a31515;\">\"MainRegion\"</span>/&gt;    \n</pre>\n</div>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></pre>\n<p>Each tab on this region would contain a ContactView that takes a ContactViewModel injected. So far so good.</p>\n<p>Now I need to have a Region defined within the ContactView to register a ToolbarView in there and inject my Toolbar<strong><span style=\"color: #008080;\">Call</span></strong>ViewModel in there. A ToolbarView outside my ContactView for example would get a plain ToolbarViewModel injected. etc</p>\n<p>I have created a contentcontrol within the Contact View in order to do the plan above:</p>\n<pre><span><div style=\"color: black; background-color: white;\"><pre>&lt;ContentControl regions:RegionManager.RegionName=<span style=\"color: #a31515;\">\"ToolbarCallRegion\"</span>/&gt;    \n</pre>\n</div>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></pre>\n<p>Now within my adding a ContactView to the ItemsControl (mainRegion) mechanism I do the following:</p>\n<pre><div style=\"color: black; background-color: white;\"><pre><span style=\"color: green;\">// Add the View in a new Tab</span>\n<span style=\"color: blue;\">var</span> contactViewModel = _container.Resolve&lt;ContactViewModel&gt;();\ncontactViewModel.Initialize(contact);\n<span style=\"color: blue;\">var</span> view = <span style=\"color: blue;\">new</span> ContactView(contactViewModel);\n \n<span style=\"color: blue;\">var</span> toolbarCallViewModel = _container.Resolve&lt;ToolbarCallViewModel&gt;();\n<span style=\"color: blue;\">var</span> viewCallToolbar = <span style=\"color: blue;\">new</span> ToolbarView(toolbarCallViewModel);\n                \n_regionManager.Regions[Constants.MainRegion].Add(view, contact.ContactID.ToString());\n_regionManager.Regions[Constants.ToolbarCallRegion]<span style=\"color: #ff0000;\">.Add</span>(viewCallToolbar, contact.ContactID + <span style=\"color: #a31515;\">\"callToolbar\"</span>);\n</pre>\n</div>\n<br /></pre>\n<p>Now the last line works only the first time I am adding a view. Since its only a ContentControl, this approach seems wrong to me. How would it even know that this Region is meant to be unique within that ContactView?</p>\n<p>I hope you guys know what I mean,<br /> Thanks for help,</p>\n<p>Houman&nbsp;</p>",
    "PostedDate": "2011-04-03T12:56:34.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "591422",
    "ThreadId": "252332",
    "Html": "<p>Hi Houman,</p>\r\n<p>From my understanding of your scenario, you could benefit from using scoped regions. Since only one region with the same name can exist in a RegionManager, if a view that contains a region is added more than once, a scoped region manager should be created in order for the new regions created to be placed in separate region managers. The <a href=\"http://msdn.microsoft.com/en-us/library/gg405980%28PandP.38%29.aspx\">IRegion.Add</a> method has an optional boolean parameter that specifies if you wish to create a scoped region manager, and returns that region manager.</p>\r\n<p>Therefore, your last lines could be modified to something like this:</p>\r\n<pre><pre></pre>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: green;\">// Add the View in a new Tab</span>\r\n<span style=\"color: blue;\">var</span> contactViewModel = _container.Resolve&lt;ContactViewModel&gt;();\r\ncontactViewModel.Initialize(contact);\r\n<span style=\"color: blue;\">var</span> view = <span style=\"color: blue;\">new</span> ContactView(contactViewModel);\r\n \r\n<span style=\"color: blue;\">var</span> toolbarCallViewModel = _container.Resolve&lt;ToolbarCallViewModel&gt;();\r\n<span style=\"color: blue;\">var</span> viewCallToolbar = <span style=\"color: blue;\">new</span> ToolbarView(toolbarCallViewModel);\r\n                \r\n<span style=\"color: blue;\">var</span> scopedRegionManager = _regionManager.Regions[Constants.MainRegion].Add(view, contact.ContactID.ToString(), <span style=\"color: blue;\">true</span>);\r\nscopedRegionManager.Regions[Constants.ToolbarCallRegion].Add(viewCallToolbar, contact.ContactID + <span style=\"color: #a31515;\">\"callToolbar\"</span>);\r\n\r\n</pre>\r\n</div>\r\n</pre>\r\n<p>You can read more about scoped regions in the following chapter from the Prism MSDN documentation:</p>\r\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ff921098%28PandP.40%29.aspx\">Chapter 7: Composing the User Interface</a></p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-04-04T10:11:32.897-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "591852",
    "ThreadId": "252332",
    "Html": "<p>Thank you so much Guido.&nbsp; <br /><br />Your code example made it very clear how this works.</p>\r\n<p>Have a good day,</p>\r\n<p>Houman</p>",
    "PostedDate": "2011-04-05T01:40:42.727-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]