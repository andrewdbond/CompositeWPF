[
  {
    "Id": "439335",
    "ThreadId": "211668",
    "Html": "<p>Hi there,</p>\r\n<p>I'm building a custom WPF control that exposes a read/write DelegateCommand&lt;T&gt; property as follows.<br>This is done so that I could bind an actual command instance defined in my view model to this control.<br>Note that I'm subscribing to &nbsp;SearchCommand.CanExecuteChanged inside OnSearchCommandChanged. However, at some point the event handler stops being called.</p>\r\n<p>I've looked at the command's _canExecuteChangedHandlers still has a WeakReference to my handler method, however its Target quickly becomes null. I'm not really sure why the reference gets lost since the WPF control is never removed from the visual tree.</p>\r\n<p>Please advise.</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>        <span style=\"color:blue\">public</span> DelegateCommand&lt;IList&lt;FilterCriterion&gt;&gt; SearchCommand\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (DelegateCommand&lt;IList&lt;FilterCriterion&gt;&gt;)GetValue(SearchCommandProperty); }\r\n            <span style=\"color:blue\">set</span> { SetValue(SearchCommandProperty, value); }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty SearchCommandProperty =\r\n            DependencyProperty.Register(<span style=\"color:#a31515\">&quot;SearchCommand&quot;</span>, <span style=\"color:blue\">typeof</span>(DelegateCommand&lt;IList&lt;FilterCriterion&gt;&gt;), <span style=\"color:blue\">typeof</span>(AdvancedFilter), <span style=\"color:blue\">new</span> UIPropertyMetadata(<span style=\"color:blue\">null</span>, OnSearchCommandChanged));\r\n\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> OnSearchCommandChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            AdvancedFilter advancedFilter = (AdvancedFilter)d;\r\n            <span style=\"color:blue\">var</span> oldSearchCommand = e.OldValue <span style=\"color:blue\">as</span> DelegateCommand&lt;IList&lt;FilterCriterion&gt;&gt;;\r\n            <span style=\"color:blue\">if</span> (oldSearchCommand != <span style=\"color:blue\">null</span>)\r\n            {\r\n                oldSearchCommand.CanExecuteChanged -= advancedFilter._searchCommand_CanExecuteChanged;\r\n            }\r\n            <span style=\"color:blue\">var</span> newSearchCommand = e.NewValue <span style=\"color:blue\">as</span> DelegateCommand&lt;IList&lt;FilterCriterion&gt;&gt;;\r\n            <span style=\"color:blue\">if</span> (newSearchCommand != <span style=\"color:blue\">null</span>)\r\n            {\r\n                newSearchCommand.CanExecuteChanged += advancedFilter._searchCommand_CanExecuteChanged;\r\n            }\r\n        }\r\n\r\n</pre>\r\n</div>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>        <span style=\"color:blue\">void</span> _searchCommand_CanExecuteChanged(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n        {\r\n            // my custom code (removed here)\r\n        }\r\n\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2010-05-05T09:07:56.703-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "439345",
    "ThreadId": "211668",
    "Html": "<p>Nevermind, guys, I've just read the XML comments on&nbsp;</p>\r\n<pre>DelegateCommand&lt;T&gt;.CanExecuteChanged </pre>\r\n<pre><br></pre>\r\n<pre>Apparently I have to keep a reference to the EventHandler.</pre>",
    "PostedDate": "2010-05-05T09:21:16.857-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]