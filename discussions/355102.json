[
  {
    "Id": "834044",
    "ThreadId": "355102",
    "Html": "<p>Hi everybody,</p>\n<p>we are using Prism V4.1 and use the module loading via XAML. The directory which contains the catalog file is relative to our application directory and we try to load it like this in CreateModuleCatalog():</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">using</span> ( <span style=\"color: blue;\">var</span> xamlStream = <span style=\"color: blue;\">new</span> FileStream( @\".\\Bootstrapper\\catalog\\GraphicalCatalog.xaml\", FileMode.Open, FileAccess.Read ))\n{\n    return Microsoft.Practices.Prism.Modularity.ModuleCatalog.CreateFromXaml( xamlStream );\n}</pre>\n<br /> The catalog file contains the info for the modules and looks something like this (but with more entries of course):<br />\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Modularity</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">ModuleInfo</span> <span style=\"color: red;\">Ref</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">file:///Tree.dll</span><span style=\"color: black;\">\"</span> \n    <span style=\"color: red;\">ModuleName</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">TreeModule</span><span style=\"color: black;\">\"</span>\n    <span style=\"color: red;\">ModuleType</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Plugins.Tree.Tree, TreeModule</span><span style=\"color: black;\">\"</span>\n    <span style=\"color: red;\">InitializationMode</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">WhenAvailable</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\n<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Modularity</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">ModuleInfo</span><span style=\"color: blue;\">&gt;</span></pre>\n</div>\n<div style=\"color: black; background-color: white;\">The problem now is that when the current working directory is not pointing to our application directory then the catalog loading fails. if I then adjust the path to the catalog file to be an absolute path, then the  loading of the modules fail. I could then also adjust that path to the modules to be absolute, but somehow I get the feeling that I'm not doing it correctly. So maybe somebody can give me a hint how this is suppose to work. Thanks!</div>\n</div>\n<div style=\"color: black; background-color: white;\">Regards Peter</div>",
    "PostedDate": "2012-05-09T09:02:57.83-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "834264",
    "ThreadId": "355102",
    "Html": "<p>Hi Peter,</p>\r\n<p>Based on my understanding, it seems that any relative <strong>URI </strong>will depend on the <strong>current working directory</strong> of your application to obtain the complete path; therefore, if the current working directory of your application is changed, it's expected that it could not find the corresponding files.</p>\r\n<p>I am not aware of your current scenario or why the <strong>current working directory</strong> of your application is changed, but as a possible approach you could change the <strong>current working directory</strong> when the modules need to be loaded (for example, before running the <strong>Bootstrapper </strong>or when a module marked as \"<strong>OnDemand</strong>\" needs to be loaded) and change it back when the modules have been loaded.</p>\r\n<p>For example, if I am not mistaken, you can obtain the path of where your application (the .<strong>EXE </strong>file) is located by doing something like this:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">string</span> directoryName = <span style=\"color: blue;\">new</span> FileInfo(Assembly.GetExecutingAssembly().Location).DirectoryName;\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Therefore, when loading modules (for example, before running the <strong>Bootstrapper</strong>), I believe you can save the current working directory of your application, change it to the directory where your application is currently stored, load the required modules, and then change it back to the previous working directory.</p>\r\n<p>If this is not possible in your scenario, it would be helpful if you could provide us with more information about it so that we can help you further with this.</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-05-09T13:56:51.533-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "834453",
    "ThreadId": "355102",
    "Html": "<p>Hi Damian,</p>\n<blockquote style=\"border: solid .1em #ccc; font-style: italic; margin: .25em 1em 0 1em; padding: 0 .25em 0 .25em;\"><strong>&nbsp;</strong>I am not aware of your current scenario or why the <strong>current working directory</strong> of your application is changed, but as a possible approach you could change the <strong>current working directory</strong> when the modules need to be loaded (for example, before running the <strong>Bootstrapper </strong>or when a module marked as \"<strong>OnDemand</strong>\" needs to be loaded) and change it back when the modules have been loaded.</blockquote>\n<p>We have an associated file type with our application and when the user double clicks this file then our application gets started, but the current working directory is then pointing to the directory where the data file is located and not where the application  is located. I think this is a very common scenario and that's why I have the 'feeling' that it should work out of the box, without me having to change the current working directory or adjusting the paths to the catalog file or the module files. For example  I'm currently 'patching' the Ref property in ModuleInfo like this:</p>\n<div style=\"color: black; background-color: white;\">\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">const</span> <span style=\"color: blue;\">string</span> FILE_PREFIX = <span style=\"color: #a31515;\">\"file:///\"</span>;\n\n<span style=\"color: blue;\">string</span> applicationDirectory = Path.GetDirectoryName( Environment.GetCommandLineArgs()[ 0 ] );\n\n<span style=\"color: blue;\">foreach</span> ( <span style=\"color: blue;\">var</span> moduleInfo <span style=\"color: blue;\">in</span> moduleCatalog.Modules )\n{\n    <span style=\"color: blue;\">if</span> ( moduleInfo.Ref.StartsWith( FILE_PREFIX ))\n    {\n        <span style=\"color: blue;\">string</span> moduleName = moduleInfo.Ref.Substring( FILE_PREFIX.Length ); \n        <span style=\"color: blue;\">string</span> absoluteModuleName = Path.Combine( applicationDirectory, moduleName );\n        <span style=\"color: blue;\">string</span> absoluteReferencedModuleName = FILE_PREFIX + absoluteModuleName;\n        moduleInfo.Ref = absoluteReferencedModuleName;\n    }\n}\n<br /></pre>\n</div>\n</div>\n<blockquote style=\"border: solid .1em #ccc; font-style: italic; margin: .25em 1em 0 1em; padding: 0 .25em 0 .25em;\">\n<p>Therefore, when loading modules (for example, before running the <strong>Bootstrapper</strong>), I believe you can save the current working directory of your application, change it to the directory where your application is currently stored, load the required  modules, and then change it back to the previous working directory.</p>\n</blockquote>\n<p>I think you're right, this might be a lot easier then to patch the Ref property and the catalog file path.</p>\n<p>But I'm surprised that this normal application startup scenario via a double click on the associated file isn't properly handled by PRISM.</p>\n<p>Regards Peter</p>",
    "PostedDate": "2012-05-10T01:47:27.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "834976",
    "ThreadId": "355102",
    "Html": "<p>For those who have the same problem: I solved it now with overriding MefBootstrapper.Run:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> Run( <span style=\"color: blue;\">bool</span> runWithDefaultConfiguration )\r\n{\r\n    <span style=\"color: blue;\">string</span> oldCurrentDirectory = Directory.GetCurrentDirectory();\r\n    Directory.SetCurrentDirectory( &lt;applicationDirectory&gt; );\r\n\r\n    <span style=\"color: blue;\">base</span>.Run( runWithDefaultConfiguration );\r\n\r\n    Directory.SetCurrentDirectory( oldCurrentDirectory );\r\n}\r\n\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Regards Peter</p>",
    "PostedDate": "2012-05-11T01:05:13.113-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]