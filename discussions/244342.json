[
  {
    "Id": "559477",
    "ThreadId": "244342",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I got a Prism 4.0 based application which loads configured module&nbsp;from a&nbsp;config file. If I run this application on the netwrok folder it fails to read the &quot;modules&quot; config section and it throws Security Exception and asking for FullTrust.&nbsp;In\r\n same&nbsp;application if I reference the module then all works well even on netwrok share.</p>\r\n<p>As far as I know, since .net 3.5 SP1 onwards the security consideration on running assembly from netwrok is removed and also proved correct as by referencing same module on netwrok is works fine. Also I tried in Prism 2.0 and its working fine.</p>\r\n<p>Is it possible that Prism has got some kind of bug which throws an security exception if it tries to load a module on the network share? Or am I doing something wrong? Has anyone did this before?</p>\r\n<p>Following the app.config file</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;?</span><span style=\"color:#a31515\">xml</span> <span style=\"color:red\">version</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">1.0</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">encoding</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">utf-8</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">?&gt;</span>\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">configuration</span><span style=\"color:blue\">&gt;</span>\r\n  <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">configSections</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">section</span> <span style=\"color:red\">name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">modules</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">type</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Microsoft.Practices.Prism.Modularity.ModulesConfigurationSection, Microsoft.Practices.Prism</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n  <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">configSections</span><span style=\"color:blue\">&gt;</span>\r\n  <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">modules</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:green\">&lt;!-- Specify the module information in Following format--&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">module</span> <span style=\"color:red\">assemblyFile</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ModularityWithUnity.Desktop.ModuleE.dll</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">moduleType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ModularityWithUnity.Desktop.ModuleE, ModularityWithUnity.Desktop.ModuleE, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">moduleName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ModuleE</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">startupLoaded</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">false</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>    \r\n    <span style=\"color:green\">&lt;!--&lt;module assemblyFile=&quot;Modules/Longview.Wpf.Module.ComGen.dll&quot; moduleType=&quot;Longview.Wpf.Module.ComGen.ComGen, Longview.Wpf.Module.ComGen&quot; moduleName=&quot;ComGen&quot; startupLoaded=&quot;false&quot; /&gt;--&gt;</span>\r\n  <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">modules</span><span style=\"color:blue\">&gt;</span>\r\n  <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">runtime</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">loadFromRemoteSources</span> <span style=\"color:red\">enabled</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">true</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n  <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">runtime</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">configuration</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n<pre>Following is the code in Shell which loads modules specifed in Config file.</pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureModuleCatalog()\r\n        {\r\n            <span style=\"color:green\">// DiscoveryManager referenced in code.</span>\r\n            Type discoveryManagerType = <span style=\"color:blue\">typeof</span>(DiscoveryManager);\r\n            ModuleCatalog.AddModule(<span style=\"color:blue\">new</span> ModuleInfo(discoveryManagerType.Name, discoveryManagerType.AssemblyQualifiedName));\r\n\r\n            <span style=\"color:green\">// LoadManager referenced in code.</span>\r\n            Type loadManagerType = <span style=\"color:blue\">typeof</span>(LoadManager);\r\n            ModuleCatalog.AddModule(<span style=\"color:blue\">new</span> ModuleInfo(loadManagerType.Name, loadManagerType.AssemblyQualifiedName));\r\n\r\n            <span style=\"color:green\">// Load any module that are configured in Configuration File</span>\r\n            ConfigurationModuleCatalog configurationCatalog = <span style=\"color:blue\">new</span> ConfigurationModuleCatalog();\r\n            ((AggregateModuleCatalog)ModuleCatalog).AddCatalog(configurationCatalog);\r\n\r\n        }\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2011-02-02T08:48:42.697-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "560117",
    "ThreadId": "244342",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Could you provide us with the complete stack trace information of your exception? I&acute;m trying to reproduce your scenario but I can&acute;t get a Security Exception.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br>\r\n<a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-02-03T06:09:27.443-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "560838",
    "ThreadId": "244342",
    "Html": "\r\n<p>System.Configuration.ConfigurationErrorsException was unhandled<br>\r\n&nbsp; Message=An error occurred creating the configuration section handler for modules: Request failed. (F:\\&lt;Some Folder&gt;\\Shell\\Wpf.Shell\\bin\\Debug\\Application Portal.vshost.exe.Config line 6)<br>\r\n&nbsp; Source=System.Configuration<br>\r\n&nbsp; BareMessage=An error occurred creating the configuration section handler for modules: Request failed.<br>\r\n&nbsp; Filename=F:\\&lt;Some Folder&gt;\\Shell\\Wpf.Shell\\bin\\Debug\\Application Portal.vshost.exe.Config<br>\r\n&nbsp; Line=6<br>\r\n&nbsp; StackTrace:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Configuration.BaseConfigurationRecord.EvaluateOne(String[] keys, SectionInput input, Boolean isTrusted, FactoryRecord factoryRecord, SectionRecord sectionRecord, Object parentResult)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Configuration.BaseConfigurationRecord.Evaluate(FactoryRecord factoryRecord, SectionRecord sectionRecord, Object parentResult, Boolean getLkg, Boolean getRuntimeObject, Object&amp; result, Object&amp; resultRuntimeObject)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Configuration.BaseConfigurationRecord.GetSectionRecursive(String configKey, Boolean getLkg, Boolean checkPermission, Boolean getRuntimeObject, Boolean requestIsHere, Object&amp; result, Object&amp; resultRuntimeObject)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Configuration.BaseConfigurationRecord.GetSectionRecursive(String configKey, Boolean getLkg, Boolean checkPermission, Boolean getRuntimeObject, Boolean requestIsHere, Object&amp; result, Object&amp; resultRuntimeObject)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Configuration.BaseConfigurationRecord.GetSectionRecursive(String configKey, Boolean getLkg, Boolean checkPermission, Boolean getRuntimeObject, Boolean requestIsHere, Object&amp; result, Object&amp; resultRuntimeObject)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Configuration.BaseConfigurationRecord.GetSection(String configKey)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Configuration.ClientConfigurationSystem.System.Configuration.Internal.IInternalConfigSystem.GetSection(String sectionName)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Configuration.ConfigurationManager.GetSection(String sectionName)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ConfigurationStore.RetrieveModuleConfigurationSection() in c:\\release\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Modularity\\ConfigurationStore.Desktop.cs:line 32<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ConfigurationModuleCatalog.EnsureModulesDiscovered() in c:\\release\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Modularity\\ConfigurationModuleCatalog.Desktop.cs:line 70<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ConfigurationModuleCatalog.InnerLoad() in c:\\release\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Modularity\\ConfigurationModuleCatalog.Desktop.cs:line 54<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ModuleCatalog.Load() in c:\\release\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Modularity\\ModuleCatalog.cs:line 176<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ModuleCatalog.Initialize() in c:\\release\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Modularity\\ModuleCatalog.cs:line 344<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Longview.Wpf.Shell.AggregateModuleCatalog.Initialize() in F:\\&lt;Some Folder&gt;\\Shell\\Wpf.Shell\\AggregateModuleCatalog.cs:line 116<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ModuleManager.Run() in c:\\release\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Modularity\\ModuleManager.cs:line 110<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.UnityExtensions.UnityBootstrapper.InitializeModules() in c:\\release\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism.UnityExtensions\\UnityBootstrapper.cs:line 192<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.UnityExtensions.UnityBootstrapper.Run(Boolean runWithDefaultConfiguration) in c:\\release\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism.UnityExtensions\\UnityBootstrapper.cs:line 115<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Bootstrapper.Run() in c:\\release\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Bootstrapper.cs:line 77<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Longview.Wpf.Shell.App.OnStartup(StartupEventArgs e) in F:\\&lt;Some Folder&gt;\\Shell\\Wpf.Shell\\app.xaml.cs:line 19<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Application.&lt;.ctor&gt;b__1(Object unused)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at MS.Internal.Threading.ExceptionFilterHelper.TryCatchWhen(Object source, Delegate method, Object args, Int32 numArgs, Delegate catchHandler)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.DispatcherOperation.InvokeImpl()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ExecutionContext.runTryCode(Object userData)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Runtime.CompilerServices.RuntimeHelpers.ExecuteCodeWithGuaranteedCleanup(TryCode code, CleanupCode backoutCode, Object userData)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean ignoreSyncCtx)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.DispatcherOperation.Invoke()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.Dispatcher.ProcessQueue()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at MS.Internal.Threading.ExceptionFilterHelper.TryCatchWhen(Object source, Delegate method, Object args, Int32 numArgs, Delegate catchHandler)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG&amp; msg)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.Dispatcher.Run()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Application.RunDispatcher(Object ignore)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Application.RunInternal(Window window)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Application.Run(Window window)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Application.Run()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Longview.Wpf.Shell.App.Main() in F:\\&lt;Some Folder&gt;\\Shell\\Wpf.Shell\\obj\\x86\\Debug\\App.g.cs:line 50<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.AppDomain._nExecuteAssembly(RuntimeAssembly assembly, String[] args)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ThreadHelper.ThreadStart_Context(Object state)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean ignoreSyncCtx)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ThreadHelper.ThreadStart()<br>\r\n&nbsp; InnerException: System.Security.SecurityException<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Message=Request failed.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Source=mscorlib<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GrantedSet=&quot;&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PermissionState=&lt;PermissionSet class=&quot;System.Security.PermissionSet&quot;<br>\r\nversion=&quot;1&quot;<br>\r\nUnrestricted=&quot;true&quot;/&gt;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RefusedSet=&quot;&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Url=&quot;&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StackTrace:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.RuntimeMethodHandle.PerformSecurityCheck(Object obj, RuntimeMethodHandleInternal method, RuntimeType parent, UInt32 invocationFlags)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.RuntimeMethodHandle.PerformSecurityCheck(Object obj, IRuntimeMethodInfo method, RuntimeType parent, UInt32 invocationFlags)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Reflection.ConstructorInfo.Invoke(Object[] parameters)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Configuration.TypeUtil.InvokeCtorWithReflectionPermission(ConstructorInfo ctor)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Configuration.RuntimeConfigurationRecord.RuntimeConfigurationFactory.CreateSectionImpl(RuntimeConfigurationRecord configRecord, FactoryRecord factoryRecord, SectionRecord sectionRecord,\r\n Object parentConfig, ConfigXmlReader reader)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Configuration.RuntimeConfigurationRecord.RuntimeConfigurationFactory.CreateSectionWithRestrictedPermissions(RuntimeConfigurationRecord configRecord, FactoryRecord factoryRecord, SectionRecord\r\n sectionRecord, Object parentConfig, ConfigXmlReader reader)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Configuration.RuntimeConfigurationRecord.CreateSection(Boolean inputIsTrusted, FactoryRecord factoryRecord, SectionRecord sectionRecord, Object parentConfig, ConfigXmlReader reader)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Configuration.BaseConfigurationRecord.CallCreateSection(Boolean inputIsTrusted, FactoryRecord factoryRecord, SectionRecord sectionRecord, Object parentConfig, ConfigXmlReader reader,\r\n String filename, Int32 line)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InnerException:</p>\r\n",
    "PostedDate": "2011-02-04T08:22:35.88-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "567330",
    "ThreadId": "244342",
    "Html": "<p>Hi,</p>\n<p>After spiking with your scenario, we've found that the behavior you're mentioning happens due to a known issue in .Net 4, which causes the <strong>ConfigurationManager.GetSection </strong>method not to work from shared locations. You can read more about this in the following thread from the .Net framework MSDN forum:</p>\n<p><a href=\"http://social.msdn.microsoft.com/Forums/en-US/netfxbcl/thread/9ab6b9ee-7337-43de-8f82-177dd32aecbc\"><span>.NET 4 bug: ConfigurationManager.GetSection throws exception running from network share - status?</span></a></p>\n<p>You could try using any of the other mechanisms for obtaining a module catalog provided by Prism. You can read more about this in the <a href=\"http://msdn.microsoft.com/en-us/library/gg405479%28PandP.40%29.aspx\">Modularity Chapter</a> from the Prism MSDN documentation.</p>\n<p>If you do need to use the <strong>App.config</strong> file to store your modules' information, one possible workaround would be to create a different implementation of <strong>IModuleCatalog</strong>, which would be similar to the ConfigurationModuleCatalog, except that it would uses the <strong>ConfigurationManager.AppSettings </strong>property instead of the <strong> ConfigurationStore </strong>(which internally uses the <strong>ConfigurationManager.GetSection </strong>method to retrieve the modules section in the <strong>App.config</strong>). Take into account that the main functionality of the aforementioned classes is to obtain <strong>ModuleInfo</strong> instances from the entries in the App.config file, so you should make your custom <strong>ModuleCatalog</strong> obtain the necessary information from the key-value pairs in the <strong>AppSettings </strong>part of the <strong>App.Config </strong>to create the <strong>ModuleInfos</strong>.</p>\n<p>You might find the contents of the following classes useful to achieve this scenario (they can be found inside the <strong>Modularity </strong>folder of the <strong>Microsoft.Practices.Prism</strong> assembly):</p>\n<ul>\n<li>ModuleConfigurationElement </li>\n<li>ConfigurationStore </li>\n<li>ConfigurationModuleCatalog </li>\n</ul>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-02-16T11:12:19.05-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]