[
  {
    "Id": "611690",
    "ThreadId": "257370",
    "Html": "<p>Dear Guys,</p>\n<p>I have implemented a popup window using Childwindow, but have strange issues.</p>\n<p>The dialoge open first time with no problem, but the second time it open without any message or icon (empty) and then when&nbsp;close (from <strong>X</strong>)&nbsp;it leaves the application in-accessable as if it still there , but invisible.</p>\n<p>Here is the code I use to implement the Popupwindow:</p>\n<div style=\"background-color: white; color: black;\">\n<pre><div style=\"background-color: white; color: black;\"><pre><div style=\"color: black; background-color: white;\"><pre>\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">enum</span> MessageType { Info, Error, Confirm, TextInput, ComboInput };\r\n\r\n\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">interface</span> IWindowController\r\n\t{\r\n\t\t<span style=\"color: blue;\">int</span> CloseResult { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">set</span>; }\r\n\t\t<span style=\"color: blue;\">void</span> CloseWindow();\r\n\t\t<span style=\"color: blue;\">void</span> ShowWindow(<span style=\"color: blue;\">string</span> message, <span style=\"color: blue;\">string</span> headerText, MessageType type = MessageType.Info,\r\n\t\t\t\t\t\t\t\t String[] inputOptions = <span style=\"color: blue;\">null</span>);\r\n\t\t<span style=\"color: blue;\">event</span> EventHandler MainWindowClosed;\r\n\t}\r\n\r\n\t[Export(<span style=\"color: blue;\">typeof</span>(IWindowController))]\r\n\t[PartCreationPolicy(CreationPolicy.NonShared)]\r\n\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> WindowController : IWindowController\r\n\t{\r\n\t\tCWPopup _Window;\r\n\r\n\t\t<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> setMessageIcon(<span style=\"color: blue;\">string</span> imagePath)\r\n\t\t{\r\n\t\t\t_Window.MessageIcon.Source = <span style=\"color: blue;\">new</span> BitmapImage(<span style=\"color: blue;\">new</span> Uri(ICONS_PATH + imagePath, UriKind.RelativeOrAbsolute));\r\n\t\t}\r\n\t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> ShowWindow(<span style=\"color: blue;\">string</span> message, <span style=\"color: blue;\">string</span> headerText, MessageType type = MessageType.Info, String[] inputOptions = <span style=\"color: blue;\">null</span>)\r\n\t\t{\r\n\t\t<span style=\"color: green;\">//Set the message.</span>\r\n\t\t\t_Window.TextBlock.Text = message;\r\n\t\t\t_Window.Title = headerText;\r\n\t\t\t_Window.Show();\r\n\t\t}\r\n\t\t<span style=\"color: green;\">// Used so we can alert any consumer when the MainRadWindow has closed.</span>\r\n\t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">event</span> EventHandler MainWindowClosed;\r\n\r\n\r\n\t\t<span style=\"color: blue;\">public</span> WindowController()\r\n\t\t{\r\n\t\t\t_Window = <span style=\"color: blue;\">new</span> CWPopup();\r\n\t\t\t_Window.OKButton.Click += OKButton_Click;\r\n\t\t\t_Window.CancelButton.Click += CancelButton_Click;\r\n\t\t\t_Window.Closed += <span style=\"color: blue;\">new</span> EventHandler(Window_Closed);\r\n\t\t}\r\n\r\n\t\t<span style=\"color: blue;\">void</span> OKButton_Click(<span style=\"color: blue;\">object</span> sender, RoutedEventArgs e)\r\n\t\t{\r\n\t\t\tCloseResult = 1;\r\n\t\t\t<span style=\"color: green;\">//CloseWindow();</span>\r\n\t\t}\r\n\t\t<span style=\"color: blue;\">void</span> CancelButton_Click(<span style=\"color: blue;\">object</span> sender, RoutedEventArgs e)\r\n\t\t{\r\n\t\t\tCloseResult = 0;\r\n\t\t\t<span style=\"color: green;\">//CloseWindow();</span>\r\n\t\t}\r\n\t\t<span style=\"color: green;\">// Call if you need to add your own command to close a popup window</span>\r\n\t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">int</span> CloseResult { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">set</span>; }\r\n\r\n\t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> CloseWindow()\r\n\t\t{\r\n\t\t\t_Window.Close();\r\n\t\t\t<span style=\"color: green;\">//_Window.DialogResult = true;</span>\r\n\t\t}\r\n\r\n\t\t<span style=\"color: blue;\">#region</span> Private Methods\r\n\r\n\t\t<span style=\"color: blue;\">void</span> Window_Closed(<span style=\"color: blue;\">object</span> sender, EventArgs e)\r\n\t\t{\r\n\r\n\t\t\t<span style=\"color: green;\">// Remove whatever is assigned to the content when the window is closed.</span>\r\n\t\t\t<span style=\"color: green;\">//_Window.Content = null;</span>\r\n\r\n\t\t\t<span style=\"color: blue;\">if</span> (MainWindowClosed != <span style=\"color: blue;\">null</span>) MainWindowClosed(<span style=\"color: blue;\">this</span>, <span style=\"color: blue;\">null</span>);\r\n\r\n\t\t}\r\n\r\n\t\t<span style=\"color: blue;\">#endregion</span>\r\n\r\n\t}\r\n\r\n\r\n</pre>\n</div>\n</pre>\n</div>\n</pre>\n</div>\n<p>As it appears,I have the IWindow interface and the implementer class and I use MEF to import this in my moduels using Importconstructor attribute.</p>\n<p>I got this stange behaviour in&nbsp;my page when I try to navigate away as implemented here:</p>\n<div style=\"background-color: white; color: black;\">\n<pre>WindowController.ShowWindow(<span style=\"color: #a31515;\">\"Sure to close current window?/n/rsure to close current window\"</span>,<span style=\"color: #a31515;\">\"Caution\"</span>, MessageType.Confirm);\r\n\r\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>Can anyone help me with this issue</p>\n<p>Regards</p>\n<p>Waleed</p>\n<p>&nbsp;</p>",
    "PostedDate": "2011-05-12T07:17:16.917-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "611728",
    "ThreadId": "257370",
    "Html": "<p>Hello EveryOne,</p>\n<p>I went a little bit far from this... I fixed the code as follows:</p>\n<div style=\"background-color: white; color: black;\">\n<pre><div style=\"color: black; background-color: white;\"><pre>\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">enum</span> MessageType { Info, Error, Confirm, TextInput, ComboInput };\r\n\r\n\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">interface</span> IWindowController\r\n\t{\r\n\t\t<span style=\"color: blue;\">int</span> CloseResult { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">set</span>; }\r\n\t\t<span style=\"color: blue;\">void</span> CloseWindow();\r\n\t\t<span style=\"color: blue;\">void</span> ShowWindow(<span style=\"color: blue;\">string</span> message, <span style=\"color: blue;\">string</span> headerText, MessageType type = MessageType.Info,\r\n\t\t\t\t\t\t\t\t String[] inputOptions = <span style=\"color: blue;\">null</span>);\r\n\t\t<span style=\"color: blue;\">event</span> EventHandler MainWindowClosed;\r\n\t}\r\n\r\n\t[Export(<span style=\"color: blue;\">typeof</span>(IWindowController))]\r\n\t[PartCreationPolicy(CreationPolicy.NonShared)]\r\n\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> WindowController : IWindowController\r\n\t{\r\n\t\tCWPopup _Window;\r\n\r\n\t\t<span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> setMessageIcon(<span style=\"color: blue;\">string</span> imagePath)\r\n\t\t{\r\n\t\t\t_Window.MessageIcon.Source = <span style=\"color: blue;\">new</span> BitmapImage(<span style=\"color: blue;\">new</span> Uri(ICONS_PATH + imagePath, UriKind.RelativeOrAbsolute));\r\n\t\t}\r\n\t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> ShowWindow(<span style=\"color: blue;\">string</span> message, <span style=\"color: blue;\">string</span> headerText, MessageType type = MessageType.Info, String[] inputOptions = <span style=\"color: blue;\">null</span>)\r\n\t\t{\r\n\t\t\t<span style=\"color: green;\">//Set the message.</span>\r\n\t\t\t_Window.TextBlock.Text = message;\r\n\t\t\t_Window.Title = headerText;\r\n\t\t\t_Window.Show();\r\n\t\t}\r\n\t\t<span style=\"color: green;\">// Used so we can alert any consumer when the MainRadWindow has closed.</span>\r\n\t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">event</span> EventHandler MainWindowClosed;\r\n\r\n\r\n\t\t<span style=\"color: blue;\">public</span> WindowController()\r\n\t\t{\r\n\t\t\t_Window = <span style=\"color: blue;\">new</span> CWPopup();\r\n\t\t\t_Window.OKButton.Click += OKButton_Click;\r\n\t\t\t_Window.CancelButton.Click += CancelButton_Click;\r\n\t\t\t_Window.Closed += <span style=\"color: blue;\">new</span> EventHandler(Window_Closed);\r\n\t\t}\r\n\r\n\t\t<span style=\"color: blue;\">void</span> OKButton_Click(<span style=\"color: blue;\">object</span> sender, RoutedEventArgs e)\r\n\t\t{\r\n\t\t\tCloseResult = 1;\r\n\t\t\t<span style=\"color: green;\">//CloseWindow();</span>\r\n\t\t}\r\n\t\t<span style=\"color: blue;\">void</span> CancelButton_Click(<span style=\"color: blue;\">object</span> sender, RoutedEventArgs e)\r\n\t\t{\r\n\t\t\tCloseResult = 0;\r\n\t\t\t<span style=\"color: green;\">//CloseWindow();</span>\r\n\t\t}\r\n\t\t<span style=\"color: green;\">// Call if you need to add your own command to close a popup window</span>\r\n\t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">int</span> CloseResult { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">set</span>; }\r\n\r\n\t\t<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> CloseWindow()\r\n\t\t{\r\n\t\t\t_Window.Close();\r\n\t\t\t<span style=\"color: green;\">//_Window.DialogResult = true;</span>\r\n\t\t}\r\n\r\n\t\t<span style=\"color: blue;\">#region</span> Private Methods\r\n\r\n\t\t<span style=\"color: blue;\">void</span> Window_Closed(<span style=\"color: blue;\">object</span> sender, EventArgs e)\r\n\t\t{\r\n\r\n\t\t\t<span style=\"color: green;\">// Remove whatever is assigned to the content when the window is closed.</span>\r\n\t\t\t<span style=\"color: green;\">//_Window.Content = null;</span>\r\n\r\n\t\t\t<span style=\"color: blue;\">if</span> (MainWindowClosed != <span style=\"color: blue;\">null</span>) MainWindowClosed(<span style=\"color: blue;\">this</span>, <span style=\"color: blue;\">null</span>);\r\n\r\n\t\t}\r\n\r\n\t\t<span style=\"color: blue;\">#endregion</span>\r\n\r\n\t}\r\n\r\n\r\n</pre>\n</div>\n</pre>\n</div>\n<p>But found a small issue with the eventhandler subscribtion (mainWindowClosed)</p>\n<p>It fires as many as the window open if I hock the Event in the module as follows:</p>\n<div style=\"background-color: white; color: black;\">\n<pre>WController.ShowWindow(<span style=\"color: #a31515;\">\"Sure to close current window?\"</span>,<span style=\"color: #a31515;\">\"Caution\"</span>, MessageType.Confirm);\r\nWController.MainWindowClosed += (s, e) =&gt;\r\n{\r\n\t<span style=\"color: green;\">//continuationCallback(WController.CloseResult == 1);</span>\r\n\tMessageBox.Show(WController.CloseResult.ToString());\r\n};\r\n\r\n</pre>\n</div>\n<p>The messageBox is shows as many as the window is open.</p>\n<p>What is wrong here ...</p>\n<p>Best</p>\n<p>Waleed</p>",
    "PostedDate": "2011-05-12T08:07:16.733-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "611871",
    "ThreadId": "257370",
    "Html": "<p>Hi Waleed,</p>\r\n<p>One possible approach that could help you avoid this issue from affecting your scenario would be to unsubscribe from the <strong>MainWindowClosed</strong> event in the event handler, like this:</p>\r\n<p>\r\n<p><span style=\"color: blue; font-size: 9pt;\" lang=\"EN-US\">\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">void</span> Window_Closed(<span style=\"color: blue;\">object</span> sender, EventArgs e)\r\n{\r\n    <span style=\"color: green;\">// Remove whatever is assigned to the content when the window is closed.</span>\r\n    <span style=\"color: green;\">//_Window.Content = null;</span>\r\n    <span style=\"color: blue;\">if</span> (MainWindowClosed != <span style=\"color: blue;\">null</span>) MainWindowClosed(<span style=\"color: blue;\">this</span>, <span style=\"color: blue;\">null</span>);\r\n    _WindowClose.Closed -= <span style=\"color: blue;\">this</span>.Window_Closed;\r\n}\r\n</pre>\r\n</div>\r\n</span></p>\r\n</p>\r\n<p>In your current scenario, it&rsquo;s possible that the controller that subscribes to the <strong>MainWindowClosed</strong> event keeps references to the views that are closed, because of the event subscription.</p>\r\n<p>Please let me know if this information helps you.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br /><a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-05-12T11:20:51.783-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "612072",
    "ThreadId": "257370",
    "Html": "<p>Hello Miguel,</p>\n<p>If I do that .. the event will fire in the first time only, never after ... I need it to firs always &amp; once.</p>\n<p><strong>It is not giving the right behaviour</strong>.</p>\n<p>Best</p>\n<p>Waleed</p>",
    "PostedDate": "2011-05-12T16:06:04.037-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]