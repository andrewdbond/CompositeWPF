[
  {
    "Id": "257399",
    "ThreadId": "75225",
    "Html": "<p>Hello,</p>\r\n<p>I have a TreeView using several nested HierarchicalDataTemplates as its ItemTemplate, which finally end in a DataTemplate for the deepest node level. In each node I display an image and some text.</p>\r\n<p>To be able to react when nodes are expanded I have created an &quot;expanded command&quot; which binds to an action in my ViewModel. This event works fine if I manually create a TreeView and populate it with TreeViewItems using static data.</p>\r\n<p>My question I hope somebody might help me with is: How do I attach this command to all items in my TreeView while using HierarchicalDataTemplates? HierarchicalDataTemplates have no &quot;Expanded&quot; event but I still want every item in my TreeView to be able to trigger the expanded event.</p>\r\n<p>My command property is attached like this</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">controls</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">TreeViewItem</span> <span style=\"color:Red\">command:Expanded.Command</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding ExpandedCommand}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span><br></pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Here are some code to further explain my problem.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Green\">&lt;!-- Deepest Level --&gt;</span><br><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTemplate</span> <span style=\"color:Red\">x:Key</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">levelnNode</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span><br>\t<span style=\"color:Green\">&lt;!-- Display stuff --&gt;</span><br><span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTemplate</span><span style=\"color:Blue\">&gt;</span><br><br>...<br><br><span style=\"color:Green\">&lt;!-- First Level --&gt;</span><br><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">common</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">HierarchicalDataTemplate</span> <span style=\"color:Red\">x:Key</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">level1Node</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">ItemsSource</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Children}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">ItemTemplate</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{StaticResource levelnNode}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span><br>\t<span style=\"color:Green\">&lt;!-- Display stuff --&gt;</span><br><span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">common</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">HierarchicalDataTemplate</span><span style=\"color:Blue\">&gt;</span><br><br><span style=\"color:Green\">&lt;!-- Root Level --&gt;</span><br><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">common</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">HierarchicalDataTemplate</span> <span style=\"color:Red\">x:Key</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">rootNode</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">ItemsSource</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Children}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">ItemTemplate</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{StaticResource level1Node}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span><br>\t<span style=\"color:Green\">&lt;!-- Display stuff --&gt;</span><br><span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">common</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">HierarchicalDataTemplate</span><span style=\"color:Blue\">&gt;</span><br><br><span style=\"color:Green\">&lt;!-- Tree View --&gt;</span><br><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">controls</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">TreeView</span> <span style=\"color:Red\">ItemsSource</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding Tree}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">ItemTemplate</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{StaticResource rootNode}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span><br></pre>\r\n</div>\r\n<div style=\"color:Black;background-color:White\">How would I go about attaching my command to this set up?</div>\r\n<div style=\"color:Black;background-color:White\">Thankful for any help</div>\r\n<div style=\"color:Black;background-color:White\"></div>\r\n<div style=\"color:Black;background-color:White\">Kind Regards,</div>\r\n<div style=\"color:Black;background-color:White\">Exipen</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-11-16T00:26:31.77-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "257400",
    "ThreadId": "75225",
    "Html": "<p>Since some of you might find this thread while looking for ways to catch an expanded command in a mvvm-pattern environment I figured It might be helpful if I also paste the code for the Expanded command since I had trouble finding information about it myself. Hopefully saving someone out there the headache of trying to find how to do this.</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre> <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">class</span> Expanded\r\n {\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> DependencyProperty ExpandedCommandBehaviorProperty\r\n            = DependencyProperty.RegisterAttached(\r\n            <span style=\"color:#A31515\">&quot;ExpandedCommandBehavior&quot;</span>,\r\n            <span style=\"color:Blue\">typeof</span>(ExpandedCommandBehavior),\r\n            <span style=\"color:Blue\">typeof</span>(Expanded),\r\n            <span style=\"color:Blue\">null</span>);\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> DependencyProperty CommandProperty\r\n            = DependencyProperty.RegisterAttached(\r\n            <span style=\"color:#A31515\">&quot;Command&quot;</span>,\r\n            <span style=\"color:Blue\">typeof</span>(ICommand),\r\n            <span style=\"color:Blue\">typeof</span>(Expanded),\r\n            <span style=\"color:Blue\">new</span> PropertyMetadata(OnSetCommandCallback));\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> DependencyProperty CommandParameterProperty\r\n            = DependencyProperty.RegisterAttached(\r\n           <span style=\"color:#A31515\">&quot;CommandParameter&quot;</span>,\r\n           <span style=\"color:Blue\">typeof</span>(<span style=\"color:Blue\">object</span>),\r\n           <span style=\"color:Blue\">typeof</span>(Expanded),\r\n           <span style=\"color:Blue\">new</span> PropertyMetadata(OnSetCommandParameterCallback));\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> ICommand GetCommand(Control control)\r\n        {\r\n            <span style=\"color:Blue\">return</span> control.GetValue(CommandProperty) <span style=\"color:Blue\">as</span> ICommand;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> SetCommand(Control control, ICommand command)\r\n        {\r\n            control.SetValue(CommandProperty, command);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> SetCommandParameter(Control control, <span style=\"color:Blue\">object</span> parameter)\r\n        {\r\n            control.SetValue(CommandParameterProperty, parameter);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">object</span> GetCommandParameter(Control control)\r\n        {\r\n            <span style=\"color:Blue\">return</span> control.GetValue(CommandParameterProperty);\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> OnSetCommandCallback\r\n            (DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            Control control = dependencyObject <span style=\"color:Blue\">as</span> Control;\r\n            <span style=\"color:Blue\">if</span> (control != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                ExpandedCommandBehavior behavior = GetOrCreateBehavior(control);\r\n                behavior.Command = e.NewValue <span style=\"color:Blue\">as</span> ICommand;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> OnSetCommandParameterCallback\r\n            (DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            Control control = dependencyObject <span style=\"color:Blue\">as</span> Control;\r\n            <span style=\"color:Blue\">if</span> (control != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                ExpandedCommandBehavior behavior = GetOrCreateBehavior(control);\r\n                behavior.CommandParameter = e.NewValue;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> ExpandedCommandBehavior GetOrCreateBehavior(Control control)\r\n        {\r\n            ExpandedCommandBehavior behavior =\r\n                control.GetValue(ExpandedCommandBehaviorProperty) <span style=\"color:Blue\">as</span> ExpandedCommandBehavior;\r\n            <span style=\"color:Blue\">if</span> (behavior == <span style=\"color:Blue\">null</span>)\r\n            {\r\n                behavior = <span style=\"color:Blue\">new</span> ExpandedCommandBehavior(control);\r\n                control.SetValue(ExpandedCommandBehaviorProperty, behavior);\r\n            }\r\n            <span style=\"color:Blue\">return</span> behavior;\r\n        }\r\n}\r\n<br><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> ExpandedCommandBehavior : CommandBehaviorBase&lt;Control&gt;\r\n{\r\n        <span style=\"color:Blue\">public</span> ExpandedCommandBehavior(Control control)\r\n            : <span style=\"color:Blue\">base</span>(control)\r\n        {\r\n            ((TreeViewItem)control).Expanded += OnExpanded;\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> OnExpanded(<span style=\"color:Blue\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            <span style=\"color:Blue\">base</span>.ExecuteCommand();\r\n        }<br>}\r\n\r\n</pre>\r\n</div>\r\n</p>",
    "PostedDate": "2009-11-16T00:31:00.733-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1291166",
    "ThreadId": "75225",
    "Html": "You did save me some time posting this WPF TreeWiewItem behavior. Thanks.<br />\n<br />\nJust for those who are not into PRISM. You will also need the CommandBehaviorBase class defined, for example, here:<br />\n<a href=\"https://github.com/xperiandri/PortablePrism/blob/master/Prism.StoreProfile/Commands/CommandBehaviorBase.cs\" rel=\"nofollow\">https://github.com/xperiandri/PortablePrism/blob/master/Prism.StoreProfile/Commands/CommandBehaviorBase.cs</a><br />\n<br />\n...and then you can apply all 3 classes with an XAML like this:<br />\n<pre><code>xmlns:behav=&quot;clr-namespace:Behaviours&quot;</code></pre>\n\n<pre><code>&lt;TreeView.ItemContainerStyle&gt;\n  &lt;Style TargetType=&quot;{x:Type TreeViewItem}&quot;&gt;\n    &lt;Setter Property=&quot;behav:Expanded.Command&quot; Value=&quot;{Binding DemoExpandCommand}&quot; /&gt;\n  &lt;/Style&gt;\n&lt;/TreeView.ItemContainerStyle&gt;</code></pre>\n\n...where <strong>DemoExpandCommand</strong> is an ICommand in the bound viewmodel of the treeview item.<br />\nThe  command is triggered upon expansion of the treeview item node.<br />\n<br />\nGreat work - thanks a lot.<br />\n",
    "PostedDate": "2014-08-18T13:28:30.7-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1340924",
    "ThreadId": "75225",
    "Html": "<strong>exipen wrote:</strong><br />\n<blockquote>\nHello, I have a TreeView using several nested HierarchicalDataTemplates as its ItemTemplate, which finally end in a DataTemplate for the deepest node level. In each node I display an image and some text. To be able to react when nodes are expanded I have created an &quot;expanded command&quot; which binds to an action in my ViewModel. This event works fine if I manually create a TreeView and populate it with TreeViewItems using static data. My question I hope somebody might help me with is: How do I attach this command to all items in my TreeView while using HierarchicalDataTemplates? HierarchicalDataTemplates have no &quot;Expanded&quot; event but I still want every item in my TreeView to be able to trigger the expanded event. My command property is attached like this &nbsp;  &lt;controls:TreeViewItem command:Expanded.Command=&quot;{Binding ExpandedCommand}&quot;/&gt;  &nbsp; Here are some code to further explain my problem. &nbsp;  &lt;!-- Deepest Level --&gt;&lt;DataTemplate x:Key=&quot;levelnNode&quot;&gt; &lt;!-- Display stuff --&gt;&lt;/DataTemplate&gt;...&lt;!-- First Level --&gt;&lt;common:HierarchicalDataTemplate x:Key=&quot;level1Node&quot; ItemsSource=&quot;{Binding Children}&quot; ItemTemplate=&quot;{StaticResource levelnNode}&quot;&gt; &lt;!-- Display stuff --&gt;&lt;/common:HierarchicalDataTemplate&gt;&lt;!-- Root Level --&gt;&lt;common:HierarchicalDataTemplate x:Key=&quot;rootNode&quot; ItemsSource=&quot;{Binding Children}&quot; ItemTemplate=&quot;{StaticResource level1Node}&quot;&gt; &lt;!-- Display stuff --&gt;&lt;/common:HierarchicalDataTemplate&gt;&lt;!-- Tree View --&gt;&lt;controls:TreeView ItemsSource=&quot;{Binding Tree}&quot; ItemTemplate=&quot;{StaticResource rootNode}&quot; /&gt;  How would I go about attaching my command to this set up? Thankful for any help  Kind Regards, Exipen &nbsp;<br />\n</blockquote>\nHi,I meet the the same problem,Is there anyone know how to solve the problem?thanks<br />\n",
    "PostedDate": "2015-01-11T18:00:45.57-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1341064",
    "ThreadId": "75225",
    "Html": "The answer lies above, either the custom behavior shown a few years ago, or could wire it up with the InvokeCommandAction that is now part of Prism 5. Put that on the root element of your HierarchicalDataTemplate using a RelativeSource binding to point to the parent TreeViewItem as the source, EventTrigger catching the Expanded event, Command property pointing to your ViewModel command handler through a binding, and use the TriggerParameterPath property or CommandParameter property to pass along the context of what node was expanded.<br />\n",
    "PostedDate": "2015-01-12T06:30:05.08-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]