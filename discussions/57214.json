[
  {
    "Id": "193329",
    "ThreadId": "57214",
    "Html": "<p>Hi All,</p>\r\n<p>I've got a problem that I can't think of a satisfactory solution to at the moment.&nbsp; I'm looking for some advice.</p>\r\n<p><span><span style=\"font-family:Verdana\">The problem is actually relatively simple.&nbsp; One of the modules I'm dealing with is tiny, all it provides in the UI is a single combobox but the functionality it provides is pretty all encompassing, I'm wondering if anyone has faced this and has a solution.<br> <br> The combobox allows the user to effectively switch the context of the whole application.&nbsp; It publishes one event and subscribes to one event.&nbsp; The published event tells the rest of the subscribed modules to switch context to a certain state.&nbsp; The switching </span></span><span><span style=\"font-family:Verdana\">for some modules</span></span><span><span style=\"font-family:Verdana\"> initiate calls to serialised data on the local machine and </span></span><span><span style=\"font-family:Verdana\">for other modules it</span></span><span><span style=\"font-family:Verdana\"> initiates calls to various WCF services.&nbsp; At that same moment it publishes this event it also goes into a disabled state preventing any more switching.&nbsp; The event it subscribes too is published by a module once it has completed its work and has switched context.<br> <br> The problem is that I don't just want it to go back into an enabled state until *all* the subscribers have successfully completed switching.&nbsp; Effectively the responses will come back in totally random order over various periods of time.<br> <br> I can think of a solution but it doesn't seem particularly robust frankly.&nbsp; I was thinking that when a module subscribes to the &quot;switch context&quot; event it could also register itself with the combobox module, then the combobox could evaluate a list of these subscribes to check for responses, once all responses are in and successful it would then re-enable.&nbsp; Almost a bit like XAML multibinding but for cross-module comms.<br> <br> This almost feels like a mini framework within CAL, maybe I'm also missing something in my knowledge of the EventAggregator.</span></span></p>\r\n<p><br><span><span style=\"font-family:Verdana\">Any ideas would be great.<br></span></span></p>",
    "PostedDate": "2009-05-22T11:39:27.897-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "193373",
    "ThreadId": "57214",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Hi,</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">A possible approach could be adding a property to your event to access the amount of subscribers it has. For example:</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>public class SwitchContextEvent : CompositeWpfEvent&lt;FundOrder&gt;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int SubscriptionsCount { get { return this.Subscriptions.Count; } }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Since you know how many subscribers there are when you publish the event you can wait until you get the same amount of responses to enable the <strong>ComboBox</strong> again.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Please let me know if this helps.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Damian Schenkelman</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"font-size:small;color:#0000ff;font-family:Calibri\">http://blogs.southworks.net/dschenkelman</span></a></span></p>",
    "PostedDate": "2009-05-22T13:50:14.247-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "193380",
    "ThreadId": "57214",
    "Html": "<p>That sounds like an awesome solution.&nbsp; I'm going to have a play with that.</p>\r\n<p>&nbsp;</p>\r\n<p>Thank You!</p>\r\n<p>Jammer</p>",
    "PostedDate": "2009-05-22T14:14:17.22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]