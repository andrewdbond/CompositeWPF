[
  {
    "Id": "636257",
    "ThreadId": "263630",
    "Html": "\r\n<p>So apparently I'm really misunderstanding something regarding view navigation and, perhaps, composition as related to Prism applications. Let's say that I have defined a simple Shell. That Shell has two Regions; one for a Ribbon control (with, of course,\r\n a RegionAdapter) and another for what we'll call the &quot;client area&quot;. Let's also assume that I have two Modules. Module A and Module B each have two jobs. Module A provides users CRUD for AFoo entities and Module B provides users CRUD for BBar entities.</p>\r\n<p>Okay, so for each entity (AFoo, BBar, etc), our respective Module provides a View and corresponding ViewModel for CRUD and for each of those we have a RibbonTab and some sort of user control to display in the client area. In other words, Module A has an\r\n AFooCreateClientAreaView, AFooCreateRibbonTabView, AFooReadClientAreaView, AFooReadRibbonTabView, AFooUpdateClientAreaView, AFooUpdateRibbonTabView, AFooDeleteClientAreaView, AFooDeleteRibbonTabView and each of these has their own respective ViewModel.</p>\r\n<p>Whew... even I had to re-read that mess. Basically, there's a Shell that displays a Ribbon and a big ol' empty client area. Each Module will display a combination of ClientArea and RibbonTab view.</p>\r\n<p>So, let's assume that each module initializes and registers each view with the container as so:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// Get the Unity container...</span>\r\n<span style=\"color:blue\">var</span> container = ServiceLocator.Current.GetInstance&lt;IUnityContainer&gt;();\r\n\r\n<span style=\"color:green\">// Register the view types with the container...</span>\r\ncontainer.RegisterType(<span style=\"color:blue\">typeof</span>(Object), AFooCreateClientAreaView, <span style=\"color:#a31515\">&quot;AFooCreateClientAreaView&quot;</span>);\r\n\r\ncontainer.RegisterType(<span style=\"color:blue\">typeof</span>(Object), AFooCreateRibbonTabView, <span style=\"color:#a31515\">&quot;AFooCreateRibbonTabView&quot;</span>);\r\n\r\ncontainer.RegisterType(<span style=\"color:blue\">typeof</span>(Object), AFooReadClientAreaView, <span style=\"color:#a31515\">&quot;AFooReadClientAreaView&quot;</span>);\r\n\r\ncontainer.RegisterType(<span style=\"color:blue\">typeof</span>(Object), AFooReadRibbonTabView, <span style=\"color:#a31515\">&quot;AFooReadRibbonTabView&quot;</span>);\r\n\r\n<span style=\"color:green\">// etc...</span>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Oh, it should be noted that the intent is that only one combination of Views is shown at one time. In fact, each View implements IRegionMemberLifetime and sets KeepAlive() to false. Now, when the user navigates, we're doing something like this...</p>\r\n<p>&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// Uri built somewhere up here...</span>\r\n\r\n<span style=\"color:green\">// Ask the region manager to navigate the view...</span>\r\n<span style=\"color:blue\">this</span>.regionManager.RequestNavigate(<span style=\"color:#a31515\">&quot;AFooCreateClientAreaView&quot;</span>, uri);\r\n<span style=\"color:blue\">this</span>.regionManager.RequestNavigate(<span style=\"color:#a31515\">&quot;AFooCreateRibbonTabView&quot;</span>, uri);\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>Hmmm... this is starting to feel weird. The <em><strong>client area View and the RibbonTab view should always be presented together</strong></em>. They don't have context independent of one another.</p>\r\n<p>Now let's say we want to implement something as simple as a dialog asking the user for confirmation if they attempt to navigate away from a View where the Model has changed. No problem, we'll just implement IConfirmNavigationRequest.</p>\r\n<p>Wait, there's&nbsp;definitely&nbsp;something wrong. If I implement IConfirmNavigationRequest on the View in the client area, what happens if we've already mistakenly navigated away from the RibbonTab view? Suddenly the app is in an invalid state because\r\n we're showing the wrong RibbonTab for the ClientArea. This wouldn't have happened if there was some way to treat them as a unit, but how?</p>\r\n<p>Should one ViewModel be responsible for a RequestNavigate call to the other? Feels weird and outside the ViewModel's responsibility.</p>\r\n<p>Should one ViewModel subscribe to it's partner's event? That obviously won't work since they're not instantiated until the RequestNavigate call.</p>\r\n<p>Should there be some sort of supervising controller or presenter? Maybe something more like Screen Conductor?</p>\r\n<p>I'm at a loss and while I've looked at countless examples, I'm having trouble piecing it together and it really feels like I'm fighting Prism to get something done which tells me I'm probably not taking the right approach. Can anyone lay it down for me?</p>\r\n<div style=\"color:black; background-color:white\"></div>\r\n",
    "PostedDate": "2011-07-01T15:38:58.163-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "637144",
    "ThreadId": "263630",
    "Html": "<p>Hi,</p>\r\n<p>There are several possiblilities you could follow to fulfill your requirement on the scenario you've described. I'll point out some of them I have thought about, based on my understanding of your scenario:</p>\r\n<ul>\r\n<li>You could have a separate service, whose responsiblility will be of coordinating the navigation state of your different views. Therefore, when confirming the navigation request, you should ask that service whether you should or shouldn't navigate away.</li>\r\n<li>Another possiblity would be to extend the Prism navigation mechanisms to support this scenario. You might find the <strong>RegionNavigationService</strong> class and <strong>IConfirmNavigationRequest</strong> interface useful for this. You should take into account that the benefits of following this approach might not necessarily compensate for the additional effort involved.</li>\r\n</ul>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-07-04T12:32:51.09-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "637567",
    "ThreadId": "263630",
    "Html": "<p>Thanks, Guido. I currently have a service that performs navigation and a (currently) somewhat clumsy method to deal with confirmation. It seems reasonable to continue down that path and refine my implementation, but before I invested more time I wanted some confirmation that I wasn't wasting my time. Thanks for the feedback!</p>",
    "PostedDate": "2011-07-05T08:51:46.19-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]