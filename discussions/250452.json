[
  {
    "Id": "583433",
    "ThreadId": "250452",
    "Html": "\r\n<p>I had a wonderful little PRISM application that was working wonderfully well using the MEF container. In my first revision, had all my modules purposely situated in the main SilverLight client application with the intention to migrate each one to their own\r\n separate assemblies at some point in the future. I have now migrated all my modules into separate SilverLight class libraries and have everything compiling without a single warning.</p>\r\n<p>At runtime I am getting the following exception;</p>\r\n<p>System.ComponentModel.Composition.ImportCardinalityMismatchException was unhandled by user code<br>\r\nMessage=No valid exports were found that match the constraint '((exportDefinition.ContractName == &quot;AUBPOS.Assets.QPMControls.Client.ShellView&quot;) AndAlso (exportDefinition.Metadata.ContainsKey(&quot;ExportTypeIdentity&quot;) AndAlso &quot;AUBPOS.Assets.QPMControls.Client.ShellView&quot;.Equals(exportDefinition.Metadata.get_Item(&quot;ExportTypeIdentity&quot;))))',\r\n invalid exports may have been rejected.</p>\r\n<p>Of course I know that this exception is likely occuring as a result of an inner dependancy so I downloaded the mefx.Client.SilverLight tool to see what I could learn.</p>\r\n<p>Following the import I do not see a single error with respect to my projects however I do see that all of my custom region adaptors are showing warnings, each one points back (through the Show button) to the Microsoft.Practices.Prism.MefExtensions.Regions.MefRegionBehaviorFactor\r\n with the message ... <strong>The part providing the export is rejected because of other issues.</strong></p>\r\n<p>Upon clicking on the Show button, it takes me to one of a number of Prism parts that show as error, in this case to the Microsoft.Practices.Prism.MefExtensions.Regions.MefRegionBehaviorFactor with the issue appearing to be related to the Imports area where\r\n it appears that the ctor parameter for &quot;serviceLocator&quot; in ContractName =&quot;Microsoft.Practices.ServiceLocation.IServiceLocator is failing to resolve.</p>\r\n<p>Also ... all of my Custom Region adaptors show Yellow (warning) and all point back to the issue of the serviceLocator as well, I have these other MEFX errors which all contain an issue with the IServiceLocator ...</p>\r\n<p>I see errors in MEFX on the MefModuleManager where under Imports the ExactlyOne rule fails for parameter &quot;moduleCatalog&quot; (IModuleCatalog), as well as parameter &quot;loggerFacade&quot; (ILoggerFacade)</p>\r\n<p>I see errors in MEFX on the MefModuleInitializer where under Imports the ExactlyOne rule fails for parameter &quot;aggregateCatalog&quot; (AggregateCatalog), as well as parameter &quot;loggerFacade&quot; (ILoggerFacade) and &quot;serviceLocator&quot; in ContractName =&quot;Microsoft.Practices.ServiceLocation.IServiceLocator</p>\r\n<p>I see errors in MEFX on the MefRegionViewRegistery where under Imports the ExactlyOne rule fails on constructor parameter &quot;serviceLocator&quot; in ContractName =&quot;Microsoft.Practices.ServiceLocation.IServiceLocator</p>\r\n<p>I see errors in MEFX on the MefRegionNavigationService where under Imports the ExactlyOne rule fails on constructor parameter &quot;serviceLocator&quot; in ContractName =&quot;Microsoft.Practices.ServiceLocation.IServiceLocator</p>\r\n<p>I see errors in MEFX on the MefNAvigationContentLoader where under Imports the ExactlyOne rule fails on constructor parameter &quot;serviceLocator&quot; in ContractName =&quot;Microsoft.Practices.ServiceLocation.IServiceLocator</p>\r\n<p>To help me understand what was going on I tried to add the following override in my MefBootStrapper ...</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre> <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureContainer()\r\n       {\r\n           Assembly.GetExecutingAssembly();\r\n           Container.ComposeExportedValue(Logger);\r\n           Container.ComposeExportedValue(ModuleCatalog);\r\n           Container.ComposeExportedValue(Container);\r\n           Container.ComposeExportedValue(AggregateCatalog);\r\n\r\n           <span style=\"color:blue\">var</span> serviceLocator = <span style=\"color:blue\">this</span>.Container.GetExportedValue&lt;IServiceLocator&gt;();\r\n           ServiceLocator.SetLocatorProvider(() =&gt; serviceLocator);\r\n       }\r\n\r\nWhich throws an exception on the second last line when attempting to get the IServiceLocator from the container.</pre>\r\n<pre>I am not certain that this is the root-cause of my issues, but I would love to see all green within MEFX.  I feel it may be unrelated, but would like to understand why IServiceLocator is causing so many errors.</pre>\r\n<pre>Any help would be greatly appreciated.</pre>\r\n</div>\r\n",
    "PostedDate": "2011-03-20T15:56:49.567-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "583870",
    "ThreadId": "250452",
    "Html": "<p>Hi,</p>\r\n<p>A possible cause for the issue you&rsquo;re experiencing could be that you&rsquo;re not adding the assembly catalog of your modules into the Aggregate Catalog, therefore the exports placed in these modules are not reaching the container. You could try adding a reference to each of your module&rsquo;s projects into your Silverlight Application Project and also adding a code similar to this in your bootstrapper class:</p>\r\n<p>\r\n<p><span style=\"font-size: 9pt;\" lang=\"EN-US\">\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> ConfigureAggregateCatalog()\r\n{\r\n      <span style=\"color: blue;\">base</span>.ConfigureAggregateCatalog();\r\n \r\n      <span style=\"color: blue;\">this</span>.AggregateCatalog.Catalogs.Add(<span style=\"color: blue;\">new</span> AssemblyCatalog(<span style=\"color: blue;\">typeof</span>(MyBootstrapper).Assembly)); \r\n \r\n      <span style=\"color: green;\">// Module A is referenced in in the project and directly in code.</span>\r\n      <span style=\"color: blue;\">this</span>.AggregateCatalog.Catalogs.Add(<span style=\"color: blue;\">new</span> AssemblyCatalog(<span style=\"color: blue;\">typeof</span>(ModuleA.ModuleA).Assembly)); \r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\nNote that you should also include the assembly catalog of your bootstrapper in the override of that method, so that the exports defined in your shell project are also exported.</span></p>\r\n</p>\r\n<p>As for the override of the ConfigureContainer method you&rsquo;ve done, if you don&rsquo;t call <strong>base.ConfigureContainer</strong> in the overrided <strong>ConfigureContainer method</strong> of your <strong>Bootstrapper</strong>, the <em>ServiceLocator</em> won&rsquo;t be registered into the container. In the <strong>MefBootstrapper class</strong> the <strong>ConfigureContainer method</strong> is calling the <strong>RegisterBootstrapperProvidedTypes method</strong> which internally is doing the following:</p>\r\n<p>\r\n<p><span style=\"font-size: 9pt;\" lang=\"EN-US\">\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">this</span>.Container.ComposeExportedValue&lt;IServiceLocator&gt;(<span style=\"color: blue;\">new</span> MefServiceLocatorAdapter(<span style=\"color: blue;\">this</span>.Container));\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\nThis could be the reason why you are experiencing an exception when you try to compose the ServiceLocator.</span></p>\r\n</p>\r\n<p>You might find the following resources useful, where modularity in Silverlight is covered:</p>\r\n<ul>\r\n<li><a href=\"http://compositewpf.codeplex.com/discussions/240958\">How to have XAP against every module</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921140(v=PandP.40).aspx\">Chapter 3: Managing Dependencies Between Components</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg405479(v=PandP.40).aspx\">Chapter 4: Modular Application Development</a></li>\r\n</ul>\r\n<p>If you keep experiencing problems after implementing the aforementioned suggestions, it would be helpful if you could provide us with a repro sample of your solution, so that we can help you further with your issue.</p>\r\n<p>I hope you find this information useful.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br /><a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-03-21T11:04:58.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]