[
  {
    "Id": "211809",
    "ThreadId": "62401",
    "Html": "<p>Just looking to see if anybody has any samples using the Silverlight Bing Map Control with Prism and how they approached their design.</p>\r\n<p>I am planning on creating a MapModule that puts the map as one of several Views on&nbsp;a region on the&nbsp;Shell.&nbsp; I then want to be able to load other modules as needed and have them add layers to the map.&nbsp; (I am already able to create and display the map in a module without much trouble.&nbsp; Neat stuff!)</p>\r\n<p>The other loaded modules would have control panels that they expose in other&nbsp;shell or module regions.&nbsp; They would have points of interest that they would want to show on the map.&nbsp; They would want to show and hide the points as needed based upon whatever criteria they come up with.&nbsp; What &quot;other&quot; modules are loaded would be decided at run time.</p>\r\n<p>I have previously done this in SCSF and Cab with the VE Web Services and my own Mapping Smart Part ( the view ), but wanted to change the MVP paradigm a bit and see what I could come up with for Silverlight and CAL.&nbsp; In SCSF I create a service that the other modules load via DI. The service&nbsp;surfaced an&nbsp;AddLayer and AddItem ( among other ) functionality.&nbsp; The service would then publish an event that the Mapping smart part's presenter&nbsp;would subscribe to.&nbsp; The smart part would then get the new layer/items and put them onto the map.&nbsp; The other modules didnt know about the details of the map, only the service interface.&nbsp; It worked well, for what it was.&nbsp; The Mapping smart part didnt know about new modules, and all the new modules knew about was the service interface.</p>\r\n<p>I am not looking for the group to provide a complete solution, just some fresh&nbsp;ideas on how others would approach this.&nbsp; I want as little coupling as possible, but as much MVVM usage as I can get.&nbsp; If push came to shove, I would want to be able to replace the mapping module with a different implementation if needed, without major surgery on any of the &quot;other&quot; modules.&nbsp; And the reverse is true.&nbsp; The Map Module should know nothing about the &quot;other&quot; modules loaded.&nbsp; The Map Module will not be the only view on the shell, so the Shell should be ignorant of what is on its surface .&nbsp;</p>\r\n<p>There are lots of CAL organizational questions to ask, like:</p>\r\n<p>While using MVVM, how do I make sure that the loaded modules' DataTemplates are visible to the Map Control module when it goes to add an item.&nbsp;&nbsp; Should I add them to the applications resource dictionary?&nbsp; How do I isolate the loaded DataTemplates from knowledge of the Map Control specifics?&nbsp;</p>\r\n<p>Is the ModuleInterface project&nbsp;and Module project &quot;pattern&quot; that was used so heavily in early SCSF a good organizational pattern to use in a CAL project to reduce the coupling between implementations of the modules.&nbsp; I.E.&nbsp; define the service interface in a ModuleInterface project, reference that project in &quot;Other&quot; module&nbsp;projects, and then put the implementation of the service in the Module project, which nobody but the Bootstrapper knows about.</p>\r\n<p>So, any ideas or approaches?&nbsp; I want to get out of the CAB/SCSF mindset where appropriate.</p>\r\n<p>Thanks in advance.</p>\r\n<p>Paul</p>",
    "PostedDate": "2009-07-14T11:40:51.023-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]