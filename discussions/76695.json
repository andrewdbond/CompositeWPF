[
  {
    "Id": "262287",
    "ThreadId": "76695",
    "Html": "<p>Hi,</p>\r\n<p>I've been playing with ways to allow a View designer&nbsp;to control (in XAML) the selection of the ViewModel and also to set properties in it.&nbsp; Here's a simplified example of the approach I took:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">UserControl</span> <span style=\"color:Red\">x:Class</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">LLNet.Modules.Library.Views.LibraryView2</span><span style=\"color:Black\">&quot;</span>\r\n    <span style=\"color:Red\">xmlns:t</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">clr-namespace:MR.Security;assembly=MR.Security</span><span style=\"color:Black\">&quot;</span>\r\n    <span style=\"color:Red\">t:Layout.ViewModel</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">LLNet.Modules.Library.ViewModels.LibraryVM,LLNet.Modules.Library</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n                <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">mr</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">BaseDragDropTV</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">TV</span><span style=\"color:Black\">&quot;</span> \r\n                               <span style=\"color:Red\">AllowedActions</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">AllDeletes,ReArrange,AllAdds</span><span style=\"color:Black\">&quot;</span>\r\n                               <span style=\"color:Red\">SearchMode</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Contains</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n                <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">mr</span><span style=\"color:Blue\">:</span><span style=\"color:#A31515\">BaseDragDropTV</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">UserControl</span><span style=\"color:Blue\">&gt;</span></pre>\r\n<pre>\r\n\r\nIn this example 'Layout.ViewModel' is an attached property. In the callback I instantiate the requested VM and set it as the DataContext to the View like this:</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> ResolveViewModel(System.Windows.FrameworkElement f, <span style=\"color:Blue\">string</span> viewModelName)\r\n        {\r\n\r\n            Type t = Type.GetType(viewModelName);\r\n            f.DataContext = container.Resolve(t);\r\n        }\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n<p>'mr:BaseDragDropTV' is a TreeView derived class where AllowedActions is again a DependencyProperty whose PropertyChangedCallback fires during the View's InitializeComponent. Here's the callback code:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><div style=\"color:Black;background-color:White\"><pre>      <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> AllowedActionsChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            BaseDragDropTV bdd = (BaseDragDropTV)d;\r\n            <span style=\"color:Blue\">if</span> (bdd.DataContext != <span style=\"color:Blue\">null</span>)\r\n                ((ITVVM)bdd.DataContext).AllowedActions = (AllowedActions)e.NewValue;\r\n        }\r\n</pre>\r\n<pre>This works since the ViewModel callback has already fired and the DataContext (i.e. the VM) is already set.  So far so good -</pre>\r\n<pre> but now I have a situation where I want to nest this view inside another whilst setting the 't:Layout.ViewModel' in the outer view. Now my pattern falls apart</pre>\r\n<pre>since the inner view has not yet picked up the DataContext when the AllowedActions callback fires (the View is instantiated via a RegisterViewWithRegion call in</pre>\r\n<pre>the relevant module.</pre>\r\n<pre>Is there a way around this.  Or possibly a better approach to the whole scenario (I do have a feeling I've maybe overcomplicated this one)</pre>\r\n<pre>TIA,</pre>\r\n<pre>Viv</pre>\r\n</div>\r\n</pre>\r\n</div>",
    "PostedDate": "2009-12-01T07:12:54.56-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "262858",
    "ThreadId": "76695",
    "Html": "<p>There was a far simpler (and more obvious) method of handling this : Using the DataContextChanged event&nbsp;to grab whatever DependencyProperties I'm interested in.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-12-02T11:09:06.363-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]