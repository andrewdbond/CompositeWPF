[
  {
    "Id": "514121",
    "ThreadId": "232688",
    "Html": "\r\n<p>I'm trying to put a region in a RadRibbon control.&nbsp; One particular area is it's QuickAccessToolbar.&nbsp;</p>\r\n<p>The QATbar inherits from RadToolBar which inherits from ItemsControl so I would have though I wouldn't need to create a custom regionAdapter but since it's not working, I set out to do this.</p>\r\n<p>The CreateRegion &amp; Adapt functions are firing but still the region in my QATbar isn't showing up in RegionManager anywhere.</p>\r\n<p>Setting a breakpoint in my Adapt method, the region object passed, RegionManager is set to null.</p>\r\n<p>One thing I notice I had to do that differs from what you see in the docs is implement a constructor that takes in IRegionBehaviorFactory</p>\r\n<p>My Custom RegionAdapter looks like this.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre> <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> QATBRegionAdapter : RegionAdapterBase&lt;QuickAccessToolBar&gt;        \r\n    {\r\n\r\n<span style=\"color:blue\">public</span> QATBRegionAdapter(IRegionBehaviorFactory regionBehaviorFactory)\r\n            : <span style=\"color:blue\">base</span>(regionBehaviorFactory)\r\n        {\r\n\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Adapt(IRegion region, QuickAccessToolBar regionTarget)\r\n        {\r\n            <span style=\"color:blue\">if</span> (region == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> ArgumentNullException(<span style=\"color:#a31515\">&quot;region&quot;</span>);\r\n            <span style=\"color:blue\">if</span> (regionTarget == <span style=\"color:blue\">null</span>) <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> ArgumentNullException(<span style=\"color:#a31515\">&quot;regionTarget&quot;</span>);\r\n\r\n            <span style=\"color:blue\">bool</span> itemsSourceIsSet = regionTarget.ItemsSource != <span style=\"color:blue\">null</span>;\r\n<span style=\"color:blue\">#if</span> !SILVERLIGHT\r\n            itemsSourceIsSet = itemsSourceIsSet || (BindingOperations.GetBinding(regionTarget, ItemsControl.ItemsSourceProperty) != <span style=\"color:blue\">null</span>);\r\n<span style=\"color:blue\">#endif</span>\r\n            <span style=\"color:blue\">if</span> (itemsSourceIsSet)\r\n            {\r\n                <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> InvalidOperationException(<span style=\"color:#a31515\">&quot;ItemsSource on QATB passed to QATBRegionAdapter is null.&quot;</span>);\r\n            }\r\n\r\n            <span style=\"color:green\">// If control has child items, move them to the region and then bind control to region. Can't set ItemsSource if child items exist.</span>\r\n            <span style=\"color:blue\">if</span> (regionTarget.Items.Count &gt; 0)\r\n            {\r\n                <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">object</span> childItem <span style=\"color:blue\">in</span> regionTarget.Items)\r\n                {\r\n                    region.Add(childItem);\r\n                }\r\n                <span style=\"color:green\">// Control must be empty before setting ItemsSource</span>\r\n                regionTarget.Items.Clear();\r\n            }\r\n\r\n            regionTarget.ItemsSource = region.Views;\r\n\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> IRegion CreateRegion()\r\n        {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">new</span> Region();\r\n        }\r\n    }\r\n}\r\n\r\nMy questions are as follows.</pre>\r\n<pre>The QuickAccessToolbar originates from ItemsControl so why would I need a regionadapter to start with.</pre>\r\n<pre>Since I am trying to create a RegionAdapter to solve this problem, even though the my adapt and CreateRegion() methods are firing, why is my region still not showing up in the RegionManager?</pre>\r\n<pre>Thanks.</pre>\r\n</div>\r\n",
    "PostedDate": "2010-10-28T10:48:13.153-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "515255",
    "ThreadId": "232688",
    "Html": "\r\n<p>Ok, here's what I've had to do so far to get this to work.</p>\r\n<p>RegionAdapter</p>\r\n<p>private IRegionManager _regionManager;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n<p>&nbsp;&nbsp; [ImportingConstructor]<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public QATBRegionAdapter(IRegionBehaviorFactory regionBehaviorFactory, IRegionManager regionManager)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : base(regionBehaviorFactory)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _regionManager = regionManager;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>protected override void Adapt(IRegion region, QuickAccessToolBar regionTarget)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _instance = regionTarget;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _instance.Items.Clear();</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (region == null) throw new ArgumentNullException(&quot;region&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (regionTarget == null) throw new ArgumentNullException(&quot;regionTarget&quot;);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool itemsSourceIsSet = regionTarget.ItemsSource != null;<br>\r\n#if !SILVERLIGHT<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; itemsSourceIsSet = itemsSourceIsSet || (BindingOperations.GetBinding(regionTarget, ItemsControl.ItemsSourceProperty) != null);<br>\r\n#endif<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (itemsSourceIsSet)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new InvalidOperationException(&quot;ItemsSource on QATB passed to QATBRegionAdapter is null.&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If control has child items, move them to the region and then bind control to region. Can't set ItemsSource if child items exist.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (regionTarget.Items.Count &gt; 0)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (object childItem in regionTarget.Items)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; region.Add(childItem);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Control must be empty before setting ItemsSource<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; regionTarget.Items.Clear();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; regionTarget.ItemsSource = region.Views;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _regionManager.Regions.Add(region);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>Bootstrapper:</p>\r\n<p>protected override RegionAdapterMappings ConfigureRegionAdapterMappings()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegionAdapterMappings _mappings = base.ConfigureRegionAdapterMappings();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _mappings.RegisterMapping(typeof(QuickAccessToolBar), this.Container.GetExportedValue&lt;QATBRegionAdapter&gt;());</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _mappings;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-31T18:51:50.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "515504",
    "ThreadId": "232688",
    "Html": "\r\n<p>Hi,<br>\r\n<br>\r\nNice to see that you solved your scenario and thanks for sharing it. Regarding to your question, if you have control that derives from ItemsControl, it would not be necessary to create a particular region adapter unless you find necessary to provide an specific\r\n behavior in the Adapt method or create a different region type.</p>\r\n<p>Fernando Antivero</p>\r\n<p><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n",
    "PostedDate": "2010-11-01T10:32:01.273-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "515507",
    "ThreadId": "232688",
    "Html": "\r\n<p>I found what I consider a workaround.&nbsp; Why wouldn't the adapt automatically add the region for my adapter to RegionManager?</p>\r\n<p>Also, you are correct, if I don't create a RegionAdapter I can use ViewDiscovery methods and items will show up in the region.</p>\r\n<p>However, I mostly use ViewInjection.</p>\r\n<p>If I use a ContentControl and put a region in it, it automatically gets added to RegionManager.</p>\r\n<p>Again the control I'm using does derive from ItemsControl but again it's not showing up in RegionManager.</p>\r\n<p>The sample for this can be found at <a href=\"http://www.dotnetpatterns.net/content/185-Silverlight-4.0-Prism-4.0-Telerik-Ribbon-Application-Template\">\r\nhttp://www.dotnetpatterns.net/content/185-Silverlight-4.0-Prism-4.0-Telerik-Ribbon-Application-Template</a></p>\r\n",
    "PostedDate": "2010-11-01T10:45:03.433-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "515599",
    "ThreadId": "232688",
    "Html": "\r\n<p>Hi,</p>\r\n<p>As I said in <a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=232990\">\r\nyour other forum thread</a>, it is nice to see that you found a solution for this scenario. On the other hand, I checked in a simplified scenario (HelloWorld Quickstart) the creation of regions exposed in ApplicationMenu and in a QuicksAccessToolbar, and found\r\n not possible to add a view to these regions using View Injection.<br>\r\n<br>\r\nThere are not problems using View Discovery, as you mentioned. That said, your approach seems to be a possible solution in this scenario. If I found any other relevant information, I will post it here.<br>\r\n<br>\r\n</p>\r\n<p>Fernando Antivero</p>\r\n<p><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n",
    "PostedDate": "2010-11-01T14:34:09.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]