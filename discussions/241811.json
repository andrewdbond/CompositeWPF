[
  {
    "Id": "549407",
    "ThreadId": "241811",
    "Html": "\r\n<p>It turns out that someone here added that method to the interface and re-compiled, somehow managing to include the Microsoft copyright notice with no hint that it was a private modification. &nbsp;My apologies for bothering you all.</p>\r\n<p>[what's below is kept for posterity; the StackOverflow post has been set up for deletion]</p>\r\n<p>We have been using version 2.0.0.0 of Microsoft.Practices.Composite.dll, particularly IEventAggregator and its implementation. &nbsp;In version 2.0.1.0 of the library, the non-generic overload of GetEvent, defined as</p>\r\n<p>&nbsp;&nbsp; &nbsp; &nbsp;EventBase GetEvent(Type eventType);</p>\r\n<p>has been <strong>removed from the interface.</strong>&nbsp;&nbsp;More details, including why we're using this method and my frustration that there's no trivial way to work around its removal, are in the referenced StackOverflow post. &nbsp;I'm posting here\r\n because it greatly surprises me that a member of a public interface got removed during a minor-version upgrade. &nbsp;My impression is that such a thing ought never ever ever ought to be done. &nbsp;It's even stranger that in multiple internet searches I haven't\r\n found anyone else having trouble with this. &nbsp;Comments would be much appreciated.</p>\r\n<p>For a more complete discussion, see</p>\r\n<p><a href=\"http://stackoverflow.com/questions/4688148/microsoft-practices-composite-events-ieventaggregator-geteventtype-eventtype-re\">http://stackoverflow.com/questions/4688148/microsoft-practices-composite-events-ieventaggregator-geteventtype-eventtype-re</a></p>\r\n",
    "PostedDate": "2011-01-14T08:06:43.89-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "549449",
    "ThreadId": "241811",
    "Html": "\r\n<p>Hi,</p>\r\n<p>As the source&nbsp;code for the Composite Application Library (including the <strong>\r\nMicrosoft.Practices.Composite</strong> project) <a href=\"http://compositewpf.codeplex.com/releases/view/35390\">\r\nis provided with Prism</a>, one possibility would be to modify the <strong>IEventAggregator</strong> interface and its concrete implementation, and then compile the assembly and use it in your projects, or directly reference the modified CAL projects in your\r\n solution, as it is done in the <a href=\"http://msdn.microsoft.com/en-us/library/ff921083(PandP.20).aspx\">\r\nQuickStarts</a> and <a href=\"http://msdn.microsoft.com/en-us/library/ff921074(PandP.20).aspx\">\r\nReference Implementation</a>.</p>\r\n<p>If you believe this kind of changes should be avoided in future versions, you could add a work item in the\r\n<a href=\"http://compositewpf.codeplex.com/workitem/list/basic\">Issue tracker</a>, so that the product team is notified about this.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2011-01-14T08:52:09.493-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]