[
  {
    "Id": "225302",
    "ThreadId": "66322",
    "Html": "<div><span style=\"font-family:Courier New\">We are developing a few products for different&nbsp;customers.&nbsp;All the products have in 90% the same&nbsp;logic but they don't look the same.</span></div>\r\n<div><span style=\"font-family:Courier New\">Every product have&nbsp;a different&nbsp;&quot;look&quot; depend on the customer requirements.</span></div>\r\n<div>&nbsp;</div>\r\n<div><span style=\"font-family:Courier New\">Is there any way to reuse the modules but have different&nbsp;views?</span></div>\r\n<div><span style=\"font-family:Courier New\">I thought of using a Data Template to represent the views, but from experience not every view interaction can be done with a Data Template.</span></div>\r\n<div>&nbsp;</div>\r\n<div><span style=\"font-family:Courier New\">I there any clean way to do that?</span></div>",
    "PostedDate": "2009-08-19T00:26:02.207-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "225509",
    "ThreadId": "66322",
    "Html": "<p>Hi</p>\r\n<p>Yes, there is a way to do this. If most of the logic in the applications is&nbsp; similar, and the UI is the main difference, then the situation is pretty similar as developing a WPF and Silverlight app (multitargeted). In this kind of scenario, Prism and the<span style=\"color:#1f497d\"> <a href=\"http://msdn.microsoft.com/en-us/magazine/dd419663.aspx\">MVVM pattern</a></span> come in very handy, because you have your logic highly decoupled from your UI. If you put your entire infrastructure (services, models, etc) in place first, you will only have to make the necessary UI changes but maintaining the same functionality.</p>\r\n<p>In my personal opinion, combining WPF styling capabilities, with commands, the MVVM pattern and DI you have to do nothing in particular to reduce the code duplication. All you will have to do is hook up the views to the ViewModels/Presenters and your application will be good to go.</p>\r\n<p>I assume you will also have unit tests (one of the benefits of Composite applications is an increase testability level), so you always have your tests to fall back on.</p>\r\n<p><span style=\"color:#1f497d\" lang=EN-US>&nbsp;</span></p>\r\n<p>You might find interesting the articles in the<span style=\"color:#1f497d\"> <a href=\"http://compositewpf.codeplex.com/Wiki/View.aspx?title=Knowledge Base\">prism Knowledge Base</a> </span>related to MVVM:<span style=\"color:#1f497d\"> <a href=\"http://compositewpf.codeplex.com/Wiki/View.aspx?title=Model View ViewModel (MVVM)&referringTitle=Home\">Model View ViewModel (MVVM)</a></span></p>\r\n<p><span style=\"color:#1f497d\" lang=EN-US>&nbsp;</span></p>\r\n<p>Please let me know if this helps.</p>\r\n<p>Damian Schenkelman<br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2009-08-19T09:56:28.31-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]