[
  {
    "Id": "112741",
    "ThreadId": "34019",
    "Html": "<p>Hi,</p>\r\n<p>  I would like to ask if someone tries to use Prism on .net 3.0. Is it possible or too many changes must be made? For now I'm using SCSF with WPF support but it's too slow and too &quot;complex&quot; for my need. However I have some limitations so I'm not able to use .net 3.5 for my current project.</p>\r\n<p>  Thank you for your answers</p>\r\n<p>Jarda</p>\r\n",
    "PostedDate": "2008-08-21T12:42:43.34-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "112827",
    "ThreadId": "34019",
    "Html": "Hi jardajirava, since LINQ was introduced with .NET 3.5 you won't be able to compile any LINQ code.&nbsp; I went ahead and did a solution scan for the&nbsp;FirstOrDefault LINQ operator,&nbsp;since this is only one operator there may be more affected classes but this will give you an idea what you would be in for.&nbsp; You may want to review these files to if it is a battle you want to take on; the Region.cs is a major player so it might be a place to start.&nbsp; <br>\r\n<br>\r\nFind all &quot;=&gt;&quot;, Subfolders, Find Results 1, &quot;Entire Solution&quot;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Events\\BackgroundEventSubscription.cs(50):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; worker.DoWork += ((sender, e) =&gt; action((TPayload)e.Argument));<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Events\\EventAggregator.cs(39):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEventType eventInstance = _events.FirstOrDefault(evt =&gt; evt.GetType() == typeof(TEventType)) as TEventType;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Events\\EventBase.cs(82):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IEventSubscription subscription = Subscriptions.FirstOrDefault(evt =&gt; evt.SubscriptionToken == token);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Events\\EventBase.cs(99):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IEventSubscription subscription = Subscriptions.FirstOrDefault(evt =&gt; evt.SubscriptionToken == token);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Events\\EventSubscription.cs(101):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return arguments =&gt;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Modularity\\ConfigurationModuleEnumerator.cs(102):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _modules.Where(moduleInfo =&gt; moduleInfo.StartupLoaded == true).ToArray();<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Modularity\\ConfigurationModuleEnumerator.cs(113):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _modules.FirstOrDefault(moduleInfo =&gt; moduleInfo.ModuleName == moduleName);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Modularity\\DirectoryLookupModuleEnumerator.cs(72):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _modules.Where(moduleInfo =&gt; moduleInfo.StartupLoaded == true).ToArray();<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Modularity\\DirectoryLookupModuleEnumerator.cs(83):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _modules.FirstOrDefault(moduleInfo =&gt; moduleInfo.ModuleName == moduleName);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Modularity\\DirectoryLookupModuleEnumerator.cs(155):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; asm =&gt; string.Equals(asm.FullName, args.Name, StringComparison.InvariantCultureIgnoreCase));<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Modularity\\DirectoryLookupModuleEnumerator.cs(173):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; asm =&gt; asm.FullName == typeof(IModule).Assembly.FullName);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Modularity\\DirectoryLookupModuleEnumerator.cs(178):&nbsp;&nbsp;&nbsp; .Where(file =&gt; alreadyLoadedAssemblies<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Modularity\\DirectoryLookupModuleEnumerator.cs(179):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .FirstOrDefault(assembly =&gt; String.Compare(Path.GetFileName(assembly.Location), file.Name, StringComparison.OrdinalIgnoreCase) == 0) == null)<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Modularity\\DirectoryLookupModuleEnumerator.cs(180):&nbsp;&nbsp;&nbsp; .SelectMany(file =&gt; Assembly.ReflectionOnlyLoadFrom(file.FullName)<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Modularity\\DirectoryLookupModuleEnumerator.cs(183):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Where(t =&gt; t != IModuleType)<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Modularity\\DirectoryLookupModuleEnumerator.cs(184):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Select(type =&gt; CreateModuleInfo(type)));<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Modularity\\DirectoryLookupModuleEnumerator.cs(205):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var moduleAttribute = CustomAttributeData.GetCustomAttributes(type).FirstOrDefault(cad =&gt; cad.Constructor.DeclaringType.FullName == typeof(ModuleAttribute).FullName);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Modularity\\DirectoryLookupModuleEnumerator.cs(219):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var moduleDependencyAttributes = CustomAttributeData.GetCustomAttributes(type).Where(cad =&gt; cad.Constructor.DeclaringType.FullName == typeof(ModuleDependencyAttribute).FullName);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite\\Modularity\\StaticModuleEnumerator.cs(56):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _modules.FirstOrDefault(moduleInfo =&gt; moduleInfo.ModuleName == moduleName);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf\\Events\\CompositeWpfEvent.cs(160):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IEventSubscription eventSubscription = Subscriptions.Cast&lt;EventSubscription&lt;TPayload&gt;&gt;().FirstOrDefault(evt =&gt; evt.Action == subscriber);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf\\Events\\CompositeWpfEvent.cs(178):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventSubscription = Subscriptions.Cast&lt;EventSubscription&lt;TPayload&gt;&gt;().FirstOrDefault(evt =&gt; evt.Action == subscriber);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf\\Regions\\Region.cs(47):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _views = new ViewsCollection(ItemMetadataCollection, x =&gt; true);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf\\Regions\\Region.cs(63):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _activeViews = new ViewsCollection(ItemMetadataCollection, x =&gt; x.IsActive);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf\\Regions\\Region.cs(171):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ItemMetadata metadata = ItemMetadataCollection.FirstOrDefault(x =&gt; x.Name == viewName);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf\\Regions\\Region.cs(205):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (ItemMetadataCollection.FirstOrDefault(x =&gt; x.Item == view) != null)<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf\\Regions\\Region.cs(211):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (ItemMetadataCollection.FirstOrDefault(x =&gt; x.Name == name) != null)<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf\\Regions\\Region.cs(231):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ItemMetadata itemMetadata = ItemMetadataCollection.FirstOrDefault(x =&gt; x.Item == view);<br>\r\n&nbsp; D:\\GWN\\Source\\QuickStarts\\EventAggregation\\ModuleB\\ActivityPresenter.cs(61):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fundOrder =&gt; fundOrder.CustomerId == _customerId);<br>\r\n<br>\r\n<br>\r\nUNIT TEST&nbsp;AFFECTED FOLLOW: <br>\r\n<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Commands\\CompositeCommandFixture.cs(386):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CanExecuteChanged += ((sender, e) =&gt; CanExecuteChangedRaised = true);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Events\\DispatcherEventSubscriptionFixture.cs(42):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Target = (Action&lt;object&gt;)(arg =&gt;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Events\\DispatcherEventSubscriptionFixture.cs(51):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Target = (Predicate&lt;object&gt;)(arg =&gt; true)<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Events\\DispatcherEventSubscriptionFixture.cs(94):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Action&lt;object&gt;)(arg1 =&gt;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\RegionFixture.cs(307):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; region.Views.CollectionChanged += (sender, e) =&gt;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\RegionFixture.cs(326):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; region.Views.CollectionChanged += (sender, e) =&gt;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\RegionFixture.cs(345):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; region.Views.CollectionChanged += (sender, e) =&gt;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\RegionFixture.cs(365):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; region.Views.CollectionChanged += (sender, e) =&gt;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\RegionFixture.cs(386):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; region.ActiveViews.CollectionChanged += (o, e) =&gt;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\ViewsCollectionFixture.cs(35):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IViewsCollection viewsCollection = new ViewsCollection(originalCollection, x =&gt; true);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\ViewsCollectionFixture.cs(49):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IViewsCollection viewsCollection = new ViewsCollection(originalCollection, x =&gt; x.Name == &quot;Posible&quot;);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\ViewsCollectionFixture.cs(66):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IViewsCollection viewsCollection = new ViewsCollection(originalCollection, x =&gt; x.IsActive);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\ViewsCollectionFixture.cs(68):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; viewsCollection.CollectionChanged += (s, e) =&gt; collectionChanged = true;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\ViewsCollectionFixture.cs(79):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IViewsCollection viewsCollection = new ViewsCollection(originalCollection, x =&gt; x.IsActive);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\ViewsCollectionFixture.cs(82):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; viewsCollection.CollectionChanged += (s, e) =&gt;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\ViewsCollectionFixture.cs(109):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IViewsCollection viewsCollection = new ViewsCollection(originalCollection, x =&gt; x.IsActive);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\ViewsCollectionFixture.cs(111):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; viewsCollection.CollectionChanged += (s, e) =&gt; collectionChanged = true;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\ViewsCollectionFixture.cs(124):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IViewsCollection viewsCollection = new ViewsCollection(originalCollection, x =&gt; true);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\ViewsCollectionFixture.cs(126):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; viewsCollection.CollectionChanged += (s, e) =&gt;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\ViewsCollectionFixture.cs(147):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IViewsCollection viewsCollection = new ViewsCollection(originalCollection, x =&gt; true);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\ViewsCollectionFixture.cs(158):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IViewsCollection viewsCollection = new ViewsCollection(originalCollection, x =&gt; x.IsActive);<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.Wpf.Tests\\Regions\\ViewsCollectionFixture.cs(161):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; viewsCollection.CollectionChanged += (s, e) =&gt;<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.UnityExtensions.Tests\\UnityBootstrapperFixture.cs(320):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Assert.IsNotNull(messages.FirstOrDefault(msg =&gt; msg.Contains(&quot;Creating Unity container&quot;)));<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.UnityExtensions.Tests\\UnityBootstrapperFixture.cs(321):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Assert.IsNotNull(messages.FirstOrDefault(msg =&gt; msg.Contains(&quot;Configuring container&quot;)));<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.UnityExtensions.Tests\\UnityBootstrapperFixture.cs(322):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Assert.IsNotNull(messages.FirstOrDefault(msg =&gt; msg.Contains(&quot;Configuring region adapters&quot;)));<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.UnityExtensions.Tests\\UnityBootstrapperFixture.cs(323):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Assert.IsNotNull(messages.FirstOrDefault(msg =&gt; msg.Contains(&quot;Creating shell&quot;)));<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.UnityExtensions.Tests\\UnityBootstrapperFixture.cs(324):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Assert.IsNotNull(messages.FirstOrDefault(msg =&gt; msg.Contains(&quot;Initializing modules&quot;)));<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.UnityExtensions.Tests\\UnityBootstrapperFixture.cs(325):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Assert.IsNotNull(messages.FirstOrDefault(msg =&gt; msg.Contains(&quot;Bootstrapper sequence completed&quot;)));<br>\r\n&nbsp; D:\\GWN\\Source\\CAL\\Composite.UnityExtensions.Tests\\UnityBootstrapperFixture.cs(350):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Assert.IsNotNull(messages.FirstOrDefault(msg =&gt; msg.Contains(&quot;Type 'IRegionManager' was already registered by the application&quot;)));<br>\r\n&nbsp; Matching lines: 57&nbsp;&nbsp;&nbsp; Matching files: 15&nbsp;&nbsp;&nbsp; Total files searched: 765<br>\r\n",
    "PostedDate": "2008-08-21T17:31:59.723-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "112950",
    "ThreadId": "34019",
    "Html": "Hi Bill,<br>\r\n<br>\r\n&nbsp; thank you for your reply. If I know that there&nbsp;are only the extension methods with simple lambda expressions&nbsp;and nothing special I try to use LinqBridge.<br>\r\n<br>\r\n&nbsp; It is then quite easy without any modification - only the target must be changed to 3.0 - and nothing more. So if anyone need to use Prism with .net 3.0 it is possible :-)<br>\r\n<br>\r\n&nbsp; Thank you and have a nice day<br>\r\n<br>\r\nJarda\r\n",
    "PostedDate": "2008-08-22T06:49:09.813-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]