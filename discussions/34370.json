[
  {
    "Id": "114096",
    "ThreadId": "34370",
    "Html": "How could I inject registered and&nbsp;resolved objects from a view that has no container? The structure of my scenario is the following:<br>\r\n<br>\r\nModule<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;ParentView<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ChildView [XAML]<br>\r\n<br>\r\nThe module inject the UnityContainer in the constructor. From this container, I can retrieve my IRegionManager, IEventAggregator, etc. The ParentView would also then be resolved to do the same, if necessary, and let say for this use case it is done:<br>\r\n<br>\r\ncontainer.Resolve&lt;ParentView&gt;();<br>\r\n<br>\r\npublic class ParentView(IRegionManager _regionManager, IEventAggregator&nbsp;_eventAggregator)<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;...<br>\r\n}<br>\r\n<br>\r\nMy ParentView definition looks like the following:<br>\r\n<br>\r\n&lt;ContentControl<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;x:Name=&quot;ParentView&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;...<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:controls=<a href=\"http://www.mycontrols.com\">www.mycontrols.com</a><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;controls:ChildView SomeProperty=&quot;true&quot;/&gt;<br>\r\n&lt;/ContentControl&gt;<br>\r\n<br>\r\nMy ChildView is statically defined, which means the default constructor has been called already. This also implies that I should not have to resolve this ChildView in code because it already has been constructed. This leads me to my original question:<br>\r\n<br>\r\nHow could I inject registered and&nbsp;resolved objects from a view that has no container?<br>\r\n<br>\r\nI could include a DP in my ChildView of type EventAggregator and bind it to the ParentView newly exposed, readonly property of, you guessed it, EventAggregator. but I do not want to.<br>\r\n<br>\r\nSuggestions please.\r\n",
    "PostedDate": "2008-08-27T05:21:24.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "114119",
    "ThreadId": "34370",
    "Html": "I just realized that there is a Dependency attribute, so I will be working with this to resolve my issues. Actually, this might be exactly what I was looking for. Thanks in advance if you thought about replying for this issue. Will keep this thread updated.\r\n",
    "PostedDate": "2008-08-27T06:41:28.223-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "114180",
    "ThreadId": "34370",
    "Html": "<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">Hi</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">Since the <b>ChildView</b> class is not resolved by the container, the <b>Dependency</b> attribute is ignored. If you want properties and other injection performed to an instance when you do not control its construction, you can use the <b>BuildUp</b> method of the Unity container:</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\">public</span><span style=\"font-size:10pt;font-family:'Courier New'\"> ParentView(<span style=\"color:#2b91af\">ParentViewPresenter</span> presenter, <span style=\"color:#2b91af\">IUnityContainer</span> container)</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; InitializeComponent();</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; _presenter = presenter;</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; _presenter.View = <span style=\"color:blue\">this</span>;</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; container.BuildUp(myChildView.GetType(), myChildView);</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">}</span> </p>\r\n<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">Please, let me know if it helps.</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"color:#1f497d\"><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span><span style=\"font-family:Calibri\">Mariano Converti</span></span></p>\r\n<p style=\"margin:0in 0in 0pt\"><a href=\"http://blogs.southworks.net/mconverti\"><span><span style=\"font-family:Calibri\">http://blogs.southworks.net/mconverti</span></span></a></p>\r\n",
    "PostedDate": "2008-08-27T09:58:09.63-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "114276",
    "ThreadId": "34370",
    "Html": "mconverti,<br>\r\n<br>\r\nThanks for the heads up. I actually answered a separate posting regarding the <strong>DependencyAttribute</strong> before seeing your posting.<a href=\"http://www.codeplex.com/unity/Thread/View.aspx?ThreadId=27343\"><br>\r\n<br>\r\nhttp://www.codeplex.com/unity/Thread/View.aspx?ThreadId=27343</a><br>\r\n<br>\r\nI also concluded that rather than using the&nbsp;<strong>BuildUp </strong>method of the container, I could just register my BusinessObject with container.RegisterType(BusinessObject, BusnessObject). With this implemenation, property injection worked fine. <br>\r\n<br>\r\nThe BuildUp implementation worked fine, but what I did not like about the BuildUp solution is that it goes through two (2) different constructors, the default for Xaml and the injected&nbsp;one for resolvement. I felt uncomfortable with this. <br>\r\n<br>\r\nMy main obsatcle right now is trying to organize initialization of BusinessObjects and try not to get Injection-Happy. Injection is fine but can get messy. So far I get the impression that global business objects should only be registered and injected through Dependency attributed properties, menaing&nbsp;littel initialization logic in constructor,&nbsp;while&nbsp;modular business objects, business objects&nbsp;outside of the scope of resolvement,&nbsp;can be resolved. When I say &quot;outside of the scope of resolvement,&quot; I am mainly speaking about non-top level, module accessible objects&nbsp;that&nbsp;rely&nbsp;business objects.<br>\r\n<br>\r\nI am still putting more necessary thought into all of this. Will keep&nbsp;you posted. Thanks again.<br>\r\n<br>\r\nAndres Olivares\r\n",
    "PostedDate": "2008-08-27T14:55:30.087-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115252",
    "ThreadId": "34370",
    "Html": "<p>mconverti,</p>\r\n<p>I understand now a little more of how to organize new views with injection. I now layout my view statically and use styles to bind properties for regionalized views within a module. I create a region on a container ContentControl, for example, </p>\r\n<p>in my parent view, I then create a style the type that will be stored in the target placeholder ContentControl.</p>\r\n<p><strong>&lt;!--From:--&gt;</strong><br>\r\n&lt;UserControl<br>\r\n&nbsp;&nbsp;&nbsp; x:Name=&quot;root&quot;<br>\r\n&nbsp;&nbsp;&nbsp; x:Class=&quot;UseCaseModule.ParentView&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:self=&quot;clr-namespace:UseCaseModule&quot;<br>\r\n&nbsp;&nbsp;&nbsp; &gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;<strong>self:ChildView</strong> x:Name=&quot;childControl&quot; ChildContext=&quot;{Binding DataContext, ElementName=parent}&quot;/&gt;<br>\r\n&lt;UserControl&gt;<br>\r\n<br>\r\n<strong>&lt;!--To:--&gt;</strong><br>\r\n&lt;UserControl <br>\r\n&nbsp;&nbsp;&nbsp; x:Name=&quot;root&quot;<br>\r\n&nbsp;&nbsp;&nbsp; x:Class=&quot;UseCaseModule.ParentView&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:cal=&quot;<a href=\"http://www.codeplex.com/CompositeWPF\">http://www.codeplex.com/CompositeWPF</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:self=&quot;clr-namespace:UseCaseModule&quot;<br>\r\n&nbsp;&nbsp;&nbsp; &gt;<br>\r\n&nbsp;&lt;UserControl.Resources&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ResourceDictionary&gt;<br>\r\n<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Style x:Target=&quot;{x:Type self:ChildView}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;ChildContext&quot;&nbsp;Value=&quot;{Binding DataContext, ElementName=parent}&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Style&gt;</strong><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ResourceDictionary&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/UserControl.Resources&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ContentControl&nbsp;<strong>x:Name=&quot;childArea&quot;</strong>&nbsp;cal:RegionManager.RegionName=&quot;{x:Static self:ParentView.ChildArea}&quot;/&gt; <br>\r\n&lt;/UserControl&gt;</p>\r\n<p>My module can then resolve and regionalize views in the proper placeholders.</p>\r\n<p><strong>// UseCaseModule</strong><br>\r\npublic void Initialize()<br>\r\n{<br>\r\n&nbsp;IRegionManager regionManager = container.Resolve&lt;IRegionManager&gt;();</p>\r\n<p>&nbsp;IRegion <strong>parentArea</strong> = regionManager.Regions[ShellConstants.MainArea];<br>\r\n&nbsp;if (parentArea != null)<br>\r\n&nbsp;{<br>\r\n&nbsp;&nbsp;ParentView parent = <strong>container.Resolve&lt;ParentView&gt;();<br>\r\n</strong>&nbsp;&nbsp;parentArea.Add(parent);<br>\r\n&nbsp;&nbsp;<strong>parentArea.Activate(parent);<br>\r\n</strong>&nbsp;}</p>\r\n<p>&nbsp;IRegion <strong>childArea</strong> = regionManager.Regions[ParentView.ChildArea];<br>\r\n&nbsp;if (childArea != null)<br>\r\n&nbsp;{<br>\r\n&nbsp;&nbsp;ChildView child = <strong>container.Resolve&lt;ChildView&gt;();<br>\r\n</strong>&nbsp;&nbsp;childArea.Add(child);<br>\r\n&nbsp;&nbsp;<strong>childArea.Activate(child);<br>\r\n</strong>&nbsp;}<br>\r\n}</p>\r\n<p>If I want to access my child control from my ParentView, I would just extract and cast the Content from the placeholder.<br>\r\n<br>\r\n// ParentView<br>\r\nvoid buttonHasContext_Click(object sender, RoutedEventArgs e)<br>\r\n{<br>\r\n&nbsp; <strong>ChildView</strong> childView = <strong>childArea.Content</strong> as ChildView;<br>\r\n&nbsp; MessageBox.Show(string.Format(&quot;The child has {0}.&quot;, <br>\r\n&nbsp;&nbsp;childView.ChildContext == null ? &quot;no context&quot; : &quot;context&quot;));<br>\r\n}<br>\r\n<br>\r\nIf I am mistating anything, please let me know.&nbsp; Thanks again.<br>\r\n<br>\r\nAndres Olivares</p>\r\n",
    "PostedDate": "2008-09-01T17:09:30.58-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "116059",
    "ThreadId": "34370",
    "Html": "Hi Andrés,<br>\r\nI'm not sure I understand correctly what you mean with the following:<br>\r\n<br>\r\n<blockquote><em>\r\nThe BuildUp implementation worked fine, but what I did not like about\r\nthe BuildUp solution is that it goes through two (2) different\r\nconstructors, the default for Xaml and the injected&nbsp;one for\r\nresolvement. I felt uncomfortable with this.<br>\r\n</em></blockquote><br>\r\nThe BuildUp method will not run constructor injection or new up a new instance of the class; it will just perform the other strategies that can be executed after object creation, such as property or method injection.<br>\r\nI know you already followed a different approach for this case, but this may easy some of your concerns about using this approach in the future.<br>\r\n<br>\r\nI hope this helps,<br>\r\nJulian Dominguez<br>\r\n<a href=\"http://blogs.southworks.net/jdominguez\">http://blogs.southworks.net/jdominguez</a><br>\r\n",
    "PostedDate": "2008-09-04T08:55:21.13-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "116062",
    "ThreadId": "34370",
    "Html": "Julian,<br>\r\n<br>\r\nAfter thinking about it some more, I figured that going through the construction sequence of the target object would be unless, and hope that this is not what was being done. I figured Prism would have used a strategy as you described. Your comment does make me feel more comfortable using it where ever necessay, but for now it is a last resort.<br>\r\n<br>\r\nThank you for the clarification,<br>\r\n<br>\r\nAndres Olivares\r\n",
    "PostedDate": "2008-09-04T08:59:23.363-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]