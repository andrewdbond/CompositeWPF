[
  {
    "Id": "948546",
    "ThreadId": "404930",
    "Html": "\r\n<p><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">I originally posted this on the new&nbsp;Silverlight&nbsp;forum, but was told that I should post my question here. I am using Silverlight 5, but only saw a Silverlight4/Prism\r\n 4 topic, which is where I have posted this question.</span></p>\r\n<p><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">A similar question was asked on the Silverlight forum in 2011, but the link does not contain definitive answers to my questions. The old link named, &quot;<span>How to Register\r\n a ChildWindow with PRISM since it is not a region but a pop up&quot;, is located at\r\n</span><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\"><a href=\"http://social.msdn.microsoft.com/Forums/en-US/silverlightwcf/thread/4c069cd1-3a44-476b-9e8c-64473af65cc8/\">http://social.msdn.microsoft.com/Forums/en-US/silverlightwcf/thread/4c069cd1-3a44-476b-9e8c-64473af65cc8/.</a></span></span></p>\r\n<p><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">I have a sophisticated Child Window form wizard that has many tab views (~20&#43;).</span></p>\r\n<ul>\r\n<li><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">Each tab view has its own ViewModel.\r\n</span></li><li><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">The different views are required to handle different user flows.</span>\r\n</li><li><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">All flows use two common tabs and typically two additional tabs.</span>\r\n</li><li><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">The additional tabs are determined by the user's choices.</span>\r\n</li><li><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">Most users will use 1 or 2 wizard flows max.</span>\r\n</li></ul>\r\n<p><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">The form wizard is currently implemented as part of the main application. It is adding substantially to the download size. The main application functionality is used about\r\n 90-95% of the time. The wizard is used about 5-10% of the time, and only about 20% of the wizard functionality is used by any user during a session. Prism seems like a good fit to strip out the wizard functionality and make it available on demand.</span></p>\r\n<ul>\r\n<li><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">What I would like to do is to create a XAP file that contains the Child Window wizard and 2 tabs that are used for all use models.</span>\r\n</li><li><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">I would like to download separate tab controls (in their own XAP files) on demand based upon the user's choices.</span>\r\n</li></ul>\r\n<p><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">I have been working to understand the Prism/MEFBootstrapper methodology. I have simple module regions working in the Shell. However, I am at a loss as to how one registers\r\n and invokes a Child Window in a separate XAP file. </span></p>\r\n<p><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">I will also need the Child Window to load the different tabs from the appropriate XAP files, but I am assuming that the implementation will follow the pattern of inserting\r\n regions into the main Shell application. Is my assumption correct adding regions to tabs on the Child Window?</span></p>\r\n<p><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">Please let me know of any links, examples, or books that might cover this particular&nbsp;subject in more detail.</span></p>\r\n<p><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">Colin Blair, on the Silverlight Forum, replied as follows to my question on that forum.</span></p>\r\n<p style=\"padding-left:30px\"><span style=\"line-height:115%; font-family:'Calibri','sans-serif'; font-size:11pt\">&quot;As for registering and invoking a child window, that would probably involve using the base ChildWindow class in the caller in combination with\r\n an interface that can be used by the caller and implemented by the Child Window itself. That way there are no direct references from the caller to the Child WIndow's assembly.&quot;</span></p>\r\n<p>I am new to Prism, and do not have enough knowledge to act upon Colin's suggestion. Any tips or suggestions would be greatly appreciated...</p>\r\n<p>I am using Mark Seemann's Dependency Injection in .NET book as my primary reference, but have many chapters to go to complete his book.</p>\r\n<p>Thanks...</p>\r\n",
    "PostedDate": "2012-11-28T11:15:27.78-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "948597",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I believe the are several approaches that could be followed to obtain the functionality you are describing.</p>\r\n<p>For example, a possible approach could be to move the <strong>WizardChildWindow\r\n</strong>to a module (for example, a <strong>WizardModule</strong>) and export it through an interface defined in a common project (for example an\r\n<strong>Infrastructure </strong>project):</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Export(IWizardChildWindow)]\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> WizardChildWindow: ChildWindow, IWizardChildWindow\n</pre>\r\n</div>\r\n<p>Hence, when you need to use the wizard, you just need to check if the <strong>\r\nWizardModule </strong>is loaded or not. If the module <strong>WizardModule </strong>\r\nis loaded, then you can obtain the <strong>WizardChildWindow </strong>using the <strong>\r\nServiceLocator </strong>and invoke a <strong>Show </strong>method to show it:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>IWizardChildWindow wizard = ServiceLocator.Current.GetInstance&lt;IWizardChildWindow&gt;();\nwizard.Show();\n</pre>\r\n</div>\r\n<p>If the module is not loaded, you will need to load the <strong>WizardModule </strong>\r\non demand and wait the module to be loaded (you can do this using the <strong>LoadModuleCompleted\r\n</strong>event of the <strong>IModuleManager</strong>) before obtaining the <strong>\r\nWizardChildWindow</strong>. You can know if the module has been loaded or not by iterating the\r\n<strong>Modules </strong>collection of the <strong>IModuleCatalog </strong>in order to find the\r\n<strong>ModuleInfo </strong>of the <strong>WizardModule </strong>and check if its\r\n<strong>ModuleState </strong>property is set as &quot;<strong>Initialized</strong>&quot; (which means the module is loaded).</p>\r\n<p>Take into account that in order to use regions in the <strong>WizardChildWindow\r\n</strong>you will need to set a <strong>RegionManager </strong>manually. For example, you can do this in the\r\n<strong>WizardChildWindow</strong>'s constructor:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[ImportingConstructor]\n<span style=\"color:blue\">public</span> WizardChildWindow(IRegionManager rm)\n{\n    <span style=\"color:green\">// If you want to use the main region manager of your application</span>\n    rm.SetRegionManager(<span style=\"color:blue\">this</span>, rm);\n\n    <span style=\"color:green\">// Or, if you want to use a scoped region manager</span>\n    rm.SetRegionManager(<span style=\"color:blue\">this</span>, rm.CreateRegionManager());\n}\n</pre>\r\n</div>\r\n<p>Finally, you can do something similar to load the modules that contain the tabs of the wizard on demand when needed.</p>\r\n<p>You can find more information about this in the following chapters of the <strong>\r\nPrism </strong>documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921140%28v=pandp.40%29.aspx\">Chapter 3 - Managing Dependencies Between Components</a>\r\n</li><li><a href=\"http://msdn.microsoft.com/en-us/library/gg405479%28v=pandp.40%29.aspx\">Chapter 4 - Modular Application Development</a>\r\n</li><li><a href=\"http://msdn.microsoft.com/en-us/library/ff921098%28v=pandp.40%29.aspx\">Chapter 7 - Composing the User Interface</a>\r\n</li></ul>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br>\r\n<a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>\r\n",
    "PostedDate": "2012-11-28T13:10:41.11-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "948644",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hi DCherubini,</p>\r\n<p>Thank you for your quick and informative response.</p>\r\n<p>I have a smaller test case using a Silverlight app project (SharedForms). This project contains 2 ChildWindows that are used throughout the main and supporting application modules for messaging, debug and error reporting.</p>\r\n<p>I have followed the declaration pattern for each.</p>\r\n<p>[Export(typeof(ISMMMessageWindow))]<br>\r\npublic partial class SMMMessageWindow : ChildWindow, ISMMMessageWindow<br>\r\n{...<br>\r\n}</p>\r\n<p>[Export(typeof(IErrorWindow))] <br>\r\npublic partial class ErrorWindow : ChildWindow, IErrorWindow<br>\r\n{...<br>\r\n}</p>\r\n<p>I have assumed that it is okay to have 2 such controls in a common XAP file and that either can be exported. Is this correct?<br>\r\n&nbsp;<br>\r\nIn the SharedForms project I added the class shown below. Will this work? Is something like this required to access the 2 ChildWindow controls?</p>\r\n<p>[Export(typeof(IModule))]<br>\r\npublic class SharedFormsModule: IModule<br>\r\n{<br>\r\n&nbsp;IRegionManager regionManager;<br>\r\n&nbsp;public SharedFormsModule(IRegionManager regionManager)<br>\r\n&nbsp;{<br>\r\n&nbsp; this.regionManager = regionManager;<br>\r\n&nbsp;}</p>\r\n<p>&nbsp;public void Initialize()<br>\r\n&nbsp;{<br>\r\n&nbsp; regionManager.RegisterViewWithRegion(&quot;ErrorWindowRegion&quot;, typeof(IErrorWindow));<br>\r\n&nbsp; regionManager.RegisterViewWithRegion(&quot;SMMMessageBoxRegion&quot;, typeof(ISMMMessageBox));<br>\r\n&nbsp;}<br>\r\n}</p>\r\n<p>Thanks, Warren</p>\r\n",
    "PostedDate": "2012-11-28T14:39:36.187-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "948756",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I would not go with the ServiceLocator to import the childwindow. And also if you Export your childwindow as IErrorWindow/ISMMMessageWindow you will not be able to call Show() on it as that is a method on the ChildWindow.</p>\r\n<p>I would do the following</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Export(<span style=\"color:#a31515\">&quot;SMMMessageWindow&quot;</span>, <span style=\"color:blue\">typeof</span>(ChildWindow)]\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> SMMMessageWindow : ChildWindow, ISMMMessageWindow\n{...\n}\n\n[Export(<span style=\"color:#a31515\">&quot;ErrorWindow&quot;</span>, <span style=\"color:blue\">typeof</span>(ChildWindow)]\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> ErrorWindow : ChildWindow, IErrorWindow\n{...\n}\n\n\n[Export(<span style=\"color:blue\">typeof</span>(IModule))]\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> SharedFormsModule: IModule\n{\n IRegionManager regionManager;\n <span style=\"color:blue\">public</span> SharedFormsModule(IRegionManager regionManager)\n {\n  <span style=\"color:blue\">this</span>.regionManager = regionManager;\n }\n\n [Import(<span style=\"color:#a31515\">&quot;SMMMessageWindow&quot;</span>)]\n <span style=\"color:blue\">public</span> ChildWindow ErrorWindow {<span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>;}\n\n [Import(<span style=\"color:#a31515\">&quot;ErrorWindow&quot;</span>)]\n <span style=\"color:blue\">public</span> ChildWindow SMMMessageWindow {<span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>;} \n}\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Now you can call the show on your childwindows when you want, and yes the viewmodels for your childwindows would also be available as you would have injected into their constructors using a ImportingConstructor.</p>\r\n<p>Further you could do some clever stuff by using the InteractionRequest&lt;&gt; of Prism.Interactivity to invoke your childwindow instead of directly calling Show() on them.</p>\r\n<p>Hope this helps.</p>\r\n<p>Cheers!</p>\r\n",
    "PostedDate": "2012-11-28T22:17:37.96-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "949207",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hello,</p>\r\n<p>I have spent some time reading articles/references and reviewing your advice. What you said about exporting the two classes as type ChildWindow makes sense. For now I will use Show() for the ChildWindows, but, I&nbsp;am definitely interested in the InteractionNotificationRequest\r\n approach after I get the basic module flows working.</p>\r\n<p>I have some additional questions.</p>\r\n<ol>\r\n<li>If I understand the intent, importing each child window class into the SharedFormsModule class makes it available for use by the importing class in the main application shell. Is this correct?\r\n</li><li>IModule requires an instance of Initialize(). Is this method blank or does it require some additional code?\r\n</li><li>I am using a customized version of the Silverlight Navigation project as my application template. I would like to add the module code on demand. What do I have to do in the shell (e.g., a Home page or some other page) to access the module from a page since\r\n it is not being used as a region? All the explanations/examples that I have found only deal with regions.\r\n</li></ol>\r\n<p>I have created a ModulesCatalog.xaml as follows:</p>\r\n<p>&lt;Modularity:ModuleCatalog xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:sys=&quot;clr-namespace:System;assembly=mscorlib&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:Modularity=&quot;clr-namespace:Microsoft.Practices.Prism.Modularity;assembly=Microsoft.Practices.Prism&quot;&gt;<br>\r\n&nbsp;&lt;Modularity:ModuleInfoGroup InitializationMode=&quot;OnDemand&quot;&gt;<br>\r\n&nbsp;&nbsp;&lt;Modularity:ModuleInfo Ref=&quot;SharedForms.xap&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleName=&quot;SharedFormsModule&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleType=&quot;SharedForms.SharedFormsModule, SharedForms, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot; /&gt;<br>\r\n&nbsp;&lt;/Modularity:ModuleInfoGroup&gt;<br>\r\n&lt;/Modularity:ModuleCatalog&gt;&nbsp;</p>\r\n<p>The bootstrapper appears to be working properly.&nbsp;The shell is being created by the bootstrapper, and the modules catalog is being created/returned in the following code.</p>\r\n<p>protected override IModuleCatalog CreateModuleCatalog()<br>\r\n{<br>\r\n&nbsp;var moduleCatalog = Modularity.ModuleCatalog.CreateFromXaml(new Uri(&quot;/SMMApp;component/ModulesCatalog.xaml&quot;, UriKind.Relative));<br>\r\n&nbsp;return moduleCatalog;<br>\r\n}</p>\r\n<p>I am missing the steps to get/use the module child window&nbsp;code in one of the pages of the shell.</p>\r\n<p>Thanks, Warren</p>\r\n",
    "PostedDate": "2012-11-29T12:30:04.79-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "949243",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hello gan_s,</p>\r\n<p>After I import IModuleManager, do I use something similar to the following code&nbsp;to load the module on demand?</p>\r\n<p>ModuleManager.LoadModule(&quot;SharedFormsModule&quot; );</p>\r\n<p>ModuleManager.LoadModuleCompleted &#43;= (s, ev) =&gt;<br>\r\n{...<br>\r\n};</p>\r\n<p>I'll give this a try to see if I can work through the process.</p>\r\n<p>Thanks, Warren</p>\r\n",
    "PostedDate": "2012-11-29T13:42:51.973-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "949321",
    "ThreadId": "404930",
    "Html": "\r\n<p>Thats right Warren. You need to call the LoadModule with the module name defined in your modulescatalog.xaml. Once your module is downloaded you would use regionManager.RequestNavigate to load the view in your MainRegion or whatever the name of the region\r\n is in your shell.</p>\r\n<p>From what I understand in your scenario you only have the 2 childwindows in the SharedFormsModule? Then in that case wherever you have an import on the ChildWindows you'll have those properties available for use. With regards to the Initialize() event in\r\n your IModule you wouldnt need to do anything. Ideally you would use it to register views with regions, which is usually needed to be done when you use a Unity container for managing your views and viewmodels. In case of MEF implementation you dont need to\r\n worry about it. You could plug some initialzation logic for the module in that method, if there is any. Otherwise can be left blank.</p>\r\n<p>The silverlight navigation framework provides you with events like Navigated/NavigationFailed etc. You can hook up to the Navigated event to download your shared module. Also keep in mind you might want to check the module state before calling a LoadModule.\r\n Reason being you would download it only once and it will be available in the AggregateCatalog else you would get ugly MEF errors saying the exports could not be recomposed and stuff. So next time around you wont need to download the xap again. Do something\r\n like this</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> module = ModuleCatalog.Modules.Single(m =&gt; m.ModuleName.Equals(<span style=\"color:#a31515\">&quot;SharedFormsModule&quot;</span>));\r\n\r\n<span style=\"color:green\">// Check state of the module.</span>\r\n<span style=\"color:blue\">if</span> (module.State == ModuleState.NotStarted)\r\n   ModuleManager.LoadModule(module.ModuleName);\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Where ModuleCatalog is an implementation of IModuleCatalog (import it in your constructor just like IModuleManager).</p>\r\n<p>Cheers!</p>\r\n",
    "PostedDate": "2012-11-29T20:03:47.403-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "949677",
    "ThreadId": "404930",
    "Html": "\r\n<p>&nbsp;Hello,</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">Thanks much for your assistance. I have made some progress today.</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">&nbsp;</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">I struggled for quite a while with a module not found error where VS reported that the named module could not be found. However, after checking everything in the Silverlight and SharedFormsModule code\r\n and doing some web research, I found that I had a mismatch between the importing annotation on the property in the SharedFormsModule and the class exporting annotation as follows:</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">&nbsp;</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Import</span>(<span style=\"color:#a31515\">&quot;ErrorWindow&quot;</span>,\r\n<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">ChildWindow</span>))]</p>\r\n<p style=\"margin:0in\"><span style=\"font-family:Consolas; color:blue; font-size:9.5pt\">public</span><span style=\"font-family:Consolas; font-size:9.5pt\">\r\n</span><span style=\"font-family:Consolas; color:#2b91af; font-size:9.5pt\">ChildWindow</span><span style=\"font-family:Consolas; font-size:9.5pt\"> ErrorWindow {\r\n</span><span style=\"font-family:Consolas; color:blue; font-size:9.5pt\">get</span><span style=\"font-family:Consolas; font-size:9.5pt\">;\r\n</span><span style=\"font-family:Consolas; color:blue; font-size:9.5pt\">set</span><span style=\"font-family:Consolas; font-size:9.5pt\">; }</span><span style=\"font-family:Calibri; font-size:11pt\">\r\n</span></p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">&nbsp;</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">and</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">&nbsp;</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Export</span>(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">ChildWindow</span>))]</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">\r\nErrorWindow</span> : <span style=\"color:#2b91af\">ChildWindow</span>, <span style=\"color:#2b91af\">\r\nIErrorWindow</span></p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">&nbsp;</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">When I added the name to the export, I was able to read the module. If there are several layers of imports/exports in a given module on the server, is there a way to get better debugging information\r\n using MEF? The loaded module was found, but there was an exception thrown somewhere in the Load code because of the underlying name mismatch, but there was not mention in the error exception of the real problem.</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">&nbsp;</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">Lastly, after the ModuleManager.LoadModuleCompleted event fires, which it does now, how do I get an instance of the downloaded module to access either one of the two ChildWindows? I have searched on\r\n the net, but not found any help here.</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">&nbsp;</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">Thanks, Warren</p>\r\n",
    "PostedDate": "2012-11-30T12:12:34.687-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "949983",
    "ThreadId": "404930",
    "Html": "\r\n<p>The only way to get the instances of the childwindos is by importing them. What are you trying to achieve anyway?</p>\r\n<p>Regarding debugging info on xap/mef erros you need to check the error property on the module downloaded event args.</p>\r\n<div>On 1 Dec 2012 01:42, &quot;highdownts&quot; &lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt; wrote:<br type=\"attribution\">\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: highdownts</p>\r\n<div>\r\n<p>Hello,</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">Thanks much for your assistance. I have made some progress today.</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\"></p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">I struggled for quite a while with a module not found error where VS reported that the named module could not be found. However, after checking everything in the Silverlight and SharedFormsModule code\r\n and doing some web research, I found that I had a mismatch between the importing annotation on the property in the SharedFormsModule and the class exporting annotation as follows:</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\"></p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Import</span>(<span style=\"color:#a31515\">&quot;ErrorWindow&quot;</span>,\r\n<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">ChildWindow</span>))]</p>\r\n<p style=\"margin:0in\"><span style=\"font-family:Consolas; color:blue; font-size:9.5pt\">public</span><span style=\"font-family:Consolas; font-size:9.5pt\">\r\n</span><span style=\"font-family:Consolas; color:#2b91af; font-size:9.5pt\">ChildWindow</span><span style=\"font-family:Consolas; font-size:9.5pt\"> ErrorWindow {\r\n</span><span style=\"font-family:Consolas; color:blue; font-size:9.5pt\">get</span><span style=\"font-family:Consolas; font-size:9.5pt\">;\r\n</span><span style=\"font-family:Consolas; color:blue; font-size:9.5pt\">set</span><span style=\"font-family:Consolas; font-size:9.5pt\">; }</span><span style=\"font-family:Calibri; font-size:11pt\">\r\n</span></p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\"></p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">and</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\"></p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Export</span>(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">ChildWindow</span>))]</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">\r\nErrorWindow</span> : <span style=\"color:#2b91af\">ChildWindow</span>, <span style=\"color:#2b91af\">\r\nIErrorWindow</span></p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\"></p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">When I added the name to the export, I was able to read the module. If there are several layers of imports/exports in a given module on the server, is there a way to get better debugging information\r\n using MEF? The loaded module was found, but there was an exception thrown somewhere in the Load code because of the underlying name mismatch, but there was not mention in the error exception of the real problem.</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\"></p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">Lastly, after the ModuleManager.LoadModuleCompleted event fires, which it does now, how do I get an instance of the downloaded module to access either one of the two ChildWindows? I have searched on\r\n the net, but not found any help here.</p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\"></p>\r\n<p style=\"margin:0in; font-family:Calibri; font-size:11pt\">Thanks, Warren</p>\r\n</div>\r\n<div>\r\n<p>Read the <a href=\"http://compositewpf.codeplex.com/discussions/404930#post949677\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:CompositeWPF@discussions.codeplex.com?subject=[CompositeWPF:404930]\" target=\"_blank\">CompositeWPF@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:CompositeWPF@discussions.codeplex.com\" target=\"_blank\">\r\nCompositeWPF@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://compositewpf.codeplex.com/discussions/404930/unsubscribe/\" target=\"_blank\">\r\nunsubscribe</a> on CodePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at CodePlex.com</p>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n",
    "PostedDate": "2012-12-01T10:00:09.607-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "950072",
    "ThreadId": "404930",
    "Html": "\r\n<p>&nbsp;</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">Hello,</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">&nbsp;</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">I have created a small test solution to debug the Prism/Child Window code. I believe the MEFBootstrapper is working properly. The Shell code executes to the LoadModuleCompleted event shown in the\r\n code below. You mentioned that the only way to use the exported child windows is to import them. Are you saying that I need to add a hardcoded dependency to import either of the two child windows? Is there a way to use Prism to access the module and then its\r\n two properties without adding a dependency? I tried adding a library reference to the SharedForms project and importing (one at a time) the SharedFormsModule and then the two child window properties, but this does not seem to work. Can you please explain how\r\n to import the two child windows?</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">&nbsp;</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">For example, I get an exception using the following syntax for the module or its properties.</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">&nbsp;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Import</span>(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">SharedFormsModule</span>))]</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:#2b91af\">SharedFormsModule</span> SharedFormsModule;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">&nbsp;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Import</span>(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">IModule</span>))]</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:#2b91af\">IModule</span> errowWindow;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">&nbsp;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Import</span>(<span style=\"color:#a31515\">&quot;ErrorWindow&quot;</span>,\r\n<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">ChildWindow</span>))]</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:#2b91af\">ChildWindow</span> errowWindow;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">&nbsp;&nbsp;</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">This is the Shell code.</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">&nbsp;</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">ImportingConstructor</span>]</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span> Shell(<span style=\"color:#2b91af\">IModuleManager</span> ModuleManager,\r\n<span style=\"color:#2b91af\">IModuleCatalog</span> moduleCatalog)</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">{</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">InitializeComponent();</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">this</span>.ModuleManager = ModuleManager;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">this</span>.moduleCatalog = moduleCatalog;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">this</span>.Loaded += (s, ev) =&gt;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">{</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">var</span> module = moduleCatalog.Modules.Single(m =&gt; m.ModuleName.Equals(<span style=\"color:#a31515\">&quot;SharedFormsModule&quot;</span>));</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">if</span> (module !=\r\n<span style=\"color:blue\">null</span> && module.State == <span style=\"color:#2b91af\">\r\nModuleState</span>.NotStarted)</p>\r\n<p style=\"margin:0in 0in 0in 1.125in; font-family:Consolas; font-size:9.5pt\">ModuleManager.LoadModule(<span style=\"color:#a31515\">&quot;SharedFormsModule&quot;</span>);</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">ModuleManager.LoadModuleCompleted += (sn, evt) =&gt;</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">{</p>\r\n<p style=\"margin:0in 0in 0in 1.125in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:#2b91af\">MessageBox</span>.Show(<span style=\"color:#a31515\">&quot;Module Loaded...&quot;</span>);</p>\r\n<p style=\"margin:0in 0in 0in 1.125in; font-family:Consolas; font-size:9.5pt\">&nbsp;</p>\r\n<p style=\"margin:0in 0in 0in 1.125in; font-family:Consolas; color:green; font-size:9.5pt\">\r\n// ... How to access either of the two child windows???</p>\r\n<p style=\"margin:0in 0in 0in 1.125in; font-family:Consolas; font-size:9.5pt\">&nbsp;</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">};</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">};</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">}</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">&nbsp;</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">This is the child window project.</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">&nbsp;</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">namespace</span> SharedForms</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">{</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Export</span>(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">SharedFormsModule</span>))]</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">SharedFormsModule</span>:\r\n<span style=\"color:#2b91af\">IModule</span>, <span style=\"color:#2b91af\">ISharedFormsModule</span></p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">{</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:blue\">void</span> Initialize()</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">{</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">}</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Import</span>(<span style=\"color:#a31515\">&quot;SMMMessageWindow&quot;</span>,\r\n<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">ChildWindow</span>))]</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:#2b91af\">ChildWindow</span> SMMMessageWindow { <span style=\"color:blue\">\r\nget</span>; <span style=\"color:blue\">set</span>; }</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">&nbsp;</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Import</span>(<span style=\"color:#a31515\">&quot;ErrorWindow&quot;</span>,\r\n<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">ChildWindow</span>))]</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:#2b91af\">ChildWindow</span> ErrorWindow { <span style=\"color:blue\">\r\nget</span>; <span style=\"color:blue\">set</span>; }</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">}</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">}</p>\r\n",
    "PostedDate": "2012-12-01T18:08:48.023-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "950097",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I dont understand why yiu are importing the childwindows in the imodule implementation. And also why are you importing the sharedformmodule? Just to access the childwindow properties?</p>\r\n<p>Move those 2 childwindow properties in your shell. And on module download completed those properties should be available. You dont need to import the sharedformsmodule at all.</p>\r\n<div>On 2 Dec 2012 07:39, &quot;highdownts&quot; &lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt; wrote:<br type=\"attribution\">\r\n<blockquote style=\"margin:0 0 0 .8ex; border-left:1px #ccc solid; padding-left:1ex\">\r\n<div>\r\n<p>From: highdownts</p>\r\n<div>\r\n<p></p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">Hello,</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\"></p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">I have created a small test solution to debug the Prism/Child Window code. I believe the MEFBootstrapper is working properly. The Shell code executes to the LoadModuleCompleted event shown in the\r\n code below. You mentioned that the only way to use the exported child windows is to import them. Are you saying that I need to add a hardcoded dependency to import either of the two child windows? Is there a way to use Prism to access the module and then its\r\n two properties without adding a dependency? I tried adding a library reference to the SharedForms project and importing (one at a time) the SharedFormsModule and then the two child window properties, but this does not seem to work. Can you please explain how\r\n to import the two child windows?</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\"></p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">For example, I get an exception using the following syntax for the module or its properties.</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\"></p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Import</span>(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">SharedFormsModule</span>))]</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:#2b91af\">SharedFormsModule</span> SharedFormsModule;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"></p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Import</span>(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">IModule</span>))]</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:#2b91af\">IModule</span> errowWindow;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"></p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Import</span>(<span style=\"color:#a31515\">&quot;ErrorWindow&quot;</span>,\r\n<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">ChildWindow</span>))]</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:#2b91af\">ChildWindow</span> errowWindow;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"></p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">This is the Shell code.</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\"></p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">ImportingConstructor</span>]</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span> Shell(<span style=\"color:#2b91af\">IModuleManager</span> ModuleManager,\r\n<span style=\"color:#2b91af\">IModuleCatalog</span> moduleCatalog)</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">{</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">InitializeComponent();</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">this</span>.ModuleManager = ModuleManager;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">this</span>.moduleCatalog = moduleCatalog;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">this</span>.Loaded &#43;= (s, ev) =&gt;</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">{</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">var</span> module = moduleCatalog.Modules.Single(m =&gt; m.ModuleName.Equals(<span style=\"color:#a31515\">&quot;SharedFormsModule&quot;</span>));</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">if</span> (module !=\r\n<span style=\"color:blue\">null</span> && module.State == <span style=\"color:#2b91af\">\r\nModuleState</span>.NotStarted)</p>\r\n<p style=\"margin:0in 0in 0in 1.125in; font-family:Consolas; font-size:9.5pt\">ModuleManager.LoadModule(<span style=\"color:#a31515\">&quot;SharedFormsModule&quot;</span>);</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">ModuleManager.LoadModuleCompleted &#43;= (sn, evt) =&gt;</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">{</p>\r\n<p style=\"margin:0in 0in 0in 1.125in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:#2b91af\">MessageBox</span>.Show(<span style=\"color:#a31515\">&quot;Module Loaded...&quot;</span>);</p>\r\n<p style=\"margin:0in 0in 0in 1.125in; font-family:Consolas; font-size:9.5pt\"></p>\r\n<p style=\"margin:0in 0in 0in 1.125in; font-family:Consolas; color:green; font-size:9.5pt\">\r\n// ... How to access either of the two child windows???</p>\r\n<p style=\"margin:0in 0in 0in 1.125in; font-family:Consolas; font-size:9.5pt\"></p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">};</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">};</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">}</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\"></p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">This is the child window project.</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\"></p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">namespace</span> SharedForms</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">{</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Export</span>(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">SharedFormsModule</span>))]</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">SharedFormsModule</span>:\r\n<span style=\"color:#2b91af\">IModule</span>, <span style=\"color:#2b91af\">ISharedFormsModule</span></p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">{</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:blue\">void</span> Initialize()</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">{</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">}</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Import</span>(<span style=\"color:#a31515\">&quot;SMMMessageWindow&quot;</span>,\r\n<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">ChildWindow</span>))]</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:#2b91af\">ChildWindow</span> SMMMessageWindow { <span style=\"color:blue\">\r\nget</span>; <span style=\"color:blue\">set</span>; }</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\"></p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\">[<span style=\"color:#2b91af\">Import</span>(<span style=\"color:#a31515\">&quot;ErrorWindow&quot;</span>,\r\n<span style=\"color:blue\">typeof</span>(<span style=\"color:#2b91af\">ChildWindow</span>))]</p>\r\n<p style=\"margin:0in 0in 0in 0.75in; font-family:Consolas; font-size:9.5pt\"><span style=\"color:blue\">public</span>\r\n<span style=\"color:#2b91af\">ChildWindow</span> ErrorWindow { <span style=\"color:blue\">\r\nget</span>; <span style=\"color:blue\">set</span>; }</p>\r\n<p style=\"margin:0in 0in 0in 0.375in; font-family:Consolas; font-size:9.5pt\">}</p>\r\n<p style=\"margin:0in; font-family:Consolas; font-size:9.5pt\">}</p>\r\n</div>\r\n<div>\r\n<p>Read the <a href=\"http://compositewpf.codeplex.com/discussions/404930#post950072\" target=\"_blank\">\r\nfull discussion online</a>.</p>\r\n<p>To add a post to this discussion, reply to this email (<a href=\"mailto:CompositeWPF@discussions.codeplex.com?subject=[CompositeWPF:404930]\" target=\"_blank\">CompositeWPF@discussions.codeplex.com</a>)</p>\r\n<p>To start a new discussion for this project, email <a href=\"mailto:CompositeWPF@discussions.codeplex.com\" target=\"_blank\">\r\nCompositeWPF@discussions.codeplex.com</a></p>\r\n<p>You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"https://compositewpf.codeplex.com/discussions/404930/unsubscribe/\" target=\"_blank\">\r\nunsubscribe</a> on CodePlex.com.</p>\r\n<p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at CodePlex.com</p>\r\n</div>\r\n</div>\r\n</blockquote>\r\n</div>\r\n",
    "PostedDate": "2012-12-01T23:04:49.537-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "950162",
    "ThreadId": "404930",
    "Html": "\r\n<p style=\"margin:0pt 0pt 10pt; font-family:Verdana; font-size:12pt\">Hello gan_s,</p>\r\n<p style=\"margin:0pt 0pt 10pt; font-family:Verdana; font-size:12pt\">Let me summarize my main objectives. First, I want to loosely couple the Shell through Prism to a separate XAP file that contains a Child Window. This child window would in turn load additional\r\n Views/View Models for selected tab views based upon user choices using Prism modules. That is, modules which download other modules, as they are needed. Right now, this lumped functionality is adding substantially to the size of the XAP file. In addition,\r\n a reasonable number of users will not use this functionality on a regular basis, so it is being downloaded unnecessarily.</p>\r\n<p style=\"margin:0pt 0pt 10pt; font-family:Verdana; font-size:12pt\">Let me explain my misunderstanding.</p>\r\n<p style=\"margin:0pt 0pt 10pt; font-family:Verdana; font-size:12pt\">When you said that the child window had to be imported, I thought you meant using Prism/MEF to accomplish this through some dedicated Prism functionality, for example, getting a reference to\r\n the module object so that I can then access its members. Apparently, this is not the case.</p>\r\n<p style=\"margin:0pt 0pt 10pt; font-family:Verdana; font-size:12pt\">What I thought I could do is to encapsulate all of the functionality in a separate XAP file that would be downloaded as a module on demand. This would reduce the size of the initial XAP and\r\n allow smaller XAPs to be downloaded to give the user the exact functionality that they need. I did not want to include a project reference to the child window project in the main shell application. Are you saying that this is the only way to import the child\r\n window functionality?</p>\r\n<p style=\"margin:0pt 0pt 10pt; font-family:Verdana; font-size:12pt\">If I need a project reference to the child window project in the Shell application, then I do not see that Prism/MEF is doing anything to reduce the initial download size. Is it not possible\r\n to achieve my objectives with the child window using prism?</p>\r\n<p style=\"margin:0pt 0pt 10pt; font-family:Verdana; font-size:12pt\">Thanks for your patience and assistance.</p>\r\n<p style=\"margin:0in; font-family:Verdana; font-size:12pt\">Warren</p>\r\n",
    "PostedDate": "2012-12-02T06:25:44.167-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "950190",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hi Warren,</p>\r\n<p>The idea behind loosely coupled app is to avoid having references, which prism/mef combination solves more easily.</p>\r\n<p>For your case this what you do<br>\r\n- shell will download your sharedformsmodule which has 2 childwindows which are defined and exported in that module<br>\r\n- shell needs to open up the childwindow by calling show on them once they are available, i.e. When module is downloaded</p>\r\n<p>For shell to access the childwindow you need to<br>\r\n- have 2 properties each for your childwindows in shell itself.<br>\r\n- no need to have a property that references the module you downloaded.</p>\r\n<p>In module download completed you will check to see if your childwindows are imported. If yes call Show() on them. Its that simple. Unfortunately i'm travelling and not able to send you a working sample for your scenario. This is a very trivial problem. Let\r\n me kno if what i'm suggesting is making sense to you!</p>\r\n<p>Cheers!</p>\r\n",
    "PostedDate": "2012-12-02T09:00:21.26-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951201",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hello gan_s,</p>\r\n<p>I understand that Prism/MEF is designed to loosely couple objects so that you do not have to have a reference. What I do not understand is the syntax for importing the child windows after downloading. The child window classes are named. Those names are buried\r\n in the module project that contains the code. I understand the cocept in your previous post, but I do not understand how to grab/import childwindows without a handle of some sort. Can you provide a simple example or explain how to do this.</p>\r\n<p>Thanks, Warren</p>\r\n",
    "PostedDate": "2012-12-04T07:24:28.633-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951217",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hi Warren,</p>\r\n<p>I know its very confusing. Here is what I mean. The handle you are looking for is the\r\n<strong>contract name</strong> of your exports. And as you can see we are not forcing the shell to know the concrete type of your childwindow, by which I mean any other special interface local to the childwindow module. All you need to know is the export contract.</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[ImportingConstructor]\r\n<span style=\"color:blue\">public</span> Shell(IModuleManager ModuleManager, IModuleCatalog moduleCatalog)\r\n{\r\n  InitializeComponent(); \r\n  <span style=\"color:blue\">this</span>.ModuleManager = ModuleManager;\r\n  <span style=\"color:blue\">this</span>.moduleCatalog = moduleCatalog;\r\n  <span style=\"color:blue\">this</span>.Loaded += (s, ev) =&gt;\r\n {\r\n   <span style=\"color:blue\">var</span> module = moduleCatalog.Modules.Single(m =&gt;  m.ModuleName.Equals(<span style=\"color:#a31515\">&quot;SharedFormsModule&quot;</span>));\r\n   <span style=\"color:blue\">if</span> (module != <span style=\"color:blue\">null</span> && module.State == ModuleState.NotStarted)\r\n   ModuleManager.LoadModule(<span style=\"color:#a31515\">&quot;SharedFormsModule&quot;</span>);\r\n   ModuleManager.LoadModuleCompleted += (sn, evt) =&gt;\r\n   {\r\n      MessageBox.Show(<span style=\"color:#a31515\">&quot;Module Loaded...&quot;</span>);\r\n      <span style=\"color:green\">// At this point your childwinodw properties will be populated</span>\r\n      <span style=\"color:blue\">if</span> (ErrorWindow != <span style=\"color:blue\">null</span> && evt.Error != <span style=\"color:blue\">null</span>) ErrorWindow.Show();\r\n\r\n      <span style=\"color:blue\">if</span> (SMMMessageWindow != <span style=\"color:blue\">null</span>) SMMMessageWindow.Show();\r\n   };\r\n };\r\n}\r\n\r\n[Import(<span style=\"color:#a31515\">&quot;SMMMessageWindow&quot;</span>)]\r\n<span style=\"color:blue\">public</span> ChildWindow SMMMessageWindow { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n[Import(<span style=\"color:#a31515\">&quot;ErrorWindow&quot;</span>)]\r\n<span style=\"color:blue\">public</span> ChildWindow ErrorWindow { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Your module would look like this</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">namespace</span> SharedForms\r\n{\r\n   [Export(<span style=\"color:blue\">typeof</span>(SharedFormsModule))]\r\n   <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> SharedFormsModule: IModule, ISharedFormsModule\r\n   {\r\n      <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()\r\n      {\r\n      }\r\n   }\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Try this out and let me know.</p>\r\n<p>Cheers!</p>\r\n",
    "PostedDate": "2012-12-04T07:51:32.913-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951218",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hi Warren,</p>\r\n<p>I know its very confusing. Here is what I mean. The handle you are looking for is the\r\n<strong>contract name</strong> of your exports. And as you can see we are not forcing the shell to know the concrete type of your childwindow, by which I mean any other special interface local to the childwindow module. All you need to know is the export contract.</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[ImportingConstructor]\r\n<span style=\"color:blue\">public</span> Shell(IModuleManager ModuleManager, IModuleCatalog moduleCatalog)\r\n{\r\n  InitializeComponent(); \r\n  <span style=\"color:blue\">this</span>.ModuleManager = ModuleManager;\r\n  <span style=\"color:blue\">this</span>.moduleCatalog = moduleCatalog;\r\n  <span style=\"color:blue\">this</span>.Loaded += (s, ev) =&gt;\r\n {\r\n   <span style=\"color:blue\">var</span> module = moduleCatalog.Modules.Single(m =&gt;  m.ModuleName.Equals(<span style=\"color:#a31515\">&quot;SharedFormsModule&quot;</span>));\r\n   <span style=\"color:blue\">if</span> (module != <span style=\"color:blue\">null</span> && module.State == ModuleState.NotStarted)\r\n   ModuleManager.LoadModule(<span style=\"color:#a31515\">&quot;SharedFormsModule&quot;</span>);\r\n   ModuleManager.LoadModuleCompleted += (sn, evt) =&gt;\r\n   {\r\n      MessageBox.Show(<span style=\"color:#a31515\">&quot;Module Loaded...&quot;</span>);\r\n      <span style=\"color:green\">// At this point your childwinodw properties will be populated</span>\r\n      <span style=\"color:blue\">if</span> (ErrorWindow != <span style=\"color:blue\">null</span> && evt.Error != <span style=\"color:blue\">null</span>) ErrorWindow.Show();\r\n\r\n      <span style=\"color:blue\">if</span> (SMMMessageWindow != <span style=\"color:blue\">null</span>) SMMMessageWindow.Show();\r\n   };\r\n };\r\n}\r\n\r\n[Import(<span style=\"color:#a31515\">&quot;SMMMessageWindow&quot;</span>)]\r\n<span style=\"color:blue\">public</span> ChildWindow SMMMessageWindow { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n[Import(<span style=\"color:#a31515\">&quot;ErrorWindow&quot;</span>)]\r\n<span style=\"color:blue\">public</span> ChildWindow ErrorWindow { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Your module would look like this</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">namespace</span> SharedForms\r\n{\r\n   [Export(<span style=\"color:blue\">typeof</span>(SharedFormsModule))]\r\n   <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> SharedFormsModule: IModule, ISharedFormsModule\r\n   {\r\n      <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()\r\n      {\r\n      }\r\n   }\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Try this out and let me know.</p>\r\n<p>Cheers!</p>\r\n",
    "PostedDate": "2012-12-04T07:51:33.603-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951282",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hello gan_s,</p>\r\n<p>I did as you recommended, and the result was:</p>\r\n<p>ex = {System.ComponentModel.Composition.ImportCardinalityMismatchException: No valid exports were found that match the constraint '((exportDefinition.ContractName == &quot;MainApp.Shell&quot;) AndAlso (exportDefinition.Metadata.ContainsKey(&quot;ExportTypeIdentity&quot;) AndAlso\r\n &quot;M...</p>\r\n<p>I tried with only one child import and the result was the same.</p>\r\n<p>I do not understand why this approach should work. If the module is not loaded at the application start through the bootstrapper, how does the shell know what to import?</p>\r\n<p>Second, if the module is loaded, the class is essentially empty except for the initialization method. How does loading the module, which does not seem to have any knowledge of the two child classes, pass the exported child window classes when it is loaded\r\n in the Shell.</p>\r\n<p>There appears to be some 'Black Magic' going on that I do not understand. It may be very simple as you said, but I still do not get it.</p>\r\n<p>Thanks, Warren</p>\r\n",
    "PostedDate": "2012-12-04T09:52:37.323-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951346",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hi Warren,</p>\r\n<p>Based on my understanding in order to avoid having a reference to the child window's project in the main project, you will have to export your child windows instances using a common interface defined in a common project. This interface for example could\r\n define a <strong>Show </strong>method (and any other required method in order to interact with your\r\n<strong>ChildWindows </strong>as needed when importing them through this interface.</p>\r\n<p>Also, if you are importing this child windows for example in your shell's view model, you should have to use your\r\n<strong>[Import] </strong>attributes with<strong> AllowDefault=true</strong> and <strong>\r\nAllowRecomposition=true</strong> (e.g. like this<strong> [Import(&quot;myChildWindow1&quot;, AllowDefault = true, AllowRecomposition = true)]</strong>, as this will allow you to change the value of the imported property after the initial composition, which will be required\r\n if you are loading the modules containing the exported classes on demand.</p>\r\n<p>I created a small sample portraying this scenario, you can find it in <a href=\"https://skydrive.live.com/?cid=7890102B5B8BC928&id=7890102B5B8BC928!103\">\r\nmy Skydrive account</a> under the name &quot;<strong>OnDemandChildWindowSample</strong>&quot;.</p>\r\n<p>I hope you find this useful,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-12-04T12:22:16.413-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951371",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hello &#65279;&#65279;&#65279;&#65279;Agustin,</p>\r\n<p>Using an interface as the import vessel makes sense. That is what I had set up last week, but got side tracked with some of the other inputs above.</p>\r\n<p>Your example made sense too, but unfortuneately in did not work. I had to add the Prism/MEF reference libraries to your projects, but other than that eveything compiled and ran. After clicking on the Click to Show button, the program ran, but the &#65279;IChildWindow\r\n MyChildWindowProperty is NULL. I added a&nbsp;get/set variable so that I could view the Import value as it was being set, which confirmed that it is always null.</p>\r\n<p>I am not sure why it does not work, because the logic appeared to be sound.</p>\r\n<p>Any thoughts?</p>\r\n<p>Thanks, Warren</p>\r\n",
    "PostedDate": "2012-12-04T13:15:40.693-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951382",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hello again,</p>\r\n<p>I just thought I would let you know that I am running Windows 7/32 bit/Silverlight 5/Prism 4 libs (<span>11/11/2010</span>)&nbsp;with Visual Studio 2010 Ultimate in case there is something in my system that is causing the difference between your results and mine.</p>\r\n<p>Thanks for your help, Warren</p>\r\n",
    "PostedDate": "2012-12-04T13:47:45.117-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951533",
    "ThreadId": "404930",
    "Html": "\r\n<p>To make myself clear I never suggested adding a reference to the childwindow module (your SharedFormsModule). I suggested keeping it loose by exporting a typeof(ChildWindow) as ChildWindow is part of the sl framework itself. You can do it using interfaces,\r\n but that needs to be shared between your module and the shell, which you dont have to worry about in case of ChildWindow. I have done this in my app and it works absolutely fine.</p>\r\n<p>As above you will just need to add the <strong>AllowDefault=true</strong> and <strong>\r\nAllowRecomposition=true</strong> for it to get repopulated once your module gets downloaded. To check you could even implement the\r\n<strong>IPartImportsSatisfied </strong>in your shell to check if the <strong>OnImportsSatisfied\r\n</strong>gets called once your module is downloaded and check if your childwindow properties are populated.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Import(<span style=\"color:#a31515\">&quot;SMMMessageWindow&quot;</span>, AllowDefault=<span style=\"color:blue\">true</span>, AllowRecomposition=<span style=\"color:blue\">true</span>)]\n<span style=\"color:blue\">public</span> ChildWindow SMMMessageWindow { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\n\n[Import(<span style=\"color:#a31515\">&quot;ErrorWindow&quot;</span>, AllowDefault=<span style=\"color:blue\">true</span>, AllowRecomposition=<span style=\"color:blue\">true</span>)]\n<span style=\"color:blue\">public</span> ChildWindow ErrorWindow { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>I would still not go the interface way as that's an additional abstraction and it really isn't doing much in your case other than just calling\r\n<strong>Show()</strong> on your childwindow. Too much of abstraction is not needed in your case.&nbsp;</p>\r\n",
    "PostedDate": "2012-12-04T23:23:18.36-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951837",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hi Warren,</p>\r\n<p>I was able to run Agustin's sample with the same system setup as yours, except for one difference: I used the\r\n<strong>4.1</strong> version of <strong>Prism </strong>instead of version <strong>\r\n4</strong>. As the sample is created with <strong>Prism 4.1</strong>, this could be the cause behind why you needed to re-add the references to the\r\n<strong>Prism </strong>libraries.</p>\r\n<p>As far as I know, <strong>Prism 4</strong> targets <strong>Silverlight 4</strong> and\r\n<strong>Prism 4.1</strong> targets <strong>Silverlight 5</strong>. However, in the description of your system setup you said that you are using\r\n<strong>Silverlight 5</strong> with <strong>Prism 4</strong> and this could be causing unexpected behaviors in your application.</p>\r\n<p>Please, try again using the <strong>Prism 4.1</strong> libraries for <strong>Silverlight 5</strong> and let us know if this solves the problem. Alternative you could change the target version of the projects of the sample to\r\n<strong>Silverlight 4</strong> to use <strong>Prism 4</strong>.</p>\r\n<p>You can find <strong>Prism 4.1</strong>'s assemblies in the following link:</p>\r\n<ul>\r\n<li><a href=\"http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&id=28950\">Prism 4.1 - February 2012</a>\r\n</li></ul>\r\n<p>As a side note, if you wish to register <strong>Prism 4.1</strong>'s assemblies in visual studio, take into account that there is a known bug in the script used to register the assemblies. You can find more information about it an how to solve it in the\r\n following work item:</p>\r\n<ul>\r\n<li><a href=\"http://compositewpf.codeplex.com/workitem/9225\">Bug in RegisterPrismLibrary.proj (Prism v4.1)</a>\r\n</li></ul>\r\n<p>Regards,</p>\r\n<p>Damian Cherubini<br>\r\n<a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>\r\n",
    "PostedDate": "2012-12-05T11:16:54.033-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951847",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hello Damian,</p>\r\n<p>Thanks for your assistance. I was able to finally get Agustin's sample to work. It is likely that I grabbed the wrong version library files.</p>\r\n<p>Regards,</p>\r\n<p>Warren</p>\r\n",
    "PostedDate": "2012-12-05T11:39:32.86-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "951866",
    "ThreadId": "404930",
    "Html": "\r\n<blockquote style=\"padding-bottom:0px; font-style:italic; margin:0.25em 1em 0px; padding-left:0.25em; padding-right:0.25em; padding-top:0px; border:#ccc 0.1em solid\">\r\n<strong>gan_s wrote:</strong><br>\r\n<p>To make myself clear I never suggested adding a reference to the childwindow module (your SharedFormsModule). I suggested keeping it loose by exporting a typeof(ChildWindow) as ChildWindow is part of the sl framework itself. You can do it using interfaces,\r\n but that needs to be shared between your module and the shell, which you dont have to worry about in case of ChildWindow. I have done this in my app and it works absolutely fine.</p>\r\n<p>As above you will just need to add the <strong>AllowDefault=true</strong> and <strong>\r\nAllowRecomposition=true</strong> for it to get repopulated once your module gets downloaded. To check you could even implement the\r\n<strong>IPartImportsSatisfied </strong>in your shell to check if the <strong>OnImportsSatisfied\r\n</strong>gets called once your module is downloaded and check if your childwindow properties are populated.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre>[Import(<span style=\"color:#a31515\">&quot;SMMMessageWindow&quot;</span>, AllowDefault=<span style=\"color:blue\">true</span>, AllowRecomposition=<span style=\"color:blue\">true</span>)]\r\n<span style=\"color:blue\">public</span> ChildWindow SMMMessageWindow { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n[Import(<span style=\"color:#a31515\">&quot;ErrorWindow&quot;</span>, AllowDefault=<span style=\"color:blue\">true</span>, AllowRecomposition=<span style=\"color:blue\">true</span>)]\r\n<span style=\"color:blue\">public</span> ChildWindow ErrorWindow { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>I would still not go the interface way as that's an additional abstraction and it really isn't doing much in your case other than just calling\r\n<strong>Show()</strong> on your childwindow. Too much of abstraction is not needed in your case.&nbsp;</p>\r\n</blockquote>\r\n<p>&nbsp;</p>\r\n<p>Hello gan_s,</p>\r\n<p>Thanks for your help. I did not mean to imply that you said to use a reference to the child window. The confusion has been on my end. I see the merits in both approaches that have been suggested and can see applications of both in my current project. That\r\n is why I working both approaches to completion.</p>\r\n<p>One thing that had confused me was that you had recommended using the following in an earlier email.</p>\r\n<p>[Import(&quot;SMMMessageWindow&quot;)]<br>\r\npublic ChildWindow SMMMessageWindow { get; set; }</p>\r\n<p>As you pointed out in your last email, by setting the AllowDefault and AllowRecomposition true the exception that I was experiencing went away. This make a lot of sense now. The application does not know anything about the import until after the module is\r\n loaded. Once loaded, the recompositon can occur and the import resolved.</p>\r\n<p>I did the following to get your approach to work.</p>\r\n<p>1. Set AllowDefault = true, must be set true for OnDemand loading to allow a value of null or its default value when the property is first imported.<br>\r\n2. Set AllowRecomposition = true, must be set true to accommodate the change in the property after the module is loaded.<br>\r\n3. I had to set evt.Error == null, rather than if (ErrorWindow != null && evt.Error != null) as you mentioned in your email.</p>\r\n<p>I now have both approaches working thanks to you, Agustin, and Damian. Sorry it took me so long to absorb the basics.</p>\r\n<p>There may still be a problem with the approach based upon some of my other requirements, at least for some code modules.</p>\r\n<ol>\r\n<li>First, from my research, it appears that these techniques rely on a parameterless constructor. From what I have read, there is no provision for importing a class with multiple constructors using MEF or passing parameter to the imported class. Are these\r\n assumptions correct? </li><li>Second, I assume that these two approaches cannot handle a static class since it cannot derive from an interface and may not be derived from a public class (like ChildWindow). Is this assumption correct?\r\n</li><li>Third, I assume that an interface is required if you want to actually use any public properties or methods? Is this assumption correct?\r\n</li><li>Lastly, is there any supporting MS technologies that allow multiple constructors and parameters to be passed through Prism modules.\r\n</li></ol>\r\n<p>Thanks again for all the help...</p>\r\n<p>Warren</p>\r\n",
    "PostedDate": "2012-12-05T12:11:12.69-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "952402",
    "ThreadId": "404930",
    "Html": "\r\n<p>Hi Warren,</p>\r\n<p>I'm glad you could make the approaches work, regarding your concerns:</p>\r\n<ol>\r\n<li>Take into account that when using dependency injection containers like <strong>\r\nMEF </strong>you can also use the constructor injection approach. This way you can specify imports through constructor parameters by adding the\r\n<strong>[System.ComponentModel.Composition.ImportingConstructorAttribute] </strong>\r\nattribute to your constructor. As far as I know, in cases where your class is defined with multiple constructors\r\n<strong>MEF </strong>will use the one where you put this attribute.<br>\r\nFor more information about this you could check the <a href=\"http://mef.codeplex.com/wikipage?title=Declaring%20Imports&referringTitle=Guide \">\r\nDeclaring Imports</a> section of the <a href=\"http://mef.codeplex.com/wikipage?title=Guide\">\r\nMEF Programming Guide</a>. </li><li>Based on my understanding, you won't be able to export a <strong>Static </strong>\r\nclass to a container like <strong>MEF </strong>as this is designed to create and initialize instances of classes for you and keep a collection of these instances, which may not be possible for\r\n<strong>Static </strong>classes. On the other, by default <strong>MEF </strong>threats their\r\n<strong>Imports </strong>/ <strong>Exports </strong>as <strong>Singletons </strong>\r\ninstances, in which case, I believe the use of static classes could be replaced by the use of these\r\n<strong>Singleton </strong>instances. </li><li>Regarding the use of interfaces to export your classes, as seen before this might not always be necessary. But it will be required when you need loosely coupling between your components, as this will allow you to have an importer to be completely decoupled\r\n from the specific implementation of the exported type. </li><li>As far as I know, another dependency injection container that supports the constructor injection approach is\r\n<strong>Unity</strong>, which in cases where a target class contains multiple constructors,&nbsp; this container will use the one that has the\r\n<strong>InjectionConstructor </strong>attribute applied to. Also, if there is more than one constructor, and none carries the\r\n<strong>InjectionConstructor </strong>attribute, <strong>Unity </strong>will use the constructor with the most parameters. For more information on this subject, you could check the\r\n<a href=\"http://msdn.microsoft.com/en-us/library/ff660875(v=pandp.20).aspx\">Annotating Objects for Constructor Injection</a> section of the\r\n<strong>Unity </strong>documentation. </li></ol>\r\n<p>I hope you find this handy,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-12-06T10:22:18.833-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]