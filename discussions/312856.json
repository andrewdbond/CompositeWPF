[
  {
    "Id": "763548",
    "ThreadId": "312856",
    "Html": "\r\n<p>I'm trying to get started on understanding what is involved in migrating an existing desktop solution to the web.</p>\r\n<p>We've followed most of the Prism patterns and practices and it is a joy coding under such architecture and design.</p>\r\n<p>The desktop solution is:</p>\r\n<ul>\r\n<li>C#/WPF/.Net 4.0 </li><li>Prism/MEF 4.0 </li><li>MVVM and heavy use of Event Driven Architecture </li><li>Very clear separation of the views/UI </li><li>Repository/Unit of work pattern to the database&nbsp; </li><li>Currently built as a client/server system (no web services) </li></ul>\r\n<p>Next step is to get something running in a browser so the plan is add or migrate some portion of it to Silverlight. &nbsp;We figure that is the fastest track given we're in WPF now.</p>\r\n<p>However, there is the future to consider in having a fully implemented version for the browser that will hopefully be cross-platform including mobile/iOS devices. &nbsp;The idea at this stage is to target HTML5/JS.</p>\r\n<p>That raises the question about code re-usability.</p>\r\n<p>How much of what has been done in WPF/Prism can be adapted to work with a HTML5/JS front end?</p>\r\n<p>We're thinking a majority of the code/classes can be moved to be what I would call the application service side of things that lives on the server. &nbsp;The UI can be made out of HTML5/JS/Ajax etc. &nbsp;But what we're missing obviously is the glue that\r\n holds the view layer on (command/input binding etc).</p>\r\n<p>Is there an established and accepted approach to migrating to the web?</p>\r\n<p>What about future Silverlight/Windows 8 RT versions?</p>\r\n<p>I'm expecting to formulate a plan over the span of a few months.</p>\r\n<p>Thanks in advance.</p>\r\n<p>Lincoln</p>\r\n",
    "PostedDate": "2012-02-14T07:56:24.3-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "768243",
    "ThreadId": "312856",
    "Html": "<p>Hi,</p>\r\n<p>In my opinion, so far there is no established approach regarding what&rsquo;s the best choice to migrate to the web. This may vary depending on your personal preferences and the requirements of your scenario.</p>\r\n<p>If what you are looking is to promote code re-usability, I believe migrating to Silverlight might be the recommended approach.</p>\r\n<p>If this is your case, you could find the following section of the Prism documentation at MSDN interesting, where the main differences that have to be carefully considered when moving from one platform to the other are explained:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921109(v=pandp.40).aspx#sec24\">Contrasting Silverlight and WPF</a></li>\r\n</ul>\r\n<p>Additionally, if you are looking a guidance for building web applications that take advantage of the latest web standards like HTML5, I believe you may find <a href=\"http://silk.codeplex.com/\">Project Silk</a> useful.</p>\r\n<p>Regards,</p>\r\n<p>Agustin Adami<br /><a href=\"http://blogs.southworks.net/aadami\">http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-02-15T12:58:27.933-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "768408",
    "ThreadId": "312856",
    "Html": "<p>Thanks for the reply, Agustin.</p>\r\n<p>I'm familiar with Project Silk to the point of I've heard about it before.</p>\r\n<p>We're hoping to bridge the gap between not using Silverlight (browser plugins are not acceptable) and still re-using our investment into our WPF/Prism codebase.</p>\r\n<p>We are trying to avoid another ground up re-write with new architecture.</p>\r\n<p>Cheers</p>",
    "PostedDate": "2012-02-15T14:45:56.37-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]