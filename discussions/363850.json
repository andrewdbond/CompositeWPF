[
  {
    "Id": "861881",
    "ThreadId": "363850",
    "Html": "\r\n<p>I finished my version of UICompositionQuicStart succesfuly, but I have still one problem to solve.</p>\r\n<p>My version uses RIA Services to access Northwind database. My version of EmployeeProjectsViewModel is EmployeeOrdersViewModel which loads the Employee's Orders.</p>\r\n<p>The code that throws the exception is:</p>\r\n<pre>public class EmployeeOrdersViewModel : INotifyPropertyChanged {\r\n\r\n    NorthwindDomainContext _Context = new NorthwindDomainContext();\r\n\r\n    public EmployeeOrdersViewModel() {\r\n        if (!DesignerProperties.IsInDesignTool) {\r\n            EntityQuery queryOrders = _Context.GetOrdersQuery();\r\n            LoadOperation loadOpOrders = _Context.Load(queryOrders);\r\n            loadOpOrders.Completed &#43;= new EventHandler(loadOpOrders_Completed);\r\n        }\r\n    }\r\n\r\n    void loadOpOrders_Completed(object sender, EventArgs e) {\r\n        if (_Context.Orders.Count != 0) {\r\n            PagedOrders = new PagedCollectionView(_Context.Orders);\r\n        }\r\n    }\r\n\r\n    private Employee currentEmployee;\r\n    public Employee CurrentEmployee {\r\n        get {\r\n            return this.currentEmployee;\r\n        }\r\n        set {\r\n            this.currentEmployee = value;\r\n\r\n            if (this.CurrentEmployee != null)\r\n                // This instruction throws an exception, When Prism loads this code, it \r\n                // tries to set the currentEmployee before the LoapOpOrders_Completed is executed \r\n                // (as a response of a change of the Current Employee in EmployeeListView), which \r\n                // leads to an exception since PagedOrders is still null.\r\n                this.PagedOrders.Filter = o =&gt; ((Order)o).EmployeeID == this.CurrentEmployee.EmployeeID;\r\n            this.PagedOrders.Refresh();\r\n\r\n            this.NotifyPropertyChanged(&quot;CurrentEmployee&quot;);\r\n            this.NotifyPropertyChanged(&quot;PagedOrders&quot;);\r\n        }\r\n    }</pre>\r\n<p>&nbsp;I don't know how to make it to wait until LoadOpOrders_Completed is executed.</p>\r\n<p>The problem didn't occur in the original since it didn't have to wait for load operations.</p>\r\n",
    "PostedDate": "2012-07-12T11:34:50.363-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "865107",
    "ThreadId": "363850",
    "Html": "<p>Hi Rafael,</p>\r\n<p>As a possible approach, I believe you could use a flag to know if the <strong>PagedOrders </strong>are loaded or not. Then, you could have a <strong>isLoadCompleted </strong>flag which could be set to <em><strong>false </strong></em>before starting the loading of the orders and set to <em><strong>true </strong></em>in the <strong>loadOpOrders_Completed</strong> callback. Also, you can check this flag before performing any operation on the <strong>PagedOrders </strong>property.</p>\r\n<p>As an example, you can check the following code snippet (based on the one you posted above):</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> EmployeeOrdersViewModel : INotifyPropertyChanged {\r\n\r\n    <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">bool</span> isLoadCompleted = <span style=\"color: blue;\">false</span>;\r\n\r\n    NorthwindDomainContext _Context = <span style=\"color: blue;\">new</span> NorthwindDomainContext();\r\n\r\n    <span style=\"color: blue;\">public</span> EmployeeOrdersViewModel() {\r\n        <span style=\"color: blue;\">if</span> (!DesignerProperties.IsInDesignTool) {\r\n            <span style=\"color: blue;\">this</span>.isLoadCompleted = <span style=\"color: blue;\">false</span>;\r\n            \r\n            EntityQuery queryOrders = _Context.GetOrdersQuery();\r\n            LoadOperation loadOpOrders = _Context.Load(queryOrders);\r\n            loadOpOrders.Completed += <span style=\"color: blue;\">new</span> EventHandler(loadOpOrders_Completed);\r\n        }\r\n    }\r\n\r\n    <span style=\"color: blue;\">void</span> loadOpOrders_Completed(<span style=\"color: blue;\">object</span> sender, EventArgs e) {\r\n        <span style=\"color: blue;\">if</span> (_Context.Orders.Count != 0) {\r\n            PagedOrders = <span style=\"color: blue;\">new</span> PagedCollectionView(_Context.Orders);\r\n        }\r\n\r\n        <span style=\"color: blue;\">this</span>.isLoadCompleted = <span style=\"color: blue;\">true</span>;\r\n        <span style=\"color: blue;\">this</span>.FilterPagedOrders(<span style=\"color: blue;\">this</span>.CurrentEmployee);\r\n    }\r\n\r\n    <span style=\"color: blue;\">private</span> Employee currentEmployee;\r\n    <span style=\"color: blue;\">public</span> Employee CurrentEmployee {\r\n        <span style=\"color: blue;\">get</span> {\r\n            <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">this</span>.currentEmployee;\r\n        }\r\n        <span style=\"color: blue;\">set</span> {\r\n            <span style=\"color: blue;\">this</span>.currentEmployee = value;\r\n\r\n            <span style=\"color: blue;\">this</span>.FilterPagedOrders(value);\r\n\r\n            <span style=\"color: blue;\">this</span>.NotifyPropertyChanged(<span style=\"color: #a31515;\">\"CurrentEmployee\"</span>);\r\n        }\r\n    }\r\n\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> FilterPagedOrders(Employee employee)\r\n    {\r\n        <span style=\"color: blue;\">if</span>(isLoadCompleted == <span style=\"color: blue;\">true</span>)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (employee != <span style=\"color: blue;\">null</span>)\r\n                <span style=\"color: blue;\">this</span>.PagedOrders.Filter = o =&gt; ((Order)o).EmployeeID == employee.EmployeeID;\r\n\r\n            <span style=\"color: blue;\">this</span>.PagedOrders.Refresh();\r\n\r\n            <span style=\"color: blue;\">this</span>.NotifyPropertyChanged(<span style=\"color: #a31515;\">\"PagedOrders\"</span>);\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>Note that in the aforementioned code snippet, I have moved the filtering of the <strong>PagedOrders </strong>to a separate method in order to reuse code. However, which implementation you decide to use will depend mostly of your personal preferences and the requirements of your scenario.</p>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-07-13T11:06:17.643-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "865126",
    "ThreadId": "363850",
    "Html": "<p>Thank you Damian.</p>",
    "PostedDate": "2012-07-13T11:18:17.077-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]