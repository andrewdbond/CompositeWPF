[
  {
    "Id": "225348",
    "ThreadId": "66334",
    "Html": "<p>Hi, Admin,</p>\r\n<p>These days I transfer SL project&nbsp;into Prism, now I have a question about MVP patterns.</p>\r\n<p>Each time&nbsp;I click the button, the view will add 2 textblock. So there are 2 ways to do that.</p>\r\n<p>1.Directly write code behind, I still use Command, but without MVP patterns:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">StackPanel</span> <span style=\"color:Red\">Orientation</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Horizontal</span><span style=\"color:Black\">&quot;</span>   <span style=\"color:Red\">HorizontalAlignment</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Left</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">StationPanel</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBox</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Station1</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">YAP</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Width</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">45</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Margin</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">40,4,4,4</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">TextBox</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Station2</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Text</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">ROR</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Width</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">45</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Margin</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">4,4,4,4</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n\r\n            <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Button</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">btnAddStation</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Content</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Add...</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">cmd:Click.Command</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding AddStationCommand}</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Width</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">40</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Height</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">24</span><span style=\"color:Black\">&quot;</span>  <span style=\"color:Red\">Margin</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">4,0,4,0</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Blue\">/&gt;</span>\r\n        <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">StackPanel</span><span style=\"color:Blue\">&gt;</span>\r\n&nbsp;</pre>\r\n</div>\r\n<pre>\tpublic DelegateCommand&lt;Object&gt; AddStationCommand = new DelegateCommand&lt;Object&gt;(OnAddStationCommandExecute);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre>        <span style=\"color:Blue\">void</span> OnAddStationCommandExecute(Object obj)\r\n        {\r\n            StackPanel sp = <span style=\"color:Blue\">new</span> StackPanel { HorizontalAlignment = HorizontalAlignment.Left, Orientation = Orientation.Horizontal };\r\n            sp.Children.Add(<span style=\"color:Blue\">new</span> TextBox { Width = 45, Margin = <span style=\"color:Blue\">new</span> Thickness(40, 4, 4, 4) });\r\n            sp.Children.Add(<span style=\"color:Blue\">new</span> TextBox { Width = 45, Margin = <span style=\"color:Blue\">new</span> Thickness(4, 4, 4, 4) });\r\n\r\n            StationPanel.Children.Add(sp);\r\n        }\r\n</pre>\r\n<pre>2.Binding StackPanel to the Model, implement INotifyPropertyChanged and use ObservableCollection, and define a ControlTemplate.The code is too complex to list here.</pre>\r\n<pre>Which method is preferred? </pre>\r\n<pre>I think 1st is beetter. As you know, Winform, WPF and ASP.NET is a Mediator pattern(GOF23) before we introduce Prism, so form manage the relation between all the controls regisit in it. It is easy to understand, especially only change interface rather than modify any data behind.</pre>\r\n<pre>Why do we need to write MVP for MVP? </pre>\r\n</div>\r\n</pre>",
    "PostedDate": "2009-08-19T03:12:52.597-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "225456",
    "ThreadId": "66334",
    "Html": "<p>I think there are several reasons for separating the code from the view in some for MVVM / MVP:</p>\r\n<ul>\r\n<li>It is impossible for you to use tools to style your output in any way with the code behind that way.</li>\r\n<li>It is difficult to perform good unit tests on your code without the patterns but this is only a concern if you are writing unit tests.</li>\r\n<li>Patterns make it easier for developers to understand how to implement something and less likely for them to deviate the code (maintenance). There are many ways to achieve the same thing in software development and unless you specify how people are to implement things, the code maintenance down the road becomes problematic or even sooner on larger projects and teams.</li>\r\n</ul>\r\n<p>With a little effort, you can move much of your common implementations into the infrastructure so #2 becomes less code and more business solution. My base ViewModel implements the INotifyPropertyChanged interface and I have created snippets to create many of my common structures so it becomes quick to get what I need implemented.</p>\r\n<p>In the end, it will really depend on your teams experience level and what they can tolerate from development and learning. If the team is relatively junior, then keeping the code at a level they know and understand is probably the best approach.</p>",
    "PostedDate": "2009-08-19T08:06:11.763-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "225511",
    "ThreadId": "66334",
    "Html": "<p>Hi</p>\r\n<p>As fredhirschfeld said, the recommended approach in the scenario can vary based on your application requirements. My personal recommendation would be the following:</p>\r\n<ol>\r\n<li>If, as it seems the case, you add the Textblocks simply for UI update purposes (no other business logic required), I would place the code in the View&rsquo;s code behind. This is because it is an UI operation.</li>\r\n<li>If you add the Textblocks as some part of the business logic requirements, then I would place the code in the ViewModel/Presenter, create a command in the ViewModel to execute when the button is clicked and perform the necessary logic there.</li>\r\n</ol>\r\n<p>Please let me know if this helps.</p>\r\n<p>Damian Schenkelman<br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2009-08-19T09:59:22.807-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "225702",
    "ThreadId": "66334",
    "Html": "<p>Hi, my friend,&nbsp;<a id=\"ctl00_ctl00_MasterContent_Content_PostRepeater_ctl02_UserNameLink\" href=\"http://www.codeplex.com/site/users/view/fredhirschfeld\">fredhirschfeld</a>&nbsp;and <a id=\"ctl00_ctl00_MasterContent_Content_PostRepeater_ctl04_UserNameLink\" href=\"http://www.codeplex.com/site/users/view/dschenkelman\">dschenkelman</a>,</p>\r\n<p>Thanks for your valuable feedback.</p>\r\n<p>As <a id=\"ctl00_ctl00_MasterContent_Content_PostRepeater_ctl04_UserNameLink\" href=\"http://www.codeplex.com/site/users/view/dschenkelman\">dschenkelman</a>&nbsp;said,</p>\r\n<p>&quot;If you add the Textblocks as some part of the business logic requirements, then I would place the code in the ViewModel/Presenter, create a command in the ViewModel to execute when the button is clicked and perform the necessary logic there.&quot;</p>\r\n<p>I agree, but if the button click event involve some business&nbsp;logic and some UI update, how about the implementation?</p>\r\n<p>I think MVP is easy to do it, because Presenter have a reference to the IView, Presenter can invoke IView's method to do UI update, and do business logic in service layer.</p>\r\n<p>But in VM, because the standard implementation is View have a reference to the ViewModel, but ViewModel doesnot have a reference to the View. So it is hard to do UI update in ViewModel.</p>\r\n<p>Right?</p>",
    "PostedDate": "2009-08-19T21:07:51.477-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "225900",
    "ThreadId": "66334",
    "Html": "<p>What type of update were you thinking of that could not be handled by the MVVM pattern? I am sure there are some that will be significantly difficult to implement (and may not be worth it)&nbsp;but if you have a specific example, we may be able to suggest a solution. I had one challenge a while back where I needed to trigger a UI transition / storyboard to happen after an event that the user did. So what I ended up with is a State property on the VM and created a new TransitionManager control that I bound to my state which the name was the VisualState name to transition to. This would them cause the transition to happen on the UI without the need for access directly to the view.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-20T08:08:18.447-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]