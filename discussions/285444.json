[
  {
    "Id": "722361",
    "ThreadId": "285444",
    "Html": "\r\n<p>Hi all</p>\r\n<p>I have a silverlight 5 app using prism 4 and am having trouble with delegatecommand. &nbsp;I have used this feature before in other apps without any trouble but for some reason cannot get it to work in current app.</p>\r\n<p>&nbsp;This is my login interface</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre style=\"color:black\"><span style=\"color:blue\">public</span> <span style=\"color:blue\">interface</span> ILoginViewModel\r\n    {\r\n        DelegateCommand&lt;<span style=\"color:blue\">object</span>&gt; LoginCommand { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        DelegateCommand&lt;<span style=\"color:blue\">object</span>&gt; CancelLoginCommand { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">string</span> Username { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">string</span> UserPassword { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    }\r\n</pre>\r\n<pre style=\"color:black\"><br></pre>\r\n<pre style=\"color:black\">This is my viewmodel</pre>\r\n<pre style=\"color:black\"><div style=\"color:black; background-color:white\"><pre>[Export(<span style=\"color:blue\">typeof</span>(ILoginViewModel))]\r\n    [PartCreationPolicy(CreationPolicy.NonShared)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> LoginViewModel : BaseINPC, ILoginViewModel\r\n    {\r\n\r\n        <span style=\"color:blue\">#region</span> Private Properties\r\n        <span style=\"color:blue\">private</span> IEventAggregator _eventAggregator;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> _username;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> _userPassword;\r\n        <span style=\"color:blue\">private</span> IShellDAL _service;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> _token;\r\n        <span style=\"color:blue\">#endregion</span>\r\n        \r\n        [ImportingConstructor]\r\n        <span style=\"color:blue\">public</span> LoginViewModel(IEventAggregator eventAggregator)\r\n        {\r\n            <span style=\"color:blue\">this</span>._eventAggregator = eventAggregator;\r\n            _service = <span style=\"color:blue\">new</span> ShellDAL();</pre>\r\n<pre>            LoginCommand = <span style=\"color:blue\">new</span> DelegateCommand&lt;<span style=\"color:blue\">object</span>&gt;(LoginUser, CanLoginUser);\r\n            <span style=\"color:green\">//CancelLoginCommand = new DelegateCommand&lt;object&gt;(CancelLogin, CanCancelLogin);</span>\r\n        }\r\n\r\n\r\n        <span style=\"color:blue\">#region</span> Public properties\r\n        <span style=\"color:blue\">public</span> DelegateCommand&lt;<span style=\"color:blue\">object</span>&gt; LoginCommand { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        <span style=\"color:blue\">public</span> DelegateCommand&lt;<span style=\"color:blue\">object</span>&gt; CancelLoginCommand { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Username\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _username; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                _username = value;\r\n                InvokePropertyChanged(<span style=\"color:#a31515\">&quot;Username&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> UserPassword\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _userPassword; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                _userPassword = value;\r\n                InvokePropertyChanged(<span style=\"color:#a31515\">&quot;UserPassword&quot;</span>);\r\n            }\r\n\r\n        }\r\n\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Commands\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> CanLoginUser(<span style=\"color:blue\">object</span> obj)\r\n        {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">true</span>; <span style=\"color:green\">//string.IsNullOrEmpty(Username) &amp;&amp; string.IsNullOrEmpty(UserPassword);</span>\r\n        }\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> LoginUser(<span style=\"color:blue\">object</span> obj)\r\n        {\r\n            <span style=\"color:blue\">if</span> (_service == <span style=\"color:blue\">null</span>)\r\n            {\r\n                _service = <span style=\"color:blue\">new</span> ShellDAL();\r\n            }\r\n\r\n\r\n            MessageBox.Show(<span style=\"color:#a31515\">&quot;Got this far!&quot;</span>);\r\n \r\n            _service.Login(_username, _userPassword).Subscribe\r\n                (\r\n                    onNext: x =&gt;\r\n                    {\r\n                        _token = x;\r\n                    },\r\n                    onCompleted: () =&gt;\r\n                    {\r\n                        <span style=\"color:blue\">if</span> (!<span style=\"color:blue\">string</span>.IsNullOrEmpty(_token))\r\n                        {\r\n                            <span style=\"color:blue\">var</span> publishLogInEvent = _eventAggregator.GetEvent&lt;LoggedInEvent&gt;();\r\n                            publishLogInEvent.Publish(_token);\r\n                        }\r\n                    }\r\n                );\r\n        }\r\n        <span style=\"color:blue\">#endregion</span>\r\n    }\r\n</pre>\r\n</div>\r\nI'm setting loginCommand in constructor and put a messagebox(had to use messagebox as breakpoints are not been hit but that's another issue) in the LoginUser method that will/should be invoked when button is clicked.</pre>\r\n<pre style=\"color:black\"><br></pre>\r\n<pre style=\"color:black\">Here's my LoginView.xaml.cs</pre>\r\n<pre style=\"color:black\"><div style=\"color:black; background-color:white\"><pre>[Export(<span style=\"color:#a31515\">&quot;LoginView&quot;</span>)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> LoginView : UserControl\r\n    {\r\n        [Import]\r\n        <span style=\"color:blue\">public</span> ILoginViewModel vm;\r\n\r\n        <span style=\"color:blue\">public</span> LoginView()\r\n        {\r\n            InitializeComponent();\r\n            DataContext = vm;\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<br></pre>\r\n<pre style=\"color:black\">Here's part of the LoginView with the delegate command attached to the button. Not sure what's going on here and have been looking at this to long now so hopefully someone can spot some silly mistake been made.</pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre style=\"color:black\"><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Button</span>  <span style=\"color:red\">Width</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;80&quot;</span> <span style=\"color:red\">Content</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;Login&quot;</span> <span style=\"color:red\">HorizontalAlignment</span><span style=\"color:blue\">=</span><span style=\"color:blue\">&quot;Left&quot; cal:Click.Command=&quot;{Binding LoginCommand}&quot;</span><span style=\"color:blue\">/&gt;</span></pre>\r\n<pre><span style=\"color:#0000ff\">Thanks</span></pre>\r\n<pre><span style=\"color:#0000ff\">Paul</span></pre>\r\n<pre><span style=\"color:#0000ff\"><br></span></pre>\r\n<pre>\r\n</pre>\r\n</div>\r\n<br></pre>\r\n</div>\r\n",
    "PostedDate": "2012-01-09T03:42:28.797-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "722578",
    "ThreadId": "285444",
    "Html": "<p>Hi,</p>\n<p>Based on my understanding, your problem might be related to the fact that the properties retrieved with the <strong>[Import]</strong> attribute are not populated until after the constructor is completed. Hence your <strong>DataContext </strong>is set with a <strong>null </strong>value.</p>\n<p>To avoid this you could try using the <strong>[ImportingConstructor]</strong> attribute, for example like in the following code snippet:</p>\n<div style=\"color: black; background-color: white;\">\n<pre>[Export(<span style=\"color: #a31515;\">\"LoginView\"</span>)]\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">partial</span> <span style=\"color: blue;\">class</span> LoginView : UserControl\n    {\n        [ImportingConstructor]\n        <span style=\"color: blue;\">public</span> LoginView(ILoginViewModel vm)\n        {\n            InitializeComponent();\n            DataContext = vm;\n        }\n    }\n\n</pre>\n</div>\n<p>I hope you find this helpful,</p>\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a>ï»¿</p>\n<p>&nbsp;</p>",
    "PostedDate": "2012-01-09T08:34:38.56-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "724159",
    "ThreadId": "285444",
    "Html": "<p>aadami is right. Are you getting binding errors in your output window? Also why use cal:Click.Command? You can directly bind to the Command property of Button.</p>",
    "PostedDate": "2012-01-12T02:58:51.153-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "724172",
    "ThreadId": "285444",
    "Html": "<p>Thanks all</p>\n<p>That worked perfect.</p>\n<p>@gan_s, I'm using prism delegate commands.</p>\n<p>Ignore above statement</p>\n<p>@gan_s</p>\n<p>Your correct I can just bind to the Command property of the button. &nbsp;I have been blindly adding the namespace</p>\n<p>xmlns:cal=\"clr-namespace:Microsoft.Practices.Prism.Commands;assembly=Microsoft.Practices.Prism\"</p>\n<p>and calling commands using&nbsp;<span>cal:Click.Command.</span></p>\n<p><span>Not sure how I came to be using this, probably seen it in an old demo?</span></p>\n<p><span>Anyway thanks to all</span></p>\n<p>Paul</p>",
    "PostedDate": "2012-01-12T03:42:07.247-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]