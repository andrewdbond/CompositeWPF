[
  {
    "Id": "496300",
    "ThreadId": "227935",
    "Html": "<p>i have two regions &quot;RegionA&quot; and &quot;RegionB&quot;,</p>\r\n<p>and a View contains one ListBox:&nbsp;&nbsp; ISectionListView ,</p>\r\n<p>&lt;ListBox Style=&quot;{StaticResource ListBoxStyle}&quot; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ItemsSource=&quot;{Binding Sections}&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ItemTemplate=&quot;{StaticResource SectionTemplate}&quot;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SelectedItem=&quot;{Binding SelectedSection, Mode=TwoWay}&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&lt;/ListBox&gt;</p>\r\n<p>and in the ISectionListViewModel, i publish the Listbox's Item Selected Event:</p>\r\n<p>public class SectionListViewModel : ViewModelBase&lt;ISectionListView&gt;, ISectionListViewModel</p>\r\n<p>｛</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public v_wq_section SelectedSection<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return this._selectedSection; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this._selectedSection = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this._eventAggregator.GetEvent&lt;Events.SectionSelectedEvent&gt;()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Publish(new Events.SectionSelectedEvent(value));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>｝</p>\r\n<p>and now I register the&nbsp; View in both &quot;RegionA&quot; and &quot;RegionB&quot;:</p>\r\n<p>this._regionManager.RegisterViewWithRegion(&quot;RegionA&quot;, () =&gt; this._container.Resolve&lt;ISectionListViewModel&gt;().View);</p>\r\n<p>this._regionManager.RegisterViewWithRegion(&quot;RegionB&quot;, () =&gt; this._container.Resolve&lt;ISectionListViewModel&gt;().View);</p>\r\n<p>&nbsp;</p>\r\n<p>in another module i&nbsp; Subscribe the Events.SectionSelectedEvent:</p>\r\n<p>this._eventAggregator.GetEvent&lt;Wq_Section.Events.SectionSelectedEvent&gt;()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Subscribe(OnSectionSelected);</p>\r\n<p>now the problem comes,i just want to Subscribe Events.SectionSelectedEvent&nbsp; from the ListBox in &quot;RegionA&quot;, but it also Subscribe Events.SectionSelectedEvent&nbsp; from the ListBox in &quot;RegionB&quot;.</p>\r\n<p>it's the problem.</p>\r\n<p>i notice that CompositePresentationEvent.Subscribe() method has one&nbsp; parameter &quot;filterReference&quot;, can it solve this problem ? and how?</p>\r\n<p>thanks!!!</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-09-20T20:32:26.497-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "496522",
    "ThreadId": "227935",
    "Html": "<p>Hi,</p>\r\n<p>In general, a ViewModel does not know in which region its view is displayed.  Although passing the region name might be an approach that works, this is not  recommended because it couples the VM and the Region&nbsp;that contains&nbsp;its view.&nbsp;If  that wasn&rsquo;t the case using a subscription filter would probably be a good way to  go.</p>\r\n<p>That said, another option could be to indicate an event type when you create  your viewmodel (EventTypeA or EventTypeB). This way you could publish two  different events.</p>\r\n<p>On the other hand, as you mentioned the solution for your scenario is to use a subscription  filter. For more information, you could take a look at the following  documentation section on MSDN:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921122(PandP.20).aspx\">Event  Aggregator</a>, see the <em>Subscription Filtering </em>section.</li>\r\n</ul>\r\n<p>As for how to implement this, you need to use View Injection to indicate in  which region you are adding the view, so the view could indicate to its  viewmodel the Region:</p>\r\n<p>In the module initialize: &nbsp;<strong>regionA.Add(new ViewA(&ldquo;RegionA&rdquo;), &quot;View 1&quot;);</strong></p>\r\n<p>In the view: <strong>this.DataContext = new MyViewModel(&ldquo;RegionA&rdquo;);</strong></p>\r\n<p>If you need more information about how to use View Injection, you could check  it <a href=\"http://msdn.microsoft.com/en-us/library/ff921076(PandP.20).aspx\">here</a>.</p>\r\n<p>Therefore, you would publish your event indicating the region (pseudo-code):</p>\r\n<p><strong>EventAggregator.GetEvent&lt;YourEvent&gt;().Publish(&ldquo;RegionA&rdquo;);</strong></p>\r\n<p>Then you could filter a subscription by supplying a delegate as is shown  below (pseudo-code):</p>\r\n<p><strong>yourEvent.Subscribe(yourEventHandler, ThreadOption.UIThread, false, view =&gt; view == &ldquo;RegionA&rdquo;);</strong></p>\r\n<p>I hope this helps,</p>\r\n<p>Fernando Antivero <br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>",
    "PostedDate": "2010-09-21T07:47:16.76-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]