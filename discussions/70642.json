[
  {
    "Id": "240649",
    "ThreadId": "70642",
    "Html": "<p>Hi,</p>\r\n<p>I've got a Prism application that I'm starting to get ready to release to users.&nbsp; One of the pieces of functionality I'd like is a last-chance exception handler to log any exceptions, along with their stack traces, that my team has managed to miss during development.&nbsp; Normally I'd go and add an event handler for <span style=\"font-size:x-small\">DispatcherUnhandledException in my App.xaml but this doesn't seem to be working.&nbsp; My (admittedly trivial) test is simply to throw a new exception in the Shell project once it has finished loading.&nbsp; This always results in the normal Debugger interaction rather that hitting my unhandled exception handler.&nbsp; To double-check I've tried the same&nbsp;test running my project without the debugger attached.</span></p>\r\n<p><span style=\"font-size:x-small\">I'm also noticing that I'm actually getting the Prism-supplied &quot;ResolutionFailedException&quot; rather than my generic Exception object.&nbsp; I know Prism must have its own unhandled exception handler to be able to build up the additional exception information, so I'm trying to figure out how to plug into that.</span></p>\r\n<p><span style=\"font-size:x-small\">Any help would be greatly appreciated.</span></p>\r\n<p><span style=\"font-size:x-small\">Regards,</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size:x-small\">/jamief</span></p>",
    "PostedDate": "2009-09-30T14:37:09.16-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "243039",
    "ThreadId": "70642",
    "Html": "<p>Hi,</p>\r\n<p>Similar to jamief I'm in need of the correct way to implement a global exception handler.&nbsp; Prior to converting the app to Composite WPF the global exception hander (using the Microsoft.Practices.EnterpriseLibrary.ExceptionHandling and Logging blocks )worked perfectly, with unhandled exceptions being caught in app.xaml.cs and the ExceptionPolicy.HandleException tossing the exception to the P&amp;P assembly that, based on the config, both logged the exception to a file and displayed the exception to the user and kept the app alive.&nbsp; Since converting the app to CompositeWPF the exception still gets logged and the error dialog gets momentarily displayed but then it whites out and the app crashes hard.&nbsp; Is app.xaml.cs no longer the correct place to catch unhandled exceptions?&nbsp; I initially thought it was some type of threading issue but added code to insure that the exception got handled on the dispatcher thread.</p>\r\n<p>Below is the code that catches the exceptions and passes them on to the P&amp;P Exception handling blocks.</p>\r\n<p>Please provide some guidance.</p>\r\n<p>Thanks,</p>\r\n<p>Glenn</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>       <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> ProcessUnhandledException(Exception ex)\r\n        {\r\n            <span style=\"color:Green\">// An unhandled exception occured somewhere in our application. Let</span>\r\n            <span style=\"color:Green\">//    // the 'Global Policy' handler have a try at handling it.</span>\r\n            <span style=\"color:Blue\">try</span>\r\n            {\r\n                <span style=\"color:Blue\">bool</span> rethrow = ExceptionPolicy.HandleException(ex, <span style=\"color:#A31515\">&quot;Global Policy&quot;</span>);\r\n                <span style=\"color:Blue\">if</span> (rethrow)\r\n                {\r\n                    <span style=\"color:Green\">// Something has gone very wrong - exit the application.</span>\r\n                    Application.Current.Shutdown();\r\n                }\r\n            }\r\n            <span style=\"color:Blue\">catch</span> (Exception ex2)\r\n            {\r\n                <span style=\"color:Green\">// Something has gone wrong during HandleException (e.g. incorrect configuration of the block).</span>\r\n                <span style=\"color:Green\">// Exit the application</span>\r\n                <span style=\"color:Blue\">string</span> errorMsg = <span style=\"color:#A31515\">&quot;An unexpected exception occured while calling HandleException with policy 'Global Policy': &quot;</span> + Environment.NewLine + Environment.NewLine + ex2.Message;\r\n                errorMsg += <span style=\"color:#A31515\">&quot;Please check the event log for details about the exception.&quot;</span> + Environment.NewLine + Environment.NewLine;\r\n\r\n                QSMessageBox.Show(errorMsg, <span style=\"color:#A31515\">&quot;Application Error&quot;</span>, MessageBoxButton.OK, MessageBoxImage.Stop);\r\n\r\n                Application.Current.Shutdown();\r\n            }\r\n            <span style=\"color:Green\">//Cursors = Cursors.Default;</span>\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> Application_UnhandledException(<span style=\"color:Blue\">object</span> sender, DispatcherUnhandledExceptionEventArgs e)\r\n        {\r\n            <span style=\"color:Green\">// some of the exceptions being thrown by the CAG appear to be coming from separate threads so we'll protect ourselves</span>\r\n            <span style=\"color:Blue\">if</span> (!Application.Current.Dispatcher.CheckAccess())\r\n            {\r\n                <span style=\"color:Green\">// Unhandled exceptions on worker threads will halt the application. We want to</span>\r\n                <span style=\"color:Green\">// use our global exception handler(s), so dispatch or &quot;forward&quot; to the UI thread.</span>\r\n                Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal, <span style=\"color:Blue\">new</span> ProcessUnhandledExceptionDelegate(<span style=\"color:Blue\">this</span>.ProcessUnhandledException), e.Exception);\r\n            }\r\n            <span style=\"color:Blue\">else</span>\r\n            {\r\n                <span style=\"color:Blue\">this</span>.ProcessUnhandledException(e.Exception);  <span style=\"color:Green\">// Already on UI thread; just rethrow the exception to global handlers</span>\r\n            }\r\n            e.Handled = <span style=\"color:Blue\">true</span>;\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">void</span> CurrentDomain_UnhandledException(<span style=\"color:Blue\">object</span> sender, UnhandledExceptionEventArgs e)\r\n        {\r\n            <span style=\"color:Green\">// some of the exceptions being thrown by the CAG appear to be coming from separate threads so we'll protect ourselves</span>\r\n            <span style=\"color:Blue\">if</span> (!Application.Current.Dispatcher.CheckAccess())\r\n            {\r\n                <span style=\"color:Green\">// Unhandled exceptions on worker threads will halt the application. We want to</span>\r\n                <span style=\"color:Green\">// use our global exception handler(s), so dispatch or &quot;forward&quot; to the UI thread.</span>\r\n                Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal, <span style=\"color:Blue\">new</span> ProcessUnhandledExceptionDelegate(<span style=\"color:Blue\">this</span>.ProcessUnhandledException), (Exception)e.ExceptionObject);\r\n            }\r\n            <span style=\"color:Blue\">else</span>\r\n            {\r\n                <span style=\"color:Blue\">this</span>.ProcessUnhandledException((Exception)e.ExceptionObject);  <span style=\"color:Green\">// Already on UI thread; just rethrow the exception to global handlers</span>\r\n            }\r\n\r\n            \r\n        }\r\n\r\n</pre>\r\n</div>",
    "PostedDate": "2009-10-07T10:25:47.187-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "243632",
    "ThreadId": "70642",
    "Html": "<p id=5390d370-94e2-012c-6812-12313a00ed31>Hi Jamie,</p>\r\n<p><a href=\"View.aspx?ThreadId=36371\">This thread</a> provides more information about this subject (it is for Prism-v1 but the information is also valid for Prism-v2). As Prism does not provide specific guidance to handle exceptions, you might find the <a href=\"http://msdn.microsoft.com/en-us/library/dd203116.aspx\">Exception Handling Application Block</a> from the <a href=\"http://msdn.microsoft.com/en-us/library/dd203099.aspx\">Enterprise Library</a> useful.</p>\r\n<p id=021bd5a0-9682-012c-c5d4-12313b00e181>Also, you should note that the Shell is created as part of the bootstrapping process, which may have its own exception handling mechanism (as opposed to throw an exception for example as a result of some user input).</p>\r\n<p id=53911550-94e2-012c-6814-12313a00ed31>Please let me know if this helps.</p>\r\n<p id=53913e80-94e2-012c-6815-12313a00ed31>Damian Schenkelman    <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-10-08T15:48:58.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "647495",
    "ThreadId": "70642",
    "Html": "<p>I would also be interested in some guidance on this. The link provided by Damian doesn't appear to work any more.</p>\r\n<p>Is there any best practice guidance? For example, how best might this be implemented within the StockTrader Reference Implementation? Code samples, etc</p>",
    "PostedDate": "2011-07-25T20:25:38.357-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "647699",
    "ThreadId": "70642",
    "Html": "<p>Hi,</p>\r\n<p>The link provided by Damian can be found <a href=\"http://compositewpf.codeplex.com/discussions/36371\">here</a>. As for guidance about best practices about this, there isn't yet specific guidance about it in Prism.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-07-26T05:58:37.17-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]