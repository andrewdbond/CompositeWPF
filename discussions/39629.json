[
  {
    "Id": "131501",
    "ThreadId": "39629",
    "Html": "Hi all, I have a Composite WPF design question.&nbsp; If a TabItem (associated with a Region) is closed by a user, I need any views inside the tab to display a warning message to the user if the view is dirty (&quot;You have unsaved changes.&nbsp; Are you sure you want to close this tab?&quot; yes or no).&nbsp; Here's my setup:<br>\r\n<br>\r\nI am attaching a Region to a WPF TabControl.&nbsp; UserControls with their own Regions are then added to the TabControls' region.&nbsp; The TabControl's TabItems have close buttons which close that TabItem.&nbsp; I made my own custom TabControlRegionAdapter, which is very similar to the SelectorRegionAdapter and I've confirmed that when my tabs are closed by the user, the region that goes with that TabItem is also destroyed (I'm basically using the SelectorRegionSyncBehavior from the CAL source).<br>\r\n<br>\r\nI can have an event handler for TabItem.Closing in my TabControlRegionAdapter, and in there I can set e.Cancel = true if I want to cancel the event.&nbsp; However, before actually closing the tab, I want to check to make sure that none of the views added to the Regions defined in the UserControl inside my TabItem are dirty before just closing it.&nbsp; If they are dirty, then they need to be able to display a modal dialog letting the user choose whether or not to actually close the TabItem.&nbsp; Depending on their choice, I will either cancel the Closing event or let it proceed.<br>\r\n<br>\r\nAny thoughts on a good pattern for how to do this?&nbsp; I will have many views (or perhaps PresentationModels) that will need to check their is dirty state.&nbsp; I was thinking of creating an interface, say IAmDirtyable, that my views or models could implement.&nbsp; Then in the TabItem.Closing event handler I could somehow loop through all the views add to the regions inside the UserControl view contained in the TabItem--if they implement IAmDirtyable would call the IsDirty() method on each of them and display a message or proceed with the event if appropriate.&nbsp; IAmDirtyable might also have to have a Save() method.<br>\r\n<br>\r\nAnybody out there who has already solved this problem satisfactorily?&nbsp; Am I on the right track here or way off in the weeds?<br>\r\n<br>\r\nHere's my code for TabControlRegionAdapter if it's helpful.&nbsp; I'm actually using the Infragistics XamTabControl with TabItemEx both of which inherit from TabControl and TabItem respectively.&nbsp; <br>\r\n<br>\r\npublic class TabControlRegionAdapter : RegionAdapterBase&lt;TabControl&gt;<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// Adapt<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;region&quot;&gt;&lt;/param&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;regionTarget&quot;&gt;&lt;/param&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected override void Adapt(IRegion region, TabControl regionTarget)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //If control has child items, move them to the region and then bind control to region.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (regionTarget.Items.Count &gt; 0)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new InvalidOperationException(&quot;message here&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (regionTarget.Items.Count &gt; 0)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Control must be empty before setting ItemsSource<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (object childItem in regionTarget.Items)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; region.Add(childItem);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; regionTarget.Items.Clear();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; regionTarget.ItemsSource = region.Views;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; region.Views.CollectionChanged += delegate(Object sender, NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnViewsCollectionChanged(sender, e, region, regionTarget);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static void OnViewsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e, TabControl regionTarget)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (e.Action == NotifyCollectionChangedAction.Add)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //An item was added to the region.&nbsp; We now have to add it to the TabItem.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (object item in e.NewItems)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DependencyObject view = item as DependencyObject;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (view != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TabItemEx tabItem = (regionTarget as TabControl).ItemContainerGenerator.ContainerFromItem(view) as TabItemEx;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Set a header on the tab if the property has been attached<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetInfoOnTab(view, tabItem);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tabItem.Closing += new EventHandler&lt;global::Infragistics.Windows.Controls.Events.TabClosingEventArgs&gt;(tabItem_Closing);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void tabItem_Closing(object sender, global::Infragistics.Windows.Controls.Events.TabClosingEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //TODO: need to give the user control the ability to cancel this if its dirty<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //so we probably need to fire a PRISM tabClosing event to notify all the user controls.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.Cancel = false;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static void SetInfoOnTab(DependencyObject view, TabItemEx tabItem)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IRegionInfo tabInfo = view.GetRegionInfo();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (null != tabInfo)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tabItem.Header = tabInfo.Header;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// CreateRegion<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;returns&gt;&lt;/returns&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected override IRegion CreateRegion()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new Region();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// Attach new behaviors.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;region&quot;&gt;The region being used.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=&quot;regionTarget&quot;&gt;The object to adapt.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected override void AttachBehaviors(IRegion region, TabControl regionTarget)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.AttachBehaviors(region, regionTarget);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //The behavior uses weak references while listening to events to prevent memory leaks<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //when destroying the region but not the control or viceversa.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SelectorRegionSyncBehavior syncBehavior = new SelectorRegionSyncBehavior(regionTarget, region);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; syncBehavior.Attach();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-11-10T14:12:02.397-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "181564",
    "ThreadId": "39629",
    "Html": "adajos - I am curious if you have a working sample?  I am trying to do something similar for Silverlight.  If you don't mind I would love to see your sample and see what we could do to port it over to Silverlight.  Thanks,  Matt\r\n",
    "PostedDate": "2009-04-20T18:57:08.237-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "181990",
    "ThreadId": "39629",
    "Html": "mkduffi:<br>\r\n<br>\r\nYes, I ended up with an implementation that I am fairly happy with.  <br>\r\n<br>\r\nHere's the what I did.<br>\r\n<br>\r\n1.  Basically I created an interface something like this:<br>\r\n<br>\r\n<span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">\r\n<p>public</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\">interface</span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\">ISaveableBeforeClosing<br>\r\n</span><span style=\"font-size:13px\">{<br>\r\n</span><span style=\"color:#0000ff;font-size:13px\">   bool</span><span style=\"font-size:13px\"> IsDirty();<br>\r\n}\r\n<p>&nbsp;</p>\r\n</span></p>\r\nIn UserControls in which I care about this &quot;Isdirty&quot; kind of thing I implement this interface.  That way the logic needed to determine whether or not a view is dirty is left to the view itself because it will be very custom for each view. In retrospective I wish I had named the interface IAmClosing and had the method name be bool CancelClose() because it does nothing specific to save as that is left to the view, and we've had several views implemented in which they never display a message about saving, but autosave and only then close the tab.   So semantically it could be better but it works out fine.<br>\r\n<br>\r\n2.  In my TabControlRegionAdapter I subscribe to the tab closing event every time I add a new tab like so:<br>\r\n<span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">\r\n<p style=\"margin-right:0px\" dir=ltr>private</p>\r\n</span>\r\n<p style=\"margin-right:0px\" dir=ltr>&nbsp;</p>\r\n</span>\r\n<p style=\"margin-right:0px\" dir=ltr><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\">static</span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\">void</span><span style=\"font-size:13px\"> OnViewsCollectionChanged(</span><span style=\"color:#2b91af;font-size:13px\">NotifyCollectionChangedEventArgs</span><span style=\"font-size:13px\"> e, </span><span style=\"color:#2b91af;font-size:13px\">XamTabControl</span><span style=\"font-size:13px\"> regionTarget)<br>\r\n{<br>\r\n</span><span style=\"color:#0000ff;font-size:13px\">   if</span><span style=\"font-size:13px\"> (e.Action == </span><span style=\"color:#2b91af;font-size:13px\">NotifyCollectionChangedAction</span><span style=\"font-size:13px\">.Add)<br>\r\n   {<br>\r\n</span><span style=\"color:#0000ff;font-size:13px\">      foreach</span><span style=\"font-size:13px\"> (</span><span style=\"color:#0000ff;font-size:13px\">object</span><span style=\"font-size:13px\"> item </span><span style=\"color:#0000ff;font-size:13px\">in</span><span style=\"font-size:13px\"> e.NewItems)<br>\r\n      {<br>\r\n</span><span style=\"color:#2b91af;font-size:13px\">         DependencyObject</span><span style=\"font-size:13px\"> view = item </span><span style=\"color:#0000ff;font-size:13px\">as</span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\">DependencyObject</span><span style=\"font-size:13px\">;<br>\r\n</span><span style=\"color:#0000ff;font-size:13px\">         if</span><span style=\"font-size:13px\"> (view != </span><span style=\"color:#0000ff;font-size:13px\">null</span><span style=\"font-size:13px\">)<br>\r\n        {<br>\r\n</span><span style=\"color:#2b91af;font-size:13px\">            TabItemEx</span><span style=\"font-size:13px\"> tabItem = (</span><span style=\"color:#2b91af;font-size:13px\">TabItemEx</span><span style=\"font-size:13px\">)regionTarget.ItemContainerGenerator.ContainerFromItem(view);<br>\r\n            tabItem.Closing += tabItem_Closing;<br>\r\n        }<br>\r\n      }<br>\r\n    }<br>\r\n}<br>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<br>\r\n3.  put an event handler for the TabItemEx closing event in my TabControlRegionAdapter<br>\r\n<br>\r\n<span style=\"color:#0000ff;font-size:13px\"><span style=\"color:#0000ff;font-size:13px\">\r\n<p>private</p>\r\n</span>\r\n<p>&nbsp;</p>\r\n</span>\r\n<p><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\">static</span><span style=\"font-size:13px\"> </span><span style=\"color:#0000ff;font-size:13px\">void</span><span style=\"font-size:13px\"> tabItem_Closing(</span><span style=\"color:#0000ff;font-size:13px\">object</span><span style=\"font-size:13px\"> sender, </span><span style=\"color:#0000ff;font-size:13px\">global</span><span style=\"font-size:13px\">::Infragistics.Windows.Controls.Events.</span><span style=\"color:#2b91af;font-size:13px\">TabClosingEventArgs</span><span style=\"font-size:13px\"> e)<br>\r\n{<br>\r\n</span><span style=\"color:#2b91af;font-size:13px\">   TabItemEx</span><span style=\"font-size:13px\"> tab = (</span><span style=\"color:#2b91af;font-size:13px\">TabItemEx</span><span style=\"font-size:13px\">)e.Source;<br>\r\n</span><span style=\"color:#2b91af;font-size:13px\">   ISaveableBeforeClosing</span><span style=\"font-size:13px\"> saveableView = tab.Content </span><span style=\"color:#0000ff;font-size:13px\">as</span><span style=\"font-size:13px\"> </span><span style=\"color:#2b91af;font-size:13px\">ISaveableBeforeClosing</span><span style=\"font-size:13px\">;<br>\r\n</span><span style=\"color:#0000ff;font-size:13px\">    if</span><span style=\"font-size:13px\"> (saveableView != </span><span style=\"color:#0000ff;font-size:13px\">null</span><span style=\"font-size:13px\">)<br>\r\n    {<br>\r\n         e.Cancel = saveableView.IsDirty();<br>\r\n     }<br>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<br>\r\nThis event handler cancels the tab closing event if one of the views says to do so.<br>\r\n<br>\r\nA couple of notes about this implementation:<br>\r\n<br>\r\n1.  Our TabControlAdapter actually became a XamTabControl adaptor (the Infragistics TabControl which extends the WPF TabControl).  XamTabControl contains the Infragistics' TabItemEx (which extends WPF TabItem), and TabItemEx has the cancellable TabClosing event built into it, but this would not work out of the box with the normal WPF TabItem.  However it would be an easy matter to extend TabItem and give it a cancellable event to wire up to.<br>\r\n2.  One non-obvious implication of this is that if your TabItem.Content contains a view which itself has regions that in turn contain other views that implement ISaveableBeforeClosing, then you need to make your &quot;root&quot; view implement ISaveableBeforeClosing and recurse through all the regions it contains, and go through all the views in those regions to see if they implement ISaveableBeforeClosing and then calling IsDirty() on them.  If you don't want to do that, you could just have your &quot;root&quot; view implement the interface and then call out to a Controller, an event, or something to check on the state of other views.  <br>\r\n<br>\r\nWhen our entire Window closes we fire of a TabClosing event for each tab in the TabControl, and when that happens each tab makes sure its views give it permission to close as well, which essentially means that a given view can prevent the entire shell from closing down if need me.  <br>\r\n<br>\r\nThis method has worked well for us.  That said, I bet somebody else has figured out a better way to do it than this.<br>\r\n<br>\r\nGood luck mkduffi.<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2009-04-21T13:17:42.073-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "459889",
    "ThreadId": "39629",
    "Html": "<p>Hi,</p>\r\n<p>I get a problem with this in the&nbsp;<span style=\"font-size:x-small\">OnViewsCollectionChanged </span>event handler. When I hit the line:</p>\r\n<p><span style=\"font-size:x-small\"><span style=\"font-size:x-small\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TabItemEx tabItem =<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; regionTarget.ItemContainerGenerator.ContainerFromItem(view) <span style=\"color:blue\">as</span> TabItemEx;<br></span></span></p>\r\n<p><span style=\"font-size:x-small\"><span style=\"font-size:x-small\">tabItem is returned as null. The reason being because the regionTarget.Items.Count = 0! The CollectionChanged event seems to be firing before the view has been added to the XamTabControl. Has anyone else seen this?</span></span>\r\n<p>&nbsp;</p>\r\n</p>\r\n<p><span style=\"font-size:x-small\">\r\n<p>Any help would be much appreciated!</p>\r\n</span></p>\r\n<p>Thanks</p>\r\n<p>Gary</p>",
    "PostedDate": "2010-06-25T03:54:39.79-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "466142",
    "ThreadId": "39629",
    "Html": "<p>i understand this is an old post, but just a note here:</p>\r\n<p>you could use something like iterating\r\n<div style=\"color:black;background-color:white\">\r\n<pre>_regionManager.Regions[<span style=\"color:#a31515\">&quot;MyRegion&quot;</span>].ActiveViews\r\n</pre>\r\n</div>\r\n</p>\r\n<p>and than cast each view to your interface</p>\r\n<p>&nbsp;</p>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow:hidden\">v5.5.41 desktopdefault.cs_regionMan</div>",
    "PostedDate": "2010-07-11T23:56:14.023-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]