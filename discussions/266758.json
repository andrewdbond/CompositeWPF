[
  {
    "Id": "648416",
    "ThreadId": "266758",
    "Html": "\r\n<p>I have a host application which has a dependency on a particular object, say of type IMyInterface. The concrete implementation of IMyInterface can either be null (i.e. optional dependency), or it can be provided by an external module. In this specific case,\r\n the external module (Prism IModule derived) is what provides the concrete implementation. The problem I am having is as follows. The host application's object, call it MyHostAppObject, that has this optional dependency on IMyInterface is created before the\r\n the external module is initialized. Then, when the external module registers its concrete implementation of IMyInterface with the container, MyHostAppObject does not know about it. What is a good way to handle this?</p>\r\n<p>Quick code to illustrate the issue:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MyModule : IModule\r\n{\r\n  ...\r\n  <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()\r\n  {\r\n    Container.RegisterType&lt;IMyInterface, MyInterface&gt;();\r\n  }\r\n}\r\n\r\n<span style=\"color:green\">// in host app... this object is created first</span>\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MyHostAppObject\r\n{<span style=\"color:blue\"><br> &nbsp;public</span> MyHostAppObject(IMyInterface obj)\r\n  {\r\n\r\n  }\r\n}<br></pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2011-07-27T10:41:38.393-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "648970",
    "ThreadId": "266758",
    "Html": "<p>Hi,</p>\n<p>You could make your additional module publish an event with the Event Aggregator once it has registered its component in the Unity Container, and you could make your <strong>MyHostAppObject</strong> class subscribe to that event and resolve that dependency through the Unity container in the handler for that event.</p>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-07-28T06:49:50.67-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "649044",
    "ThreadId": "266758",
    "Html": "<p>Thank you for the response.</p>\r\n<p>Is there anything wrong with initializing the modules before initializing the shell?</p>",
    "PostedDate": "2011-07-28T09:03:24.997-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "649049",
    "ThreadId": "266758",
    "Html": "<p>Usually modules contain the logic to add views to regions (that are usually defined in the shell). Therefore, you wouldn't be able to add views to regions using the View Injection approach if you altered the initialization sequence.</p>\r\n<p>Considering that, unless it is unavoidable, you should stick with the default initialization sequence.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-07-28T09:15:44.47-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]