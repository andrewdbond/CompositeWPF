[
  {
    "Id": "512823",
    "ThreadId": "232387",
    "Html": "\r\n<p>I have an app I was running Drop 9 in and I updated the assemblies to Drop 10.</p>\r\n<p>As soon as I did I started getting a runtime error indicating it couldn't find a module and it would throw an exception.&nbsp; The extremely odd thing is that the module would load.</p>\r\n<p>This is a large app and I can't post it anywhere.&nbsp; The architecture is close that that of what's in this sample template I'm working on.&nbsp;&nbsp; Note this sample doesn't exhibit the problem.</p>\r\n<p><a href=\"http://cid-ff05a29e13af7bfd.office.live.com/self.aspx/.Public/ModuleTemplate.rar\">http://cid-ff05a29e13af7bfd.office.live.com/self.aspx/.Public/ModuleTemplate.rar</a></p>\r\n<p>I tried trouble shooting and I can't figure out what's causing it.&nbsp; My module name is called TruckStat and I set a break point in the Initialize of it and as soon as it runs past the end of Initialize the exception is immediately thrown.&nbsp; It is\r\n a silverlight exception.</p>\r\n<p>I had to revert back to the assemblies in Drop 9 but wanted to put this on your radar.&nbsp; Again, if there is any tracing I can enable or something else I can do to gather info to send to you please advise.</p>\r\n",
    "PostedDate": "2010-10-26T10:07:46.2-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512834",
    "ThreadId": "232387",
    "Html": "\r\n<p>Could you post a complete stack trace and the full exception message.&nbsp; It'll help us determine what may be going on.</p>\r\n<p>Thanks,</p>\r\n",
    "PostedDate": "2010-10-26T10:19:40.613-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512847",
    "ThreadId": "232387",
    "Html": "\r\n<p>Unable to locate the module with type 'EyeCue.Modules.AppSettings.AppSettingsModule, EyeCue.Modules.AppSettings, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' among the exported modules. Make sure the module name in the module catalog matches that\r\n specified on ModuleExportAttribute for the module type.<br>\r\n&nbsp;&nbsp; <br>\r\nat Microsoft.Practices.Prism.Modularity.ModuleInitializer.HandleModuleInitializationError(ModuleInfo moduleInfo, String assemblyName, Exception exception)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ModuleInitializer.Initialize(ModuleInfo moduleInfo)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ModuleManager.InitializeModule(ModuleInfo moduleInfo)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ModuleManager.LoadModulesThatAreReadyForLoad()<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ModuleManager.IModuleTypeLoader_LoadModuleCompleted(Object sender, LoadModuleCompletedEventArgs e)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.MefExtensions.Modularity.MefXapModuleTypeLoader.RaiseLoadModuleCompleted(LoadModuleCompletedEventArgs e)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.MefExtensions.Modularity.MefXapModuleTypeLoader.RaiseLoadModuleCompleted(ModuleInfo moduleInfo, Exception error)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.MefExtensions.Modularity.MefXapModuleTypeLoader.HandleDownloadCompleted(DeploymentCatalog deploymentCatalog, AsyncCompletedEventArgs e)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.MefExtensions.Modularity.MefXapModuleTypeLoader.DeploymentCatalog_DownloadCompleted(Object sender, AsyncCompletedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.ComponentModel.Composition.Hosting.DeploymentCatalog.OnDownloadCompleted(AsyncCompletedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.ComponentModel.Composition.Hosting.DeploymentCatalog.HandleOpenReadCompleted(Object sender, OpenReadCompletedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Net.WebClient.OnOpenReadCompleted(OpenReadCompletedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Net.WebClient.OpenReadOperationCompleted(Object arg)</p>\r\n<p>I have two Modules, one is called AppSettingsModule and the other is called TruckStatsModule</p>\r\n<p>In this case it threw on AppSetting, but again, once I step pass the handled exceptions, the Module is loaded and working.</p>\r\n<p>Also, note I'm loading the modules like this.</p>\r\n<p>&nbsp;protected override IModuleCatalog CreateModuleCatalog()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IModuleCatalog _modCat = Microsoft.Practices.Prism.Modularity.ModuleCatalog.CreateFromXaml(new Uri(ModuleCatalogUri, UriKind.Relative));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _modCat;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>Then in the ConfigureAggregateCatalog()</p>\r\n<p>I loop through the modules and add them as DeploymentCatalogs such as follows.</p>\r\n<p>foreach (var module in this.ModuleCatalog.Modules)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _aggregCat.Catalogs.Add(CreateCatalog(module.Ref));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>private DeploymentCatalog CreateCatalog(string uri)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var catalog = new DeploymentCatalog(uri);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catalog.DownloadCompleted &#43;= (s, e) =&gt; DownloadCompleted(s, e);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catalog.DownloadAsync();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return catalog;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void DownloadCompleted(object sender, AsyncCompletedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (e.Error != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageBox.Show(e.Error.Message);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lock (_lock)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _modulesToLoad--;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (_modulesToLoad &lt;= 0)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CompositionHost.Initialize(this.AggregateCatalog);\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.InitializeModules();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>What's odd is there is no error in the DownloadedCompleted function above in the bootstrapper.</p>\r\n<p>I go back to Drop 9 assemblies and I don't have any issues.&nbsp;</p>\r\n",
    "PostedDate": "2010-10-26T10:33:44.663-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512874",
    "ThreadId": "232387",
    "Html": "\r\n<p>I'm trying to figure out what you are trying to do here, so please bear with a few questions to help me understand the intent of the above code.</p>\r\n<p>It looks like you are using a xaml module catalog.&nbsp; This is straight-forward and right out of the Modularity samples.</p>\r\n<p>Then, in the ConfigureAggregateCatalog you explicitly kick off the module downloads, wait for them to complete, and explicitly add the returned modules to the aggregate catalog.&nbsp;</p>\r\n<p>If this is the case, you are duplicating things that are already handled by the MefXapModuleTypeLoader.&nbsp; If all the types you want to register with the Aggregate catalog are in the XAPs which are defined in the module catalog, you should be able to\r\n let the built in mechanisms in the bootstrapper download the modules, and when they are downloaded, they will be added to the AggregateCatalog and initialized.&nbsp;</p>\r\n<p>I would try removing the for loop you added to ConfigureAggregateCatalog, and see if the modules are properly added to the aggregate catalog by the built in mechanism that handles this.. If you look at the Modularity With MEF for Silverlight QuickStart,\r\n you can see that Modules B, E, &amp; F are all in other XAPs, and they are only configured in the ModuleCatalog.XAML file.&nbsp; Other than the module catalog being loaded by the bootstrapper, the bootstrapper has no knowledge of these, but the types still\r\n get registered in the container, and things still work.</p>\r\n<p>If you are trying something that explicitly precludes this approach, let me know.</p>\r\n<p>Also, keep in mind that between Drop 9 &amp; 10 a few bugs were fixed in the XapModuleTypeLoader.&nbsp; One of these fixes may have moved the responsibility for what you are trying to accomplish to after the ModuleLoaded event is fired as opposed to the\r\n DownloadComplete event, which could also be effecting things.</p>\r\n<p>Thanks,<br>\r\nMike</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-26T11:12:06.767-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512899",
    "ThreadId": "232387",
    "Html": "\r\n<p>Thanks for the prompt replies Mike.&nbsp; I agree with what you're saying, I'm duplicating parts.&nbsp; I actually have another thread on this.</p>\r\n<p><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=232387&ANCHOR#Post512874\">http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=232387&amp;ANCHOR#Post512874</a></p>\r\n<p>If you look at the sample template I have shared out.&nbsp; I'm doing pretty much the same thing but I only have one module in that sample.&nbsp; Right now I'm working on a production application and this is causing me a big problem.</p>\r\n<p>I was just about to start yet another thread but will try to tie it in here.&nbsp; One thing I'm noticing is that ImportConstructor is pulling exports from a different container than CompositionInitializer.SatisfyImports.</p>\r\n<p>In what we're doing with here, I have 2 modules that I load from a Xaml file.</p>\r\n<p>Just making this call</p>\r\n<p>protected override IModuleCatalog CreateModuleCatalog()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IModuleCatalog _modCat = Microsoft.Practices.Prism.Modularity.ModuleCatalog.CreateFromXaml(new Uri(ModuleCatalogUri, UriKind.Relative));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _modCat;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;is not updating the AggregateCatalog with the exports in the modules which are compiled in their own .xap.</p>\r\n<p>In ConfigureAggregateCatalog() I have to add these two assemblies because there are exports I need in the base application such as Shell.xaml.</p>\r\n<p>this.AggregateCatalog.Catalogs.Add(new AssemblyCatalog(typeof(Bootstrapper).Assembly));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.AggregateCatalog.Catalogs.Add(new AssemblyCatalog(typeof(GlobalValues).Assembly));</p>\r\n<p>However, if I don't create a new AggregrateCatalog and populate it with the items above, then in my CreateShell where I do the following,</p>\r\n<p>return this.Container.GetExportedValue&lt;Shell&gt;();</p>\r\n<p>Also, if I don't do this in the ConfigureAggregateCatalog() function, none of my exports are available in my modules</p>\r\n<p>foreach (var module in this.ModuleCatalog.Modules)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _aggregCat.Catalogs.Add(CreateCatalog(module.Ref));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>Let's go back to TruckStatModule, it has a TruckController which is Exported and in my TruckStatModule I have an Import for it so when the TruckStatModule loads, the constructor for TruckController fires.</p>\r\n<p>TruckController uses the ImportConstructor to pull in approx 6 exported values.&nbsp; Again, if I don't do the foreach above to load the modules into a new AggregateCatalog as DeploymentCatalogs, I get MEF exceptions that it can't find contracts for any\r\n of the Imports in the TruckController constructor.</p>\r\n<p>However, doing it this way has presented yet another problem.&nbsp; I have a View that loads with the TruckController and it has to use a ViewModelLocator.</p>\r\n<p>The ViewModelLocator when it goes to return a ViewModel, it checks if it is null, it makes a call to CompositionInitializer.SatisfyImports(this);</p>\r\n<p>However, what I'm finding is it's getting a separate ViewModel than the one that was imported from the ImportConstructor in TruckController so I've got to come up with something different.&nbsp; I was hoping this was just a bug as I thought I would try Drop\r\n 10 out.&nbsp; However, that has just added another problem to the mix.&nbsp; I wanted to post it so you guys are aware but I have to go back to Drop 9 and figure out my original problem as I've spent way too much time on this.</p>\r\n<p>In closing, all I want to do is be able to add modules which will be in the form of new Silverlight Application projects and most of the time will have their own .xap.&nbsp;</p>\r\n<p>I want to use the CreateModuleCatalog() and call Microsoft.Practices.Prism.Modularity.ModuleCatalog.CreateFromXaml(....) to load the modules.</p>\r\n<p>When they are loaded, I would love to have everything in a single container so ImportingConstructor is pulling from the same container as CompositionInitializer.SatisfyImports</p>\r\n<p>But that is just not happening.&nbsp; (It could be something I'm not doing but the samples and docs are sparse so I'm piecing through as best I can.)</p>\r\n<p>One other thing to note, instead of using a second AggregateCatalog, in the bootstrapper I've tried adding the deployment catalogs for the loaded modules into this.AggregateCatalog.Catalogs(CreateCatalog(module.Ref))</p>\r\n<p>However, that causes the ImportConstructor for the controllers in my modules to fail with the exception that the Parts have changed and I don't have a way to set them to allowRecomposition=true.&nbsp; (I've read a hack from Glen but I don't care for it.)</p>\r\n<p>I hope that clarifies things more.&nbsp; If not please let me know.</p>\r\n<p>Thanks.</p>\r\n",
    "PostedDate": "2010-10-26T11:37:20.597-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512906",
    "ThreadId": "232387",
    "Html": "\r\n<p>Mike,</p>\r\n<p>I'll add, I'm creating the Template I have linked above to share out with the world.&nbsp; If it's easier to work off it, take a look at it and we can work off it to try and get the catalog stuff right.&nbsp; WIth that it may be better to track how to get\r\n the parts into the single container or how to make sure SatisfyImports() pulls from the same container as ImportingConstructor inside a module.</p>\r\n<p>Even though we get that working, this I created this thread for still exists and it may be better to keep the two separate.</p>\r\n<p>Anyway, the sample, I've spent a lot of time trying to integrate Prism 4 into an existing app I need to make modular.&nbsp; The sample is going to be a base solution I can use for future projects when I get it finished.</p>\r\n<p>In addition to dynamically loading modules, I'm trying to get a region adapter for a toolbar control in it to work.</p>\r\n<p>When I'm finished, I'd be glad to share it with you guys to post.&nbsp; (I'll post it on my site either way when it's finished.)</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-26T11:46:04.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512924",
    "ThreadId": "232387",
    "Html": "\r\n<p>I've got to get this work so I'll post as I go along.&nbsp; I went back and changed ConfigureAggregateCatalog() removing the foreach as you suggested.</p>\r\n<p>It now looks like:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureAggregateCatalog()\r\n        {\r\n            <span style=\"color:blue\">base</span>.ConfigureAggregateCatalog();\r\n\r\n            <span style=\"color:blue\">this</span>.AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span> AssemblyCatalog(<span style=\"color:blue\">typeof</span>(Bootstrapper).Assembly));\r\n            <span style=\"color:blue\">this</span>.AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span> AssemblyCatalog(<span style=\"color:blue\">typeof</span>(GlobalValues).Assembly));            \r\n\r\n            CompositionHost.Initialize(<span style=\"color:blue\">this</span>.AggregateCatalog); \r\n            \r\n        }\r\n</pre>\r\n<pre>We'll just focus on the TruckStatModule here.  As mentioned above, this module has a TruckController class which I use to intialize and coordinate everything in this module.  The code above,</pre>\r\n<pre>satisfies it's [ImportConstructor] imports just fine.</pre>\r\n<pre>However, if I don't add the CompositionHost.Initialize(this.AggregateCatalog), the CompositionInitializer.SatisfyImports(this); fails indicating it can't find a contract for it's import.  That </pre>\r\n<pre>shouldn't be because it worked just fine in the [ImportingConstructor] of TruckController.</pre>\r\n<pre>When I add, CompositionHost.Initialize(<span style=\"color:blue\">this</span>.AggregateCatalog); </pre>\r\n<pre>Now the CompositionInitializer.SatisfyImports(this); doesn't fail anymore, however it's pulling back a separate instance of a ViewModel that what the constructor of TruckController Imports.</pre>\r\n<pre>I know this because all my ViewModels in the TruckStatModule, I set a TruckController property on them.</pre>\r\n<pre>So in the ViewModelLocator, TruckController is null when it should have a value.  (I assign other values to ViewModels in the controller based on logic and all of those are alway null in the ViewModel</pre>\r\n<pre>my ViewModelLocator for this module.</pre>\r\n<pre>So I'm still left with why CompositionInitializer.SatisfyImports in my TruckStat module is getting a different ViewModel than what the ImportConstructor in the same module gets.  My ViewModels are </pre>\r\n<pre>created as shared.</pre>\r\n<pre>Also, Drop 10 of the assemblies is still throwing the same exception that caused me to start this particular case.</pre>\r\n<pre>So I have to go back to Drop 9.<br></pre>\r\n</div>\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2010-10-26T12:18:51.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512979",
    "ThreadId": "232387",
    "Html": "\r\n<p>kfrosty,</p>\r\n<p>Mike asked me to take a look at this to see if I could spot anything.&nbsp; A couple things.</p>\r\n<p>* You shouldn't need to enumerate or initialize your own modules, or even setup your own deployment catalogs.&nbsp; As long as the MOduleINfo's in the Module catalog have an appropriate Uri (pointing to a xap) are set to the load 'WhenAvailable'.&nbsp; The\r\n modulemanager should:<br>\r\n&nbsp; - Download the xap using a DeploymentCatalog<br>\r\n&nbsp; - Add the catalog to the AggregateCatalog<br>\r\n&nbsp; - [Import] and initialize any IModule's in the catalog</p>\r\n<p>* How are you getting views into regions?&nbsp; Are these added by the IModule.Initialize code or by some other mechanism?&nbsp;</p>\r\n<p>I know you've spent a bunch of time on this, but do you have a small repro that we could take a look at?</p>\r\n<p>Thanks,</p>\r\n<p>-b</p>\r\n",
    "PostedDate": "2010-10-26T14:10:24.307-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512984",
    "ThreadId": "232387",
    "Html": "\r\n<p>Another question for clarification:</p>\r\n<p>It seems like you have items in your modules on which your Shell is dependent, is this true?&nbsp; T</p>\r\n<p>ypically, we would expect the shell to be created and then modules could register or add views to a region when they're initialized.</p>\r\n<p>-b</p>\r\n",
    "PostedDate": "2010-10-26T14:21:11.51-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513006",
    "ThreadId": "232387",
    "Html": "\r\n<div class=\"WordSection1\">\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">Hello Brian,</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">No I have nothing in my main shell that relies on any modules.  I have an IPopupController & ILogService and they are defined in my Common Assembly.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">Here are the names of my assemblies for the app at work.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">EyeCue - Main SL app that contains Shell.  This also contains a ShellController class with the following constructor.</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">[<span style=\"color:#2B91AF\">ImportingConstructor</span>]</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        <span style=\"color:blue\">public</span> ShellController(<span style=\"color:#2B91AF\">IShellViewModel</span> shellVieModel,\r\n<span style=\"color:#2B91AF\">ILogService</span> logService, <span style=\"color:#2B91AF\">\r\nIPopupController</span> popupController)</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">LogService & PopupController are defined in EyeCue.Common below.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">EyeCue.Common - Contains things common to the app.  This is why I do this\r\n</span><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\">this</span><span style=\"font-size:9.5pt; font-family:Consolas\">.AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span>\r\n<span style=\"color:#2B91AF\">AssemblyCatalog</span>(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2B91AF\">GlobalValues</span>).Assembly));</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><b><u><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">Modules</span></u></b></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">EyeCue.Modules.AppSettings</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">EyeCue.Modules.TruckStats</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">In shell I have a ContentControl and I load a UserControl called RootTruckTemplate.xaml into it.  It contains several regions.  The main one being RootTabRegion.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">When the TruckStatModule loads, it inserts into RootTabRegion.</span><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\"></span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<div>\r\n<div style=\"border:none; border-top:solid #B5C4DF 1.0pt; padding:3.0pt 0in 0in 0in\">\r\n<p class=\"MsoNormal\"><b><span style=\"font-size:10.0pt; font-family:\"Tahoma\",\"sans-serif\"\">From:</span></b><span style=\"font-size:10.0pt; font-family:\"Tahoma\",\"sans-serif\"\"> brumfb [mailto:notifications@codeplex.com]\r\n<br>\r\n<b>Sent:</b> Tuesday, October 26, 2010 5:21 PM<br>\r\n<b>To:</b> kkfrost@hotmail.com<br>\r\n<b>Subject:</b> Re: Drop 10 introduces an error loading a Module [CompositeWPF:232387]</span></p>\r\n</div>\r\n</div>\r\n<p class=\"MsoNormal\"> </p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">From: brumfb</span></p>\r\n<div id=\"x_ThreadNotificationPostBody\" style=\"margin-bottom:24.0pt\">\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">Another question for clarification:</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">It seems like you have items in your modules on which your Shell is dependent, is this true?  T</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">ypically, we would expect the shell to be created and then modules could register or add views to a region when they're initialized.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">-b</span></p>\r\n</div>\r\n<div id=\"x_ThreadNotificationFooter\" style=\"border:none; border-top:solid #CCCCCC 1.0pt; padding:0in 0in 0in 0in\">\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">Read the\r\n<a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=232387&ANCHOR#Post512984\">\r\nfull discussion online</a>.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">To add a post to this discussion, reply to this email (<a href=\"mailto:CompositeWPF@discussions.codeplex.com?subject=[CompositeWPF:232387]\">CompositeWPF@discussions.codeplex.com</a>)</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">To start a new discussion for this project, email\r\n<a href=\"mailto:CompositeWPF@discussions.codeplex.com\">CompositeWPF@discussions.codeplex.com</a></span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/232387\">unsubscribe</a> on CodePlex.com.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at CodePlex.com</span></p>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2010-10-26T14:59:49.503-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513014",
    "ThreadId": "232387",
    "Html": "\r\n<div class=\"WordSection1\">\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">Brian,</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">I've put this link in.  http://cid-ff05a29e13af7bfd.office.live.com/self.aspx/.Public/ModuleTemplate.rar</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">You can download the Trial Telerik controls if you need to compile it.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">To get it to where I'm at right now, you can create a ViewModel and a view that needs to use a ViewModelLocator.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">In the Module1Controller, set the controller value for the ViewModel and then set a break point in your ViewModelLocator or\r\n anywhere you make a call to </span><span style=\"font-size:9.5pt; font-family:Consolas; color:#2B91AF\">CompositionInitializer</span><span style=\"font-size:9.5pt; font-family:Consolas\">.SatisfyImports(<span style=\"color:blue\">this</span>);</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">You'll see that it pulls a ViewModel totally separate than what you get from an ImportConstructor.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">As far as this module loading error even when the module loads, I have no idea of how to reconstruct a repro.  I just know it happens and the app is too\r\n large to try and sort through and figure out a \"small repro\".</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">If you send me a private email address  I can probably send you the code but not the database it runs against.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<div>\r\n<div style=\"border:none; border-top:solid #B5C4DF 1.0pt; padding:3.0pt 0in 0in 0in\">\r\n<p class=\"MsoNormal\"><b><span style=\"font-size:10.0pt; font-family:\"Tahoma\",\"sans-serif\"\">From:</span></b><span style=\"font-size:10.0pt; font-family:\"Tahoma\",\"sans-serif\"\"> brumfb [mailto:notifications@codeplex.com]\r\n<br>\r\n<b>Sent:</b> Tuesday, October 26, 2010 5:10 PM<br>\r\n<b>To:</b> kkfrost@hotmail.com<br>\r\n<b>Subject:</b> Re: Drop 10 introduces an error loading a Module [CompositeWPF:232387]</span></p>\r\n</div>\r\n</div>\r\n<p class=\"MsoNormal\"> </p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">From: brumfb</span></p>\r\n<div id=\"x_ThreadNotificationPostBody\" style=\"margin-bottom:24.0pt\">\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">kfrosty,</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">Mike asked me to take a look at this to see if I could spot anything.  A couple things.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">* You shouldn't need to enumerate or initialize your own modules, or even setup your own deployment catalogs.  As long as the MOduleINfo's in the Module catalog have an appropriate Uri\r\n (pointing to a xap) are set to the load 'WhenAvailable'.  The modulemanager should:<br>\r\n  - Download the xap using a DeploymentCatalog<br>\r\n  - Add the catalog to the AggregateCatalog<br>\r\n  - [Import] and initialize any IModule's in the catalog</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">* How are you getting views into regions?  Are these added by the IModule.Initialize code or by some other mechanism? </span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">I know you've spent a bunch of time on this, but do you have a small repro that we could take a look at?</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">Thanks,</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">-b</span></p>\r\n</div>\r\n<div id=\"x_ThreadNotificationFooter\" style=\"border:none; border-top:solid #CCCCCC 1.0pt; padding:0in 0in 0in 0in\">\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">Read the\r\n<a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=232387&ANCHOR#Post512979\">\r\nfull discussion online</a>.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">To add a post to this discussion, reply to this email (<a href=\"mailto:CompositeWPF@discussions.codeplex.com?subject=[CompositeWPF:232387]\">CompositeWPF@discussions.codeplex.com</a>)</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">To start a new discussion for this project, email\r\n<a href=\"mailto:CompositeWPF@discussions.codeplex.com\">CompositeWPF@discussions.codeplex.com</a></span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/232387\">unsubscribe</a> on CodePlex.com.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at CodePlex.com</span></p>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2010-10-26T15:07:59.233-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513059",
    "ThreadId": "232387",
    "Html": "\r\n<div class=\"WordSection1\">\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">Brian,</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">I'm digging around this evening trying to figure out why my CompostionInitializer.SatisfyImports is not importing the same Exports in a module as the ImportConstructor.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">I'm reading this in the MEF documentation.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"margin-bottom:1.55pt\"><b><span style=\"font-size:19.0pt; font-family:\"Segoe UI\",\"sans-serif\"; color:#30332D\">DeploymentCatalog</span></b></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:9.5pt; font-family:Consolas; color:#30332D\">DeploymentCatalog</span><span style=\"font-size:9.5pt; font-family:\"Segoe UI\",\"sans-serif\"; color:#30332D\"> downloads parts from XAPs living on the web server. Using it\r\n you can break your application into as many XAPs as you like and use it to bring them back together.\r\n</span><span style=\"font-size:9.5pt; font-family:Consolas; color:#30332D\">DeploymentCatalog</span><span style=\"font-size:9.5pt; font-family:\"Segoe UI\",\"sans-serif\"; color:#30332D\"> downloads catalogs asynchronously and implements the async event pattern in\r\n order to allow you to monitor the download i.e. track completion, failures, etc. Because DeploymentCatalog is recomposable hower it is not\r\n<i>required</i> for you to do this, but we recommend you do. To use </span><span style=\"font-size:9.5pt; font-family:Consolas; color:#30332D\">DeploymentCatalog</span><span style=\"font-size:9.5pt; font-family:\"Segoe UI\",\"sans-serif\"; color:#30332D\"> with\r\n</span><span style=\"font-size:9.5pt; font-family:Consolas; color:#30332D\">CompositionInitializer</span><span style=\"font-size:9.5pt; font-family:\"Segoe UI\",\"sans-serif\"; color:#30332D\"> you must override the default configuration using\r\n</span><span style=\"font-size:9.5pt; font-family:Consolas; color:#30332D\">CompositionHost</span><span style=\"font-size:9.5pt; font-family:\"Segoe UI\",\"sans-serif\"; color:#30332D\"> otherwise\r\n</span><span style=\"font-size:9.5pt; font-family:Consolas; color:#30332D\">CompositionInitializer</span><span style=\"font-size:9.5pt; font-family:\"Segoe UI\",\"sans-serif\"; color:#30332D\"> will never see the downloaded parts.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:9.5pt; font-family:\"Segoe UI\",\"sans-serif\"; color:#30332D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">http://mef.codeplex.com/wikipage?title=DeploymentCatalog&referringTitle=OverridingHostConfig</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">So if you are building DeploymentCatalogs then how are they going to be available to the CompositionInitializer in a module?</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">I'm making the call to Initialize but again, it appears that CompositionInitializer is pulling from a different container than ImportingConstructor.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n</div>\r\n",
    "PostedDate": "2010-10-26T16:53:52.68-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513102",
    "ThreadId": "232387",
    "Html": "\r\n<p>We don't do anything to make them explicitly available to CompositionInitializer.&nbsp; The MefBootstrapper is creating an AggregateCatalog that everything is added to when download.&nbsp; The DeploymentCatalogs, then, are added to the aggregate catalog\r\n when download is completed.&nbsp;</p>\r\n<p>It appears for CompositionInitializer to the static container must be setup and it creates a new one if none is provided.&nbsp; Can you inspect the global container used by CompositionInitializer.SatisfyImports() and compare it to the CompositeContainer\r\n created in the MefBootstrapper?&nbsp; Since the bootstrapper isn't explicitly registering with the CompositionHost, you might try overriding the CreateContainer() to register the returned container with CompositionHost.Initialize().</p>\r\n<p>Bob</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-26T19:15:38-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513103",
    "ThreadId": "232387",
    "Html": "\r\n<p>Thanks.&nbsp; How do you go about looking at the Global Container SatisfyImports() pulls from?&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-26T19:22:58.52-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513368",
    "ThreadId": "232387",
    "Html": "\r\n<div class=\"WordSection1\">\r\n<div id=\"x_ThreadNotificationFooter\" style=\"border:none; border-top:solid #CCCCCC 1.0pt; padding:0in 0in 0in 0in\">\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">Ok, in trying your suggestion, I came up with the bootstrapper code below.  Everything is at a particular place to get the Container populated with everything\r\n needed.  Quite frankly I have to question why I need to put all the module parts in the central container as I really don’t want each module having parts to other modules unless I specifically specify it.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">At any rate, right now before I initialize the Shell, the this.Container contains all the Imports.  However, with this code,\r\n even though this.ModuleCatalog.Modules contains my modules, on drop 9 assemblies, I’m getting the exception that it can’t load my modules.  One thing to note</span><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\"> base</span><span style=\"font-size:9.5pt; font-family:Consolas\">.InitializeModules();</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">Fails to run.  </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">I get an exception that No Valid exports were found that match the constraint IModuleManager.  So digging through Prism, I found.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                   \r\n<span style=\"color:#2B91AF\">IModuleManager</span> manager = <span style=\"color:#2B91AF\">\r\nServiceLocator</span>.Current.GetInstance<<span style=\"color:#2B91AF\">IModuleManager</span>>();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                    manager.Run();</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">manager contains the Modules that were populated from my xaml file but the modules never load.  I know the file is right because if I go back to calling\r\n the internal CreateFromXaml, the modules load.  I’m just back to have the problem with SatisfyImports() not being able to resolve parts.  (Which is odd because I’m just trying to resolve parts that are Exported in the TruckStats.xap which is local.)</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">I have no idea if what I’ve done will solve the problem but for now I’m stuck with it not loading modules even though they are there.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">Here’s the bootstrapper code.  You’ll note I use _modulesToLoad to determine when all the modules have loaded and then I run InitializeShell and then try\r\n to load the modules.</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\">public</span><span style=\"font-size:9.5pt; font-family:Consolas\">\r\n<span style=\"color:blue\">class</span> <span style=\"color:#2B91AF\">Bootstrapper</span> :\r\n<span style=\"color:#2B91AF\">MefBootstrapper</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">    {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">private</span> <span style=\"color:blue\">const</span> <span style=\"color:blue\">\r\nstring</span> ModuleCatalogUri = <span style=\"color:#A31515\">\"/EyeCue;component/ModulesCatalog.xaml\"</span>;</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:#2B91AF\">AggregateCatalog</span> _aggregCat = <span style=\"color:blue\">\r\nnew</span> <span style=\"color:#2B91AF\">AggregateCatalog</span>();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:#2B91AF\">CompositionContainer</span> _moduleCompositionContainer;</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">object</span> _lock = <span style=\"color:blue\">new</span>\r\n<span style=\"color:blue\">object</span>();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">volatile</span> <span style=\"color:blue\">int</span> _modulesToLoad = 0;</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span>\r\n<span style=\"color:blue\">void</span> ConfigureAggregateCatalog()</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">this</span>.ModuleCatalog = CreateFromXaml(<span style=\"color:blue\">new</span>\r\n<span style=\"color:#2B91AF\">Uri</span>(ModuleCatalogUri, <span style=\"color:#2B91AF\">\r\nUriKind</span>.Relative));</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            _modulesToLoad =\r\n<span style=\"color:blue\">this</span>.ModuleCatalog.Modules.Count();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> module\r\n<span style=\"color:blue\">in</span> <span style=\"color:blue\">this</span>.ModuleCatalog.Modules)</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                _aggregCat.Catalogs.Add(CreateCatalog(module.Ref));</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                        </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span>\r\n<span style=\"color:blue\">void</span> ConfigureContainer()</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">this</span>.Container.ComposeExportedValue<<span style=\"color:#2B91AF\">ILoggerFacade</span>>(<span style=\"color:blue\">this</span>.Logger);</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">this</span>.Container.ComposeExportedValue<<span style=\"color:#2B91AF\">IModuleCatalog</span>>(<span style=\"color:blue\">this</span>.ModuleCatalog);</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">this</span>.Container.ComposeExportedValue<<span style=\"color:#2B91AF\">IServiceLocator</span>>(<span style=\"color:blue\">new</span>\r\n<span style=\"color:#2B91AF\">MefServiceLocatorAdapter</span>(<span style=\"color:blue\">this</span>.Container));</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:green\">//base.ConfigureContainer();</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span>\r\n<span style=\"color:#2B91AF\">IModuleCatalog</span> CreateModuleCatalog()</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:green\">// This just returns new ModuleCatalog()</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">return</span> <span style=\"color:blue\">base</span>.CreateModuleCatalog();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span>\r\n<span style=\"color:#2B91AF\">DependencyObject</span> CreateShell()</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">this</span>.Container.ComposeExportedValue<<span style=\"color:#2B91AF\">AggregateCatalog</span>>(_aggregCat);</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">this</span>.Container = <span style=\"color:#2B91AF\">CompositionHost</span>.Initialize(<span style=\"color:blue\">new</span>\r\n<span style=\"color:#2B91AF\">DeploymentCatalog</span>(), _aggregCat); <span style=\"color:green\">\r\n//add the current XAP.</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:#2B91AF\">CompositionInitializer</span>.SatisfyImports(<span style=\"color:blue\">this</span>);</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.Container.GetExportedValue<<span style=\"color:#2B91AF\">Shell</span>>();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span>\r\n<span style=\"color:blue\">void</span> InitializeModules()</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:green\">//base.InitializeModules();</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span>\r\n<span style=\"color:blue\">void</span> InitializeShell()</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:green\">// Only run when our modules are loaded.</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">if</span> (_modulesToLoad <= 0)</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\">#if</span><span style=\"font-size:9.5pt; font-family:Consolas\"> SILVERLIGHT</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">               \r\n<span style=\"color:#2B91AF\">App</span> _app = (<span style=\"color:#2B91AF\">App</span>)<span style=\"color:#2B91AF\">Application</span>.Current;</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                _app.InitializeRootVisual((<span style=\"color:#2B91AF\">Shell</span>)<span style=\"color:blue\">this</span>.Shell);</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\">#else</span><span style=\"font-size:9.5pt; font-family:Consolas\"></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:gray\">            Application.Current.MainWindow = (Shell)this.Shell;</span><span style=\"font-size:9.5pt; font-family:Consolas\"></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:gray\">            Application.Current.MainWindow.Show();</span><span style=\"font-size:9.5pt; font-family:Consolas\"></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\">#endif</span><span style=\"font-size:9.5pt; font-family:Consolas\"></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">               \r\n<span style=\"color:#2B91AF\">IShellController</span> _shellController = <span style=\"color:blue\">\r\nthis</span>.Container.GetExportedValue<<span style=\"color:#2B91AF\">IShellController</span>>();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                _shellController.Initialize();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:green\">//[Import]</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:green\">//public Shell Shell { get; set; }</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:green\">//[Import(typeof(IShellController))]</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:green\">//public IShellController ShellController { get; set; }</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">private</span> <span style=\"color:#2B91AF\">DeploymentCatalog</span> CreateCatalog(<span style=\"color:blue\">string</span> uri)</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">var</span> catalog = <span style=\"color:blue\">new</span>\r\n<span style=\"color:#2B91AF\">DeploymentCatalog</span>(uri);</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            catalog.DownloadCompleted += (s, e) => DownloadCompleted(s, e);</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            catalog.DownloadAsync();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">return</span> catalog;</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> DownloadCompleted(<span style=\"color:blue\">object</span> sender,\r\n<span style=\"color:#2B91AF\">AsyncCompletedEventArgs</span> e)</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">if</span> (e.Error != <span style=\"color:blue\">null</span>)</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">               \r\n<span style=\"color:#2B91AF\">AppCommands</span>.<span style=\"color:#2B91AF\">RaiseErrorMessage</span>.Send(<span style=\"color:blue\">new</span>\r\n<span style=\"color:#2B91AF\">AppRaiseErrorEvent</span>(e.Error, e.Error.Message));</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">else</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">               \r\n<span style=\"color:blue\">lock</span> (_lock)</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                    _modulesToLoad--;</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">               \r\n<span style=\"color:blue\">if</span> (_modulesToLoad <= 0)</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                    InitializeShell();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                   \r\n<span style=\"color:#2B91AF\">IModuleManager</span> manager = <span style=\"color:#2B91AF\">\r\nServiceLocator</span>.Current.GetInstance<<span style=\"color:#2B91AF\">IModuleManager</span>>();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                    manager.Run();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\"><summary></span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> Creates a </span><span style=\"color:gray\"><see cref=\"ModuleCatalog\"/></span><span style=\"color:green\"> from XAML.</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\"></summary></span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\"><param name=\"xamlStream\"><see cref=\"Stream\"/></span><span style=\"color:green\"> that contains the XAML declaration of the catalog.</span><span style=\"color:gray\"></param></span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\"><returns></span><span style=\"color:green\">An instance of\r\n</span><span style=\"color:gray\"><see cref=\"ModuleCatalog\"/></span><span style=\"color:green\"> built from the XAML.</span><span style=\"color:gray\"></returns></span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">private</span> <span style=\"color:#2B91AF\">ModuleCatalog</span> CreateFromXaml(<span style=\"color:#2B91AF\">Stream</span> xamlStream)</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">if</span> (xamlStream == <span style=\"color:blue\">null</span>)</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">               \r\n<span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> <span style=\"color:#2B91AF\">\r\nArgumentNullException</span>(<span style=\"color:#A31515\">\"xamlStream\"</span>);</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\">#if</span><span style=\"font-size:9.5pt; font-family:Consolas\"> SILVERLIGHT</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">string</span> xaml;</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">using</span> (System.IO.<span style=\"color:#2B91AF\">StreamReader</span> reader =\r\n<span style=\"color:blue\">new</span> System.IO.<span style=\"color:#2B91AF\">StreamReader</span>(xamlStream))</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                xaml = reader.ReadToEnd();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">return</span> <span style=\"color:#2B91AF\">XamlReader</span>.Load(xaml)\r\n<span style=\"color:blue\">as</span> <span style=\"color:#2B91AF\">ModuleCatalog</span>;</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\">#else</span><span style=\"font-size:9.5pt; font-family:Consolas\"></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:gray\">            return XamlReader.Load(xamlStream) as ModuleCatalog;</span><span style=\"font-size:9.5pt; font-family:Consolas\"></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\">#endif</span><span style=\"font-size:9.5pt; font-family:Consolas\"></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\"><summary></span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> Creates a </span><span style=\"color:gray\"><see cref=\"ModuleCatalog\"/></span><span style=\"color:green\"> from a XAML included as an Application Resource.</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\"></summary></span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\"><param name=\"builderResourceUri\"></span><span style=\"color:green\">Relative\r\n</span><span style=\"color:gray\"><see cref=\"Uri\"/></span><span style=\"color:green\"> that identifies the XAML included as an Application Resource.</span><span style=\"color:gray\"></param></span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:gray\">///</span><span style=\"color:green\"> </span><span style=\"color:gray\"><returns></span><span style=\"color:green\">An instance of\r\n</span><span style=\"color:gray\"><see cref=\"ModuleCatalog\"/></span><span style=\"color:green\"> build from the XAML.</span><span style=\"color:gray\"></returns></span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">private</span> <span style=\"color:#2B91AF\">ModuleCatalog</span> CreateFromXaml(<span style=\"color:#2B91AF\">Uri</span> builderResourceUri)</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">var</span> streamInfo = System.Windows.<span style=\"color:#2B91AF\">Application</span>.GetResourceStream(builderResourceUri);</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">if</span> ((streamInfo != <span style=\"color:blue\">null</span>) && (streamInfo.Stream !=\r\n<span style=\"color:blue\">null</span>))</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">               \r\n<span style=\"color:blue\">return</span> CreateFromXaml(streamInfo.Stream);</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">            }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">return</span> <span style=\"color:blue\">null</span>;</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">    }</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2010-10-27T06:49:43.59-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513477",
    "ThreadId": "232387",
    "Html": "\r\n<p>There are a few things I see in the bootstrapper that I wouldn't expect to need to be done here, such as setting up a DeploymentCatalog.&nbsp; You should just be able to specify the contents of the ModuleCatalog and Prism will take care of downloading and\r\n initializing your modules.</p>\r\n<p>If you haven't seen the ModularityWithMef Quickstart I would encourage you to take a look at that.&nbsp; It actually shows a number of ways modularity can be accomplished, but the way that Modules B, E, and F are registered in this quickstart should be close\r\n to what you're trying to accomplish.&nbsp; These are specified in the ModulesCatalog.xaml and are downloaded internally using a DeploymentCatalog.</p>\r\n<p>The bootstrapper also shouldn't need to register services in a container that are registered by the base MefBootstrapper, such as the IModuleCatalog or IServiceLocator.</p>\r\n<p>We also have tended to use the CompositionInitializer but instead resolve the view (or view model) from the container via IServiceLocator, if needed.&nbsp; Let me put together a quick sample that uses CompositionInitializer and show you how I can see this\r\n all fitting together, which will hopefully help.</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-27T09:24:12.587-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513487",
    "ThreadId": "232387",
    "Html": "\r\n<div class=\"WordSection1\">\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">Thanks.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">I’m not partial to CompositionInitializer.  I can try the IServiceLocator to get a container  avenue but do you have something similar to how I could get\r\n an instance of it in something like a ViewModelLocator?</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">As for the DeploymentCatalog, if I don’t use it in the Initialize things don’t work.  Plus I got that from the MEF documents which state to do that as it’s\r\n the only way things will be available a separate .xap file.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">Yes, I’ve looked at the ModularityWithMEF quite extensively.  The only problem is there are no views or viewmodels in it that really do anything a real\r\n app would do.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">I’m going to put a controller, viewModel and view in moduleE and see if I can get you a repro.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<div>\r\n<div style=\"border:none; border-top:solid #B5C4DF 1.0pt; padding:3.0pt 0in 0in 0in\">\r\n<p class=\"MsoNormal\"><b><span style=\"font-size:10.0pt; font-family:\"Tahoma\",\"sans-serif\"\">From:</span></b><span style=\"font-size:10.0pt; font-family:\"Tahoma\",\"sans-serif\"\"> brumfb [mailto:notifications@codeplex.com]\r\n<br>\r\n<b>Sent:</b> Wednesday, October 27, 2010 12:24 PM<br>\r\n<b>To:</b> kkfrost@hotmail.com<br>\r\n<b>Subject:</b> Re: Drop 10 introduces an error loading a Module [CompositeWPF:232387]</span></p>\r\n</div>\r\n</div>\r\n<p class=\"MsoNormal\"> </p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">From: brumfb</span></p>\r\n<div id=\"x_ThreadNotificationPostBody\" style=\"margin-bottom:24.0pt\">\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">There are a few things I see in the bootstrapper that I wouldn't expect to need to be done here, such as setting up a DeploymentCatalog.  You should just be able to specify the contents\r\n of the ModuleCatalog and Prism will take care of downloading and initializing your modules.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">If you haven't seen the ModularityWithMef Quickstart I would encourage you to take a look at that.  It actually shows a number of ways modularity can be accomplished, but the way that\r\n Modules B, E, and F are registered in this quickstart should be close to what you're trying to accomplish.  These are specified in the ModulesCatalog.xaml and are downloaded internally using a DeploymentCatalog.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">The bootstrapper also shouldn't need to register services in a container that are registered by the base MefBootstrapper, such as the IModuleCatalog or IServiceLocator.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\">We also have tended to use the CompositionInitializer but instead resolve the view (or view model) from the container via IServiceLocator, if needed.  Let me put together a quick sample\r\n that uses CompositionInitializer and show you how I can see this all fitting together, which will hopefully help.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"\"> </span></p>\r\n</div>\r\n<div id=\"x_ThreadNotificationFooter\" style=\"border:none; border-top:solid #CCCCCC 1.0pt; padding:0in 0in 0in 0in\">\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">Read the\r\n<a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=232387&ANCHOR#Post513477\">\r\nfull discussion online</a>.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">To add a post to this discussion, reply to this email (<a href=\"mailto:CompositeWPF@discussions.codeplex.com?subject=[CompositeWPF:232387]\">CompositeWPF@discussions.codeplex.com</a>)</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">To start a new discussion for this project, email\r\n<a href=\"mailto:CompositeWPF@discussions.codeplex.com\">CompositeWPF@discussions.codeplex.com</a></span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">You are receiving this email because you subscribed to this discussion on CodePlex. You can\r\n<a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/232387\">unsubscribe</a> on CodePlex.com.</span></p>\r\n<p><span style=\"font-size:9.0pt; font-family:\"Verdana\",\"sans-serif\"; color:gray\">Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at CodePlex.com</span></p>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2010-10-27T09:48:02.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513505",
    "ThreadId": "232387",
    "Html": "\r\n<p>Ok, I've modified your ModularityWithMef and uploaded it to my skydrive.</p>\r\n<p><a href=\"http://cid-ff05a29e13af7bfd.office.live.com/self.aspx/.Public/ModularityWithMef.rar\">http://cid-ff05a29e13af7bfd.office.live.com/self.aspx/.Public/ModularityWithMef.rar</a></p>\r\n<p>Check out ModuleE.&nbsp; This is not 100% exactly what my real app is like but it's close and gets you in the right direction.&nbsp; I added a controller, a ViewModle and a View.</p>\r\n<p>The controller imports the ViewModel and set's it's controller property.</p>\r\n<p>Then I go to try and register the ModuleEView with a Region.&nbsp; Inside the ModuleEView constructor I put a call to CompositionInitializer.SatisfyImports(this);</p>\r\n<p>It fails indicating it can't find a contract for ModuleEViewModel but you see the ImportConstructor for ModuleEController resolved it just fine.</p>\r\n<p>Ok, this gets to where I was a couple of days ago and why'll you'll see the need for something similiar the last bootstrapper code I posted.</p>\r\n<p>I'm to the point where CompositionInitializer.SatisfyImports(this); doesn't fail in this area anymore, however it is somehow getting a different instance of my viewmodels than what ImportConstructor does.</p>\r\n<p>When you get it to where this sample will not crash on SatisfyImport().</p>\r\n<p>Set a break point inside get set of the ModuleEView.&nbsp; If you get where I'm at you'll notice that it's ModuleEController property is null even though you just set it in the ModuleEController constructor.</p>\r\n<p>Hence it's pulling from a different container and then you'll be where I'm at now.</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-27T10:18:34.17-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513534",
    "ThreadId": "232387",
    "Html": "\r\n<p>I'll take a look.</p>\r\n<p>In the meantime, here's a sample of how I could see using modularity with views and compositioninitialize.</p>\r\n<p><a href=\"http://cid-ab22f9941310ec60.office.live.com/richupload.aspx/Public\">http://cid-ab22f9941310ec60.office.live.com/richupload.aspx/Public</a></p>\r\n<p>-b</p>\r\n",
    "PostedDate": "2010-10-27T10:59:17.65-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513562",
    "ThreadId": "232387",
    "Html": "\r\n<div class=\"WordSection1\">\r\n<div id=\"x_ThreadNotificationFooter\" style=\"border:none; border-top:solid #CCCCCC 1.0pt; padding:0in 0in 0in 0in\">\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">Finally the code below appears to be working.  When I run\r\n</span><span style=\"font-size:9.5pt; font-family:Consolas; color:#2B91AF\">CompositionInitializer</span><span style=\"font-size:9.5pt; font-family:Consolas\">.SatisfyImports(<span style=\"color:blue\">this</span>); in my ViewModelLocator, it appears to be getting\r\n the correct Parts.</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">This works when I have the modules set to load WhenAvailable.  I’m curious as to whether it will work with OnDemand modules.</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">Also, why should all the exports of a module have to go into a global container.  I may have a module that just needs to import parts from my common assembly\r\n and then it’s own internal exports.  Have any suggestions on this.</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">   \r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> <span style=\"color:#2B91AF\">\r\nBootstrapper</span> : <span style=\"color:#2B91AF\">MefBootstrapper</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">    {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">private</span> <span style=\"color:blue\">const</span> <span style=\"color:blue\">\r\nstring</span> ModuleCatalogUri = <span style=\"color:#A31515\">\"/EyeCue;component/ModulesCatalog.xaml\"</span>;</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span>\r\n<span style=\"color:#2B91AF\">CompositionContainer</span> CreateContainer()</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">var</span> _container = <span style=\"color:blue\">base</span>.CreateContainer();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">this</span>.AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span>\r\n<span style=\"color:#2B91AF\">AssemblyCatalog</span>(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2B91AF\">Bootstrapper</span>).Assembly));</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">this</span>.AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span>\r\n<span style=\"color:#2B91AF\">AssemblyCatalog</span>(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2B91AF\">GlobalValues</span>).Assembly));</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:#2B91AF\">CompositionHost</span>.Initialize(_container);</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">return</span> _container;</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span>\r\n<span style=\"color:#2B91AF\">IModuleCatalog</span> CreateModuleCatalog()</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:#2B91AF\">IModuleCatalog</span> _modCat = Microsoft.Practices.Prism.Modularity.<span style=\"color:#2B91AF\">ModuleCatalog</span>.CreateFromXaml(<span style=\"color:blue\">new</span>\r\n<span style=\"color:#2B91AF\">Uri</span>(ModuleCatalogUri, <span style=\"color:#2B91AF\">\r\nUriKind</span>.Relative));</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">return</span> _modCat;</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span>\r\n<span style=\"color:#2B91AF\">DependencyObject</span> CreateShell()</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.Container.GetExportedValue<<span style=\"color:#2B91AF\">Shell</span>>();            </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span>\r\n<span style=\"color:blue\">void</span> InitializeModules()</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">           \r\n<span style=\"color:blue\">base</span>.InitializeModules();            </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">       \r\n<span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span>\r\n<span style=\"color:blue\">void</span> InitializeShell()</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        {</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\">#if</span><span style=\"font-size:9.5pt; font-family:Consolas\"> SILVERLIGHT</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">               \r\n<span style=\"color:#2B91AF\">App</span> _app = (<span style=\"color:#2B91AF\">App</span>)<span style=\"color:#2B91AF\">Application</span>.Current;</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                _app.InitializeRootVisual(((<span style=\"color:#2B91AF\">Shell</span>)<span style=\"color:blue\">this</span>.Shell));</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\">#else</span><span style=\"font-size:9.5pt; font-family:Consolas\"></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:gray\">            Application.Current.MainWindow = (Shell)this.Shell;</span><span style=\"font-size:9.5pt; font-family:Consolas\"></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:gray\">            Application.Current.MainWindow.Show();</span><span style=\"font-size:9.5pt; font-family:Consolas\"></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:blue\">#endif</span><span style=\"font-size:9.5pt; font-family:Consolas\"></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">               \r\n<span style=\"color:#2B91AF\">IShellController</span> _shellController = <span style=\"color:blue\">\r\nthis</span>.Container.GetExportedValue<<span style=\"color:#2B91AF\">IShellController</span>>();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">                _shellController.Initialize();</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        }</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">        </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">    }</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2010-10-27T12:08:42.743-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513573",
    "ThreadId": "232387",
    "Html": "\r\n<div class=\"WordSection1\">\r\n<div id=\"x_ThreadNotificationFooter\" style=\"border:none; border-top:solid #CCCCCC 1.0pt; padding:0in 0in 0in 0in\">\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">I went back and modified the ModularityWithMef bootstrapper and it now works as well.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">Can I send same it to get added or have you guys update your sample?  What we’re doing here is going to be pretty common place with LOB type apps.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">I’d love for this to be available so nobody else wastes as much time as I did on this.</span></p>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2010-10-27T12:27:02.693-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513589",
    "ThreadId": "232387",
    "Html": "\r\n<p>Also, the issue I originally opened in regards to the Drop 10 assemblies throwing the following exception still exists.</p>\r\n<p>Unable to locate the module with type 'EyeCue.Modules.TruckStats.TruckStatsModule, EyeCue.Modules.TruckStats, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' among the exported modules. Make sure the module name in the module catalog matches that\r\n specified on ModuleExportAttribute for the module type.</p>\r\n<p>&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ModuleInitializer.HandleModuleInitializationError(ModuleInfo moduleInfo, String assemblyName, Exception exception)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ModuleInitializer.Initialize(ModuleInfo moduleInfo)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ModuleManager.InitializeModule(ModuleInfo moduleInfo)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ModuleManager.LoadModulesThatAreReadyForLoad()<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ModuleManager.IModuleTypeLoader_LoadModuleCompleted(Object sender, LoadModuleCompletedEventArgs e)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.MefExtensions.Modularity.MefXapModuleTypeLoader.RaiseLoadModuleCompleted(LoadModuleCompletedEventArgs e)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.MefExtensions.Modularity.MefXapModuleTypeLoader.RaiseLoadModuleCompleted(ModuleInfo moduleInfo, Exception error)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.MefExtensions.Modularity.MefXapModuleTypeLoader.HandleDownloadCompleted(DeploymentCatalog deploymentCatalog, AsyncCompletedEventArgs e)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.MefExtensions.Modularity.MefXapModuleTypeLoader.DeploymentCatalog_DownloadCompleted(Object sender, AsyncCompletedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.ComponentModel.Composition.Hosting.DeploymentCatalog.OnDownloadCompleted(AsyncCompletedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.ComponentModel.Composition.Hosting.DeploymentCatalog.HandleOpenReadCompleted(Object sender, OpenReadCompletedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Net.WebClient.OnOpenReadCompleted(OpenReadCompletedEventArgs e)<br>\r\n&nbsp;&nbsp; at System.Net.WebClient.OpenReadOperationCompleted(Object arg)</p>\r\n<p>If I go back to Drop 9 everything is fine.</p>\r\n<p>I put all my assemblies in a folder called Prism 4 and reference to there.&nbsp; Then I just update the files.&nbsp; I've cleaned the solution and went and deleted all the bin &amp; Obj directories, rebuilt.</p>\r\n<p>It's got to be some kind of bug because the module's load fine and are fully functiontional.</p>\r\n",
    "PostedDate": "2010-10-27T12:53:36.387-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513590",
    "ThreadId": "232387",
    "Html": "\r\n<p>Also, the relevant portion of my ModulesCatalog.xaml file.</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Modularity:ModuleInfo Ref=&quot;EyeCue.Modules.AppSettings.xap&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleName=&quot;EyeCue.Modules.AppSettings&quot;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleType=&quot;EyeCue.Modules.AppSettings.AppSettingsModule, EyeCue.Modules.AppSettings, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot; /&gt;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Modularity:ModuleInfo Ref=&quot;EyeCue.Modules.TruckStats.xap&quot;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleName=&quot;EyeCue.Modules.TruckStats&quot;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleType=&quot;EyeCue.Modules.TruckStats.TruckStatsModule, EyeCue.Modules.TruckStats, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot; /&gt;</p>\r\n",
    "PostedDate": "2010-10-27T12:55:02.087-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513622",
    "ThreadId": "232387",
    "Html": "\r\n<p>kfrosty,</p>\r\n<p>Regarding updating the MEF modularity quickstart.&nbsp; We're at the end of our cycle here, so we won't be making any code changes.&nbsp; Also the CompositionInitializer isn't something people necessarily use, particularly if they register view types with\r\n region or if they use the Region navigation bits.&nbsp; These will automatically build up the views in the container that Prism has already configured.&nbsp; I'll put a blog post together on this or post something to the Codeplex site showing how you can use\r\n these together.</p>\r\n<p>Regarding the exception you're seeing.&nbsp; What if you change your ModuleNames to AppSettings and TruckStats?&nbsp; E.g.:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Modularity:ModuleInfo Ref=&quot;EyeCue.Modules.AppSettings.xap&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleName=&quot;AppSettings&quot;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleType=&quot;EyeCue.Modules.AppSettings.AppSettingsModule, EyeCue.Modules.AppSettings, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot; /&gt;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Modularity:ModuleInfo Ref=&quot;EyeCue.Modules.TruckStats.xap&quot;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleName=&quot;TruckStats&quot;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleType=&quot;EyeCue.Modules.TruckStats.TruckStatsModule, EyeCue.Modules.TruckStats, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot; /&gt;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-27T14:10:53.037-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513657",
    "ThreadId": "232387",
    "Html": "\r\n<div class=\"WordSection1\">\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">No, changing the ModuleName doesn't resolve the problem.  It looks as if the modules still load and come up correctly but I still get the exception.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">Actually I decided to check the Output window and you even see the symbols loading for the Modules.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.0pt; font-family:Consolas\">'iexplore.exe' (Silverlight): Loaded\r\n<b>'EyeCue.Modules.AppSettings'</b>, Symbols loaded.</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.0pt; font-family:Consolas\">'iexplore.exe' (Silverlight): Loaded\r\n<b>'EyeCue.Modules.TruckStats'</b>, Symbols loaded.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n</div>\r\n",
    "PostedDate": "2010-10-27T15:31:52.553-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513700",
    "ThreadId": "232387",
    "Html": "\r\n<p>How are you exporting your modules?&nbsp; What's the ExportModule attribute look like?</p>\r\n",
    "PostedDate": "2010-10-27T17:47:39.19-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513701",
    "ThreadId": "232387",
    "Html": "\r\n<div class=\"WordSection1\">\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">[<span style=\"color:#2B91AF\">ModuleExport</span>(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2B91AF\">TruckStatsModule</span>), InitializationMode\r\n = <span style=\"color:#2B91AF\">InitializationMode</span>.WhenAvailable)]</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">   \r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> <span style=\"color:#2B91AF\">\r\nTruckStatsModule</span> : <span style=\"color:#2B91AF\">IModule</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:#2B91AF\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">[<span style=\"color:#2B91AF\">ModuleExport</span>(<span style=\"color:blue\">typeof</span>(<span style=\"color:#2B91AF\">AppSettingsModule</span>), InitializationMode\r\n = <span style=\"color:#2B91AF\">InitializationMode</span>.WhenAvailable)]</span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas\">   \r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> <span style=\"color:#2B91AF\">\r\nAppSettingsModule</span> : <span style=\"color:#2B91AF\">IModule</span></span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:#2B91AF\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:#2B91AF\"> </span></p>\r\n<p class=\"MsoNormal\" style=\"text-autospace:none\"><span style=\"font-size:9.5pt; font-family:Consolas; color:#2B91AF\"> </span></p>\r\n</div>\r\n",
    "PostedDate": "2010-10-27T17:49:06.953-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513709",
    "ThreadId": "232387",
    "Html": "\r\n<p>Try this instead:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Modularity:ModuleInfo Ref=&quot;EyeCue.Modules.AppSettings.xap&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleName=&quot;<strong>AppSettingsModule</strong>&quot;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleType=&quot;EyeCue.Modules.AppSettings.AppSettingsModule, EyeCue.Modules.AppSettings, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot; /&gt;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Modularity:ModuleInfo Ref=&quot;EyeCue.Modules.TruckStats.xap&quot;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleName=&quot;<strong>TruckStatsModule</strong>&quot;\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ModuleType=&quot;EyeCue.Modules.TruckStats.TruckStatsModule, EyeCue.Modules.TruckStats, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot; /&gt;</p>\r\n<p>&nbsp;</p>\r\n<p>Bold indicates change.</p>\r\n",
    "PostedDate": "2010-10-27T18:23:53.623-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513710",
    "ThreadId": "232387",
    "Html": "\r\n<div class=\"WordSection1\">\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">FYI.  I have to change the assemblies each time you ask me to try this and I will if I have too.  However, what you are asking me to do, wouldn't that indicate\r\n a bug with Prism?</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">Why would it matter what the name is?  Also, even if that were the issue, the modules still load and prism is throwing exception claiming that it couldn't\r\n find them.</span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\"> </span></p>\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">The name of the modules are EyeCue.Modules.TruckStatModule & .AppSettingModule</span></p>\r\n</div>\r\n",
    "PostedDate": "2010-10-27T18:28:36.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513712",
    "ThreadId": "232387",
    "Html": "\r\n<div class=\"WordSection1\">\r\n<p class=\"MsoNormal\"><span style=\"font-size:11.0pt; font-family:\"Calibri\",\"sans-serif\"; color:#1F497D\">The last change seems to gotten rid of the problem.  I would still consider this a bug if nothing else the exception being shown should be more accurate\r\n instead stating the module wasn't loaded.</span></p>\r\n</div>\r\n",
    "PostedDate": "2010-10-27T18:37:46.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]