[
  {
    "Id": "115109",
    "ThreadId": "34664",
    "Html": "I have attempted configuring a ContextMenu as a region using XAML&nbsp;but am running into a problem where the region is not registered until the ContextMenu is actually shown. I have moved the ContextMenu to the resources section of the window but still find that the region is not registered until the ContextMenu is shown.<br>\r\n<br>\r\nIt appears that attached properties on a context menu are not fired until the ContextMenu is shown even if the ContextMenu has successfully been instantiated in the resources section.<br>\r\n<br>\r\nI would like to be able to add items to a ContextMenu from a module.<br>\r\nI have thought of using a service but run into the same problem with attached properties not firing until the ContextMenu is shown issue if I use a similar mechanism to the RegionManager and XAML.<br>\r\n<br>\r\nAny ideas on how I can add items to a ContextMenu from a module?\r\n",
    "PostedDate": "2008-09-01T04:12:21.713-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115254",
    "ThreadId": "34664",
    "Html": "KerryRJ,<br>\r\n<br>\r\nI believe that your region is not registered because of the way it was instatiated. If your control with the target ContextMenu, which we will call targetControl, is declared in Xaml on your main view, which we'll call parentView, then this would explain why the targetView's region has not been registered. Changing this do that your module registers both the parentView and the targetView then this should resolve your issue.<br>\r\n<br>\r\nI do not know if this fits your scenario without code from your end, but if I am describing you use case, it is only because I ran into the same issue myself. Below is a link to&nbsp;another post that describes this a little more. I entered it today.<br>\r\n<br>\r\n<a href=\"http://www.codeplex.com/CompositeWPF/Thread/View.aspx?ThreadId=34370\">http://www.codeplex.com/CompositeWPF/Thread/View.aspx?ThreadId=34370</a><br>\r\n<br>\r\nHope this helps,<br>\r\n<br>\r\nAndres Olivares\r\n",
    "PostedDate": "2008-09-01T17:18:50.623-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115563",
    "ThreadId": "34664",
    "Html": "Hi Andreas,<br>\r\n<br>\r\nJust to clarify with an example<br>\r\n<br>\r\n&lt;Window x:Class=&quot;ServiceManagement.Window1&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:cal=&quot;http://www.codeplex.com/CompositeWPF&quot;<br>\r\n&nbsp;&nbsp;&nbsp; Title=&quot;Window1&quot; Height=&quot;300&quot; Width=&quot;300&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;DockPanel LastChildFill=&quot;True&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;TabControl DockPanel.Dock=&quot;Bottom&quot; cal:RegionManager.RegionName=&quot;Test&quot; TabStripPlacement=&quot;Bottom&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;TabControl.ItemContainerStyle&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;Style TargetType=&quot;{x:Type TabItem}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;Setter Property=&quot;Header&quot; Value=&quot;{Binding Header}&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/Style&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/TabControl.ItemContainerStyle&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/TabControl&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;ListView Name=&quot;listView&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;ListView.View&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;GridView&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;GridViewColumn x:Name=&quot;gridViewColumnNumber&quot; Header=&quot;Number&quot; DisplayMemberBinding=&quot;{Binding XPath=@number}&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/GridView&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/ListView.View&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;ListView.ContextMenu&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;ContextMenu<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Name=&quot;documentsContextMenu&quot;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; DisplayMemberPath=&quot;@name&quot;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; cal:RegionManager.RegionName=&quot;TestMenu&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/ListView.ContextMenu&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/ListView&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/DockPanel&gt;<br>\r\n&lt;/Window&gt;<br>\r\n<br>\r\nThis window is an example of the xaml used for my shell.<br>\r\nThe toolbar region &quot;Test&quot; is visible from the region manager when I load a module, but the ContextMenu region &quot;TestMenu&quot; is not visible from the module using the RegionManager.<br>\r\nStepping through the RegionManager attached properties shows that the region in a context menu is only registered when the context menu is about to be displayed.<br>\r\n<br>\r\nI have moved the ContextMenu to the Resources section of the shell window. Debugging shows that the ContextMenu exists in the Resources section but does not exist in the RegionManager until it is about to be displayed.<br>\r\n<br>\r\nI want modules to add MenuItems to this ContextMenu when the module is loaded using the RegionManager.<br>\r\n",
    "PostedDate": "2008-09-03T00:13:47.92-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115746",
    "ThreadId": "34664",
    "Html": "KerryRJ,<br>\r\n<br>\r\n<p>This was a tricky one. The problem with this issue is that WPF does not have a relationship between objects and there property values, but this might be an all out separate discussion all together. nonetheless, I ran into the same problems you encountered so i choose to make your issue work with a little elbow grease: manual region attachment.</p>\r\n<p>The only change I made to the Xaml was remove [<strong>cal:RegionManager.RegionName=&quot;TestMenu&quot;</strong>] from the ContextMenu.</p>\r\n<p><strong>// Shell.cs</strong><br>\r\nnamespace ServiceManagement<br>\r\n{<br>\r\n&nbsp; using System.Windows;<br>\r\n&nbsp; using Microsoft.Practices.Composite.Wpf.Commands;<br>\r\n&nbsp; using Microsoft.Practices.Composite.Regions;</p>\r\n<p>&nbsp; /// &lt;summary&gt;<br>\r\n&nbsp; /// Interaction logic for Shell.xaml<br>\r\n&nbsp; /// &lt;/summary&gt;<br>\r\n&nbsp; public partial class Shell<br>\r\n&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; internal const string TestMenu = &quot;TestMenu&quot;;</p>\r\n<p>&nbsp;&nbsp;&nbsp; public static readonly DelegateCommand&lt;object&gt; ShowMessageCommand = <br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DelegateCommand&lt;object&gt;(ShowMessage);</p>\r\n<p>&nbsp;&nbsp;&nbsp; public Shell(IRegionManager regionManager)<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br>\r\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Manually creating new region</em><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>regionManager.AttachNewRegion(listView.ContextMenu, TestMenu);<br>\r\n</strong>&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp; static void ShowMessage(object value)<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string message = &quot;Do you see me&quot;;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MessageBox.Show(message, &quot;Manual...&quot;);<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp; }<br>\r\n}</p>\r\n<p><strong>// Bootstrapper.cs</strong><br>\r\nnamespace ServiceManagement<br>\r\n{<br>\r\n&nbsp; using System.Windows.Controls;<br>\r\n&nbsp; using System.Windows;<br>\r\n&nbsp; using Microsoft.Practices.Composite.Modularity;<br>\r\n&nbsp; using Microsoft.Practices.Composite.UnityExtensions;<br>\r\n&nbsp; using Microsoft.Practices.Composite.Regions;</p>\r\n<p>&nbsp; internal class Bootstrapper: UnityBootstrapper<br>\r\n&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; protected override IModuleEnumerator GetModuleEnumerator()<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new StaticModuleEnumerator();<br>\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp; protected override DependencyObject CreateShell()<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Shell resolution<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shell shell = Container.Resolve&lt;Shell&gt;();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Regionalization<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IRegionManager regionManager = Container.Resolve&lt;IRegionManager&gt;();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Getting menu items from somewhere<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MenuItem item = GetTestMenuItem();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Find manually created region<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IRegion region = regionManager.Regions[Shell.TestMenu];<br>\r\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add and activate view</em><br>\r\n<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; region.Add(item);</strong></p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shell.Show();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return shell;<br>\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp; static MenuItem GetTestMenuItem()<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new MenuItem<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Header = &quot;Do Something&quot;,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Command = Shell.ShowMessageCommand,<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp; }<br>\r\n}</p>\r\n<p>So basically while the Shell is being resolved, it attaches a region to the ContextMenu of the ListView (you should check for a null ContextMenu). After the Shell is resolved, the Bootstrapper adds the dynamic MenuItem.</p>\r\n<p>Let me know if this solution works for you,</p>\r\n<p>Andres Olivares</p>\r\n",
    "PostedDate": "2008-09-03T11:09:07.03-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "116034",
    "ThreadId": "34664",
    "Html": "Andres<br>\r\n<br>\r\nThis little line<br>\r\n<strong>regionManager.AttachNewRegion(listView.ContextMenu, TestMenu);</strong><br>\r\nworks wonders.<br>\r\n<br>\r\nThank you so very much<br>\r\n<br>\r\n",
    "PostedDate": "2008-09-04T07:59:06.6-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "160642",
    "ThreadId": "34664",
    "Html": "I agree. This little line works wonders but the method isn’t anymore available in Composite WPF 2. Does anybody have an idea how to get this scenario working with the new CAL libraries?<br>\r\n<br>\r\nI'm using this approach in my project <a href=\"http://www.codeplex.com/CompositeExtensions\">www.codeplex.com/CompositeExtensions</a>.<br>\r\n<br>\r\njbe\r\n",
    "PostedDate": "2009-02-22T10:10:18.88-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "160926",
    "ThreadId": "34664",
    "Html": "The issue is caused because the RegionManager attached property is not flowing down to context menues (nor the shell is the parent of the context menu).<br>\r\n<br>\r\njbe, another way to workaround this, which also works in Prism V2, is to keep the original XAML as it was (keep the region name property on the context menu), and in the code behind for the window manually set the RegionManager attached property:<br>\r\n<br>\r\n<p><strong>// Shell.cs</strong><br>\r\nnamespace ServiceManagement<br>\r\n{<br>\r\n  using System.Windows;<br>\r\n  using Microsoft.Practices.Composite.Wpf.Commands;<br>\r\n  using Microsoft.Practices.Composite.Regions;</p>\r\n<p>  /// &lt;summary&gt;<br>\r\n  /// Interaction logic for Shell.xaml<br>\r\n  /// &lt;/summary&gt;<br>\r\n  public partial class Shell<br>\r\n  {</p>\r\n<p>    public Shell(IRegionManager regionManager)<br>\r\n    {<br>\r\n      InitializeComponent();<br>\r\n<br>\r\n<span style=\"color:#008000;font-size:13px\"><strong>        // manually setting the region manager for the context menu (because it is not a logical child of the shell)</strong></span><span style=\"font-size:13px\">\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p><strong><span style=\"color:#2b91af;font-size:13px\">        RegionManager</span><span style=\"font-size:13px\">.SetRegionManager(</span><span style=\"color:#0000ff;font-size:13px\">this</span></strong><span style=\"font-size:13px\"><strong>.documentsContextMenu, regionManager);</strong>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</span></p>\r\n<p>    }<br>\r\n  }<br>\r\n}<br>\r\n<br>\r\nI hope this helps,<br>\r\nJulian Dominguez<br>\r\n<a href=\"http://blogs.southworks.net/jdominguez\">http://blogs.southworks.net/jdominguez</a></p>\r\n",
    "PostedDate": "2009-02-23T05:41:41.93-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "161801",
    "ThreadId": "34664",
    "Html": "Hi Julian!<br>\r\n<br>\r\nThanks a lot. Your approach works in my scenario.<br>\r\n<br>\r\njbe\r\n",
    "PostedDate": "2009-02-25T00:43:41.12-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]