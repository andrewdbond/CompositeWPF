[
  {
    "Id": "853099",
    "ThreadId": "360768",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I have some code that I wrote that helps registering types when using Unity.</p>\r\n<p>I found it quite annoying to go and say Container.Register(...) the whole time. I ended up with having a lot of lines of code that just go and say Container.Register(...) for example:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ModuleA : IModule\n{\n\t<span style=\"color:blue\">public</span> ModuleA(IUnityContainer container)\n\t{\n\t\tContainer = container;\n\t}\n\t\n\t<span style=\"color:blue\">private</span> IUnityContainer Container { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\n\t\n\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()\n\t{\n\t\tContainer.Register&lt;Type1&gt;();\n\t\tContainer.Register&lt;IType2, Type2&gt;();\n\t\tContainer.Register&lt;Type3&gt;(<span style=\"color:blue\">new</span> ContainerControlledLifetimeManager());\n\t\tContainer.Register&lt;Type4&gt;(<span style=\"color:#a31515\">&quot;Type4&quot;</span>);\n\t}\n}\n</pre>\r\n</div>\r\n<p></p>\r\n<p>What I wanted was the following:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ModuleA : IModule\n{\n\t<span style=\"color:blue\">public</span> ModuleA(IUnityContainer container)\n\t{\n\t\tContainer = container;\n\t}\n\t\n\t<span style=\"color:blue\">private</span> IUnityContainer Container { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\n\t\n\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()\n\t{\n\t\tContainer.FindAndRegisterTypes(GetType.Module);\n\t}\n}\n</pre>\r\n</div>\r\nThe only difference will be then to have the types do the following:\r\n<p></p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[RegisteredType]\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Type1 { }\n\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">interface</span> IType2 { }\n\n[RegisteredType(From = <span style=\"color:blue\">typeof</span>(IType2)]\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Type2 : IType2 { }\n\n[RegisteredType(IsContainerControlled = <span style=\"color:blue\">true</span>)]\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Type3 { }\n\n[RegisteredType(Name = <span style=\"color:#a31515\">&quot;Type4&quot;</span>)]\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Type4 { }\n\n</pre>\r\n</div>\r\n<p></p>\r\n<p>The code to do this will be:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">class</span> UnityContainerExtensions\n{\n\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> FindAndRegisterTypes(<span style=\"color:blue\">this</span> IUnityContainer container, Module module)\n\t{\n\t\t<span style=\"color:blue\">var</span> types = module.GetTypes()\n\t\t\t.Where(x =&gt; x.GetRegisteredTypeAttribute() != <span style=\"color:blue\">null</span>)\n\t\t\t.ToArray();\n\n\t\t<span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> type <span style=\"color:blue\">in</span> types)\n\t\t{\n\t\t\t<span style=\"color:blue\">var</span> attribute = type.GetRegisteredTypeAttribute();\n\t\t\t<span style=\"color:blue\">if</span> (attribute.IsContainerControlled)\n\t\t\t\tcontainer.RegisterType(attribute.From, type, attribute.Name, <span style=\"color:blue\">new</span> ContainerControlledLifetimeManager());\n\t\t\t<span style=\"color:blue\">else</span>\n\t\t\t\tcontainer.RegisterType(attribute.From, type, attribute.Name);\n\t\t}\n\t}\n\n\t<span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> RegisteredTypeAttribute GetRegisteredTypeAttribute(<span style=\"color:blue\">this</span> Type type)\n\t{\n\t\t<span style=\"color:blue\">return</span> type.GetCustomAttributes(<span style=\"color:blue\">typeof</span>(RegisteredTypeAttribute), <span style=\"color:blue\">false</span>).FirstOrDefault() <span style=\"color:blue\">as</span> RegisteredTypeAttribute;\n\t}\n}\n\n</pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2012-06-24T23:38:42.637-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "853294",
    "ThreadId": "360768",
    "Html": "<p>Hi Willem,</p>\r\n<p>Thanks for sharing your code with the rest of the community, as it might be helpful for other users pursuing a similar scenario.</p>\r\n<p>As this topic is mainly related to <strong>Unity</strong>, I believe this could be shared with the <strong>Unity </strong>community too:</p>\r\n<ul>\r\n<li><a href=\"http://unity.codeplex.com/\">Unity Site in CodePlex</a></li>\r\n</ul>\r\n<p>As a side note, this approach seems similar to how you register a type when using <strong>MEF </strong>(with the difference that <strong>Unity </strong>is used as the container;) therefore, I believe you might find <strong>MEF </strong>interesting:</p>\r\n<ul>\r\n<li><a href=\"http://mef.codeplex.com/\">Managed Extensibility Framework (MEF) Site in CodePlex</a></li>\r\n</ul>\r\n<p>Regards,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-06-25T11:36:59.6-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "853625",
    "ThreadId": "360768",
    "Html": "<p>Thanks <a class=\"UserProfileLink\" href=\"http://www.codeplex.com/site/users/view/DCherubini\">DCherubini</a>.</p>\r\n<p>I've submitted a patch to Unity for this, hopefully they'll accept it.</p>\r\n<p>I know about MEF and like it alot. It's just to make it easier for people already coding with Unity as the container.</p>",
    "PostedDate": "2012-06-26T01:01:11.153-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]