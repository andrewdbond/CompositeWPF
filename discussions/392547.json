[
  {
    "Id": "902301",
    "ThreadId": "392547",
    "Html": "\r\n<p>I'm using SL5 and Prism 4.1.</p>\r\n<p>I have two modules: <strong>CustomersModule </strong>and <strong>OrdersModule</strong>.</p>\r\n<p>The first has a <strong>CustomersView </strong>that shows customers and the second module has a\r\n<strong>OrdersView </strong>that shows the selected customer's orders.</p>\r\n<p>The shell has two regions, LeftRegion (occupied by CustomersView) and RightRegion (ocuppied by OrdersView).</p>\r\n<p>When the selected customer changes a CustomerSelectedEvent is published, the OrdersModule is subscribed to it and when received it loads the OrdersViewModel with the new customer.</p>\r\n<p>At first load I expect that the first customer gets selected, which in turn have to make the OrdersView to show that first customer's orders.</p>\r\n<p>Sometimes the OrdersView show the first customers orders at data load and others times it doesn't show anything at first load, but if I click on a customer,\r\n<strong>the solution's behavior is correct from then on</strong>.</p>\r\n<p>After I restart the computer the OrdersView doesn't show any order at first load, then I close the IE then run it again and from then on the first customer's orders are correctly shown at data load every time I run it, I can't detect what's the cause of\r\n that unpredictable behavior.</p>\r\n<p>At data load I mean before clicking anything on the Views when running.</p>\r\n<p>This is how it looks when it doesn't load the orders at data load:</p>\r\n<p><img src=\"http://s13.postimage.org/6ucbns6yf/Sin_t_tulo.jpg\" alt=\"\" width=\"838\" height=\"228\"></p>\r\n<p>And this is how it looks <strong>when it does load the orders at data load</strong>:</p>\r\n<p><img src=\"http://s10.postimage.org/i3gble2g9/Sin_t_tulo2.jpg\" alt=\"\" width=\"853\" height=\"221\"></p>\r\n<p>Here's the CustomersViewModel:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> CustomersViewModel : INotifyPropertyChanged {\r\n\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> IEventAggregator eventAggregator;\r\n    MiniNorthwindDomainContext _Context = <span style=\"color:blue\">new</span> MiniNorthwindDomainContext();\r\n\r\n    <span style=\"color:blue\">public</span> CustomersViewModel() {\r\n        <span style=\"color:blue\">if</span> (!DesignerProperties.IsInDesignTool) {\r\n            <span style=\"color:blue\">this</span>.eventAggregator = ServiceLocator.Current.GetInstance&lt;IEventAggregator&gt;();\r\n\r\n            EntityQuery&lt;Customer&gt; queryCustomers = _Context.GetCustomersQuery();\r\n            LoadOperation&lt;Customer&gt; loadOpCustomers = _Context.Load(queryCustomers);\r\n            loadOpCustomers.Completed &#43;= <span style=\"color:blue\">new</span> EventHandler(loadOpData_Completed);\r\n\r\n            EntityQuery&lt;Country&gt; queryCountries = _Context.GetCountriesQuery();\r\n            LoadOperation&lt;Country&gt; loadOpCountries = _Context.Load(queryCountries);\r\n            loadOpCountries.Completed &#43;= <span style=\"color:blue\">new</span> EventHandler(loadOpData_Completed);\r\n\r\n            EntityQuery&lt;Title&gt; queryTitles = _Context.GetTitlesQuery();\r\n            LoadOperation&lt;Title&gt; loadOpTitles = _Context.Load(queryTitles);\r\n            loadOpTitles.Completed &#43;= <span style=\"color:blue\">new</span> EventHandler(loadOpData_Completed);\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">void</span> loadOpData_Completed(<span style=\"color:blue\">object</span> sender, EventArgs e) {\r\n        Customers = <span style=\"color:blue\">new</span> PagedCollectionView(_Context.Customers);\r\n        Customers.CurrentChanged &#43;= <span style=\"color:blue\">new</span> EventHandler(Customers_CurrentChanged);\r\n\r\n        Countries = _Context.Countries;\r\n\r\n        Titles = _Context.Titles;\r\n\r\n        CurrentCustomer = _Context.Customers.FirstOrDefault();\r\n        <span style=\"color:blue\">if</span> (CurrentCustomer != <span style=\"color:blue\">null</span>) {\r\n            <span style=\"color:blue\">this</span>.eventAggregator.GetEvent&lt;CustomerSelectedEvent&gt;().Publish(CurrentCustomer);\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">void</span> Customers_CurrentChanged(<span style=\"color:blue\">object</span> sender, EventArgs e) {\r\n        CurrentCustomer = <span style=\"color:blue\">this</span>.Customers.CurrentItem <span style=\"color:blue\">as</span> Customer;\r\n        <span style=\"color:blue\">if</span> (CurrentCustomer != <span style=\"color:blue\">null</span>) {\r\n            <span style=\"color:blue\">this</span>.eventAggregator.GetEvent&lt;CustomerSelectedEvent&gt;().Publish(CurrentCustomer);\r\n        }\r\n    }\r\n\r\n    PagedCollectionView _Customers;\r\n    <span style=\"color:blue\">public</span> PagedCollectionView Customers {\r\n        <span style=\"color:blue\">get</span> {\r\n            <span style=\"color:blue\">return</span> _Customers;\r\n        }\r\n        <span style=\"color:blue\">set</span> {\r\n            <span style=\"color:blue\">if</span> (value != _Customers) {\r\n                _Customers = value;\r\n                NotifyPropertyChanged(<span style=\"color:#a31515\">&quot;Customers&quot;</span>);\r\n            }\r\n        }\r\n    }\r\n\r\n    IEnumerable&lt;Country&gt; _Countries;\r\n    <span style=\"color:blue\">public</span> IEnumerable&lt;Country&gt; Countries {\r\n        <span style=\"color:blue\">get</span> {\r\n            <span style=\"color:blue\">return</span> _Countries;\r\n        }\r\n        <span style=\"color:blue\">set</span> {\r\n            <span style=\"color:blue\">if</span> (value != _Countries) {\r\n                _Countries = value;\r\n                NotifyPropertyChanged(<span style=\"color:#a31515\">&quot;Countries&quot;</span>);\r\n            }\r\n        }\r\n    }\r\n\r\n    IEnumerable&lt;Title&gt; _Titles;\r\n    <span style=\"color:blue\">public</span> IEnumerable&lt;Title&gt; Titles {\r\n        <span style=\"color:blue\">get</span> {\r\n            <span style=\"color:blue\">return</span> _Titles;\r\n        }\r\n        <span style=\"color:blue\">set</span> {\r\n            <span style=\"color:blue\">if</span> (value != _Titles) {\r\n                _Titles = value;\r\n                NotifyPropertyChanged(<span style=\"color:#a31515\">&quot;Titles&quot;</span>);\r\n            }\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">private</span> Customer _currentCustomer;\r\n    <span style=\"color:blue\">public</span> Customer CurrentCustomer {\r\n        <span style=\"color:blue\">get</span> {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>._currentCustomer;\r\n        }\r\n        <span style=\"color:blue\">set</span> {\r\n            <span style=\"color:blue\">this</span>._currentCustomer = value;\r\n            <span style=\"color:blue\">this</span>.NotifyPropertyChanged(<span style=\"color:#a31515\">&quot;CurrentCustomer&quot;</span>);\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">#region</span> INotifyPropertyChanged Members\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> NotifyPropertyChanged(<span style=\"color:blue\">string</span> propertyName) {\r\n        <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.PropertyChanged != <span style=\"color:blue\">null</span>) {\r\n            <span style=\"color:blue\">this</span>.PropertyChanged(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">new</span>\r\n                                        PropertyChangedEventArgs(propertyName));\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">#endregion</span>\r\n}&nbsp;</pre>\r\n</div>\r\n<p>Here's OrdersModule class:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> OrdersModule : IModule {\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> IEventAggregator eventAggregator;\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> IUnityContainer container;\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> IRegionManager regionManager;\r\n\r\n    <span style=\"color:blue\">public</span> OrdersModule(IUnityContainer container, IRegionManager regionManager, IEventAggregator eventAggregator) {\r\n        <span style=\"color:blue\">this</span>.container = container;\r\n        <span style=\"color:blue\">this</span>.regionManager = regionManager;\r\n        <span style=\"color:blue\">this</span>.eventAggregator = eventAggregator;\r\n    }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize() {\r\n        <span style=\"color:blue\">this</span>.eventAggregator.GetEvent&lt;CustomerSelectedEvent&gt;().Subscribe(CustomerSelected, <span style=\"color:blue\">true</span>);\r\n\r\n        <span style=\"color:blue\">this</span>.regionManager.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;RightRegion&quot;</span>,\r\n                                                    () =&gt;\r\n                                        <span style=\"color:blue\">this</span>.container.Resolve&lt;OrdersView&gt;());\r\n    }\r\n\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> CustomerSelected(Customer currCustomer) {\r\n        <span style=\"color:blue\">if</span> (currCustomer == <span style=\"color:blue\">null</span>)\r\n            <span style=\"color:blue\">return</span>;\r\n\r\n        IRegion rightRegion = <span style=\"color:blue\">this</span>.regionManager.Regions[<span style=\"color:#a31515\">&quot;RightRegion&quot;</span>];\r\n        <span style=\"color:blue\">if</span> (rightRegion == <span style=\"color:blue\">null</span>)\r\n            <span style=\"color:blue\">return</span>;\r\n\r\n        OrdersView view = rightRegion.GetView(<span style=\"color:#a31515\">&quot;OrdersView&quot;</span>) <span style=\"color:blue\">as</span> OrdersView;\r\n        <span style=\"color:blue\">if</span> (view == <span style=\"color:blue\">null</span>) {\r\n            <span style=\"color:green\">// Create a new instance of the EmployeeDetailsView using the Unity container.</span>\r\n            view = <span style=\"color:blue\">this</span>.container.Resolve&lt;OrdersView&gt;();\r\n\r\n            <span style=\"color:green\">// Add the view to the main region. This automatically activates the view too.</span>\r\n            rightRegion.Add(view, <span style=\"color:#a31515\">&quot;OrdersView&quot;</span>, <span style=\"color:blue\">true</span>);\r\n        }\r\n        <span style=\"color:blue\">else</span> {\r\n            <span style=\"color:green\">// The view has already been added to the region so just activate it.</span>\r\n            rightRegion.Activate(view);\r\n        }\r\n\r\n        OrdersViewModel viewModel = view.DataContext <span style=\"color:blue\">as</span> OrdersViewModel;\r\n        <span style=\"color:blue\">if</span> (viewModel != <span style=\"color:blue\">null</span>) {\r\n            viewModel.CurrentCustomer = currCustomer;\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>Heres OrdersViewModel:</p>\r\n<div style=\"background-color:white; color:black\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> OrdersViewModel : INotifyPropertyChanged {\r\n\r\n    MiniNorthwindDomainContext _Context = <span style=\"color:blue\">new</span> MiniNorthwindDomainContext();\r\n\r\n    <span style=\"color:blue\">public</span> OrdersViewModel() {\r\n    }\r\n\r\n    PagedCollectionView _Orders;\r\n    <span style=\"color:blue\">public</span> PagedCollectionView Orders {\r\n        <span style=\"color:blue\">get</span> {\r\n            <span style=\"color:blue\">return</span> _Orders;\r\n        }\r\n        <span style=\"color:blue\">set</span> {\r\n            <span style=\"color:blue\">if</span> (value != _Orders) {\r\n                _Orders = value;\r\n                NotifyPropertyChanged(<span style=\"color:#a31515\">&quot;Orders&quot;</span>);\r\n            }\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">private</span> Order _currentOrder;\r\n    <span style=\"color:blue\">public</span> Order CurrentOrder {\r\n        <span style=\"color:blue\">get</span> {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>._currentOrder;\r\n        }\r\n        <span style=\"color:blue\">set</span> {\r\n            <span style=\"color:blue\">this</span>._currentOrder = value;\r\n            <span style=\"color:blue\">this</span>.NotifyPropertyChanged(<span style=\"color:#a31515\">&quot;CurrentOrder&quot;</span>);\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">private</span> Customer _currentCustomer;\r\n    <span style=\"color:blue\">public</span> Customer CurrentCustomer {\r\n        <span style=\"color:blue\">get</span> {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>._currentCustomer;\r\n        }\r\n        <span style=\"color:blue\">set</span> {\r\n            <span style=\"color:blue\">this</span>._currentCustomer = value;\r\n            Orders = <span style=\"color:blue\">null</span>;\r\n            _Context.Orders.Clear();\r\n            EntityQuery&lt;Order&gt; queryOrders = _Context.GetCustomerOrdersQuery(_currentCustomer.CustomerID);\r\n            LoadOperation&lt;Order&gt; loadOpOrders = _Context.Load(queryOrders);\r\n            loadOpOrders.Completed &#43;= <span style=\"color:blue\">new</span> EventHandler(loadOpData_Completed);\r\n            <span style=\"color:blue\">this</span>.NotifyPropertyChanged(<span style=\"color:#a31515\">&quot;CurrentCustomer&quot;</span>);\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">void</span> loadOpData_Completed(<span style=\"color:blue\">object</span> sender, EventArgs e) {\r\n        Orders = <span style=\"color:blue\">new</span> PagedCollectionView(_Context.Orders);\r\n        CurrentOrder = _Context.Orders.FirstOrDefault();\r\n    }\r\n\r\n    <span style=\"color:blue\">#region</span> INotifyPropertyChanged Members\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n\r\n    <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> NotifyPropertyChanged(<span style=\"color:blue\">string</span> propertyName) {\r\n        <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.PropertyChanged != <span style=\"color:blue\">null</span>) {\r\n            <span style=\"color:blue\">this</span>.PropertyChanged(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">new</span>\r\n                                        PropertyChangedEventArgs(propertyName));\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">#endregion</span>\r\n}</pre>\r\n</div>\r\n<p>Here's the project:</p>\r\n<p><a href=\"https://skydrive.live.com/#cid=228822BB183339A9&id=228822BB183339A9%21234\">https://skydrive.live.com/#cid=228822BB183339A9&amp;id=228822BB183339A9%21234</a></p>\r\n<p>I have been advancing but this little problem has been around for quite a while.</p>\r\n<p>Rafael</p>\r\n",
    "PostedDate": "2012-08-21T20:47:26.16-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "902615",
    "ThreadId": "392547",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Based on my understanding, the cause of this problem is that when you initialize the application two instances of\r\n<strong>OrdersView </strong>are added to the &quot;<strong>RightRegion</strong>&quot;, this is because in your\r\n<strong>OrdersModule</strong> one of this instances is added using the view discovery approach, which does not set the instance with a\r\n<strong>viewName </strong>in the region, hence the <strong>GetView</strong> method always return null causing a new instance to be added to the region. As a result your region is populated with two\r\n<strong>OrdersView</strong> views, one that is empty and one with the data of the current customer, and due to a timing problem, sometimes your empty view is the one that gets activated.</p>\r\n<p>In order to avoid this, for example you could try removing the adding of the first view using view discovery approach in your\r\n<strong>OrdersModule</strong>, as it seems that this view is not used in your application:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> OrdersModule : IModule {\n       \n(...)\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize() {\n            <span style=\"color:blue\">this</span>.eventAggregator.GetEvent&lt;CustomerSelectedEvent&gt;().Subscribe(CustomerSelected, <span style=\"color:blue\">true</span>);\n\n            <span style=\"color:green\">//Remove this sentence:       </span>\n            <span style=\"color:green\">//this.regionManager.RegisterViewWithRegion(&quot;RightRegion&quot;,</span>\n            <span style=\"color:green\">//                                            () =&gt;</span>\n            <span style=\"color:green\">//                             this.container.Resolve&lt;OrdersView&gt;());</span>\n        }\n(...)\n</pre>\r\n</div>\r\n<p>I hope you find this useful,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-08-22T10:12:20.137-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "902630",
    "ThreadId": "392547",
    "Html": "<p>Thank you Agustin!</p>",
    "PostedDate": "2012-08-22T10:45:26.107-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]