[
  {
    "Id": "723931",
    "ThreadId": "285832",
    "Html": "<p>Hello experts,</p>\n<p>I'm building an application using PRISM, MVVM and Enterprise Library. Currently i'm trying to figure out how to handle unhandled exceptions thrown in my application. For the shell I already found a nice solution that is used in the current StockTraderRI example, it allows to display a message and write to a log using the Enterprise Library logging facilities.</p>\n<div style=\"background-color: white; color: black;\">\n<pre>        <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> OnStartup(StartupEventArgs e)\r\n        {\r\n            <span style=\"color: blue;\">base</span>.OnStartup(e);\r\n\r\n<span style=\"color: blue;\">#if</span> (DEBUG)\r\n            RunInDebugMode();\r\n<span style=\"color: blue;\">#else</span>\r\n            RunInReleaseMode();\r\n<span style=\"color: blue;\">#endif</span>\r\n            <span style=\"color: blue;\">this</span>.ShutdownMode = ShutdownMode.OnMainWindowClose;\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> RunInDebugMode()\r\n        {\r\n            StockTraderRIBootstrapper bootstrapper = <span style=\"color: blue;\">new</span> StockTraderRIBootstrapper();\r\n            bootstrapper.Run();\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> RunInReleaseMode()\r\n        {\r\n            AppDomain.CurrentDomain.UnhandledException += AppDomainUnhandledException;\r\n            <span style=\"color: blue;\">try</span>\r\n            {\r\n                StockTraderRIBootstrapper bootstrapper = <span style=\"color: blue;\">new</span> StockTraderRIBootstrapper();\r\n                bootstrapper.Run();\r\n            }\r\n            <span style=\"color: blue;\">catch</span> (Exception ex)\r\n            {\r\n                HandleException(ex);\r\n            }\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> AppDomainUnhandledException(<span style=\"color: blue;\">object</span> sender, UnhandledExceptionEventArgs e)\r\n        {\r\n            HandleException(e.ExceptionObject <span style=\"color: blue;\">as</span> Exception);\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> HandleException(Exception ex)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (ex == <span style=\"color: blue;\">null</span>)\r\n                <span style=\"color: blue;\">return</span>;\r\n\r\n            ExceptionPolicy.HandleException(ex, <span style=\"color: #a31515;\">\"Default Policy\"</span>);\r\n            MessageBox.Show(StockTraderRI.Properties.Resources.UnhandledException);\r\n            Environment.Exit(1);\r\n        }\r\n</pre>\n</div>\n<p>I added support for handling DispatcherUnhandledException event so that also unhandled wpf ui thread exceptions are logged this way.</p>\n<p>Now while this works perfectly for the main/shell project, it doesn't work for modules. If an exception is thrown in, for example, a viewmodel located in a module, it won't be logged. When you think of it, this is actually expected behavior because of the composite nature of modules. My question is how to log these unhandled exceptions throw in modules in a nice way. I was thinking about subscribing to the AppDomain.CurrentDomain.UnhandledException event in the modules Initialize() method and then sending them over via the Event Aggregator. Is this a good idea or would you experts handle this differently?</p>\n<p>Many thanks in advance!</p>\n<p><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">&nbsp;</span></span></p>",
    "PostedDate": "2012-01-11T14:09:21.26-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "723956",
    "ThreadId": "285832",
    "Html": "<p>I hope it is ok to answer my own question. I went ahead and started implementing the proposed system. Turned out it didn't work at all. ﻿The UnhandledException event wasn't handled in the modules. After testing around with some exceptions at other places it did appear to work. But why wouldn't it work in the two locations I tried before posting this question then?</p>\n<p>Test exception #1 [throw new Exception(\"YOU CANT CATCH ME!!!\")]&nbsp;was placed in code that was executed by a background worker. All unhandled exceptions in the DoWork method are caught by the background worker and placed into the ﻿﻿RunWorkerCompletedEventArgs.Error property. =&gt; Exception is not qualified as unhandled and won't be catched.</p>\n<p>Test exception #2 [throw new Exception(\"TOO FAST FOR YOU\")] was placed in code that was&nbsp;swallowed by&nbsp;a RequestNavigate call. More information here: ﻿﻿*</p>\n<p>The last post contains a blog post about this issue together with a possible solution.</p>\n<p>So all is fine now, sorry to have bothered you. On the plus side I learned&nbsp;a lot!﻿</p>\n<p>* cant post links here but the title of the page (located at this site!) is <span class=\"CodePlexPageHeader\">RequestNavigate swallowing exceptions and won't call callback </span></p>",
    "PostedDate": "2012-01-11T15:38:05.087-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]