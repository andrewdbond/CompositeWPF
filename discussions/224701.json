[
  {
    "Id": "484386",
    "ThreadId": "224701",
    "Html": "<p>Hi,</p>\r\n<p>I'm guessing this probably isn't possible but I'd really like to be able to use the CompositeCommand to trigger ANY of it's child commands that can be executed rather than only triggering ALL child commands once ALL can execute.</p>\r\n<p>E.g.</p>\r\n<p>CompositeCommand parentCommand has two children, command1 and command2. Consider the following scenarios:</p>\r\n<p>command1.CanExecute() is false</p>\r\n<p>command2.CanExecute() is false</p>\r\n<p>so parentCommand cannot execute.</p>\r\n<p>command1.CanExecute() is false</p>\r\n<p>command2.CanExecute() is true</p>\r\n<p>I would like to be able to trigger parentCommand at this point and fire only command2 in doing so.</p>\r\n<p>&nbsp;</p>\r\n<p>A scenario that I would like to use this for is the classic &quot;Save All&quot; scenario. However I have parts of my application that need saving when others do not need saving but I'd still like to have just one button trigger all of it.</p>\r\n<p>Regards,</p>\r\n<p>Neil</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-08-24T15:04:07.363-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "484826",
    "ThreadId": "224701",
    "Html": "<p>Neil,</p>\r\n<p>If the underlying ICommands registered with CompositeCommand implement the IActiveAware interface, then CompositeCommand will only use those commands that are 'active' for purposes of CanExecute() and Execute().&nbsp; DelegateCommand implements IActiveAware, so if you are using that for your commands registered with CompositeCommand, you can set IsActive=false for those commands you don't wish to participate.</p>\r\n<p>HTH,</p>\r\n<p>-b</p>",
    "PostedDate": "2010-08-25T13:03:21.993-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "485022",
    "ThreadId": "224701",
    "Html": "<blockquote style=\"border:solid .1em #ccc;font-style:italic;margin:.25em 1em 0 1em;padding:0 .25em 0 .25em\"><strong>brumfb wrote:</strong><br>\r\n<p>Neil,</p>\r\n<p>If the underlying ICommands registered with CompositeCommand implement the IActiveAware interface, then CompositeCommand will only use those commands that are 'active' for purposes of CanExecute() and Execute().&nbsp; DelegateCommand implements IActiveAware, so if you are using that for your commands registered with CompositeCommand, you can set IsActive=false for those commands you don't wish to participate.</p>\r\n<p>HTH,</p>\r\n<p>-b</p>\r\n</blockquote>\r\n<p>Ok I think I see what you are saying, So I have made the following changes:</p>\r\n<p>I have the static global command:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">class</span> GlobalCommands\r\n    {\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> CompositeCommand SaveAllCommand = <span style=\"color:blue\">new</span> CompositeCommand(<span style=\"color:blue\">true</span>);\r\n    }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>And then a child command in two seperate ViewModels:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:green\">// ViewModel 1:</span>\r\n\r\n            SaveVolunteerCommand = <span style=\"color:blue\">new</span> DelegateCommand&lt;<span style=\"color:blue\">object</span>&gt;(SaveVolunteer, CanSaveVolunteer);\r\n            GlobalCommands.SaveAllCommand.RegisterCommand(SaveVolunteerCommand);\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> CanSaveVolunteer(<span style=\"color:blue\">object</span> args)\r\n        {\r\n            <span style=\"color:green\">// Can save if Current Volunteer has been edited</span>\r\n            <span style=\"color:blue\">bool</span> canSave = (<span style=\"color:blue\">this</span>.UpdatedVolunteers != <span style=\"color:blue\">null</span> &amp;&amp; <span style=\"color:blue\">this</span>.UpdatedVolunteers.Count &gt; 0) ||\r\n                           (<span style=\"color:blue\">this</span>.DeletedVolunteers != <span style=\"color:blue\">null</span> &amp;&amp; <span style=\"color:blue\">this</span>.DeletedVolunteers.Count &gt; 0);\r\n            <span style=\"color:blue\">this</span>.SaveVolunteerCommand.IsActive = canSave;\r\n            <span style=\"color:blue\">return</span> canSave;\r\n        }\r\n\r\n<span style=\"color:green\">// ViewModel 2:</span>\r\n\r\n            <span style=\"color:blue\">this</span>.SaveGroupCommand = <span style=\"color:blue\">new</span> DelegateCommand&lt;<span style=\"color:blue\">object</span>&gt;(SaveGroup, CanSaveGroup);\r\n            GlobalCommands.SaveAllCommand.RegisterCommand(<span style=\"color:blue\">this</span>.SaveGroupCommand);\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> CanSaveGroup(<span style=\"color:blue\">object</span> state)\r\n        {\r\n            <span style=\"color:blue\">bool</span> canSave = (<span style=\"color:blue\">this</span>.UpdatedGroups != <span style=\"color:blue\">null</span> &amp;&amp; <span style=\"color:blue\">this</span>.UpdatedGroups.Count &gt; 0) ||\r\n                           (<span style=\"color:blue\">this</span>.DeletedGroups != <span style=\"color:blue\">null</span> &amp;&amp; <span style=\"color:blue\">this</span>.DeletedGroups.Count &gt; 0);\r\n            <span style=\"color:blue\">this</span>.SaveGroupCommand.IsActive = canSave;\r\n            <span style=\"color:blue\">return</span> canSave;\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>When I call SaveGroupCommand.RaiseCanExecuteChanged I get a call to CanSaveGroup and the CompositeCommand becomes enabled which is want I want. But for some reason calling SaveVolunteerCommand.RaiseCanExecuteChanged is NOT calling CanSaveVolunteer so I can never get the SaveAllCommand to enable if I'm only dealing with ViewModel1. I find this a bit strange that one works but the other doesn't? Am I missing something obvious?</p>\r\n<p>Thanks,</p>\r\n<p>Neil</p>",
    "PostedDate": "2010-08-26T01:30:20.14-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "485074",
    "ThreadId": "224701",
    "Html": "<p>Ok I'm an idiot. I got this working now. Basically my solution above wouldn't work because CompositeCommand checks if the child command IsActive before firing the CanExecute delegate therefore CanSaveVolunteers is never called and IsActive can never be set to true!</p>\r\n<p>My revised solution works like a charm:</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> CanSaveVolunteers(<span style=\"color:blue\">object</span> args)\r\n        {\r\n            <span style=\"color:blue\">return</span> (<span style=\"color:blue\">this</span>.UpdatedVolunteers != <span style=\"color:blue\">null</span> &amp;&amp; <span style=\"color:blue\">this</span>.UpdatedVolunteers.Count &gt; 0) ||\r\n                   (<span style=\"color:blue\">this</span>.DeletedVolunteers != <span style=\"color:blue\">null</span> &amp;&amp; <span style=\"color:blue\">this</span>.DeletedVolunteers.Count &gt; 0);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RaiseCanSaveVolunteer()\r\n        {\r\n            <span style=\"color:blue\">this</span>.SaveVolunteersCommand.IsActive = CanSaveVolunteers(<span style=\"color:blue\">null</span>);\r\n            <span style=\"color:blue\">this</span>.SaveVolunteersCommand.RaiseCanExecuteChanged();\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Instead of calling DelegateCommand.RaiseCanExecuteChanged() I have to call RaiseCanSaveVolunteer for this to work. So far its working perfectly for anyone else wanting to achieve the same kind of Save All function.</p>\r\n<p>Regards,</p>\r\n<p>Neil</p>",
    "PostedDate": "2010-08-26T03:09:02.88-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "828628",
    "ThreadId": "224701",
    "Html": "<p>Hi,</p>\r\n<p>For those interested in this subject, I believe you could also find the following blog post interesting:</p>\r\n<ul>\r\n<li><a href=\"http://blogs.southworks.net/aadami/2012/04/24/prism-using-compositecommands-delegatecommands-and-iactiveaware/\">Using CompositeCommands, DelegateCommands and IActiveAware</a></li>\r\n</ul>\r\n<p>Regards,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-04-25T13:19:12.457-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]