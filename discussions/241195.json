[
  {
    "Id": "546921",
    "ThreadId": "241195",
    "Html": "\r\n<p><span style=\"color:black; font-size:10pt\">Hi,</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">I'd like to be able to resolve service interface type provided by remote modules via xml deployment catalog with Mef. This is a different scenario than the StockTrader RI example&nbsp;that does it&nbsp;via AggregateCatalog.&nbsp;</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">I have&nbsp;Shared.cs defines</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">public interface IService{</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">.....</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">}</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">and a service implementation&nbsp;done at Service.cs</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">[ModelExport(typeof(ModuleInit))]</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">public class ModuleInit:IModule</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">{</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">....</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">}</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">[Export(typeof(IService))]</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">public class Service:IService</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">{</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">}</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">I want to access the service via Shell(), so I did</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">public partial class Shell :UserControl</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">{</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">[Import]</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">public IService sv;</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">}</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">and also add a reference to the Shared assembly in main silverlight project.</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">Running code like that always produces a runtime error complaining &quot;No valid exports were found...&quot; What goes wrong with my approach? If I put things back to AggregateCatalog by commenting the XML and add&nbsp;the\r\n Service assembly reference back to the project. Everything work! We'd like to have a decoupled architecture so the application could access different service implementation by just&nbsp;update ModuleCatalog.xml in website without rebuilding the app.&nbsp;How\r\n could this be done in Prism? </span></p>\r\n<p><span style=\"color:black; font-size:10pt\">Basically I'd like to&nbsp;access my own remote service in Shell&nbsp;like accessing IModuleManager&nbsp;in Prism library but without explicitly loading the implementation via code.&nbsp;This example at&nbsp;<a href=\"http://blogs.msdn.com/b/bobbrum/archive/2010/11/22/prism-4-in-silverlight-with-mef-compositioninitializer.aspx?CommentPosted=true#commentmessage\">http://blogs.msdn.com/b/bobbrum/archive/2010/11/22/prism-4-in-silverlight-with-mef-compositioninitializer.aspx?CommentPosted=true#commentmessage</a>&nbsp;fits\r\n the bill except accessing the service&nbsp;from Shell(), and&nbsp;it produces the same error&nbsp;when I tried to modify it...</span></p>\r\n<p><span style=\"color:black; font-size:10pt\">Reggie</span></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-01-10T12:43:01.41-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "547413",
    "ThreadId": "241195",
    "Html": "\r\n<p>Hi Reggie,</p>\r\n<p>Perhaps the problem you're experiencing could be caused by a timing issue. That is to say, when you load a module using the\r\n<strong>DeploymentCatalog</strong>, its catalog is added to the <strong>AggregateCatalog\r\n</strong>in the same way as it is done when you directly add the <strong>AssemblyCatalog\r\n</strong>to the <strong>AggregateCatalog </strong>in code. The difference is that in the second case, at the time the shell is composed (which is done by default in the\r\n<strong>CreateShell</strong> or <strong>InitializeShell </strong>methods of the Bootstrapper), your module that provides the implementation for\r\n<strong>IService </strong>might not have been loaded yet, hence causing that exception.</p>\r\n<p>You can read more about remote module loading <a href=\"http://msdn.microsoft.com/en-us/library/gg405479%28PandP.40%29.aspx\">\r\nhere</a>, and about the initialization sequence of Prism applications <a href=\"http://msdn.microsoft.com/en-us/library/gg430868%28PandP.40%29.aspx\">\r\nhere</a>.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2011-01-11T10:14:29.257-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]