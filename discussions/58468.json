[
  {
    "Id": "197814",
    "ThreadId": "58468",
    "Html": "<p>Hi there,</p>\r\n<p>The following is a typical code of using the UnityContainer with constructor injection.</p>\r\n<p>public class MyClass : IModule</p>\r\n<p>{</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private IUnityContainer myContainer;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public MyClass(IUnityContainer container)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myContainer = container;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>}</p>\r\n<p>But I want to avoid this constructor injection way. So, how to use the UnityContainer without using&nbsp;constructor injection?</p>\r\n<p>Thanks,</p>\r\n<p>Jie</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-04T08:59:15.017-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "197831",
    "ThreadId": "58468",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Hi Jie, </span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">I don't know your scenario, but if for some reason you want to avoid constructor injection, you might inject object dependencies using Property Injection. To achieve this you can decorate class properties as follows:</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt;vertical-align:top;word-break:break-all;line-height:140%\"><span style=\"font-size:10pt;color:black;line-height:140%;font-family:'Courier New'\" lang=EN-US>&nbsp; [Dependency]</span></p>\r\n<p style=\"margin:0cm 0cm 0pt;vertical-align:top;word-break:break-all;line-height:140%\"><span style=\"font-size:10pt;color:black;line-height:140%;font-family:'Courier New'\" lang=EN-US>&nbsp; </span><span style=\"font-size:10pt;color:blue;line-height:140%;font-family:'Courier New'\" lang=EN-US>public</span><span style=\"font-size:10pt;color:black;line-height:140%;font-family:'Courier New'\" lang=EN-US> </span><span style=\"font-size:10pt;line-height:140%;font-family:'Courier New'\" lang=EN-US>YourType<span style=\"color:black\"> YourProperty {</span><span style=\"color:blue\">get</span><span style=\"color:black\">; </span><span style=\"color:blue\">set;</span><span style=\"color:black\">}</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">For more information about this topic &nbsp;you can check:</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt;text-indent:-18pt\"><span style=\"font-family:Symbol\" lang=EN-US><span style=\"\"><span style=\"font-size:small\">&middot;</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"\" lang=EN-US><a href=\"http://msdn.microsoft.com/en-us/library/dd203206.aspx\"><span style=\"font-size:small;font-family:Calibri\">Introduction to Unity</span></a></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt;text-indent:-18pt\"><span style=\"font-family:Symbol\" lang=EN-US><span style=\"\"><span style=\"font-size:small\">&middot;</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"\" lang=EN-US><a href=\"http://msdn.microsoft.com/en-us/library/dd203172.aspx\"><span style=\"font-size:small;font-family:Calibri\">Dependency Injection Types and Mappings</span></a></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 1.2pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">For more information about Unity you might check<span style=\"color:#1f497d\"> <a href=\"http://msdn.microsoft.com/en-us/library/dd362339.aspx\"><span style=\"color:#0000ff\">Unity Application Block</span></a> </span>at MSDN and you might find useful the Hand-on-Labs that where recently published<span style=\"color:#1f497d\">: <a href=\"http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=93a5e18f-3211-44ef-b785-c59bcec4cd6f\">Hands-On Labs for the Unity Application Block 1.2</a>.</span></span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 1.2pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 1.2pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Please let me know if this helps.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Matias Bonaventura</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><a href=\"http://blogs.southworks.net/\"><span style=\"font-size:small;color:#0000ff;font-family:Calibri\">http://blogs.southworks.net/matiasb</span></a></p>",
    "PostedDate": "2009-06-04T09:54:15.573-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "198300",
    "ThreadId": "58468",
    "Html": "<p>Hi Matias,</p>\r\n<p>Thanks for your reply and info, which helped me to have a better understanding on the unity container. I also did some of the HOL. BTW, Lab02 didn't compile on VS2008 for the following line:</p>\r\n<p>&nbsp;&nbsp;&nbsp; container<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .RegisterType&lt;IStockQuoteService, MoneyCentralStockQuoteService&gt;(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new InjectionProperty(&quot;Logger&quot;))</p>\r\n<p>However, for my issue, I need further help. I have three modules (projects): IService, Service, and Client. In the Service module, it has the implementation of the IService interface. And it also registers the IService and Service:</p>\r\n<p>namespace MyService<br>{<br>&nbsp;&nbsp;&nbsp; Public class Service : IService<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // IService implementation<br>&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp; public class ServiceModule : IModule<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private IUnityContainer uContainer;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Service(IUnityContainer container)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.uContainer = container;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Initialize()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegisterServices();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected void RegisterServices()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.uContainer.RegisterType&lt;IService, Service&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }<br>}</p>\r\n<p>I used the Separated Interface pattern to have IService and Service in two separate modules (projects). The third module, client, uses the Service as below:</p>\r\n<p>namespace MyClient<br>{<br>&nbsp;&nbsp;&nbsp; public class Client : IModule<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private IUnityContainer uContainer;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private IService service;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Client(IUnityContainer container)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.uContainer = container;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; service = uContainer.Resolve&lt;IService&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp; }<br>}</p>\r\n<p>This way, the Client module does not have any dependency on the Service module, and all code works fine.</p>\r\n<p>But now, due to some other designs, I want to remove the constructor injection for the Client class, i.e., to have a class and its&nbsp;constructor like this:</p>\r\n<p>namespace MyClient<br>{<br>&nbsp;&nbsp;&nbsp; public class Client<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Client()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp; }</p>\r\n<p>}</p>\r\n<p>The Client class needs to be instantiated by another class, which does not have anything to do with&nbsp;the UnityContainer. Meanwhile, I want to keep the&nbsp;separated interface pattern design.</p>\r\n<p>How can I accomplish this?</p>\r\n<p>Thanks,</p>\r\n<p>Jie</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-05T09:22:03.377-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "198419",
    "ThreadId": "58468",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Times New Roman\">Hi Jie, </span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Times New Roman\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Times New Roman\">I would divide the problem in two: on one side the separated interface pattern and on the other the use of unity. The separated interface pattern does not necessarily need to be tied to Unity or any container (although I personally think they plug together nicely).</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Times New Roman\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Times New Roman\">If you want properties and other injection performed to an instance when you do not control its construction, you can use the <strong>BuildUp</strong> method of the Unity container. This will make the object go through the container strategies that can be executed after object creation, such as property or method injection. This approach might help you inject some dependencies in your client event if it's not initialized by Unity.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"color:#1f497d\" lang=EN-US><span style=\"font-family:Times New Roman\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family:'Calibri','sans-serif'\" lang=EN-US>For more information about BuildUp method you can check:<span style=\"color:#1f497d\"></span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt;text-indent:-18pt\"><span style=\"color:#1f497d;font-family:Symbol\" lang=EN-US><span style=\"\"><span style=\"font-size:small\">&middot;</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"color:#1f497d;font-family:'Calibri','sans-serif'\" lang=EN-US><a href=\"http://msdn.microsoft.com/en-us/library/dd203136.aspx\"><span style=\"font-size:small;color:#0000ff\">Using BuildUp to Wire Up Objects Not Created by the Container</span></a></span><span style=\"color:#1f497d\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Times New Roman\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Times New Roman\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Times New Roman\">The separated interface pattern will help you reduce coupling between modules and the service by keeping the service interface and its implementation in separated packages. Besides the service implementation and the service interface you will also need someone to tight them: instantiate the service, keep it's reference and make it accessible to clients (this is the data mapper on Martin Fowler's </span><a href=\"http://www.martinfowler.com/eaaCatalog/separatedInterface.html\"><span style=\"font-size:small;font-family:Times New Roman\">Separated Interface pattern</span></a><span style=\"font-size:small\"><span style=\"font-family:Times New Roman\">). Unity is a very good choice for the data mapper in the pattern as it not only keeps the service reference, but it is also flexible, decoupled from the business logic, can inject dependencies, etc, etc.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Times New Roman\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Times New Roman\">If for some reason you can't use unity infrastructure in your client, you will need to build your own data mapper. One way to implement the datamapper might be by creating a static class that exposes a <strong>GetService</strong> method that returns an <strong>IService</strong>. The datamapper might be placed in the Infrastructure to make it available to all modules. If the scenario allows you, you might use unity to return the service. If not, you can manfully maintain a static reference to the service instance and return it:</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Times New Roman\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\" lang=EN-US>public</span><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US> <span style=\"color:blue\">static</span> <span style=\"color:blue\">class</span> <span style=\"color:#2b91af\">ServiceFactory</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">private</span> <span style=\"color:blue\">static</span> <span style=\"color:#2b91af\">IService</span> myService;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:#2b91af\">IService</span> MyService</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">get</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return myService;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; <span style=\"color:blue\">set</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; myService = value;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>}</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Times New Roman\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Times New Roman\">Your service module will have to register the service in the <strong>ServiceFactory</strong> instead of using unity.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small;font-family:Times New Roman\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Times New Roman\">The following links might proviede deals with some of the concepts I have mentioned above:</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt;text-indent:-18pt\"><span style=\"font-family:Symbol\" lang=EN-US><span style=\"\"><span style=\"font-size:small\">&middot;</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"\" lang=EN-US><a href=\"http://www.martinfowler.com/eaaCatalog/separatedInterface.html\"><span style=\"font-size:small;font-family:Times New Roman\">Separated Interface pattern</span></a><span style=\"font-size:small\"><span style=\"font-family:Times New Roman\"> on Martin Fowler's Web site</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt;text-indent:-18pt\"><span style=\"font-family:Symbol\" lang=EN-US><span style=\"\"><span style=\"font-size:small\">&middot;</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"\" lang=EN-US><a href=\"http://msdn.microsoft.com/en-us/library/cc707841.aspx\"><span style=\"font-size:small;font-family:Times New Roman\">Patterns in the Composite Application Library</span></a></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\" lang=EN-US>&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Times New Roman\"><span style=\"\" lang=EN-US>Hope it helps!</span><span style=\"font-family:'Calibri','sans-serif'\" lang=EN-US></span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Calibri','sans-serif'\" lang=EN-US><span style=\"font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:small\"><span style=\"font-family:Times New Roman\">Matias Bonaventura</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><a href=\"http://blogs.southworks.net/\"><span style=\"font-size:small;font-family:Times New Roman\">http://blogs.southworks.net/matiasb</span></a></p>",
    "PostedDate": "2009-06-05T14:07:45.013-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]