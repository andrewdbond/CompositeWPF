[
  {
    "Id": "210143",
    "ThreadId": "61900",
    "Html": "<p>Hi there,</p>\r\n<p>First i would like to warn you that im all very new to the Prism framwork and in general in WPF any claims of me should therefore be validated. <br>And please, if im wrong tell me!</p>\r\n<p>As far as I understand, Prism are only coming out of the box with a few Delegate Commands you can use directly in your ViewModels for a very few standard WPF controls, e.g. the Button control.<br>Please have a look on this EXTREMLY valuable video <a href=\"http://development-guides.silverbaylabs.org/Video/Prism-Commands\">http://development-guides.silverbaylabs.org/Video/Prism-Commands</a></p>\r\n<p>My question is, wouldnt it be possible to do a sort of contrib library containing DelegateCommands that maps to the normal events we find in the WPF controls so we <br>can use them directly in our ViewModels / Controllers (like shown in the video link above)?</p>\r\n<p>&nbsp;&lt;TreeView&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x:Name=<span style=\"color:#A31515\">&quot;_TreeView&quot;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ItemsSource=<span style=\"color:#A31515\">&quot;{Binding RootDirectories}&quot;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BorderBrush=<span style=\"color:#A31515\">&quot;#000000&quot;</span>&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BorderThickness=<span style=\"color:#A31515\">&quot;1&quot;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Margin=<span style=\"color:#A31515\">&quot;5,5,5,5&quot;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:#ff0000\"><strong>commands:TreeViewItemSelectedChanged.Command</strong></span>=<span style=\"color:#A31515\">&quot;{Binding TreeViewItemSelectedCommand}&quot;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Height=<span style=\"color:#A31515\">&quot;Auto&quot;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;</p>\r\n<p><br>Which would be implemented as (this class must be able to be shared among us or what?) :</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre> <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> TreeViewItemSelectedChanged\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> DependencyProperty CommandProperty =\r\n            DependencyProperty.RegisterAttached(<span style=\"color:#A31515\">&quot;Command&quot;</span>, <span style=\"color:Blue\">typeof</span>(ICommand), <span style=\"color:Blue\">typeof</span>(TreeViewSelectedItemChanged),\r\n                                                <span style=\"color:Blue\">new</span> PropertyMetadata(OnSetCommandCallback));\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> DependencyProperty MouseOverCommandBehaviorProperty =\r\n            DependencyProperty.RegisterAttached(<span style=\"color:#A31515\">&quot;TreeViewSelectedItemChangedBehaviour&quot;</span>,\r\n                                                <span style=\"color:Blue\">typeof</span>(TreeViewSelectedItemChangedBehaviour), <span style=\"color:Blue\">typeof</span>(TreeViewSelectedItemChanged), <span style=\"color:Blue\">null</span>);\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> ICommand GetCommand(DependencyObject obj)\r\n        {\r\n            <span style=\"color:Blue\">return</span> (ICommand) obj.GetValue(CommandProperty);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> SetCommand(DependencyObject obj, ICommand value)\r\n        {\r\n            obj.SetValue(CommandProperty, value);\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> OnSetCommandCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            <span style=\"color:Blue\">var</span> element = dependencyObject <span style=\"color:Blue\">as</span> Control;\r\n            <span style=\"color:Blue\">if</span> (element != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                TreeViewSelectedItemChangedBehaviour behavior = GetOrCreateBehavior(element);\r\n                behavior.Command = e.NewValue <span style=\"color:Blue\">as</span> ICommand;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> TreeViewSelectedItemChangedBehaviour GetOrCreateBehavior(Control element)\r\n        {\r\n            <span style=\"color:Blue\">var</span> behavior = element.GetValue(MouseOverCommandBehaviorProperty) <span style=\"color:Blue\">as</span> TreeViewSelectedItemChangedBehaviour;\r\n\r\n            <span style=\"color:Blue\">if</span> (behavior == <span style=\"color:Blue\">null</span>)\r\n            {\r\n                behavior = <span style=\"color:Blue\">new</span> TreeViewSelectedItemChangedBehaviour(element);\r\n                element.SetValue(MouseOverCommandBehaviorProperty, behavior);\r\n            }\r\n\r\n            <span style=\"color:Blue\">return</span> behavior;\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> TreeViewSelectedItemChangedBehaviour GetMouseOverCommandBehavior(DependencyObject obj)\r\n        {\r\n            <span style=\"color:Blue\">return</span> (TreeViewSelectedItemChangedBehaviour)obj.GetValue(MouseOverCommandBehaviorProperty);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">void</span> SetMouseOverCommandBehavior(DependencyObject obj, TreeViewSelectedItemChangedBehaviour value)\r\n        {\r\n            obj.SetValue(MouseOverCommandBehaviorProperty, value);\r\n        }\r\n    }\r\n</pre>\r\n<pre>Have i missed something here or would this be possible? If this would be possible i think at least it would make the Prims framework even more valuable, to increase the time to get things solved. </pre>\r\n<pre>Again, correct me if im wrong, im on thin ice here!!!</pre>\r\n</div>\r\n<p>/Nic</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-07-08T13:20:13.947-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "210335",
    "ThreadId": "61900",
    "Html": "<p>Hi Nic,</p>\r\n<p>You might want to take a look at Marlon Grech's <a href=\"http://marlongrech.wordpress.com/2008/12/13/attachedcommandbehavior-v2-aka-acb/\">attached command behaviors</a>.</p>\r\n<p>HTH,<br>Kent</p>",
    "PostedDate": "2009-07-09T02:40:41.96-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]