[
  {
    "Id": "115296",
    "ThreadId": "34723",
    "Html": "<p>I have downloaded the source code of CAL, it's great, thanks for your excellent work. Now i decide to develop the project by Prsim, but i met a problem :<br>\r\n<br>\r\n1. How to organize the ResourceDictionary?<br>\r\n<br>\r\nAs usual, i define basic style and resource in&nbsp;some separated .xamls, and merged them&nbsp;into App.Resource.&nbsp; then the control use BaseOn={StaticResource xxx} to overide the basic resource.<br>\r\nNow i did the same thing, i define a&nbsp;SolidColorBrush&nbsp;&lt;SolidColorBrush x:Key=&quot;BackgroundBrush&quot; Color=&quot;Black&quot;/&gt;&nbsp;in App.Resource, and use Background={StaticResource&nbsp;BackgroundBrush} in a separated module&nbsp;to use it. <br>\r\nBut it failed,&nbsp;i received a exception, i thought maybe the StaticResourceExpression did not find the resource, So i wrote a custom ResourceExpression, it inherited from&nbsp;StaticResourceExtension.</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public override object ProvideValue(IServiceProvider serviceProvider)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IProvideValueTarget target = null;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (serviceProvider != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; target = serviceProvider.GetService(typeof(IProvideValueTarget)) as IProvideValueTarget;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (target == null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new InvalidOperationException(&quot;MarkupExtension doesn't have property parser context available&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DependencyObject targetObject = target.TargetObject as DependencyObject;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (targetObject == null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new InvalidOperationException(&quot;SmartResourceExtension can only be used for DependencyProperty&quot;);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object resourceReferenceExpression = null;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resourceReferenceExpression = Application.Current.TryFindResource(base.ResourceKey);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Failed<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resourceReferenceExpression = Application.Current.MainWindow.TryFindResource(base.ResourceKey)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Succeed<br>\r\n}<br>\r\n<br>\r\nI define the&nbsp;SolidColorBrush in App.Resource, use&nbsp;Application.Current.TryFindResource(base.ResourceKey), failed.<br>\r\nThen i move it to Shell.Resource, and use&nbsp;Application.Current.MainWindow.TryFindResource(base.ResourceKey), it succeed.<br>\r\n<br>\r\nThis&nbsp;confused me, why can't find it in App.Resource. From your sample, all the resource were in the same control.Resource, i want to make the resource reused, how can i do it?<br>\r\nIs it a limitation or something wrong i made, plz indicate, thanks.<br>\r\n<br>\r\n2. the second question is our UI designer use Blend to design the UI, but&nbsp;Blend usually show an error, The resource &quot;BackgroundBrush&quot; could not be resolved, although the application goes well. <br>\r\nthis is the same as the problem above, if i put the resource in UserControl.Resource, it resolved.<br>\r\n<br>\r\ni see,&nbsp; modules will be separated, maybe developed by different developers, but how to recongize the resource making them reused and goes well in Blend?<br>\r\n<br>\r\nThanks for any suggestion.<br>\r\nYohan</p>\r\n",
    "PostedDate": "2008-09-02T00:53:15.167-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115332",
    "ThreadId": "34723",
    "Html": "<p>Yohan,<br>\r\n<br>\r\nI believe you could leave your original code, just ensure a couple of things:<br>\r\n<br>\r\n1. Put all your resources in a centralized assembly.<br>\r\n2. Projects should be built, and deployed, in a central location. <br>\r\n<br>\r\n<strong>Example<br>\r\n</strong>/bin<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;ClientApplication.dll<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;ModuleA.dll<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;ModuleB.dll<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;CentralizedResources.dll<br>\r\n<br>\r\nThis will allow you to link your resources from any of your Xaml UI's. <br>\r\n...<br>\r\n&lt;ResourceDictionary.MergedDictionaries&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<em>&lt;!--&lt;ResourceDictionary Source=&quot;/[Qualified.AssemblyName];component/[ResourceDictionary.xaml]&quot;/&gt;--&gt;<br>\r\n</em>&nbsp;&nbsp;&nbsp;&nbsp;&lt;ResourceDictionary Source=&quot;/<strong>CentralizedResources</strong>;component/<strong>MyResources.xaml</strong>&quot;/&gt;<br>\r\n&lt;ResourceDictionary.MergedDictionaries&gt;<br>\r\n<br>\r\n3. With this declaration&nbsp;ClientApplication, ModuleA and ModuleB should be able to access resources from your centralized resource assembly.<br>\r\n<br>\r\n4. Now your designers can collaborate by focusing on the CentralizedResources project to produce resources. Here is an article that might gove you ideas about how to better approach your resource organization.&nbsp;<a href=\"http://windowsclient.net/wpf/white-papers/thenewiteration.aspx\">http://windowsclient.net/wpf/white-papers/thenewiteration.aspx</a></p>\r\n<p>5. Developers should use resources from the CentralizedResources assembly. Designers should not have knowledge of custom controls, but can have knowledge of base controls, i.e. TextBox, Rectangle, ListView, StackPanel, etc. The CentralizedResources assembly should not have any dependencies outside what is in the &quot;xaml&quot; and &quot;xaml/presentation&quot; uris.<br>\r\n<br>\r\nHope this helps,<br>\r\n<br>\r\nAndres Olivares</p>\r\n",
    "PostedDate": "2008-09-02T05:12:42.837-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115545",
    "ThreadId": "34723",
    "Html": "Andres <br>\r\n<br>\r\nThanks for your reply. I got&nbsp;it and follow your steps, everything goes well.<br>\r\n<br>\r\nBut one resource maybe meraged twice.<br>\r\n<br>\r\n<strong>Example : <br>\r\n</strong><br>\r\n/CentralizedResources<br>\r\n&nbsp;&nbsp;&nbsp; ListBoxResource<br>\r\n<br>\r\n/bin<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;CentralizedResource.dll<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;ModuleA.dll<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;ModuleB.dll<br>\r\n<br>\r\nBoth&nbsp;<strong>ModuleA</strong> and&nbsp;<strong>ModuleB</strong> have ListBox and want to use the ListBoxStyle which in&nbsp;<strong>CentralizedResource</strong>(e.g. {StaticResource key} or BaseOn={StaticResource key}&nbsp;).&nbsp; So i have to merge ListBoxResource into two Xaml UIs.<br>\r\nOr i have to define ModuleAResource and&nbsp;ModuleBResource in&nbsp;CentralizedResources, and the modules link their own resource.<br>\r\nBoth are not perfect.&nbsp; &nbsp;:-(<br>\r\n<br>\r\nThe question i metioned when i merged into App.Resource, i cannot find it. It's my mistake. <br>\r\nI move&nbsp;<br>\r\n&nbsp; Bootstrapper bootstrapper = new Bootstrapper();<br>\r\n&nbsp; bootstrapper.Run();<br>\r\nfrom the constructor of App to&nbsp;OnStartup(), it's Ok.<br>\r\n<br>\r\nSo maybe this question is nothing abt Prism, but i stll wanna see the best solution to&nbsp;organize resource.<br>\r\nIf i merge all the ResourceDictionary into App.Resource, and all modules can use StaticResource to reference the resource. Only in VisualDesigner or Blend it shows an error,&nbsp;The resource &quot;&quot; could not be resolved.<br>\r\n<br>\r\nShall i drop this idea and donot use Share resource, define one ResourceDictionary for each UI Xaml. <br>\r\nOr in ListBoxResource, define <strong>x:Key</strong> as&nbsp;<strong>x:Key=&quot;{x:Type ListBox}&quot;</strong> instead of a detailed name.<br>\r\n<br>\r\nlooking forward to&nbsp;your reply.<br>\r\nThank a lot.<br>\r\n<br>\r\nYohan<br>\r\n<br>\r\n",
    "PostedDate": "2008-09-02T21:54:28.607-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115695",
    "ThreadId": "34723",
    "Html": "<p>Yohan,</p>\r\n<p>I know what you mean about putting the merged resource declaration in the App.Resources for all. I would avoid this because you do not if know other modules would use these resources.</p>\r\n<p>You are correct; this is not a Prism thing but it is extremely important when considering the designer/developer workflow within WPF development. So let's get a useful solution in here to get things moving - try the following:</p>\r\n<p>1.&nbsp;Add the following assembly attribute to your <strong>AssemblyInfo.cs</strong> file&nbsp;to your&nbsp;module:<br>\r\n<strong>[assembly: ThemeInfo(ResourceDictionaryLocation.None, ResourceDictionaryLocation.SourceAssembly)]<br>\r\n</strong>2. Add a folder name <em>Themes</em> in your module project<br>\r\n3. Create a ResourceDictionary class in&nbsp;the Themes folder and&nbsp;name it <strong>generic.xaml</strong><br>\r\n4. Add a reference to your resource and its component in the generic.xaml merged dictionaries collection:<br>\r\n<strong>&lt;ResourceDictionary.MergedDictionaries&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<em>&lt;ResourceDictionary Source=&quot;/[Qualified.AssemblyName];component/[ResourceDictionary.xaml]&quot;/&gt;<br>\r\n</em><strong>&nbsp;&nbsp;&nbsp;&nbsp;<em>&lt;ResourceDictionary Source=&quot;/[Qualified.AssemblyName];component/[ResourceDictionary.xaml]&quot;/&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;...</em></strong><br>\r\n&lt;ResourceDictionary.MergedDictionaries&gt;</strong></p>\r\n<p>This will tell the WPF theming mechanism that you have resource dictionary location(s) within your assembly. When using your resources, VS&nbsp;design time might complain about this, but it is quite fine, it will be resolved at runtime.</p>\r\n<p>Hope this helps,</p>\r\n<p>Andres Olivares</p>\r\n",
    "PostedDate": "2008-09-03T08:34:49.56-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]