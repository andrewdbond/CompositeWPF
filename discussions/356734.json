[
  {
    "Id": "839501",
    "ThreadId": "356734",
    "Html": "\r\n<p>Hello,</p>\r\n<p>I am very new to Sharepoint 2010 and am getting familiar with the Prism architecture. Here is my situation.</p>\r\n<p>My boss would like me to write a silverlight web application that can be hosted in Sharepoint 2010 through&nbsp;a Silverlight Web Part. I would like to use the Prism (MVVM) architecture to develop this application. I have some test applications that seem\r\n to be working fine.</p>\r\n<p>My boss wants me to collect the Client Model Object from Sharepoint to get the Current User so that I can pass that into services to retrieve the correct information. Each ViewModel will need to be passed this or collect it.</p>\r\n<p>That is my issue. I am able to get the Current User from Sharepoint in the 'Shell.xaml'. But I would like to gather that information inside the App.xaml.cs to pass to the Bootstrapper class or within the Bootstrapper class. Either way so I can pass it into\r\n each of my views. If that cannot be done, I would like to get the information in each of the View's ViewModel class. When I try the latter I get errors referencing my Bootstrapper and not being intialized.</p>\r\n<p>Any suggestions?</p>\r\n",
    "PostedDate": "2012-05-22T10:03:00.863-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "839565",
    "ThreadId": "356734",
    "Html": "<p>Hi,</p>\r\n<p>If I understood currently, you are able to obtain the <strong>Current User</strong> in your <strong>Shell </strong>and you want to share that information to the rest of the views / view models in your application. If so, I believe a possible approach could be to define a <em><strong>shared service</strong></em> that would be known by all the views / view models and where the <strong>Shell </strong>can load the information of the <strong>Current User</strong>.</p>\r\n<p>For example, you could define a <strong>CurrentUserService </strong>in your <strong>Shell </strong>project that could expose a <strong>CurrentUser </strong>property and a <strong>CurrentUserChanged </strong>event. If a view / view model needs to know the <strong>Current User</strong>, it could retrieve the service though <strong><em>dependency injection</em></strong> and obtain the <strong>Current User</strong> from its <strong>CurrentUser </strong>property. If the <strong>Current User</strong> is not loaded in the <strong>CurrentUserService </strong>yet, the views / view models could subscribe to the <strong>CurrentUserChanged </strong>event to be notified when the <strong>Current User</strong> is available in the service (this may not be required, but might be useful to avoid possible timing issues). Then, in the <strong>Shell </strong>you could also retrieve the service through <em><strong>dependency injection</strong></em> and load the <strong>Current User</strong> in its <strong>CurrentUser </strong>property so that it could be available for the rest of the views.</p>\r\n<p>You can find more information about <em><strong>shared services</strong></em> in the following chapter of the Prism documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28v=pandp.40%29#sec7\">Chapter 9 - Communicating Between Loosely Coupled Components - Shared Services</a></li>\r\n</ul>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-05-22T12:04:55.01-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "840009",
    "ThreadId": "356734",
    "Html": "<p>Damian,</p>\r\n<p>First, thank you for pointing me in that direction. I believe it is the way to go, unfortunately it is not working correctly. I have added code from about 4 files that would link an Event together. The project compiles fine and runs. The Shell xaml has a button on it and a region. The Region is made up of another SilverList class library that has a user control in it called InitalView.xaml. If I click the button on the Shell xaml file, I want the program to publish to the CurrentUserEvent with the string \"hello\". At that point the InitialViewModel.cs that subscribes to the CurrentUserEvent would fire and the UpdateUserName function inside the InitialViewModel.cs would run and I would see the word \"hello\" display in that region.</p>\r\n<p>As the program loads, I see the Subscribe line fire off. When I press the button I see the Publish line fire off. It does not fire off the UpdateUserName function in the InitialViewModel.cs that the Subscribe was attached to, so there is no \"hello\" shown in the region. Please let me know if you see anything wrong I am doing.</p>\r\n<p>Here is the code for my event. It is in a Silverlight Class library project I have declared the Event for the system to Subscribe and Publish to.</p>\r\n<pre>using Microsoft.Practices.Prism.Events;\r\n\r\nnamespace MediaReach.Infrastructure.Silverlight\r\n{\r\n    public class CurrentUserEvent : CompositePresentationEvent\r\n    {\r\n\r\n    }\r\n}\r\n</pre>\r\n<p>Here is the code in my Bootstrapper.cs that is called from my App.xaml.cs and uses my Shell.xaml and associates the region to my InitialModule:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">using</span> System;\r\n<span style=\"color: blue;\">using</span> System.Net;\r\n<span style=\"color: blue;\">using</span> System.Windows;\r\n<span style=\"color: blue;\">using</span> System.Windows.Controls;\r\n<span style=\"color: blue;\">using</span> System.Windows.Documents;\r\n<span style=\"color: blue;\">using</span> System.Windows.Ink;\r\n<span style=\"color: blue;\">using</span> System.Windows.Input;\r\n<span style=\"color: blue;\">using</span> System.Windows.Media;\r\n<span style=\"color: blue;\">using</span> System.Windows.Media.Animation;\r\n<span style=\"color: blue;\">using</span> System.Windows.Shapes;\r\n<span style=\"color: blue;\">using</span> Microsoft.Practices.Prism.UnityExtensions;\r\n<span style=\"color: blue;\">using</span> Microsoft.Practices.Prism.Modularity;\r\n\r\n<span style=\"color: blue;\">namespace</span> MediaReach\r\n{\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> Bootstrapper : UnityBootstrapper \r\n    {\r\n        <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> DependencyObject CreateShell()\r\n        {\r\n            Shell rootShell = <span style=\"color: blue;\">new</span> Shell();\r\n            Application.Current.RootVisual = rootShell;\r\n            <span style=\"color: blue;\">return</span> rootShell;\r\n        }\r\n\r\n        <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> IModuleCatalog CreateModuleCatalog()\r\n        {\r\n            ModuleCatalog modules = <span style=\"color: blue;\">new</span> ModuleCatalog();\r\n            modules.AddModule(<span style=\"color: blue;\">typeof</span>(MediaReach.UI.InitialModule));\r\n            <span style=\"color: green;\">//modules.AddModule(typeof(ModuleWorld.WorldModule));</span>\r\n            <span style=\"color: blue;\">return</span> modules;\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>Here is the Shell.xaml.cs that is referenced in the CreateShell function from the Bootstrapper. The function getUserInformation runs when I click on a button in the Shell.xaml page:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">using</span> System;\r\n<span style=\"color: blue;\">using</span> System.Collections.Generic;\r\n<span style=\"color: blue;\">using</span> System.Linq;\r\n<span style=\"color: blue;\">using</span> System.Net;\r\n<span style=\"color: blue;\">using</span> System.Windows;\r\n<span style=\"color: blue;\">using</span> System.Windows.Controls;\r\n<span style=\"color: blue;\">using</span> System.Windows.Documents;\r\n<span style=\"color: blue;\">using</span> System.Windows.Input;\r\n<span style=\"color: blue;\">using</span> System.Windows.Media;\r\n<span style=\"color: blue;\">using</span> System.Windows.Media.Animation;\r\n<span style=\"color: blue;\">using</span> System.Windows.Shapes;\r\n<span style=\"color: blue;\">using</span> Microsoft.SharePoint.Client;\r\n<span style=\"color: blue;\">using</span> System.Threading;\r\n<span style=\"color: blue;\">using</span> Microsoft.Practices.Prism.Events;\r\n<span style=\"color: blue;\">using</span> MediaReach.Infrastructure.Silverlight;\r\n\r\n<span style=\"color: blue;\">namespace</span> MediaReach\r\n{\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">partial</span> <span style=\"color: blue;\">class</span> Shell : UserControl\r\n    {\r\n        <span style=\"color: blue;\">private</span> IEventAggregator eventAggregator { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">set</span>; }\r\n\r\n        <span style=\"color: blue;\">public</span> Shell()\r\n        {\r\n            InitializeComponent();\r\n            <span style=\"color: blue;\">this</span>.eventAggregator = <span style=\"color: blue;\">new</span> EventAggregator(); \r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> getUserInformation(<span style=\"color: blue;\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            <span style=\"color: blue;\">this</span>.eventAggregator.GetEvent&lt;CurrentUserEvent&gt;().Publish(<span style=\"color: #a31515;\">\"hello\"</span>);\r\n        }\r\n\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>Here is the code for MediaReach.UI.InitialModule that is referenced in the Bootstrapper CreateModuleCatalog. It is in the InitialViewModel.cs file that is a View Model that supports the InitialView.xaml page. When the application runs, the&nbsp;system does run the Subscribe code in the InitialViewModel constructor:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">using</span> System;\r\n<span style=\"color: blue;\">using</span> System.Net;\r\n<span style=\"color: blue;\">using</span> System.Windows;\r\n<span style=\"color: blue;\">using</span> System.Windows.Controls;\r\n<span style=\"color: blue;\">using</span> System.Windows.Documents;\r\n<span style=\"color: blue;\">using</span> System.Windows.Ink;\r\n<span style=\"color: blue;\">using</span> System.Windows.Input;\r\n<span style=\"color: blue;\">using</span> System.Windows.Media;\r\n<span style=\"color: blue;\">using</span> System.Windows.Media.Animation;\r\n<span style=\"color: blue;\">using</span> System.Windows.Shapes;\r\n<span style=\"color: blue;\">using</span> MediaReach.UI.View;\r\n<span style=\"color: blue;\">using</span> MediaReach.Infrastructure.Silverlight;\r\n<span style=\"color: blue;\">using</span> Microsoft.Practices.Prism.Events;\r\n\r\n<span style=\"color: blue;\">namespace</span> MediaReach.UI.ViewModel\r\n{\r\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> InitialViewModel : IInitialViewModel \r\n    {\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">readonly</span> IEventAggregator eventAggregator;\r\n\r\n        <span style=\"color: blue;\">public</span> IInitialView View { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">set</span>; }\r\n\r\n        <span style=\"color: blue;\">public</span> InitialViewModel(IInitialView view, IEventAggregator eventAggregator)\r\n        {\r\n            View = view;\r\n            View.Model = <span style=\"color: blue;\">this</span>;\r\n            <span style=\"color: blue;\">this</span>.eventAggregator = eventAggregator;\r\n\r\n            <span style=\"color: blue;\">this</span>.eventAggregator.GetEvent&lt;CurrentUserEvent&gt;().Subscribe(<span style=\"color: blue;\">this</span>.UpdateUserName);\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">string</span> UserName { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">set</span>; }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> UpdateUserName(<span style=\"color: blue;\">string</span> name)\r\n        {\r\n            <span style=\"color: blue;\">this</span>.UserName = name;\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-05-23T10:07:03.553-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "840085",
    "ThreadId": "356734",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I have been analyzing the code snippets you provided, and found the following suggestions:</p>\r\n<p>First, I found that your type payload is missing when you define your event, for example it could look like this, if your event payload is of type string:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> CurrentUserEvent : CompositePresentationEvent&lt;<span style=\"color:blue\">string</span>&gt;{}\n</pre>\r\n</div>\r\n<p>Although, I believe the main cause why your subscriber does not fire when you publish the event, might be related to the fact that in your Shell's code behind a new instance of the\r\n<strong>EventAggretor </strong>is created to publish the event. Instead you should use the container to retrieve the\r\n<strong>EventAggregator </strong>class instance through its <strong>IEventAggregator\r\n</strong>interface.</p>\r\n<p>For example you could easily retrieve the instance of the <strong>EventAggretor\r\n</strong>by using the <strong>ServiceLocator </strong>in your <strong>Shell </strong>\r\nlike this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>ServiceLocator.Current.GetInstance&lt;IEventAggregator&gt;().GetEvent&lt;CurrentUserEvent&gt;().Publish(<span style=\"color:#a31515\">&quot;hello&quot;</span>);\n</pre>\r\n</div>\r\n<p>The other option you have to retrieve this instance from the container could be by using constructor injection like you did in your\r\n<strong>InitialViewModel </strong>constructor, but to achieve this approach you will have to change your\r\n<strong>bootstrapper CreateShell </strong>method to resolve the <strong>Shell </strong>\r\ninstance from the container instead of creating a new one.</p>\r\n<p>Finally, take into account that when changing the <strong>UserName </strong>property in your view model, you may have to notify the\r\n<strong>UI </strong>about this change. For example your view model could inherit from the\r\n<strong>NotificationObject </strong>class provided with Prism which implements the\r\n<strong>INotifyPropertyChanged </strong>interface to achieve this. And for example you could notify the\r\n<strong>UI </strong>when the property changes, using the <strong>RaisePropertyChanged\r\n</strong>method.</p>\r\n<p>Additionally you could find the following resources interesting, regarding the use of the\r\n<strong>EventAggregator</strong>:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28v=pandp.40%29#sec8\">Chapter 9: Communicating Between Loosely Coupled Components, Event Aggregation</a>\r\n</li><li><a href=\"http://msdn.microsoft.com/en-us/library/ff921173%28v=pandp.40%29\">Appendix G: QuickStarts, Event Aggregation QuickStart</a>\r\n</li></ul>\r\n<p>I hope you find this helpful,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-05-23T12:28:55.89-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841020",
    "ThreadId": "356734",
    "Html": "<p>Aadami,</p>\r\n<p>I tried to put in the line</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>ServiceLocator.Current.GetInstance&lt;IEventAggregator&gt;().GetEvent&lt;CurrentUserEvent&gt;().Publish(<span style=\"color: #a31515;\">\"hello\"</span>);\r\n</pre>\r\n</div>\r\n<p>but am getting an error stating The name 'ServiceLocator' does not exist in the current context.</p>\r\n<p>Am I missing a reference or do I have to create a ServiceLocator.</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks again.</p>",
    "PostedDate": "2012-05-25T10:38:07.35-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "841636",
    "ThreadId": "356734",
    "Html": "<p>Hi Kuch,</p>\r\n<p>In order to use the <strong>ServiceLocator </strong>you will have to add a reference to the <strong>Microsoft.Practices.ServiceLocation.dll </strong>in your project, this assembly is provided with the <strong>Prism </strong>source code.</p>\r\n<p>Also if you are interested you could find more information about the use of the <strong>ServiceLocator </strong>in the following link:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921140(v=pandp.40)#sec10\">Using Dependency Injection Containers and Services in Prism</a></li>\r\n</ul>\r\n<p>Regards,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-05-28T06:51:26.61-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "845572",
    "ThreadId": "356734",
    "Html": "<p>Aadami,</p>\r\n<p>Sorry for not replying yet, but I believe that works. Thanks for the help.</p>\r\n<p>Kuch</p>",
    "PostedDate": "2012-06-06T08:20:04.683-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]