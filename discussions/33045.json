[
  {
    "Id": "109516",
    "ThreadId": "33045",
    "Html": "<p>Yesterday's spike is very impressive!&nbsp; Before I continue I should note that the &nbsp;_Prism/Prism.UnityContainerAdapter does not have a reference to the lib/Unity.dll (I got a compile error);&nbsp;I simply removed the reference to my Unity.dll (1.1.0.0) and&nbsp;added a reference to the libs 1.0.0.0 dll and all was happy:)<br>\r\n<br>\r\nSo what is the pattern when all you have is a xaml view (no code behind file) and a PresentationModel?&nbsp;&nbsp; Looks like MVP (particularly Passive) is going to have to move aside...<br>\r\n<br>\r\nDoes the team have any blogs that we can subscribe to?<br>\r\n<strong></p>\r\n<hr>\r\n<p>Views/ProjectsListView/ProjectResourceDictionary.xaml<br>\r\n</strong><br>\r\n&lt;ResourceDictionary xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:local=&quot;clr-namespace:ViewModelComposition.Modules.Project&quot;&gt;</p>\r\n<p>&nbsp;&nbsp;&nbsp; &lt;DataTemplate DataType=&quot;{x:Type local:ProjectsListPresentationModel}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;StackPanel&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;TextBlock Text=&quot;This employee is part of the following projects:&quot;&gt;&lt;/TextBlock&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ListView x:Name=&quot;ProjectsList&quot; ItemsSource=&quot;{Binding Projects}&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ListView.View&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;GridView&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;GridViewColumn Header=&quot;Project&quot; DisplayMemberBinding=&quot;{Binding Path=ProjectName}&quot;&gt;&lt;/GridViewColumn&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;GridViewColumn Header=&quot;Role&quot; DisplayMemberBinding=&quot;{Binding Path=Role}&quot;&gt;&lt;/GridViewColumn&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/GridView&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ListView.View&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ListView&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/StackPanel&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/DataTemplate&gt;<br>\r\n&lt;/ResourceDictionary&gt;</p>\r\n<hr>\r\n<p><strong>Views/ProjectsListView/ProjectsListPresentationModel.cs</strong></p>\r\n<p>//===============================================================================<br>\r\n// Microsoft patterns &amp; practices<br>\r\n// Composite WPF (PRISM)<br>\r\n//===============================================================================<br>\r\n// Copyright (c) Microsoft Corporation.&nbsp; All rights reserved.<br>\r\n// THIS CODE AND INFORMATION IS PROVIDED &quot;AS IS&quot; WITHOUT WARRANTY<br>\r\n// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT<br>\r\n// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND<br>\r\n// FITNESS FOR A PARTICULAR PURPOSE.<br>\r\n//===============================================================================<br>\r\n// The example companies, organizations, products, domain names,<br>\r\n// e-mail addresses, logos, people, places, and events depicted<br>\r\n// herein are fictitious.&nbsp; No association with any real company,<br>\r\n// organization, product, domain name, email address, logo, person,<br>\r\n// places, or events is intended or should be inferred.<br>\r\n//===============================================================================</p>\r\n<p>using System.Collections.ObjectModel;<br>\r\nusing ViewModelComposition.Modules.Project.Services;</p>\r\n<p>namespace ViewModelComposition.Modules.Project<br>\r\n{<br>\r\n&nbsp;&nbsp;&nbsp; public class ProjectsListPresentationModel<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private IProjectService projectService;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ProjectsListPresentationModel(IProjectService projectService)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.projectService = projectService;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Projects = new ObservableCollection&lt;BusinessEntities.Project&gt;();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void SetProjects(int employeeId)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var projects = this.projectService.RetrieveProjects(employeeId);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Projects.Clear();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (var project in projects)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Projects.Add(project);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ObservableCollection&lt;BusinessEntities.Project&gt; Projects { get; set; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string HeaderInfo<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return &quot;Current Projects&quot;; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n}</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2008-08-06T17:01:42.63-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "109631",
    "ThreadId": "33045",
    "Html": "<p>Hi Bill,</p>\r\n<p>A colleague that works with the Prism team has been blogging about this topic, and explaining the differences between these patterns.<br>\r\nCheck this posts:</p>\r\n<ul>\r\n    <li><a href=\"http://blogs.southworks.net/jdominguez/2008/04/using-the-presentation-model-in-wpf/\">Using the Presentation Model in WPF</a></li>\r\n    <li><a href=\"http://blogs.southworks.net/jdominguez/2008/05/first-approach-to-presentation-model-with-datatemplates/\">First approach to Presentation Model with DataTemplates</a></li>\r\n</ul>\r\n<p><a href=\"http://blogs.msdn.com/johngossman/\">John Gossman</a>&nbsp;is&nbsp;also blogging about this.&nbsp;</p>\r\n<p>Please let me know if this helps,<br>\r\n<br>\r\nEzequiel Jadib<br>\r\n<a href=\"http://blogs.southworks.net/ejadib\">http://blogs.southworks.net/ejadib</a> &nbsp;</p>\r\n",
    "PostedDate": "2008-08-07T05:12:02.407-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "109635",
    "ThreadId": "33045",
    "Html": "By the way, the spike that Bill is talking about is the one published on&nbsp;<a href=\"http://www.codeplex.com/CompositeWPF/Release/ProjectReleases.aspx?ReleaseId=14367\">2008-10-06</a> called ViewModelCompositionSpike.<br>\r\n<br>\r\nEzequiel Jadib<br>\r\n<a href=\"http://blogs.southworks.net/ejadib\">http://blogs.southworks.net/ejadib</a>\r\n",
    "PostedDate": "2008-08-07T05:20:00.56-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "109684",
    "ThreadId": "33045",
    "Html": "@Ezequiel, Thanks!&nbsp; Exactly what I was looking for.&nbsp; Can P&amp;P define the pattern?&nbsp; We have Presentation Model, M-V-VM and DM-V-VM.<br>\r\n<br>\r\nTo further complicate matters I trust Fowler will split the Presentation Model, e.g., &quot;Passive PM&quot; if the view is going to handle sychronization suggesting the View will reference the Model (as it does in the spike demo).&nbsp;&nbsp; As Fowler indicates this is more loosely coupled but doesn't permit testing sychronization.&nbsp; EDITED: I think I have that backwards - if he was consistent (which I'm sure he would be) passive would be the Model handling synchronization ;)&nbsp; The point being that it will probably be split...<br>\r\n<br>\r\nIn addition, I really think Dan Crevier's &quot;distinction&quot;&nbsp; between a DataModel and ViewModel is important.<br>\r\n<br>\r\nGuidance from P&amp;P will prevent dis-information as occurred with MVP&nbsp;when it was&nbsp;split by Fowler&nbsp;in 2006;&nbsp; a majority of the community (that&nbsp;I was learning from)&nbsp;was&nbsp;noting the difference between MVC and MVP was that in MVP the view did not communicate with the&nbsp;model (Passive MVP).&nbsp;&nbsp; It wasn't until I stumbled onto Fowler's site that I realized this wasn't the case...&nbsp;Since then I'm pretty much sticking with&nbsp;Fowler and P&amp;P for guidance.<br>\r\n<br>\r\n",
    "PostedDate": "2008-08-07T08:20:10.19-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]