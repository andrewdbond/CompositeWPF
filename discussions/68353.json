[
  {
    "Id": "232476",
    "ThreadId": "68353",
    "Html": "<p><span style=\"font-size:x-small\">\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>My test is below :</pre>\r\n<pre>        [Test]\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> WhenInstantiated_ShouldRegisterIStatusBarViewWithRegionManager()\r\n        {\r\n            <span style=\"color:Blue\">var</span> unity = MockRepository.GenerateStub&lt;IUnityContainer&gt;();\r\n            <span style=\"color:Blue\">var</span> presenter = MockRepository.GenerateStub&lt;IStatusBarViewPresenter&gt;();\r\n            <span style=\"color:Blue\">var</span> view = MockRepository.GenerateStub&lt;IStatusBarView&gt;();\r\n            presenter.View = view;\r\n\r\n            <span style=\"color:Blue\">var</span> eventAggregator = MockRepository.GenerateStub&lt;IEventAggregator&gt;();\r\n            <span style=\"color:Blue\">var</span> regionManager = MockRepository.GenerateStub&lt;IRegionManager&gt;();\r\n            <span style=\"color:Blue\">var</span> regionCollection = MockRepository.GenerateStub&lt;IRegionCollection&gt;();\r\n            <span style=\"color:Blue\">var</span> region = MockRepository.GenerateStub&lt;IRegion&gt;();\r\n\r\n            regionManager.Stub(r =&gt; r.Regions).Return(regionCollection);\r\n            regionCollection.Add(RegionNames.StatusBarRegion, region);\r\n\r\n            unity.Stub(container =&gt; container.Resolve&lt;IEventAggregator&gt;()).Return(eventAggregator);\r\n            unity.Stub(container =&gt; container.Resolve&lt;IRegionManager&gt;()).Return(regionManager);\r\n            unity.Stub(container =&gt; container.Resolve&lt;IStatusBarViewPresenter&gt;()).Return(presenter);\r\n\r\n            <span style=\"color:Blue\">new</span> StatusBarModule(unity).Initialize(); <span style=\"color:Green\">// RegionManager.Regions doesn't contain any regions!!</span>\r\n\r\n            unity.AssertWasCalled(container =&gt; container.Resolve&lt;IEventAggregator&gt;());\r\n            unity.AssertWasCalled(container =&gt; container.Resolve&lt;IRegionManager&gt;());\r\n            unity.AssertWasCalled(container =&gt; container.Resolve&lt;IStatusBarViewPresenter&gt;());\r\n            regionManager.AssertWasCalled(manager =&gt; manager.RegisterViewWithRegion(RegionNames.StatusBarRegion, () =&gt; presenter.View));\r\n        }\r\n\r\nThe part from the StatusBarModule that is pertinent is the following line:</pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre>RegionManager.RegisterViewWithRegion(RegionNames.StatusBarRegion, () =&gt; Container.Resolve&lt;IStatusBarViewPresenter&gt;().View);<span style=\"color:Green\">// RegionManager.Regions doesn't contain any regions!!</span></pre>\r\n<pre>\r\nAny help would be greatly appreciated.\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n</span></p>",
    "PostedDate": "2009-09-08T18:50:16.53-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "233210",
    "ThreadId": "68353",
    "Html": "<p>Hi Bill,</p>\r\n<p>You can mock the functionality related to adding regions as well in this test, since that is part of the Prism tests. I made a small modification to the code and tried if it worked in the immediate window by asking for: <strong>this.regionManager.Regions[&quot;MainRegion&quot;]</strong>, which gave me a non-null result. In order to get that working, I changed this line:</p>\r\n<p><span style=\"font-family:Courier New;font-size:x-small\">regionCollection.Add(RegionNames.StatusBarRegion, region);</span></p>\r\n<p>For this one:</p>\r\n<p><span style=\"font-family:Courier New;font-size:x-small\">regionCollection.Stub(c =&gt;c[RegionNames.StatusBarRegion]).Return(region);</span></p>\r\n<p>Although this will make the Regions collection not empty, this might not make the test pass, as there is some functionality (such as the <strong>RegisterViewWithRegion</strong>) method that has not been mocked, and could throw a <strong>BadImageException</strong>.</p>\r\n<p>You can take a look at the Unit Test in the different Prism <strong>Quickstarts</strong> and <strong>RI</strong>, which might provide some ideas for these mocks.</p>\r\n<p>Please let me know if this helps.</p>\r\n<p>Damian Schenkelman     <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-10T10:14:54.39-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "233269",
    "ThreadId": "68353",
    "Html": "<p>Thanks for that Dan.</p>\r\n<p>I realized that there was an issue with Mocking/Stubing IUnityContainer.RegisterViewWithRegion because it is an extension method and Rhino does not provide any method for mocking extension methods.</p>\r\n<p>Secondly, I have also noticed that in order to stub&nbsp;some functionality&nbsp;I would need knowledge of the internals of particular objects, which is not very helpful!</p>",
    "PostedDate": "2009-09-10T12:16:34.217-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "240205",
    "ThreadId": "68353",
    "Html": "<p>That seems like an awful lot of code to mock one function.&nbsp; Personally I'm not sure that having the static extension class for IRegionManager is the best design in terms of testability.&nbsp; Ideally if I want to test that something adds a view to a region I should be able to do</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">var</span> regionManager = _mocks.DynamicMock&lt;IRegionManager&gt;();\r\nregionManager.AddToRegion(RegionName.MainRegion, _mockView);\r\n_mocks.ReplayAll();\r\n_controllerUnderTest.MyCommand.Execute(<span style=\"color:Blue\">null</span>);\r\n_mocks.VerifyAll();\r\n</pre>\r\n</div>\r\n</p>\r\n<p>If all I want to do is test that the correct method is called in the regionManager with the correct arguments when the command is executed.&nbsp; I shouldn't have to write any more test code than that.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-09-29T16:43:40.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "240221",
    "ThreadId": "68353",
    "Html": "<p>This was really tricky but this is what it took to test this with Rhino mocks:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    [SetUp]\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> Setup() {\r\n      _mocks = <span style=\"color:Blue\">new</span> MockRepository();\r\n      _priceUpdateView = _mocks.Stub&lt;IPriceUpdateView&gt;();\r\n      _serviceLocator = _mocks.Stub&lt;IServiceLocator&gt;();\r\n      _serviceLocator.Stub(c =&gt; c.GetInstance(<span style=\"color:Blue\">typeof</span>(IPriceUpdateView))).Return(_priceUpdateView);\r\n      ServiceLocator.SetLocatorProvider(() =&gt; _serviceLocator);\r\n      _controller = <span style=\"color:Blue\">new</span> TDMenuController(StubRegionManager());\r\n    }\r\n\r\n    <span style=\"color:Blue\">private</span> IRegionManager StubRegionManager() {\r\n      _regionManager = _mocks.Stub&lt;IRegionManager&gt;();\r\n      <span style=\"color:Blue\">var</span> regionCollection = _mocks.Stub&lt;IRegionCollection&gt;();\r\n      _region = _mocks.Stub&lt;IRegion&gt;();\r\n      _regionManager.Stub(m =&gt; m.Regions).Return(regionCollection);\r\n      regionCollection.Stub(m =&gt; m.ContainsRegionWithName(RegionNames.MainRegion)).Return(<span style=\"color:Blue\">true</span>);\r\n      regionCollection.Stub(c =&gt; c[RegionNames.MainRegion]).Return(_region);\r\n      <span style=\"color:Blue\">return</span> _regionManager;\r\n    }\r\n\r\n    [Test]\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> ShowPriceUpdateCommandInvokesPriceUpdateView() {\r\n      Expect.Call(_region.Add(_priceUpdateView)).Return(_regionManager);\r\n      _mocks.ReplayAll();\r\n      _controller.ShowPriceUpdateCommand.Execute(<span style=\"color:Blue\">null</span>);\r\n      _mocks.VerifyAll();\r\n    }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>I really don't like this, but at least I can test all the other commands with another 4 line test.&nbsp; There is probably a better way to do this (I hope!) I am not a Rhino mocks expert by any means.&nbsp;  I sorta wish CAL had used a mocking framework instead of hand coded mocks as I think then the design would be more geared towards that style of test writing.</p>\r\n<p>One other option would be to import the CAL test libraries and use the mocks from that.&nbsp; That is actually a decent option and I may consider doing that.</p>\r\n<p>Chris</p>",
    "PostedDate": "2009-09-29T17:58:47.02-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "240503",
    "ThreadId": "68353",
    "Html": "<p>Ok sorry, one more shot.&nbsp; I realized I wasn't using the AAA syntax correctly which is described <a href=\"http://ayende.com/Blog/archive/2008/05/16/Rhino-Mocks--Arrange-Act-Assert-Syntax.aspx\">here</a>.&nbsp; Doing so has reduced the verbosity of the tests further:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>    [SetUp]\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> Setup() {\r\n      _priceUpdateView = MockRepository.GenerateStub&lt;IPriceUpdateView&gt;();\r\n      _serviceLocator = MockRepository.GenerateStub&lt;IServiceLocator&gt;();\r\n      _serviceLocator.Stub(c =&gt; c.GetInstance(<span style=\"color:Blue\">typeof</span>(IPriceUpdateView))).Return(_priceUpdateView);\r\n      ServiceLocator.SetLocatorProvider(() =&gt; _serviceLocator);\r\n      _controller = <span style=\"color:Blue\">new</span> TDMenuController(ArrangeRegionManager());\r\n    }\r\n\r\n    <span style=\"color:Blue\">private</span> IRegionManager ArrangeRegionManager() {\r\n      _regionManager = MockRepository.GenerateStub&lt;IRegionManager&gt;();\r\n      _regionCollection = MockRepository.GenerateStub&lt;IRegionCollection&gt;();\r\n      _region = MockRepository.GenerateMock&lt;IRegion&gt;();\r\n      _regionManager.Stub(m =&gt; m.Regions).Return(_regionCollection);\r\n      _regionCollection.Stub(m =&gt; m.ContainsRegionWithName(RegionNames.MainRegion)).Return(<span style=\"color:Blue\">true</span>);\r\n      _regionCollection.Stub(c =&gt; c[RegionNames.MainRegion]).Return(_region);\r\n      <span style=\"color:Blue\">return</span> _regionManager;\r\n    }\r\n\r\n    [Test]\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> ShowPriceUpdateCommandInvokesPriceUpdateView() {\r\n      _region.Expect(r =&gt; r.Add(_priceUpdateView)).Return(_regionManager);\r\n      _controller.ShowPriceUpdateCommand.Execute(<span style=\"color:Blue\">null</span>);\r\n      _region.VerifyAllExpectations();\r\n    }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Much cleaner.&nbsp; I can now test that all my menu commands add the correct view to the MainRegion using only three lines and the setup isn't all that bad really and could be extracted to a base class for all similar tests.</p>\r\n<p>Chris</p>",
    "PostedDate": "2009-09-30T09:29:02.577-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]