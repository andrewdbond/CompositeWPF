[
  {
    "Id": "535466",
    "ThreadId": "238303",
    "Html": "\r\n<p>Hi,</p>\r\n<p>In my Shell I have references to a few dll's that have a few Exports within them. To explain better here is how it is</p>\r\n<ul>\r\n<li>Shell (which has App.xaml and that runs the Bootstrapper) has following references\r\n<ul>\r\n<li>ComponentA with a few exports </li><li>ComponentB with a few exports </li></ul>\r\n</li></ul>\r\n<p>In order for the exports to get into the AggregateCatalog in my MefBootstrapper I'm having to do this</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Bootstrapper : MefBootstrapper\r\n{ <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureAggregateCatalog()\r\n        {\r\n            <span style=\"color:blue\">base</span>.ConfigureAggregateCatalog();\r\n\r\n            AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span> AssemblyCatalog(<span style=\"color:blue\">typeof</span>(Bootstrapper).Assembly));\r\n            AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span> AssemblyCatalog(<span style=\"color:blue\">typeof</span>(ComponentA).Assembly));\r\n            AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span> AssemblyCatalog(<span style=\"color:blue\">typeof</span>(ComponentB).Assembly));\r\n}\r\n</pre>\r\n</div>\r\n<p>I would have thought that&nbsp;the exports in the referenced dll's (set to CopyLocal=True) should have automatically got into the AggregateCatalog. In fact event the exports in Shell should do. Is there a reason why it doesnt do it automatically,&nbsp;like\r\n how it does in a downloaded Module (xap)?&nbsp;In fact Shell is also a xap so in effect it should be doing it by itself. I shouldnt be needing to call this as well?</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span> AssemblyCatalog(<span style=\"color:blue\">typeof</span>(Bootstrapper).Assembly));\r\n</pre>\r\n</div>\r\n<p>I think it would be good if it does this automatically in the ConfigureAggregateCatalog in the MefBootstrapper.</p>\r\n",
    "PostedDate": "2010-12-14T03:36:19.503-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "535697",
    "ThreadId": "238303",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Thank you for your feedback. The reason you have to register your assemblies in the\r\n<strong>AggregateCatalog</strong> in the override <strong>ConfigureCatalog</strong> method is because, in order to be able to compose parts, MEF needs the corresponding catalogs to be added to a container, called\r\n<strong>CompositionContainer</strong>. From documentation: &ldquo;<em>The core of the MEF composition model is the composition container, which contains all the parts available and performs composition. (That is, the matching up of imports to exports.) The\r\n most common type of composition container is CompositionContainer&hellip;</em>&rdquo;</p>\r\n<p>In Prism, when MEF&acute;s <strong>CompositionContainer</strong> is created, the\r\n<strong>AggregateCatalog</strong> that is added to it is empty, so you cannot perform any composition as long as you don't add any catalog to the\r\n<strong>AggregateCatalog</strong>.</p>\r\n<p>When you load a module remotely using MEF, &quot;<em>Under the hood, Prism applications using MEF use MEF's\r\n</em><strong><em>DeploymentCatalog</em></strong><em> class to download .xap files and discover the assemblies and types within those .xap files. The\r\n</em><strong><em>MefXapModuleTypeLoader</em></strong><em> adds each </em><strong><em>DeploymentCatalog</em></strong><em> to the\r\n</em><strong><em>AggregateCatalog</em></strong><em>.</em>&quot;. That said, when loading a module remotely, Prism internally adds a catalog to the AggregateCatalog, just like you do in the bootstrapper.</p>\r\n<p>You might find more information about this in the following links:</p>\r\n<p>&middot; Prism documentation: <a href=\"http://msdn.microsoft.com/en-us/library/gg430868%28v=PandP.40%29.aspx\">\r\nChapter 2: initializing Prism Applications</a> and <a href=\"http://msdn.microsoft.com/en-us/library/ff921140%28v=PandP.40%29.aspx\">\r\nChapter 3: Managing Dependencies Between Components</a></p>\r\n<p>&middot; MEF documentation: <a href=\"http://msdn.microsoft.com/en-us/library/dd460648.aspx\">\r\nManaged Extensibility Framework Overview</a> and more specifically <a href=\"http://msdn.microsoft.com/en-us/library/dd460648.aspx#composition_container_and_catalogs\">\r\nthis section</a>.</p>\r\n<p>I hope you find this information useful.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br>\r\n<a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-12-14T10:34:49.393-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]