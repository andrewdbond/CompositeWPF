[
  {
    "Id": "540598",
    "ThreadId": "239601",
    "Html": "\r\n<p>An exception has occurred while trying to add a view to region 'MainNavigationRegion'.&nbsp;&nbsp;&nbsp; &nbsp;- The most likely causing exception was was: 'Microsoft.Practices.ServiceLocation.ActivationException: Activation error occured while trying to\r\n get instance of type ModuleAButtonView, key &quot;&quot; ---&gt; Microsoft.Practices.ServiceLocation.ActivationException: Activation error occured while trying to get instance of type ModuleAButtonView, key &quot;&quot;&nbsp;&nbsp; at Microsoft.Practices.Prism.MefExtensions.MefServiceLocatorAdapter.DoGetInstance(Type\r\n serviceType, String key)&nbsp;&nbsp; at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType, String key)&nbsp;&nbsp; --- End of inner exception stack trace ---&nbsp;&nbsp; at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type\r\n serviceType, String key)&nbsp;&nbsp; at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType)&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionViewRegistry.CreateInstance(Type type)&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionViewRegistry.&lt;&gt;c__DisplayClass1.&lt;RegisterViewWithRegion&gt;b__0()&nbsp;&nbsp;\r\n at Microsoft.Practices.Prism.Regions.Behaviors.AutoPopulateRegionBehavior.OnViewRegistered(Object sender, ViewRegisteredEventArgs e)'.&nbsp;&nbsp; &nbsp;But also check the InnerExceptions for more detail or call .GetRootException().</p>\r\n<p>&nbsp;</p>\r\n<p>Below is the code where I am getting this exception</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ModuleA : IModule\r\n    {\r\n        [Import]\r\n        <span style=\"color:blue\">public</span> IRegionManager RegionManager;\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()\r\n        {\r\n            <span style=\"color:blue\">this</span>.RegionManager.RegisterViewWithRegion(RegionNames.MainNavigationRegion, <span style=\"color:blue\">typeof</span>(ModuleAButtonView)); ----&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Exception is here\r\n            <span style=\"color:blue\">this</span>.RegionManager.RegisterViewWithRegion(RegionNames.MainContentRegion, <span style=\"color:blue\">typeof</span>(ModuleAView));\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>////ButtonView </p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[PartCreationPolicy(CreationPolicy.Shared)] <span style=\"color:green\">// creates a singleton instance of the view</span>\r\n    <span style=\"color:green\">//[ViewExport (RegionName = RegionNames.MainNavigationRegion)] // registers the view with the MainRegion. More info: http://msdn.microsoft.com/en-us/library/ff921074(v=PandP.40).aspx    </span>\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> ModuleAButtonView : UserControl\r\n    {\r\n\r\n        [Import]\r\n        <span style=\"color:blue\">public</span> IRegionManager regionManager;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> IModuleManager moduleManager;\r\n\r\n        <span style=\"color:blue\">private</span> IRegionNavigationService navigationService;\r\n\r\n        [ImportingConstructor]\r\n        <span style=\"color:blue\">public</span> ModuleAButtonView(IModuleManager moduleManager)\r\n        {\r\n            <span style=\"color:blue\">this</span>.moduleManager = moduleManager;\r\n            InitializeComponent();\r\n        }\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> button1_Click(<span style=\"color:blue\">object</span> sender, System.Windows.RoutedEventArgs e)\r\n        {\r\n           \r\n            <span style=\"color:green\">//this.moduleManager.LoadModule(&quot;ModuleA&quot;);</span>\r\n            <span style=\"color:blue\">this</span>.navigationService = regionManager.Regions[RegionNames.MainContentRegion].NavigationService;\r\n           <span style=\"color:green\">//string parameter= (e.OriginalSource as Button).CommandParameter as string;</span>\r\n            UriQuery query = <span style=\"color:blue\">new</span> UriQuery();\r\n\r\n              <span style=\"color:blue\">var</span> uri = <span style=\"color:blue\">new</span> Uri(ViewNames.Home &#43; query.ToString(), UriKind.Relative);\r\n             regionManager.RequestNavigate(RegionNames.MainContentRegion, uri);\r\n        }\r\n    }\r\n</pre>\r\n<pre><br></pre>\r\n<pre><br></pre>\r\n<pre>///Module A View</pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre>[PartCreationPolicy(CreationPolicy.Shared)] <span style=\"color:green\">// creates a singleton instance of the view</span>\r\n    [ViewExport (RegionName = RegionNames.MainContentRegion)] <span style=\"color:green\">// registers the view with the MainRegion. More info: http://msdn.microsoft.com/en-us/library/ff921074(v=PandP.40).aspx    </span>\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> ModuleAView : UserControl, INavigationAware\r\n    {\r\n        <span style=\"color:blue\">public</span> ModuleAView()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> IsNavigationTarget(NavigationContext navigationContext)\r\n        {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">true</span>;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> OnNavigatedFrom(NavigationContext navigationContext)\r\n        {\r\n            \r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> OnNavigatedTo(NavigationContext navigationContext)\r\n        {\r\n            \r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<br></pre>\r\n<pre><br></pre>\r\n<pre>//Viewnames</pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre> <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ViewNames\r\n    {\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">const</span> <span style=\"color:blue\">string</span> Home = <span style=\"color:#a31515\">&quot;ModuleAView&quot;</span>;\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">const</span> <span style=\"color:blue\">string</span> HomeNavItem = <span style=\"color:#a31515\">&quot;ModuleAButtonView&quot;</span>;\r\n    }\r\n</pre>\r\n</div>\r\n<br></pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2010-12-26T11:23:00.067-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "540826",
    "ThreadId": "239601",
    "Html": "\r\n<p>Hi,</p>\r\n<p>The exception you are facing is being thrown because your view (<strong>ModuleAButtonView</strong>) is not registered within the container (in this case MEF) at the time you're trying to register it in a region.</p>\r\n<p>One possible way to solve this would be to decorate your view with the <strong>\r\nExport</strong> <em>attribute</em>. By doing this your view will be registered within MEF, and then you could implement\r\n<strong>View Discovery</strong>, for example like this:<br>\r\n<span lang=\"EN-US\" style=\"color:black; font-size:9.5pt\">&nbsp;</span></p>\r\n<p><span lang=\"EN-US\" style=\"color:black; font-size:9.5pt\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n</span><span lang=\"EN-US\" style=\"color:blue; font-size:9.5pt\">this</span><span lang=\"EN-US\" style=\"color:black; font-size:9.5pt\">.RegionManager.RegisterViewWithRegion(RegionNames.MainNavigationRegion,\r\n</span><span lang=\"EN-US\" style=\"color:blue; font-size:9.5pt\">typeof</span><span lang=\"EN-US\" style=\"color:black; font-size:9.5pt\">(ModuleAButtonView));</span></p>\r\n<p>This is necessary because internally, View Discovery uses the container (in your case MEF) to resolve the views that will be added to a region when they are created. You could check the\r\n<strong>AutoPopulateRegionBehavior </strong>behavior for more information about this.</p>\r\n<p>Another solution you might find useful to register your view using the View Discovery approach, would be to decorate it with\r\n<strong>ViewExport</strong> attribute. Take into account in your <strong>ModuleAButtonView\r\n</strong>class your comment this line, but not in <strong>ModuleAView </strong>class.</p>\r\n<p>If you use <strong>ViewExport</strong>, your view is registered in the region that you're specifying (exactly like when you call the\r\n<strong>RegisterViewWithRegion</strong> method), so there is no need to register the view into the region using the aforementioned method.</p>\r\n<p>You might find the <a href=\"http://prismtk.codeplex.com/\">Prism Training Kit</a>'s MEF Hands-On lab useful, as it provides guidance on the use of the\r\n<strong>ViewExport</strong> attribute.</p>\r\n<p>I hope you find this information useful.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br>\r\n<a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-12-27T07:14:18.687-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "546220",
    "ThreadId": "239601",
    "Html": "\r\n<p>I have the same problem, getting an exception when adding a view to region. My views are marked with ExportAttribute but that didn't solve the problem.<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; [ModuleExport(typeof (ModuleA))]<br>\r\n&nbsp;&nbsp;&nbsp; public class ModuleA : IModule<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Import] public IRegionManager RegionManager;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #region IModule Members<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Initialize()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RegionManager.RegisterViewWithRegion(&quot;ToolbarRegion&quot;, typeof (ToolbarView)); &lt;-------- Causing exception below<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endregion<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;[Export]<br>\r\n&nbsp;&nbsp;&nbsp; public partial class ToolbarView : UserControl<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ImportingConstructor]<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ToolbarView(ToolbarViewModel viewModel)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DataContext = viewModel;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ToolbarView()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; <br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;[Export]<br>\r\n&nbsp;&nbsp;&nbsp; public class ToolbarViewModel : NotificationObject<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private readonly RegionManager regionManager;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ImportingConstructor]<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ToolbarViewModel(RegionManager regionManager)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.regionManager = regionManager;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ICommand ShowCreateSomethingCommand<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return new DelegateCommand&lt;string&gt;(c =&gt; regionManager.RequestNavigate(&quot;MainRegion&quot;, new Uri(typeof(CreateSomethingView).Name, UriKind.Relative))); }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\nMicrosoft.Practices.Prism.Regions.ViewRegistrationException was unhandled by user code<br>\r\n&nbsp; Message=An exception has occurred while trying to add a view to region 'ToolbarRegion'.\r\n<br>\r\n&nbsp;&nbsp;&nbsp; - The most likely causing exception was was: 'Microsoft.Practices.ServiceLocation.ActivationException: Activation error occured while trying to get instance of type ToolbarView, key &quot;&quot; ---&gt; Microsoft.Practices.ServiceLocation.ActivationException:\r\n Activation error occured while trying to get instance of type ToolbarView, key &quot;&quot;<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.MefExtensions.MefServiceLocatorAdapter.DoGetInstance(Type serviceType, String key)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType, String key)<br>\r\n&nbsp;&nbsp; --- End of inner exception stack trace ---<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType, String key)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionViewRegistry.CreateInstance(Type type)<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionViewRegistry.&lt;&gt;c__DisplayClass1.&lt;RegisterViewWithRegion&gt;b__0()<br>\r\n&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.AutoPopulateRegionBehavior.OnViewRegistered(Object sender, ViewRegisteredEventArgs e)'.<br>\r\n&nbsp;&nbsp;&nbsp; But also check the InnerExceptions for more detail or call .GetRootException().\r\n<br>\r\n&nbsp; StackTrace:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionViewRegistry.OnContentRegistered(ViewRegisteredEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionViewRegistry.RegisterViewWithRegion(String regionName, Func`1 getContentDelegate)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionViewRegistry.RegisterViewWithRegion(String regionName, Type viewType)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionManagerExtensions.RegisterViewWithRegion(IRegionManager regionManager, String regionName, Type viewType)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Module.MyModule.MyModule.Initialize()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Modularity.ModuleInitializer.Initialize(ModuleInfo moduleInfo)<br>\r\n&nbsp; InnerException: Microsoft.Practices.ServiceLocation.ActivationException<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Message=Activation error occured while trying to get instance of type ToolbarView, key &quot;&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StackTrace:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType, String key)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionViewRegistry.CreateInstance(Type type)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.RegionViewRegistry.&lt;&gt;c__DisplayClass1.&lt;RegisterViewWithRegion&gt;b__0()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Behaviors.AutoPopulateRegionBehavior.OnViewRegistered(Object sender, ViewRegisteredEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InnerException: Microsoft.Practices.ServiceLocation.ActivationException<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Message=Activation error occured while trying to get instance of type ToolbarView, key &quot;&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StackTrace:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.MefExtensions.MefServiceLocatorAdapter.DoGetInstance(Type serviceType, String key)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType, String key)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InnerException:\r\n<br>\r\n<br>\r\nHowever, if I remove the relation to RegionManager in my ViewModel then I don't get any exception. Like this.<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; [Export]<br>\r\n&nbsp;&nbsp;&nbsp; public class ToolbarViewModel : NotificationObject<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //private readonly RegionManager regionManager;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //[ImportingConstructor]<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //public ToolbarViewModel(RegionManager regionManager)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; this.regionManager = regionManager;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //}<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //public ICommand ShowCreateSomethingCommand<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; get { return new DelegateCommand&lt;string&gt;(c =&gt; regionManager.RequestNavigate(&quot;MainRegion&quot;, new Uri(typeof(CreateSomethingView).Name, UriKind.Relative))); }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //}<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ICommand ShowCreateSomethingCommand<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return new DelegateCommand&lt;string&gt;(c =&gt; MessageBox.Show(&quot;hello&quot;)); }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; <br>\r\nI have tried to inject RegionManager by property as well but no luck.<br>\r\n<br>\r\nCheers,<br>\r\nMartin</p>\r\n",
    "PostedDate": "2011-01-09T06:56:49.677-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "546227",
    "ThreadId": "239601",
    "Html": "\r\n<p>Hi Martin,</p>\r\n<p>&nbsp;</p>\r\n<p>I am using following viewexport attribute to register the views and its working perfectly</p>\r\n<pre>  [ViewExport (RegionName = RegionNames.MainContentRegion)] <span>// registers the view with the MainRegion. More info: http://msdn.microsoft.com/en-us/library/ff921074(v=PandP.40).aspx    </span>\r\n    <span>public</span> <span>partial</span> <span>class</span> ModuleAView : UserControl, INavigationAware\r\n </pre>\r\n<pre><br></pre>\r\n<pre>i hope this helps.</pre>\r\n<pre><br></pre>\r\n<pre>thnx</pre>\r\n",
    "PostedDate": "2011-01-09T07:43:49.583-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "546248",
    "ThreadId": "239601",
    "Html": "\r\n<p>Thanks but no, unfortunately it's not working either. I added ViewExport (and its dependent classes) but ToolbarView is not shown. However, if I remove RegionManager from ToolbarViewModel as I wrote in my previous post then it's showing the view.</p>\r\n<p>Maybe the view is rejected by MEF? But I have looked in Mefx and it's not showing any rejections. But I'm not really sure I have done it right because I'm pretty new to MEF.</p>\r\n<p>Note that the dependency to RegionManager is working in ModuleA class.</p>\r\n<p><br>\r\nStrange.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-01-09T09:05:01.343-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "546758",
    "ThreadId": "239601",
    "Html": "\r\n<p>Hi Martin,</p>\r\n<p>You could try changing the dependency to the <strong>RegionManager </strong>for a dependency to\r\n<strong>IRegionManager</strong>, since an interface mapping is registered with the Region Manager (As you can see in the\r\n<strong>MefRegionManager</strong> class, which exports the <strong>RegionManager</strong> with&nbsp;<strong>IRegionManager\r\n</strong>as the contract type).</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[ImportingConstructor]\r\n<span style=\"color:blue\">public</span> ToolbarViewModel(<strong>IRegionManager </strong>regionManager)\r\n{\r\n      <span style=\"color:blue\">this</span>.regionManager = regionManager;\r\n}\r\n<br></pre>\r\n</div>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi<br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2011-01-10T08:02:44.94-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "546765",
    "ThreadId": "239601",
    "Html": "\r\n<p>Guido,</p>\r\n<p>Yes, that was the problem. I just discovered it also. Thanks!</p>\r\n",
    "PostedDate": "2011-01-10T08:09:09.197-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]