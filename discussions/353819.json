[
  {
    "Id": "829398",
    "ThreadId": "353819",
    "Html": "\r\n<p>I have a startup sequencing problem I'd like to solve in a better way.</p>\r\n<p>What I want to be able to do is have my initial UI (after the shell) be injected via event subscription. &nbsp;But it seems I can't subscribe to any events until after the CreateShell() method completes because other modules aren't initialized yet.</p>\r\n<p>How I've been doing it so far is similar to this:</p>\r\n<ul>\r\n<li>Bootstrapper runs </li><li>CreateShell() method runs, shows the Shell UI </li><li>Inject a predetermined view into a region in the Shell </li><li>CreateShell() method ends </li><li>Then I can either raise an event in the view's code behind window_loaded event, or wait for user input (like on a login screen)\r\n</li></ul>\r\n<p>To give you a better scenario to consider, I have 2 possible login methods: &nbsp;Login screen, or Single Sign on</p>\r\n<p>Using the Login screen is simple and is done using the listed approach above. &nbsp;When the user pressed the Login button I can process the credentials and raise an event to inject other views. &nbsp;No problem.</p>\r\n<p>Now, if I want to use Single Sign On, this means when the CreateShell method runs, I want my Authentication module to load, process credentials then raise an event saying the user is authenticated. &nbsp;Then, whatever module I want can decide what UI to\r\n inject for the user via event subscription.</p>\r\n<p>The only thing I can't do in that scenario is subscribe to events in time. &nbsp;Modules aren't loaded in time durng the CreateShell() method where everything happens.</p>\r\n<p>The process seems to go like this:</p>\r\n<ul>\r\n<li>Bootstrapper runs </li><li>CreateShell() method runs, shows the Shell UI </li><li>Inject user authentication view (hidden) which allows me to authenticate a user in the background\r\n</li><li>Raise an event the user is authenticated </li><li>CreateShell() method ends </li><li>Now modules init and I can subscribe to events, but it's too late, the event has already fired\r\n</li></ul>\r\n<p>Does that make sense?</p>\r\n<p>Perhaps another way to say my question is: &nbsp;How do I raise an event that the bootstrap process is complete so I can inject my initial UI? &nbsp;Or more accurately, how can I subscribe to the event so it will be processed after the bootstapper runs?</p>\r\n<p>Thanks in advance, any ideas are welcome.</p>\r\n",
    "PostedDate": "2012-04-27T08:06:49.41-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "829503",
    "ThreadId": "353819",
    "Html": "<p>Hi,</p>\n<p>In this scenario, I believe that the best approach could be to authenticate the user after the \"start-up\" process is finished and the required modules are loaded. If you want to know when the <strong>Run </strong>method of your <strong>Bootstrapper </strong>has finished, a possible approach could be to execute the logic to authenticate the user in the <strong>App </strong>class after the invocation of the <strong>Run </strong>method:</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> OnStartup(StartupEventArgs e)\n{\n    <span style=\"color: blue;\">base</span>.OnStartup(e);\n    MyBootstrapper bootstrapper = <span style=\"color: blue;\">new</span> MyBootstrapper();\n    bootstrapper.Run();\n    <span style=\"color: green;\">// Invoke method to authenticate user</span>\n}\n</pre>\n</div>\n<p>If instead, you want to do this through an event, as a possible approach you can define your own <strong>Run </strong>method in your <strong>Bootstrapper </strong>so that the original base <strong>Run </strong>method is called and then an event is raised:</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">public new void</span> Run()\n{\n    <span style=\"color: blue;\">base</span>.Run();\n    <span style=\"color: green;\">// Raise an event in your bootstrapper</span>\n}\n</pre>\n</div>\n<p>However, take into account that, in some scenarios, even if the \"<em>bootstrapper process</em>\" is finished it does not mean that the required modules would be available. If you want to make sure that the required modules are loaded you can subscribe to  the <strong>LoadModuleCompleted </strong>event of the <strong>ModuleManager</strong> and wait until all the required modules are loaded.</p>\n<p>Also, I believe that another possible approach could be to use a <strong>Shared Service</strong> instead of using events. For example, when the user is authenticated you can save this state in a service and then, when the corresponding modules are initialized,  each module itself could retrieve the service, check if the user has been authenticated and perform its the corresponding tasks.</p>\n<p>I hope you find this useful,</p>\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-04-27T12:03:19.73-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]