[
  {
    "Id": "231537",
    "ThreadId": "68078",
    "Html": "<p>Since i dont have a blog i thought id post my findings here.</p>\r\n<p>I read this article some time ago: http://blogs.southworks.net/jdominguez/2008/05/first-approach-to-presentation-model-with-datatemplates/</p>\r\n<p>A cool feature but it was unintuitive to use because DataTemplates are not rly all that good to edit in expression blend.</p>\r\n<p>Soo i ended up doing my views as usercontrols and then have a ResourceDictionary for each project where i mapped each viewmodel to a view through a template.</p>\r\n<p>This is pretty ugly since not i have to create an extra file.</p>\r\n<p>I also have to add the datatemplate dictionary to &quot;Application.Current.Resources.MergedDictionaries&quot;.</p>\r\n<p>So i came up with the following solution, Where i register viewmodels with the corresponding view in my code with.</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><div style=\"color:Black;background-color:White\"><pre>    <span style=\"color:Green\">// Author: Robert Nagy</span>\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> ViewManager : IViewManager\r\n    </span>{\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> RegisterView&lt;VM, V&gt;()\r\n        {\r\n            <span style=\"color:Green\">// Not working for some reason</span>\r\n            <span style=\"color:Green\">//ResourceDictionary resourceDictionary = new ResourceDictionary();</span>\r\n\r\n            <span style=\"color:Green\">//DataTemplate dataTemplate = new DataTemplate();</span>\r\n            <span style=\"color:Green\">//dataTemplate.DataType = typeof(VM);</span>\r\n            <span style=\"color:Green\">//dataTemplate.VisualTree = new FrameworkElementFactory(typeof(V));</span>\r\n\r\n            <span style=\"color:Green\">//resourceDictionary.Add(typeof(VM).ToString(), dataTemplate);</span>\r\n\r\n            <span style=\"color:Green\">// Works</span>\r\n            <span style=\"color:Blue\">string</span> data = <span style=\"color:#A31515\">&quot;&lt;ResourceDictionary xmlns=\\&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\\&quot;       &quot;</span> +\r\n                 <span style=\"color:#A31515\">&quot;  xmlns:x=\\&quot;http://schemas.microsoft.com/winfx/2006/xaml\\&quot;                                    &quot;</span> +\r\n                 <span style=\"color:#A31515\">&quot;  xmlns:v=\\&quot;clr-namespace:&quot;</span> + <span style=\"color:Blue\">typeof</span>(V).Namespace + <span style=\"color:#A31515\">&quot;;assembly=&quot;</span> + <span style=\"color:Blue\">typeof</span>(V).Assembly.GetName().Name + <span style=\"color:#A31515\">&quot;\\&quot;          &quot;</span> +\r\n                 <span style=\"color:#A31515\">&quot;  xmlns:vm=\\&quot;clr-namespace:&quot;</span> + <span style=\"color:Blue\">typeof</span>(VM).Namespace + <span style=\"color:#A31515\">&quot;;assembly=&quot;</span> + <span style=\"color:Blue\">typeof</span>(VM).Assembly.GetName().Name + <span style=\"color:#A31515\">&quot;\\&quot;&gt;   &quot;</span> +\r\n                 <span style=\"color:#A31515\">&quot;  &lt;DataTemplate DataType=\\&quot;{x:Type vm:&quot;</span> + <span style=\"color:Blue\">typeof</span>(VM).Name + <span style=\"color:#A31515\">&quot;}\\&quot;&gt;                 &quot;</span> +\r\n                 <span style=\"color:#A31515\">&quot;      &lt;v:&quot;</span> + <span style=\"color:Blue\">typeof</span>(V).Name + <span style=\"color:#A31515\">&quot;/&gt;                                                     &quot;</span> +\r\n                 <span style=\"color:#A31515\">&quot;  &lt;/DataTemplate&gt;                                                                             &quot;</span> +\r\n                 <span style=\"color:#A31515\">&quot;&lt;/ResourceDictionary&gt;                                                                         &quot;</span>;\r\n\r\n            ResourceDictionary resourceDictionary = (ResourceDictionary)XamlReader.Parse(data);\r\n            Application.Current.Resources.MergedDictionaries.Add(resourceDictionary);  \r\n        \r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n<p>then in my bootstrapper i register it with the unitycontainer.</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre> <span style=\"color:Blue\">this</span>.Container.RegisterType&lt;IViewManager, ViewManager&gt;(<span style=\"color:Blue\">new</span> ContainerControlledLifetimeManager());\r\n</pre>\r\n</div>\r\n<p>In my modules i then register my viewmodels with the corresponding view.</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyModule\r\n</span>{\r\n\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> MyModule : IModule\r\n    </span>{\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">readonly</span> IUnityContainer container;\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">readonly</span> IViewManager viewManager;\r\n\r\n\t<span style=\"color:Blue\">public</span> StartModule(IUnityContainer container, IViewManager viewManager)\r\n\t{\r\n\t\t<span style=\"color:Blue\">this</span>.container = container;\r\n\t\t<span style=\"color:Blue\">this</span>.viewManager = viewManager;\r\n\t}\r\n\r\n\t<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> Initialize() \r\n\t{ \r\n\t\t<span style=\"color:Blue\">this</span>.RegisterViewsAndServices(); \r\n\t\t<span style=\"color:Blue\">this</span>.regionManager.Regions[<span style=\"color:#A31515\">&quot;MyRegion&quot;</span>].Add(<span style=\"color:Blue\">this</span>.container.Resolve&lt;IMyViewModel&gt;(); \r\n\t} \r\n\r\n\t<span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">void</span> RegisterViewsAndServices() \r\n\t{ \r\n\t\t<span style=\"color:Blue\">this</span>.container.RegisterType&lt;IMyViewModel, MyViewModel&gt;(); \r\n\t\t<span style=\"color:Blue\">this</span>.viewManager.RegisterView&lt;MyViewModel, MyView&gt;();  <span style=\"color:Green\">// Register ViewModel-View pair.</span>\r\n\t} \r\n}\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n<p>And it works, as soon as i insert a viewmodel into a &quot;region&quot; it gets rendered with the specified view.</p>\r\n<div id=\"_mcePaste\" style=\"overflow:hidden;left:-10000px;top:399px;width:1px;height:1px\">this.Container.RegisterType&lt;IViewManager, ViewManager&gt;(new ContainerControlledLifetimeManager());</div>",
    "PostedDate": "2009-09-06T02:47:37.073-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]