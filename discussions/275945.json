[
  {
    "Id": "684408",
    "ThreadId": "275945",
    "Html": "\r\n<p>We are trying to modularize our WinForms application by adding functionality in the form of PRISM modules.&nbsp; Is it best to host the WinForms app inside of a WPF PRISM application, or the other way around?</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks,<br>\r\nDawid</p>\r\n",
    "PostedDate": "2011-10-14T12:06:11.87-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "684436",
    "ThreadId": "275945",
    "Html": "<p>Dawid,</p>\r\n<p>In my opinion, this decision depends mostly on whether you plan yo migrate your existing application to WPF on the near future. Both approaches are possible in theory (through the use of either the <strong>ElementHost </strong>class to host WPF controls in WinForms ones, or the use of the <strong>WindowsFormsHost </strong>class to do it the other way round).</p>\r\n<p>On the other hand, you might find the following blog posts useful, which treat this subject:</p>\r\n<ul>\r\n<li><span class=\"postTitle\"><a class=\"TitleLinkStyle\" rel=\"bookmark\" href=\"http://www.softinsight.com/bnoyes/2008/10/13/CompositeExtensionsForWindowsForms.aspx\">Composite Extensions for <span class=\"searchword\">Win</span>dows <span class=\"searchword\">Forms</span></a></span></li>\r\n<li><a href=\"http://blogs.msdn.com/b/gblock/archive/2008/10/20/bringing-prism-to-winforms.aspx\">Bringing Prism to WinForms</a></li>\r\n</ul>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-10-14T12:47:02.223-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]