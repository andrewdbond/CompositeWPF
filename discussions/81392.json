[
  {
    "Id": "279354",
    "ThreadId": "81392",
    "Html": "<p>Hello guys, I'm in some sort of confusion: at one hand Microsoft architects and surrounding web community promote MVVM pattern for building WPF apps, but from the other hand in Prism patterns and practices You (PRISM workgroup, which as I know is a Microsoft division) uses absolutely other design patterns - MVP, Presentation Model and Supervising Controller! And not a single example of use pure MVVM! You even say nothing about using MVVM in their PRISM documentation! So, what should one do in this situation? Is it possible to use MVVM pattern in PRISM applications with the same level of freedom as with patterns listed above? I mean would it be more complex or not because of (probably) kind a native architectural optimization for these patterns?<br><br></p>",
    "PostedDate": "2010-01-20T00:43:15.04-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "279402",
    "ThreadId": "81392",
    "Html": "<p>Hi there,</p>\r\n<p>As I understand, Prism guidance is meant to be UI pattern agnostic, but the documentation and samples do demonstrate how Presentation Model and Supervising Controller could be used. What might clear this up is to read this page on <a href=\"http://msdn.microsoft.com/en-us/magazine/dd419663.aspx\">the history of MVVM</a>.</p>\r\n<div id=id0090012 style=\"padding-left:30px\">In 2005, John Gossman, currently one of the WPF and Silverlight Architects at Microsoft, unveiled the <a href=\"http://blogs.msdn.com/johngossman/archive/2005/10/08/478683.aspx\">Model-View-ViewModel (MVVM) pattern</a> on his blog. MVVM is identical to Fowler's Presentation Model, in that both patterns feature an abstraction of a View, which contains a View's state and behavior. Fowler introduced Presentation Model as a means of creating a UI platform-independent abstraction of a View, whereas Gossman introduced MVVM as a standardized way to leverage core features of WPF to simplify the creation of user interfaces. In that sense, I consider MVVM to be a specialization of the more general PM pattern, tailor-made for the WPF and Silverlight platforms.</div>\r\n<p>Note that much of the Prism documentation came together before the community reached consensus as to whether to keep the name MVVM or go back to Presentation Model. Here's just <a href=\"http://groups.google.com/group/wpf-disciples/browse_thread/thread/e5d523caf5c43ea\">such a discussion</a>.</p>\r\n<p>So Presentation Model = MVVM, Supervising Controller = MVP.</p>\r\n<p>It's definitely possible to use MVVM with Prism and it's quite common.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-01-20T03:36:02.81-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "279981",
    "ThreadId": "81392",
    "Html": "<p>I had the same problem as you regarding finding info on Prism and MVVM so I had a go at writing some simple templates that allowed me to play with MVVM and Prism.</p>\r\n<p>You can have a look at my simple article in CodeProject on how I approached&nbsp;the MVVM.</p>\r\n<p><a href=\"http://www.codeproject.com/KB/WPF/SimplePrism.aspx\">http://www.codeproject.com/KB/WPF/SimplePrism.aspx</a></p>\r\n<p>Hope this helps&nbsp;</p>",
    "PostedDate": "2010-01-21T03:50:54.14-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "279996",
    "ThreadId": "81392",
    "Html": "<p>Thanks, I'll check it out!</p>",
    "PostedDate": "2010-01-21T04:41:52.69-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]