[
  {
    "Id": "1028408",
    "ThreadId": "439779",
    "Html": "We have application that uses the Prism library. The application has the <strong><em>WorkSpace</em></strong> region represented with the tab control which allows opening several instances of the same view at the same time (like mdi application).\r<br />\n<br />\nWhat is a way to implement the following scenario:<br />\n<ol>\n<li>\nWe have <strong><em>SearchView</em></strong> which contains <strong><em>FilterView</em></strong> and <strong><em>ResultView</em></strong> child views.<br />\n</li>\n<li>\nWe have several instances of the <strong><em>SearchView</em></strong> which opened in different tabs.<br />\n</li>\n<li>\nSince we use the view-first approach the view model will be created in background for each of views. <strong>But view models will have no relations among themselves in this case, (it seems to be my main problem).</strong><br />\n</li>\n</ol>\nFor example if two <strong><em>SearchView</em></strong> opened, in background we have the following view model objects created:\r<br />\n<br />\n<strong><em>searchViewModel1</em></strong>, <strong><em>filterViewModel1</em></strong>, <strong><em>resultViewModel1</em></strong> \r<br />\nand\r<br />\n<strong><em>searchViewModel2</em></strong>, <strong><em>filterViewModel2</em></strong>, <strong><em>resultViewModel2</em></strong>.\r<br />\n<br />\nWhen user clicks the “Apply Filter” button in the first tab, the <strong><em>filterViewModel1</em></strong> should notify the <strong><em>resultViewModel1</em></strong> to reload data.\r<br />\n<br />\nBut I am not sure, how we can notify the <strong><em>resultViewModel1</em></strong> only, but not the <strong><em>resultViewModel2</em></strong>?\r<br />\n<br />\nIf I will use the event aggregator, the both <strong><em>resultViewModel1</em></strong> and <strong><em>resultViewModel2</em></strong> will be subscribed to refresh event....\r<br />\n<br />\n<img src=\"http://static.panoramio.com/photos/1920x1280/88615085.jpg\" alt=\"Image\" /><br />\n",
    "PostedDate": "2013-04-10T06:13:42.41-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1028583",
    "ThreadId": "439779",
    "Html": "Hi,\r<br />\n<br />\nBased on my understanding, <strong>EventAggregator</strong> provides a <strong>Subscription Filtering</strong> feature which can come in handy in this type of situations. However, you will need to have a shared <strong>ID</strong> between your <strong>FilterViewModel</strong> and <strong>ResultViewModel</strong> so when you <strong>Publish</strong> the event, you send that <strong>ID</strong> as part of the parameter, and then the subscribers can filter the published events using that <strong>ID</strong>. There are different ways to do this, which mostly depends on how your application is designed:<br />\n<h1></h1>\n<ul>\n<li>\nYou can set a unique <strong>GUID</strong> when you initialize your <strong>SearchView</strong> and pass that <strong>GUID</strong> through injection to the <strong>Filter</strong> and <strong>Result</strong> view models, so they can <strong>Publish</strong> it and filter the events accordingly<br />\n</li>\n<li>\nIf you have another region inside your <strong>SearchView</strong>, which contains both your <strong>FilterViewModel</strong> and <strong>ResultViewModel</strong>, you can simply set a value to that region context and use it for your event filtering<br />\n</li>\n</ul>\nIf you need more information about subscription filtering, you can visit the following section of the <strong>Prism</strong> documentation:<br />\n<h1></h1>\n<ul>\n<li>\n<a href=\"http://msdn.microsoft.com/en-us/library/ff921122(v=pandp.40).aspx#sec16\" rel=\"nofollow\">Chapter 9: Communicating Between Loosely Coupled Components - Subscription Filtering</a><br />\n</li>\n</ul>\nHope this helps,\r<br />\n<br />\nFederico Martinez \r<br />\n<a href=\"http://blogs.southworks.net/fmartinez\" rel=\"nofollow\">http://blogs.southworks.net/fmartinez</a><br />\n",
    "PostedDate": "2013-04-10T10:54:18.663-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1028609",
    "ThreadId": "439779",
    "Html": "Hi Federico,<br />\n<br />\nThank you very much for reply.<br />\nI also have considered the idea about shared <strong>ID</strong> to setup relation between the <strong>FilterViewModel</strong> and the <strong>ResultViewModel</strong>.<br />\n<br />\nBut I still can't understand how to inject it to the view models...<br />\n<br />\nAs far as I can understand the initialization process will be following:<br />\n<ol>\n<li>\nI call <strong>RequestNavigate</strong> to add the <strong>SearchView</strong> to the tab control ( <strong>WorkSpace</strong> region)<br />\n   As alternative I can resolve the <strong>SearchView</strong> by Unity and add it to the <strong>WorkSpace</strong> region using <strong>RegionManager</strong> .<br />\n</li>\n<li>\nThe <strong>SearchViewModel</strong> is created and injected by Unity into the <strong>SearchView</strong>.<br />\n</li>\n<li>\nSince the <strong>SearchView</strong> has <strong>FilterView</strong> and <strong>ResultView</strong> defined the <strong>FilterView</strong> and the <strong>ResultView</strong> objects is created.<br />\n</li>\n<li>\nThe <strong>FilterViewModel</strong> and the <strong>ResultViewModel</strong> is created and injected by Unity into the <strong>FilterView</strong> and into the <strong>ResultView</strong>.<br />\n</li>\n</ol>\nIt seems I should generate <strong>ID</strong> at the <strong>step 2</strong>, when the <strong>SearchViewModel</strong> is created. But I still not sure, if the <strong>FilterViewModel</strong> and the <strong>ResultViewModel</strong> will be created by the <strong>SearchView</strong> and by the <strong>FilterView</strong> but not by the <strong>SearchViewModel</strong>, how I can access to these view models from the <strong>SearchViewModel</strong> to pass shared <strong>ID</strong>?<br />\n<br />\nAre steps 3 &amp; 4 correct? Am I doing something wrong?<br />\n<br />\nI have defined the <strong>SearchView</strong> as<br />\n<pre><code>...\n&lt;DockPanel LastChildFill=&quot;True&quot;&gt;\n    &lt;Expander Header=&quot;Search&quot; IsExpanded=&quot;True&quot; DockPanel.Dock=&quot;Top&quot;&gt;\n        &lt;v:FilterView /&gt;\n    &lt;/Expander&gt;\n    &lt;v:ResultView DockPanel.Dock=&quot;Bottom&quot; /&gt;\n&lt;/DockPanel&gt;\n...</code></pre>\n\n",
    "PostedDate": "2013-04-10T11:50:37.077-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1029123",
    "ThreadId": "439779",
    "Html": "Hi,\r<br />\n<br />\nAs a possible option to do this, you could provide the <strong>ID</strong> by raising an event through <strong>EventAggregator</strong>, so Filter and Result view models can get this <strong>ID</strong> assigned like this:<br />\n<h1></h1>\n<ul>\n<li>\nSubscribe to the event on both <strong>Filter</strong> and <strong>Result</strong> view models constructor and store the <strong>ID</strong> provided<br />\n</li>\n</ul>\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> FilterViewModel(IEventAggregator eventAggregator, ....)\n{\n     <span style=\"color:Green;\">//do things</span>\n\n     <span style=\"color:Blue;\">this</span>.eventAggregator = eventAggregator;\n     <span style=\"color:Blue;\">this</span>.eventAggregator.GetEvent&lt;ProvideIDEvent&gt;().Subscribe(StoreID);\n}\n\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">void</span> StoreID(<span style=\"color:Blue;\">string</span> ID)\n{\n     <span style=\"color:Blue;\">this</span>.FilterID = ID;\n     <span style=\"color:Blue;\">this</span>.eventAggregator.GetEvent&lt;ProvideIDEvent&gt;().Unsubscribe(StoreID);\n}\n\r\n</pre></div><ul>\n<li>\nIn your code behind from <strong>SearchView</strong>, set your <strong>DataContext</strong> to get your <strong>SearchViewModel</strong> from <strong>ServiceLocator</strong>. This must be done after the call to <strong>InitializeComponent</strong> so <strong>Filter</strong> and <strong>Result</strong> view models will be initialized before the <strong>SearchViewModel</strong> <br />\n</li>\n</ul>\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> SearchView()\n{\n     InitializeComponent();\n     <span style=\"color:Blue;\">this</span>.DataContext = <span style=\"color:Blue;\">this</span>.ServiceLocator.Current.GetInstance&lt;SearchViewModel&gt;();\n}\r\n</pre></div><ul>\n<li>\nThen, in your <strong>SearchViewModel</strong>, at the end of your constructor, raise the event that will provide the <strong>ID</strong> to <strong>Filter</strong> and <strong>Result</strong> view models. This <strong>ID</strong> will be used then in <strong>Filter</strong> and <strong>Result</strong> view models to identify between them and know which of the <strong>Result</strong> views should be updated.<br />\n</li>\n</ul>\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">public</span> SearchViewModel(IEventAggregator eventAggregator, ....)\n{\n     <span style=\"color:Green;\">//do things</span>\n\n     <span style=\"color:Blue;\">this</span>.eventAggregator.GetEvent&lt;ProvideIDEvent&gt;().Publish(ID);\n}\r\n</pre></div>This way, each time you open a new <strong>Search</strong> tab, both <strong>Filter</strong> and <strong>Result</strong> views related to this tab will be assigned with a unique <strong>ID</strong> so you can use subscription filtering to determine which <strong>Result</strong> view should be updated. \r<br />\n<br />\nHope this helps,\r<br />\n<br />\nFederico Martinez \r<br />\n<a href=\"http://blogs.southworks.net/fmartinez\" rel=\"nofollow\">http://blogs.southworks.net/fmartinez</a><br />\n",
    "PostedDate": "2013-04-11T10:39:14.88-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1030528",
    "ThreadId": "439779",
    "Html": "Hi Federico,\r<br />\n<br />\nExcellent idea! Thank you very much!<br />\n",
    "PostedDate": "2013-04-15T04:04:54.633-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]