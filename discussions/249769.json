[
  {
    "Id": "580702",
    "ThreadId": "249769",
    "Html": "\r\n<p>Can anyone tell me why this doesn't work?</p>\r\n<p>&#65279;&#65279;&#65279;<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Window</span>\r\n<span style=\"color:red\">x:Class</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">PrismRegions.View.MainView</span><span style=\"color:black\">&quot;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:black\">&quot;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:red\">xmlns:x</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:black\">&quot;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:red\">xmlns:cal</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://www.codeplex.com/CompositeWPF</span><span style=\"color:black\">&quot;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:red\">Title</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Main View</span><span style=\"color:black\">&quot;</span>\r\n<span style=\"color:red\">Height</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">300</span><span style=\"color:black\">&quot;</span>\r\n<span style=\"color:red\">Width</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">300</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">DockPanel</span><span style=\"color:blue\">&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Menu</span>\r\n<span style=\"color:red\">DockPanel.Dock</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Top</span><span style=\"color:black\">&quot;</span>\r\n<span style=\"color:red\">cal:RegionManager.RegionName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">MainMenu</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">\r\n&lt;</span><span style=\"color:#a31515\">MenuItem</span> <span style=\"color:red\">Header</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">_File</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">MenuItem</span> <span style=\"color:red\">\r\nHeader</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">E_xit</span><span style=\"color:black\">&quot;</span>\r\n<span style=\"color:red\">Command</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding ExitCommand}</span><span style=\"color:black\">&quot;</span>\r\n<span style=\"color:blue\">/&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">\r\n&lt;/</span><span style=\"color:#a31515\">MenuItem</span><span style=\"color:blue\">&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">\r\n&lt;</span><span style=\"color:#a31515\">MenuItem</span> <span style=\"color:red\">Header</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">_Edit</span><span style=\"color:black\">&quot;</span>\r\n<span style=\"color:red\">cal:RegionManager.RegionName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">EditMenu</span><span style=\"color:black\">&quot;</span>\r\n<span style=\"color:blue\">/&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Menu</span><span style=\"color:blue\">&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ContentControl</span>\r\n<span style=\"color:blue\">/&gt;</span><br>\r\n&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">DockPanel</span><span style=\"color:blue\">&gt;</span><br>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Window</span><span style=\"color:blue\">&gt;</span><br>\r\n<br>\r\nClearly prism doesn't like regions declared within regions.</p>\r\n<p>Incase you've never tried it, if you try and refer tothe EditMenu region in code it doesn't exist.</p>\r\n<p>So&nbsp;what is the recommended way of achieving nested regions?</p>\r\n<p>In summary my goals are:</p>\r\n<ul>\r\n<li>Module 1 might want to inject an item onto the Edit menu </li><li>Module 2 might want to inject a whole new menu onto the menu bar. </li></ul>\r\n<p>&nbsp;</p>\r\n<p>Many thanks,</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-03-15T05:57:43.53-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "580782",
    "ThreadId": "249769",
    "Html": "<p>Hi,</p>\n<p>I've reproduced the scenario you've mentioned and found that, if you try to add a region directly inside another region, the <strong>ItemsControlRegionAdapter</strong> will fail to attach the <strong>RegionManagerProperty</strong> to the child region, thus making the <strong>RegionManagerRegistrationBehavior</strong> fail to register it into the <strong> RegionManager</strong>.</p>\n<p>This happens because, when you create a region in an <strong>ItemsControl </strong> that already had some children in the <strong>Items </strong>collection, the <strong> ItemsControlRegionAdapter </strong>will clear the <strong>Items </strong>property, add them as views to the newly generated <strong>IRegion</strong>, and then set the control's <strong>ItemsSource </strong> to the IRegion's <strong>Views </strong>property. However, at the moment this is done, the <strong>RegionManagerRegistrationBehavior </strong>will have not registered the parent region in the <strong>RegionManager</strong>, hence its <strong>RegionManager </strong>property will be null. Therefore, since the <strong>Region</strong>'s <strong>InnerAdd </strong>method sets the <strong>RegionManager.RegionManager</strong> attached property into the View that gets added to a region, the view (which in your case is itself a region) won't have its <strong>RegionManager </strong>property set.</p>\n<p>The recommended approach for having nested regions is to add a view containing the nested region into the main region. For example, if you had your Menu region like this:</p>\n<p><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Menu</span> <span style=\"color: red;\"> DockPanel.Dock</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Top</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">cal:RegionManager.RegionName</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">MainMenu</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span><br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">MenuItem</span> <span style=\"color: red;\">Header</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">_File</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span><br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">MenuItem</span> <span style=\"color: red;\">Header</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">E_xit</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Command</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding ExitCommand}</span><span style=\"color: black;\">\"</span> <span style=\"color: blue;\">/&gt;</span><br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">MenuItem</span><span style=\"color: blue;\">&gt;</span><br /> <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Menu</span><span style=\"color: blue;\">&gt;</span></p>\n<p>You could programatically add the <strong>MenuItem </strong>region (in another module, for example):</p>\n<p>&nbsp;</p>\n<div style=\"color: black; background-color: white;\">\n<pre>IRegionManager manager = ServiceLocator.Current.GetInstance&lt;IRegionManager&gt;();\n<span style=\"color: blue;\">var</span> menuItem = <span style=\"color: blue;\">new</span> MenuItem() { Header = <span style=\"color: #a31515;\">\"EditMenu\"</span> };\nmenuItem.SetValue(RegionManager.RegionNameProperty,<span style=\"color: #a31515;\">\"EditMenu\"</span>);\nmanager.Regions[<span style=\"color: #a31515;\">\"MainMenu\"</span>].Add(menuItem);\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>That way, you would avoid the timing issue I've described.</p>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-03-15T08:06:18.357-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "725985",
    "ThreadId": "249769",
    "Html": "<p>I'm experiencing a similar issue where I have a region \"ShellRegion\" in the ShellView, and I want to have another region in one of its nested views, then use the region manager to RequestNavigate the nested view.</p>\r\n<p>What I've tried is XAMLy attributing both the controls that are used for regions with the prism RegionName attached prop.</p>\r\n<p>When I try to refer to the child region, I get an exception that it doesn't exist.</p>\r\n<p>Just to make clear I want to have a \"MainRegion\" that is a descendant of \"ShellRegion\", then I want to RequestNavigate a view inside the child region (\"MainRegion\")</p>",
    "PostedDate": "2012-01-16T13:05:51.897-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "726075",
    "ThreadId": "249769",
    "Html": "\r\n<p>Found answer:</p>\r\n<p>The nested region is added later at runtime after the shell region was registered in the Bootstrapper, and thus has to be explicitly re-registered, I've added the following code to the View that contains the child region (&quot;MainRegion&quot;):</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> MainView(IRegionManager regionManager, MainViewModel vm)\n{\n  InitializeComponent();\n  DataContext = vm;\n  RegionManager.SetRegionManager(mainRegionControl, regionManager);\n  RegionManager.UpdateRegions();\n}</pre>\r\n</div>\r\n<p>Now everything works perfect.</p>\r\n",
    "PostedDate": "2012-01-16T16:11:11.323-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1053720",
    "ThreadId": "249769",
    "Html": "I am having similar issue.\r<br />\n<br />\nI am using a TabControl - regionName is set as &quot;TabRegion&quot; (hence ItemsControlRegionAdapter comes in play) and I add a tabItemView (with nested regions in it) to my TabItem. \r<br />\n<br />\n_mainRegionManager.Regions[&quot;TabRegion&quot;].Add(tabItemView);\r<br />\n<br />\nI observe that my tabItemView in tabitem has RegionManagerProperty set to null.\r<br />\n<br />\nIf I use scoped regions for each tabItem using the following code:\r<br />\n_scopedRegionManager=_mainRegionManager.Regions[&quot;TabRegion&quot;].Add(tabItemView,null,true);\r<br />\n<br />\nthen I am able to see _scopedRegionManager in my tabItemView using the following:\r<br />\nIRegionManager _rm=RegionManager.GetRegionManager(tabItemView);\r<br />\n<br />\nBut any view defined inside the regions in tabItemView returns null for RegionManager property.\r<br />\n<br />\nI tried the solution proposed by GuidoMaliandi and weitzhandler but to no avail.\r<br />\n<br />\nCould you kindly tell me how to get the RegionManager property in views within nested regions (this seems a generic issue with nested regions and not the scoped regions)?\r<br />\nPlease let me know if I could provide more information.\r<br />\n<br />\nThanks,\r<br />\nRDV<br />\n",
    "PostedDate": "2013-06-06T11:46:35.727-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1053757",
    "ThreadId": "249769",
    "Html": "Hi RDV,\r<br />\n<br />\nHave you tried using the <strong>RegionManagerAwareBehavior</strong> shown in my blog post?<br />\n<ul>\n<li>\n<a href=\"http://blogs.southworks.net/dcherubini/2011/11/10/regions-inside-datatemplates-in-prism-v4-using-a-region-behavior/\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini/2011/11/10/regions-inside-datatemplates-in-prism-v4-using-a-region-behavior/</a><br />\n</li>\n</ul>\nI believe it could be helpful to work around your problem. Basically, after registering the region behavior in the <strong>Bootstrapper</strong>, any view or view model that implements <strong>IRegionManagerAware</strong> will find its <strong>RegionManager</strong> property  (the one declared in the interface) set with their corresponding <strong>RegionManager</strong> each time they are injected in a <strong>Region</strong>. This should also include any view / view model injected in nested regions.\r<br />\n<br />\nI hope this helps,\r<br />\n<br />\nDamian Cherubini\r<br />\n<a href=\"http://blogs.southworks.net/dcherubini\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini</a><br />\n",
    "PostedDate": "2013-06-06T13:45:43.553-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1054164",
    "ThreadId": "249769",
    "Html": "Hi Damian,<br />\n<br />\nThanks for your response. It was indeed very helpful as always.<br />\nI did look at the <strong>RegionManagerAwareBehavior</strong> class, but I could get pass the issue by just using IRegionManagerAware interface of yours and setting the following in the view which has nested regions:<br />\n<strong>prism:RegionManager.RegionManager=&quot;{Binding TheRegionManager}&quot;</strong><br />\n<br />\nExample:<br />\n<pre><code>&lt;UserControl x:Class=&quot;UC1&quot;\n             xmlns:prism=&quot;http://www.codeplex.com/prism&quot;&gt;\n    &lt;DockPanel&gt;\n        &lt;ContentControl prism:RegionManager.RegionName=&quot;TOP_REGION&quot;  \n                        prism:ClearChildViewsRegionBehavior.ClearChildViews=&quot;True&quot;\n                        DockPanel.Dock=&quot;Top&quot;\n                        prism:RegionManager.RegionManager=&quot;{Binding TheRegionManager}&quot;/&gt;\n        &lt;ContentControl prism:RegionManager.RegionName=&quot;BOTTOM_REGION&quot; \n                        prism:ClearChildViewsRegionBehavior.ClearChildViews=&quot;True&quot;\n                        DockPanel.Dock=&quot;Bottom&quot;\n                        prism:RegionManager.RegionManager=&quot;{Binding TheRegionManager}&quot;/&gt;\n    &lt;/DockPanel&gt;\n&lt;/UserControl&gt;</code></pre>\n\nWe are using ViewModel First apparoach and every viewModel implements IRegionManagerAware interface. In child view's OnVisualParentChanged method we do the following:<br />\n<pre><code>        protected override void OnVisualParentChanged(DependencyObject oldParent)\n        {\n            base.OnVisualParentChanged(oldParent);\n            if (this.MyViewModel != null)\n            {\n                MyViewModel.TheRegionManager = RegionManager.GetRegionManager(this);\n                // If TheRegionManager property is set on content control, then use this.Parent:\n                if (MyViewModel.TheRegionManager == null &amp;&amp; this.Parent != null)\n                {\n                    MyViewModel.TheRegionManager = RegionManager.GetRegionManager(this.Parent);\n                }\n            }\n        }</code></pre>\n\nWe are in the process of studying the <strong>RegionManagerAwareBehavior</strong> and will probably move to it later (half hoping that prism's next release will have this fixed :-) ).<br />\n",
    "PostedDate": "2013-06-07T12:38:07.477-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]