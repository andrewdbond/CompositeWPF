[
  {
    "Id": "139802",
    "ThreadId": "42078",
    "Html": "<p>I have one &quot;MainRegion&quot; (<strong>SingleActiveRegion</strong>) in my shell. My various modules will be\r\nloaded into this main region. I can populate a list of available\r\nmodules in a menu (a module with MenuView.xaml) and select them to load. On the click of the menu I\r\ndo:</p>\r\n(MenuView.xaml.cs)<br>\r\npublic partial class MenuView<br>\r\n{<br>\r\n&nbsp;&nbsp; &nbsp;private readonly IModuleLoader moduleLoader;<br>\r\n&nbsp;&nbsp; &nbsp;private readonly IModuleEnumerator moduleEnumerator;<br>\r\n<br>\r\n&nbsp;&nbsp; &nbsp;public MenuView(IModuleLoader moduleLoader, IModuleEnumerator moduleEnumerator)<br>\r\n&nbsp;&nbsp; &nbsp;{<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.moduleLoader = moduleLoader;<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;this.moduleEnumerator = moduleEnumerator;<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;InitializeComponent();<br>\r\n&nbsp;&nbsp; &nbsp;}<br>\r\n<br>\r\n&nbsp;&nbsp; &nbsp;private void MenuItem_Click(object sender, RoutedEventArgs e)<br>\r\n&nbsp;&nbsp; &nbsp;{<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<strong>var module = moduleEnumerator.GetModule(moduleName);<br>\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;moduleLoader.Initialize(new[] { module });</strong><br>\r\n&nbsp;&nbsp; &nbsp;}<br>\r\n...<br>\r\n}&nbsp;&nbsp;&nbsp; <br>\r\n<br>\r\n<p>At the first time it all works OK, because the Initialize() methods of\r\nthe modules are executed, but after Module1, Module2 and Module3 are\r\ninitialized, nothing happens when I click to load Module2 again (Initialize() doesn't get executed anymore). I am sure my code is wrong as I shouldn't be calling Initialize(), just to activate a module previously initialized, but moduleLoader doesn't give me any other options...</p>\r\n<p>My question: how can I activate a module on demand, after its initialize method has been executed?</p>\r\n<p>Thank you for your help!</p>\r\n",
    "PostedDate": "2008-12-11T12:33:28.28-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "140109",
    "ThreadId": "42078",
    "Html": "<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Hi</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">The Module Loader service only initializes the modules that weren’t initialized (has a collection of all the modules that have been already initialized in order to not initialize the same module twice).</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">What you could do is have your on demand modules’ initializers subscribe to an event in the EventAggregator, but not show any view. Then your MenuView would initialize the module (which will really be initialized only the first time), and later publish that same event in the event aggregator, passing the moduleName as an argument (there’s an overload in the subscription method that will let the module’s initializer filter and get only the events related to itself).</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">This is when your module could reactivate (or add if it’s the first time) the views in the region.</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"color:#1f497d;font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;font-family:'courier new'\">private void MenuItem_Click(object sender, RoutedEventArgs e)</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0in 0in 0pt 1in\"><span style=\"font-size:10pt;font-family:'courier new'\">var module = moduleEnumerator.GetModule(moduleName);</span></p>\r\n<p style=\"margin:0in 0in 0pt 1in\"><span style=\"font-size:10pt;font-family:'courier new'\">moduleLoader.Initialize(new[] { module });</span></p>\r\n<p style=\"margin:0in 0in 0pt 1in\"><span style=\"font-size:10pt;font-family:'courier new'\">eventAggregator.GetEvent&lt;ActivateModuleEvent&gt;().Publish(moduleName);</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">I recommend you to avoid calling the <b>Initialize</b> method more than one time. The purpose of it is to be called only once during the module's loading process, to perform module configuration and set up. The Composite Application Library provides several ways to implement loosely coupled communication among different modules like:</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707867.aspx\"><span style=\"font-family:calibri\">Event Aggregator</span></a><span style=\"font-family:calibri\"> service to publish and subscribe to events</span>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/cc707894.aspx\"><span style=\"font-family:calibri\">Commands</span></a><span style=\"font-family:calibri\"> that allow to handle user interface (UI) actions to bind the UI to the logic that performs the action</span>\r\n<p style=\"margin:0in 0in 0pt -0.25in\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Please let me know if this helps.</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Mariano Converti </span></p>\r\n<span style=\"font-size:11pt;font-family:'calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/mconverti\">http://blogs.southworks.net/mconverti</a></span></span></p>\r\n</span></p>\r\n",
    "PostedDate": "2008-12-12T09:54:22.59-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "140778",
    "ThreadId": "42078",
    "Html": "Thanks Mariano. I will try this route and let you know how it goes.<br>\r\nI appreciate your help!<br>\r\n- Gustavo<br>\r\n",
    "PostedDate": "2008-12-15T16:28:11.94-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]