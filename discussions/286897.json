[
  {
    "Id": "728522",
    "ThreadId": "286897",
    "Html": "\r\n<p>Hello,</p>\r\n<p>I'm trying to make use of ExportFactory&lt;&gt; functionality in the desktop version of WPF using PRISM. As ExportFactory&lt;&gt; is currently only available for Silverlight [MEF 2.0 will change this] I downloaded &#65279;&#65279;&#65279;Glenn's desktop version which he posted\r\n over at&nbsp;&#65279;&#65279;&#65279;&#65279;<a href=\"http://mef.codeplex.com/discussions/207539?ProjectName=mef\">http://mef.codeplex.com/discussions/207539?ProjectName=mef</a>&nbsp;. Now to use this I need to register it with the catalog in the bootstrapper I assume.</p>\r\n<p>Glen's version consists of a test which shows how to setup things:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> SetupMultipleFactories()\r\n        {\r\n            <span style=\"color:blue\">var</span> catalog = <span style=\"color:blue\">new</span> TypeCatalog(<span style=\"color:blue\">typeof</span>(PartA), <span style=\"color:blue\">typeof</span>(PartB), <span style=\"color:blue\">typeof</span>(PartThatUsesACollectionOfFactories));\r\n            <span style=\"color:blue\">var</span> ep = <span style=\"color:blue\">new</span> ExportFactoryProvider();\r\n            _container = <span style=\"color:blue\">new</span> CompositionContainer(catalog, ep);\r\n            ep.SourceProvider = _container;\r\n        }\r\n</pre>\r\n</div>\r\n<p>I tried to translate this to PRISM's&nbsp;bootstrapper like so:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureContainer()\r\n        {\r\n            <span style=\"color:blue\">base</span>.ConfigureContainer();\r\n\r\n            <span style=\"color:green\">// Register ExportFactory</span>\r\n            <span style=\"color:blue\">var</span> exportFactoryProvider = <span style=\"color:blue\">new</span> ExportFactoryProvider();\r\n            Container.ComposeExportedValue(exportFactoryProvider);\r\n            exportFactoryProvider.SourceProvider = Container;\r\n        }\r\n</pre>\r\n</div>\r\n<p>But unfortunately it doesn't seem to work with this code:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    [Export(<span style=\"color:blue\">typeof</span>(TestBase))]\r\n    [ExportMetadata(<span style=\"color:#a31515\">&quot;Type&quot;</span>, <span style=\"color:#a31515\">&quot;Test1&quot;</span>)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Test1 : TestBase{}\r\n\r\n    [Export(<span style=\"color:blue\">typeof</span>(TestBase))]\r\n    [ExportMetadata(<span style=\"color:#a31515\">&quot;Type&quot;</span>, <span style=\"color:#a31515\">&quot;Test2&quot;</span>)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Test2 : TestBase { }\r\n\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MainTestClass\r\n    {\r\n        [ImportMany(AllowRecomposition = <span style=\"color:blue\">true</span>)]\r\n        <span style=\"color:blue\">public</span> List&lt;ExportFactory&lt;TestBase, IDictionary&lt;<span style=\"color:blue\">string</span>,<span style=\"color:blue\">object</span>&gt;&gt;&gt; ViewModelFactory { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n    }\r\n</pre>\r\n</div>\r\n<p>When debugging I can see that the Count of ViewModelFactory is 0 where I expect it to be 2. I think this has to do with wrongly registering ExportFactory in the Bootloader. Anyone who can help? Much appriciated!</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-01-20T18:15:40.123-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "728770",
    "ThreadId": "286897",
    "Html": "<p>Okay, I found out that the Providers property on the Catalog property in the Bootstrapper actually had Count = 0. This proved my assumption that the ExportFactoryProvider was not registered with the Catalog.</p>\n<p>For me it was hard to figure out how to register it correctly, but after much of reading I think I found the correct way:</p>\n<div style=\"background-color: white; color: black;\">\n<pre>        <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> CompositionContainer CreateContainer()\r\n        {\r\n            <span style=\"color: blue;\">var</span> exportFactoryProvider = <span style=\"color: blue;\">new</span> ExportFactoryProvider();\r\n            <span style=\"color: blue;\">var</span> container = <span style=\"color: blue;\">new</span> CompositionContainer(AggregateCatalog, exportFactoryProvider);\r\n            exportFactoryProvider.SourceProvider = container;\r\n            <span style=\"color: blue;\">return</span> container;\r\n        }</pre>\n</div>\n<p>The override of ConfigureContainer I came up with in my first post can be removed as it is not needed anymore.</p>\n<p>Unfortunately while the catalog now contains the ExportFactoryProvider in the Providers property i receive another error while trying to use it.</p>\n<p>When the class in which I defined the ViewModelFactory property&nbsp;loads I receive a NullPointerException at the following statement in the 'ExportFactoryInstantiationProvider.cs' file (part of Glenn's code) in the</p>\n<div style=\"background-color: white; color: black;\">\n<pre><span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> IEnumerable&lt;Export&gt; GetExportsCore(ImportDefinition definition, AtomicComposition atomicComposition)\r\n</pre>\n</div>\n<p>function. At</p>\n<div style=\"background-color: white; color: black;\">\n<pre><span style=\"color: blue;\">if</span> (cbid == <span style=\"color: blue;\">null</span> || !cbid.RequiredTypeIdentity.StartsWith(PartCreatorContractPrefix))\r\n</pre>\n</div>\n<p>The RequiredTypIdentity is null, so the exception thrown is a NullPointerException.</p>\n<p>Am I doing anything wrong? The unit tests glenn created run fine.</p>",
    "PostedDate": "2012-01-21T13:16:46.417-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "729025",
    "ThreadId": "286897",
    "Html": "<p>I have just compiled PRISM against the MEF 2.0 preview 5 source. All unit tests succeeded after doing so. ExportFactor&lt;&gt; now works like a charm. All the additional bootstrap configuration shown in this thread can be ignored when&nbsp;using&nbsp;ExportFactory&lt;&gt; from MEF 2. Please note that it's not recommended to run this configuration in production as MEF 2 isn't final yet.</p>",
    "PostedDate": "2012-01-22T15:02:25.13-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "729489",
    "ThreadId": "286897",
    "Html": "<p>Hi,</p>\r\n<p>I am glad that you found a solution to your problem. Also, thanks for sharing your findings with the rest of the community as there might be other users that could find this useful.</p>\r\n<p>Thanks,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-01-23T12:17:44.09-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1069481",
    "ThreadId": "286897",
    "Html": "In case anyone is still trying to use Glenn's ExportFactory lib: There is a fix for the exception Laurens describe. It's in the comments for the file on skydrive:\r<br />\n<br />\nby Jean-Philippe Leconte:\r<br />\n<br />\n(...)\r<br />\n<br />\n I think I found a bug in the ExportFactoryInstantiationProvider.\r<br />\n<br />\nAt line 115 of Microsoft\\ComponentModel\\Composition\\Hosting\\ExportFactoryInstantiationProvider.cs, the line:\r<br />\n<br />\nif (cbid == null || !cbid.RequiredTypeIdentity.StartsWith(PartCreatorContractPrefix))\r<br />\n<br />\nshould be:\r<br />\n<br />\nif (cbid == null || cbid.RequiredTypeIdentity == null || !cbid.RequiredTypeIdentity.StartsWith(PartCreatorContractPrefix))\r<br />\n<br />\nbecause the RequiredTypeIdentity (cbid.RequiredTypeIdentity) is null when there is no required type (Import by name only), thus calling StartsWith on a null string.\r<br />\n<br />\n(...)\r<br />\n<br />\nAfter changing that line of code I managed to get it working with Prism in .NET4.0<br />\n",
    "PostedDate": "2013-07-17T04:57:35.953-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]