[
  {
    "Id": "806263",
    "ThreadId": "347507",
    "Html": "\r\n<p>I admit this now - I'm doing this backwards in that the application has been written before the unit tests ;) (I have, of course, slapped my own wrists for doing it that way!)</p>\r\n<p>The issue I'm facing is that I have a view model that calls a WCF service to return some data which is bound to a grid in the view.&nbsp; I've mocked up some data, but as soon as I try to get at my viewmodel to do something with it it rolls over and doesn't\r\n even get close to waving a white flag before it dies horribly!</p>\r\n<p>My view models resemble the ones in here http://www.codeproject.com/Articles/165370/Creating-View-Switching-Applications-with-Prism-4 in that my constructor for them calls an intialise method that hooks up commands and uses the event aggregator and service\r\n locator, and I'm beginning to think that the viewmodels are not setup correctly,</p>\r\n<p>&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Snippet <span style=\"color:blue\">from</span> viewmodel \r\n\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Default constructor.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> ModuleAppMatterManagementViewModel()\r\n        {\r\n            <span style=\"color:blue\">this</span>.Initialize();\r\n        }\r\n\r\n   <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Initializes the view model.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> Initialize()\r\n        {\r\n            <span style=\"color:green\">// Initialize command properties</span>\r\n            <span style=\"color:blue\">this</span>.Command1= <span style=\"color:blue\">new</span> Command1Command(<span style=\"color:blue\">this</span>);\r\n\r\n\r\n            <span style=\"color:green\">// Initialize administrative properties</span>\r\n            <span style=\"color:blue\">this</span>.IsChecked = <span style=\"color:blue\">false</span>;\r\n\r\n            <span style=\"color:green\">// Subscribe to Composite Presentation Events</span>\r\n            <span style=\"color:blue\">var</span> eventAggregator = ServiceLocator.Current.GetInstance&lt;IEventAggregator&gt;();\r\n            <span style=\"color:blue\">var</span> navigationCompletedEvent = eventAggregator.GetEvent&lt;NavigationCompletedEvent&gt;();\r\n            navigationCompletedEvent.Subscribe(OnNavigationCompleted, ThreadOption.UIThread);\r\n\r\n<span style=\"color:green\">// code to connect to WCF service and bind data to grid goes here</span>\r\n\r\n}          \r\n</pre>\r\n</div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>snippet <span style=\"color:blue\">from</span> test <span style=\"color:blue\">class</span>\r\n\r\n[TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> TestViewMatters()\r\n        {\r\n\r\n\r\n\r\n            List&lt;TestMatter&gt; matters = <span style=\"color:blue\">new</span> List&lt;TestMatter&gt;();\r\n            matters.Add(TestMatter.CreateMatter(1, <span style=\"color:#a31515\">&quot;open&quot;</span>));\r\n            matters.Add(TestMatter.CreateMatter(2, <span style=\"color:#a31515\">&quot;open&quot;</span>));\r\n            matters.Add(TestMatter.CreateMatter(3, <span style=\"color:#a31515\">&quot;open&quot;</span>));\r\n            matters.Add(TestMatter.CreateMatter(4, <span style=\"color:#a31515\">&quot;open&quot;</span>));\r\n            \r\n            <span style=\"color:green\">//code falls over at the line below</span>\r\n            MatterManagementViewModel target = <span style=\"color:blue\">new</span> MatterManagementViewModel();\r\n\r\n           <span style=\"color:green\">//do stuff with viewmodel and assertions go here</span>\r\n\r\n       \r\n\r\n    } \r\n</pre>\r\n</div>\r\nDoes anyone have any thoughts????\r\n<p></p>\r\n",
    "PostedDate": "2012-03-06T08:10:19.253-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "806330",
    "ThreadId": "347507",
    "Html": "<p>Hi,</p>\n<p>Based on my understanding, when testing an application, the usual approach is to mock all the dependencies required by the element being tested. This includes the WCF service, not only the data.</p>\n<p>I couldn't find why the view model fails when tested in the code snippets provided above. However, if your view model obtains the WCF service through the service locator doing something like this:</p>\n<div style=\"color: black; background-color: white;\">\n<pre><strong>IWcfService service = ServiceLocator.Current.GetInstance&lt;IWcfService&gt;();</strong>\n</pre>\n</div>\n<p>Then you should, in the test method, be able to register a mocked service in the container using the same interface. When retrieving the service, the view model will receive the mocked service instead.</p>\n<p>As a side note, I believe you could find the unit tests included in the <strong> QuickStarts </strong>and <strong>Reference Implementation</strong> provided by Prism useful, as a base to understand how Prism applications are tested.</p>\n<p>I hope you find this useful,</p>\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-03-06T09:49:23.697-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]