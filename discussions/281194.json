[
  {
    "Id": "704796",
    "ThreadId": "281194",
    "Html": "\r\n<p>I am using Prism &#43; MVVM to Inject views in regions. I use several Childwindows using Interaction requests, but I am unable to define Regions in these Childwindows. The RegionManager isn't avaibale/accesible in the xaml and xaml.cs files. With Interaction\r\n requests, I can't add parameters in the constructor, to pass the RegionManager.</p>\r\n<p>From the View that shows the Childwindow, we call the following Interaction request from the ViewModel:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> PopupCmdExecute( <span style=\"color:blue\">string</span> str )\r\n        {\r\n            <span style=\"color:blue\">this</span>._PopupRequest.Raise(\r\n                <span style=\"color:blue\">new</span> ChildWindows.PopupViewModel(_eventAggregator),\r\n                dialog =&gt;\r\n                {\r\n                    <span style=\"color:blue\">if</span> (dialog.Result.HasValue &amp;&amp; dialog.Result.Value)\r\n                    {\r\n                        \r\n                    }\r\n                });\r\n        }\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>The interaction trigger in the XAML (of the View that raises the popup window):</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">i</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Interaction.Triggers</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">InteractionRequestTrigger</span> <span style=\"color:red\">SourceObject</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding PopupRequest}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">PopupChildWindowAction</span><span style=\"color:blue\">&gt;</span>\r\n                <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">PopupChildWindowAction.ChildWindow</span><span style=\"color:blue\">&gt;</span>\r\n                    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">vs</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">PopupView</span><span style=\"color:blue\">/&gt;</span>\r\n                <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">PopupChildWindowAction.ChildWindow</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">PopupChildWindowAction</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">InteractionRequestTrigger</span><span style=\"color:blue\">&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">i</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Interaction.Triggers</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>---</p>\r\n<p>The following XAML code is from the PopupView that holds the Region:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">controls</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ChildWindow</span> <span style=\"color:red\">x:Class</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ApplicationModule.Views.ChildWindows.PopupView</span><span style=\"color:black\">&quot;</span>\r\n           <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:black\">&quot;</span> \r\n           <span style=\"color:red\">xmlns:x</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:black\">&quot;</span> \r\n           <span style=\"color:red\">xmlns:ei</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/expression/2010/interactions</span><span style=\"color:black\">&quot;</span> \r\n           <span style=\"color:red\">xmlns:i</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/expression/2010/interactivity</span><span style=\"color:black\">&quot;</span> \r\n           <span style=\"color:red\">xmlns:prism</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://www.codeplex.com/prism</span><span style=\"color:black\">&quot;</span>\r\n           <span style=\"color:red\">xmlns:controls</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls</span><span style=\"color:black\">&quot;</span>\r\n           <span style=\"color:red\">Width</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">780</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Height</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">550</span><span style=\"color:black\">&quot;</span> \r\n           <span style=\"color:red\">Title</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Popup</span><span style=\"color:black\">&quot;</span>\r\n           <span style=\"color:red\">AutomationProperties.AutomationId</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">PopupView</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n\r\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n       <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ContentControl</span> <span style=\"color:red\">prism:RegionManager.RegionName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">PopupTestRegion</span><span style=\"color:black\">&quot;</span> \r\n                       <span style=\"color:red\">VerticalContentAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Stretch</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">HorizontalContentAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Stretch</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">controls</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ChildWindow</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>--</p>\r\n<p>Is it possible that I can still acces the RegionManager in the PopupView, without adding it to the constructor of the PopupView? (Because the interaction trigger&nbsp;</p>\r\n<pre><span>&lt;</span><span>prism</span><span>:</span><span>PopupChildWindowAction</span><span>&gt;</span></pre>\r\n<pre><span>doesn't allow parameters in the constructor...)</span></pre>\r\n",
    "PostedDate": "2011-11-29T07:30:02.57-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "704936",
    "ThreadId": "281194",
    "Html": "<p>Hi,</p>\n<p>As a possible approach you could obtain the proper <strong>RegionManager </strong> in the constructor of your <strong>PopupView </strong>and set it as a dependency property of the view:</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">public</span> PopupView()\n{\n    IRegionManager regionManager = ServiceLocator.Current.GetInstance&lt;IRegionManager&gt;();\n    <span style=\"color: blue;\">this</span>.SetValue(RegionManager.RegionManagerProperty, regionManager);\n    InitializeComponent();\n}\n</pre>\n</div>\n<p>In the previous code snippet, a new <strong>RegionManager </strong>is obtained through the <strong>Service Locator</strong>, however you might need to use an existing <strong> RegionManager </strong>or to create a new one and access it outside your <strong> PopupView</strong>. For doing this you could, for example, use a shared service (e.g. an object registered as a singleton in the container) to pass the <strong>RegionManager </strong>to/from the <strong>PopupView</strong> and obtain the shared service through the <strong>Service Locator</strong>. However, the specific details of how to implement this depends mostly of your personal preferences and the requirements of your scenario.</p>\n<p>As a side note, if you use the view discovery approach (for example, registering a view in a region with the <strong>RegisterViewWithRegion </strong>method) it's not required for the view containing the region (in this case the <strong>PopupView</strong>) to have a <strong>RegionManager </strong>attached.</p>\n<p>Also, in case you require a <strong>PopupChildWindowAction </strong>with a custom behavior (like for example, accepting parameters for the view) you might find the following thread useful where you can find an example of a custom <strong>PopupChildWindowAction</strong>:</p>\n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/279807\">Modal Dialog</a> </li>\n</ul>\n<p>I hope you find this useful,</p>\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-11-29T12:08:57.683-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]