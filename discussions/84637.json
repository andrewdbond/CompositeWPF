[
  {
    "Id": "289299",
    "ThreadId": "84637",
    "Html": "<p>Hi All,</p>\r\n<p>&nbsp;</p>\r\n<p>On the web, you can find a lot of articles explaining the differences between MVVM / MVP.<br>Although it's hard to find any advantages of MVVM over MVP.. Could somebody list some?</p>\r\n<p>&nbsp;</p>\r\n<p>I use MVP, and with all the buzz around MVVM, I'm trying to see what would be better..<br>In fact, I even see one disadvantage in MVVM:</p>\r\n<p>Suppose you have ViewModel, called CustomerViewModel that represents a Customer model object.<br>(as in the MVVM example at http://code.msdn.microsoft.com/mag200902MVVM/Release/ProjectReleases.aspx?ReleaseId=2026)<br>So the CustomerViewModel has a FirstName property, which it gets from the Customer model object like this:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> FirstName\r\n        {\r\n            <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> _customer.FirstName; }\r\n            <span style=\"color:Blue\">set</span>\r\n            {\r\n                <span style=\"color:Blue\">if</span> (value == _customer.FirstName)\r\n                    <span style=\"color:Blue\">return</span>;\r\n\r\n                _customer.FirstName = value;\r\n\r\n                <span style=\"color:Blue\">base</span>.OnPropertyChanged(<span style=\"color:#A31515\">&quot;FirstName&quot;</span>);\r\n            }\r\n        }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Suppose some other process/view/.. changes the _customer's FirstName, how will this CustomerViewModel, and <br>as a consequence, it's View, be notified of this change?<br>- Should a NotifyPropertyChanged listener be attached to the _customer upon CustomerViewModel creation?</p>\r\n<p>With my MVP approach this all happens automatically, as the View binds directly to Customer.FirstName,<br>with Customer a property on my CustomerPresenter. This seems a very natural thing to do, as WCF proxies etc.<br>create objects that implement INotifyPropertyChanged, and thus are very easy to bind directly to.</p>",
    "PostedDate": "2010-02-11T05:29:30.313-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "289758",
    "ThreadId": "84637",
    "Html": "<p id=81ddf590-f965-012c-054f-12313b019911>Hi,</p>\r\n<p id=81de0290-f965-012c-0550-12313b019911>The following articles talk  about using MVVM in WPF/Silverlight applications and also compare it  with MVP:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/magazine/dd419663.aspx\">WPF  Apps With The Model-View-ViewModel Design Pattern</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/magazine/dd458800.aspx\">Model-View-ViewModel  In Silverlight 2 Apps</a></li>\r\n</ul>\r\n<p id=81de0fa0-f965-012c-0551-12313b019911>As for the particular example  you are exposing, the way to achieve this would be raising the <strong>PropertyChanged</strong> event in the <strong>FirstName </strong>property setter of the Customer  model class. Your VM can then handle this event and if Notify the View  using the <strong>PropertyChanged</strong> event as well.</p>\r\n<p id=81de1d20-f965-012c-0552-12313b019911>Another possible way (which  would avoid having to raise the event in the <strong>ViewModel</strong> again), would be exposing the Customer model class instance as part of  your <strong>ViewModel</strong>. If you have a <strong>CurrentCustomer</strong> property of type <strong>Customer</strong> in your VM you can use the  following syntax for binding:</p>\r\n<p id=81de2b20-f965-012c-0553-12313b019911>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre>&lt;TextBlock Text={Binding CurrentCustomer.FirstName}/&gt;\r\n</pre>\r\n</div>\r\n</p>\r\n<p id=81de3980-f965-012c-0554-12313b019911>Some time ago I created a <a href=\"http://blogs.southworks.net/dschenkelman/2009/11/16/learning-prism-composite-application-guidance-for-wpf-silverlight-mvvm-fundamentals\">blog  post</a> that talks about using MVVM with Prism which you might find  useful.</p>\r\n<p id=81de3980-f965-012c-0554-12313b019911>Please let me  know if this helps.</p>\r\n<p id=81de4820-f965-012c-0555-12313b019911>Damian  Schenkelman    <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2010-02-11T10:20:04.66-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "290005",
    "ThreadId": "84637",
    "Html": "<p>Thanks for your reply Damian,</p>\r\n<p><br>Concerning your solutions:<br>The 1ste: That would be a way to do it, but I think it's double work to first bind your view to the FirstName on the ViewModel, which in turns listens to the FirstName on the actual model.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; That looks to me like a Binding to the ViewModel which in turns &quot;binds&quot; to the Model</p>\r\n<p>The 2nd:&nbsp; I agree with you that exposing the CurrentCustomer Property resolves the issues of solution 1. But then again, I do not see any difference between this solution and the <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MVP approach... (Quote: &quot;With my MVP approach this all happens automatically, as the View binds directly to Customer.FirstName, with Customer a property on my CustomerPresenter.&quot;)<br><br>Thanks again,<br>Koen</p>",
    "PostedDate": "2010-02-12T00:29:19.197-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "290051",
    "ThreadId": "84637",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>KoenJans wrote:</strong><br>\r\n<p>Hi All,</p>\r\n<p>On the web, you can find a lot of articles explaining the differences between MVVM / MVP.<br>\r\nAlthough it's hard to find any advantages of MVVM over MVP.. Could somebody list some?</p>\r\n</blockquote>\r\n<p>&nbsp;You might find the following blog of interest&nbsp;&nbsp; <a href=\"http://www.global-webnet.net/blogengine/post/2010/02/05/MVPVM-Model-View-Presenter-View-Model-the-natural-evolution.aspx\">\r\nMVPVM - Model View Presenter View Model</a>.</p>\r\n<p>Coming from CAB and Smart Client Software Factory I&nbsp;am hardcore MVP.&nbsp;&nbsp; In the WPF environment there is so much we can do with databinding that MVVM is the only logical choice (versus Supervising Controller or Passive View).&nbsp; However,\r\n WPF in the environment of Prism, MEF and Unity (reusable components) with loosely coupled views&nbsp;coupled to shared view models neither MVP or MVVM are efficient alone.&nbsp;&nbsp; For my personal projects, such as my newly activated&nbsp;<a href=\"http://PasswordMgr.CodePlex.com\">http://PasswordMgr.CodePlex.com</a>\r\n &nbsp;(another shameful plug) &nbsp;I go with MVPVM (blog goes into more detail).&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n",
    "PostedDate": "2010-02-12T03:08:59.173-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]