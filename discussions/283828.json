[
  {
    "Id": "715802",
    "ThreadId": "283828",
    "Html": "\r\n<p>I am struggling to understand what is causing DTO's to stay in memory, even though, my VMs are getting GCed (or at least de-referenced).</p>\r\n<p>I used WinDbg and from the returned list, I removed the objects that should still be in memory / or are ready to be collected by GC (this I am verifying by using !GCRoot and checking that no root exits..). However, I got the following list of objects still\r\n in memory:</p>\r\n<p></p>\r\n<pre>      MT    Count    TotalSize Class Name\r\n035c9d90        1           32 System.Func`2[[Resonant.eEnrol.Silverlight.UI.ResonantServiceReference.StudentDetailDto, Resonant.eEnrol.Silverlight.UI],[System.Boolean, mscorlib]]\r\n035c9a1c        1           32 System.Func`2[[Resonant.eEnrol.Silverlight.UI.ResonantServiceReference.Name, Resonant.eEnrol.Silverlight.UI],[System.Boolean, mscorlib]]\r\n0351ece4        1           32 System.Func`2[[Resonant.eEnrol.Silverlight.UI.Modules.Academic.Model.ContactShortModel, Resonant.eEnrol.Silverlight.UI],[System.Boolean, mscorlib]]\r\n035c8de4        4          128 System.Func`2[[Resonant.eEnrol.Silverlight.UI.ResonantServiceReference.Address, Resonant.eEnrol.Silverlight.UI],[System.Boolean, mscorlib]]\r\n5eee17d0        8          160 System.Object[]\r\n035c96a8        5          160 System.Func`2[[Resonant.eEnrol.Silverlight.UI.ResonantServiceReference.Phone, Resonant.eEnrol.Silverlight.UI],[System.Boolean, mscorlib]]\r\n035c85b8       10          320 System.Func`2[[Resonant.eEnrol.Silverlight.UI.ResonantServiceReference.EntityType, Resonant.eEnrol.Silverlight.UI],[System.Boolean, mscorlib]]\r\n\r\n</pre>\r\n<p></p>\r\n<p>As can be seen, most of these are the DTOs that I am using in my Model classes (which are used in VMs). IMPORTANT THING is VMs are GCed (or ready to be GCed).</p>\r\n<p>&nbsp;</p>\r\n<p>Additionally the following is output of my investigation in to few of the above objects:</p>\r\n<p>ContactShortModel (line 3 of the above listing):</p>\r\n<p></p>\r\n<pre>0:008&gt; !dumpheap -mt 0351ece4\r\n Address       MT     Size\r\n0634de20 0351ece4       32     \r\n\r\nStatistics:\r\n      MT    Count    TotalSize Class Name\r\n0351ece4        1           32 System.Func`2[[Resonant.eEnrol.Silverlight.UI.Modules.Academic.Model.ContactShortModel, Resonant.eEnrol.Silverlight.UI],[System.Boolean, mscorlib]]\r\nTotal 1 objects\r\n0:008&gt; !gcroot 0634de20\r\nHandleTable:\r\n    02bd11f4 (pinned handle)\r\n    -&gt; 071d6210 System.Object[]\r\n    -&gt; 0634de20 System.Func`2[[Resonant.eEnrol.Silverlight.UI.Modules.Academic.Model.ContactShortModel, Resonant.eEnrol.Silverlight.UI],[System\r\n\r\nFound 1 unique roots (run '!GCRoot -all' to see all roots).\r\n</pre>\r\n<p></p>\r\n<p>StudentDetailDTO (line 1 of the above listing):</p>\r\n<p></p>\r\n<pre>0:008&gt; !dumpheap -mt 035c9d90\r\n Address       MT     Size\r\n064098e0 035c9d90       32     \r\n\r\nStatistics:\r\n      MT    Count    TotalSize Class Name\r\n035c9d90        1           32 System.Func`2[[Resonant.eEnrol.Silverlight.UI.ResonantServiceReference.StudentDetailDto, Resonant.eEnrol.Silverlight.UI],[System.Boolean, mscorlib]]\r\nTotal 1 objects\r\n0:008&gt; !gcroot 064098e0\r\nHandleTable:\r\n    02bd11f8 (pinned handle)\r\n    -&gt; 071d4220 System.Object[]\r\n    -&gt; 064098e0 System.Func`2[[Resonant.eEnrol.Silverlight.UI.ResonantServiceReference.StudentDetailDto, Resonant.eEnrol.Silverlight.UI],[Syste\r\n\r\nFound 1 unique roots (run '!GCRoot -all' to see all roots).</pre>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>Any more digging in to the System.Object[] addresses doesn't give me anything helpful.</p>\r\n<p>&nbsp;</p>\r\n<p>Can someone please tell me how to proceed ahead with my memory leak detection? Or, am I worrying unnecessarily......</p>\r\n<p>We have started working on a very large project using SL 5/Prism 4. And I want to make it sure that we (developers) are not doing something which can be painful for us later.</p>\r\n<p>Any help would be extremely helpful.</p>\r\n<p>Thanks,</p>\r\n<p>Dharmesh</p>\r\n",
    "PostedDate": "2011-12-21T15:49:18.903-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "716221",
    "ThreadId": "283828",
    "Html": "<p>Hi Dharmesh,</p>\r\n<p>As far as I know, there could be many reasons behind your problem.</p>\r\n<p>Usually, when an object is not being garbage collected, it's because a reference to the object is being kept in some part of your program (e.g. if the object is subscribed to an event, was registered in the container as a singleton instance, etc. )</p>\r\n<p>Based on my understanding, it might also be possible that, if there is no reference to the object and it's ready to be garbage collected, the memory consumed by the object is not being released as no extra memory is required by the system or the application. As explained in the following article: <a href=\"http://msdn.microsoft.com/en-us/library/ee787088.aspx#conditions_for_a_garbage_collection\">Fundamentals of Garbage Collection - Conditions for a Garbage Collection</a>, a garbage collection operation is performed only when certain conditions are met. If none of the required conditions are met, the objects might not be collected until more memory is required. In this case, you can force the garbage collector to run by invoking the <strong>GC.Collect()</strong> method; however, take into account that this is not a commonly recommended approach, so you should only use this for debugging purposes.</p>\r\n<p>You might find the following blog post about finding memory leaks, which includes some links to other useful resources, useful:</p>\r\n<ul>\r\n<li><a href=\"http://blogs.msdn.com/b/delay/archive/2009/03/11/where-s-your-leak-at-using-windbg-sos-and-gcroot-to-diagnose-a-net-memory-leak.aspx\">Where's your leak at? [Using WinDbg, SOS, and GCRoot to diagnose a .NET memory leak]</a></li>\r\n</ul>\r\n<p>Also, as this is not be strictly related to Prism, you could find better support about this in the <a href=\"http://forums.silverlight.net/\">Silverlight forums</a>.</p>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-12-22T10:58:49.867-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "716301",
    "ThreadId": "283828",
    "Html": "<p>Thanks for your explanation Damian.</p>\r\n<p>Yes, I would rather post my problem in SL forum.</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks again,</p>\r\n<p>Dharmesh</p>",
    "PostedDate": "2011-12-22T13:28:28.293-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]