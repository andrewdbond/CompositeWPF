[
  {
    "Id": "901612",
    "ThreadId": "392362",
    "Html": "\r\n<p>Our scenario is:</p>\r\n<p>Our product uses prism/unity to load modules. &nbsp;Most of our projects target the .NET 4.0 framework, but some of them target the 3.5 framework (for reuse on mobile platforms). &nbsp;The 3.5 projects have the &quot;specific version&quot; property of all of their\r\n references set to false. &nbsp;This should allow the 3.5 projects to run under just the 4.0 framework. &nbsp;However, when using the module loading functionality, we get exceptions stating that the 3.5 framework versions of System.Core etc cannot be found.\r\n &nbsp;</p>\r\n<p>The stack trace of the exception is below. &nbsp;Note the GetExportedTypes call which ends up calling Assembly.ReflectionOnlyLoad. &nbsp;According to various documentation and blogs, I see that ReflectionOnlyLoad does not take publishers binding redirection\r\n into account. &nbsp;This means that you need to have the exact version of the .NET framework installed on the target machine when using unity module initialization. &nbsp;Am I correct here? &nbsp;Are there any work-arounds?</p>\r\n<p>&nbsp;</p>\r\n<p></p>\r\n<pre>---------------------------\r\nModule Initialization Exception\r\n---------------------------\r\nModule Initialization exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' or one of its dependencies. The system cannot find the file specified.\r\nFile name: 'System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' ---&gt; System.IO.FileNotFoundException: Could not load file or assembly 'System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' or one of its dependencies. The system cannot find the file specified.\r\nFile name: 'System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'\r\n   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark&amp; stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\r\n   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, StackCrawlMark&amp; stackMark, Boolean forIntrospection, Boolean suppressSecurityChecks)\r\n   at System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark&amp; stackMark, Boolean forIntrospection)\r\n   at System.Reflection.Assembly.ReflectionOnlyLoad(String assemblyString)\r\n   at Microsoft.Practices.Prism.Modularity.DirectoryModuleCatalog.InnerModuleInfoLoader.OnReflectionOnlyResolve(ResolveEventArgs args, DirectoryInfo directory)\r\n   at System.AppDomain.OnReflectionOnlyAssemblyResolveEvent(RuntimeAssembly assembly, String assemblyFullName)\r\n\r\n=== Pre-bind state information ===\r\nLOG: User = WIN-2SU06FE6CED\\user\r\nLOG: DisplayName = System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n (Fully-specified)\r\nLOG: Appbase = file:///C:/Users/user/AppData/Local/Apps/2.0/PX0L6PA0.K12/CX3ZDEO7.D8K/itro..tion_7bbd5db6ed1178b5_0003.0002_e3dc8f8b12f96421/\r\nLOG: Initial PrivatePath = NULL\r\nCalling assembly : (Unknown).\r\n===\r\nLOG: This is an inspection only bind.\r\nLOG: Using application configuration file: C:\\Users\\user\\AppData\\Local\\Apps\\2.0\\PX0L6PA0.K12\\CX3ZDEO7.D8K\\itro..tion_7bbd5db6ed1178b5_0003.0002_e3dc8f8b12f96421\\company.Fdm.Windows.Client.exe.config\r\nLOG: Using host configuration file: \r\nLOG: Using machine configuration file from C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\config\\machine.config.\r\nLOG: Attempting download of new URL file:///C:/Users/user/AppData/Local/Apps/2.0/PX0L6PA0.K12/CX3ZDEO7.D8K/itro..tion_7bbd5db6ed1178b5_0003.0002_e3dc8f8b12f96421/System.Core.DLL.\r\nLOG: Attempting download of new URL file:///C:/Users/user/AppData/Local/Apps/2.0/PX0L6PA0.K12/CX3ZDEO7.D8K/itro..tion_7bbd5db6ed1178b5_0003.0002_e3dc8f8b12f96421/System.Core/System.Core.DLL.\r\nLOG: Attempting download of new URL file:///C:/Users/user/AppData/Local/Apps/2.0/PX0L6PA0.K12/CX3ZDEO7.D8K/itro..tion_7bbd5db6ed1178b5_0003.0002_e3dc8f8b12f96421/System.Core.EXE.\r\nLOG: Attempting download of new URL file:///C:/Users/user/AppData/Local/Apps/2.0/PX0L6PA0.K12/CX3ZDEO7.D8K/itro..tion_7bbd5db6ed1178b5_0003.0002_e3dc8f8b12f96421/System.Core/System.Core.EXE.\r\n\r\n   at System.Reflection.RuntimeAssembly.GetExportedTypes(RuntimeAssembly assembly, ObjectHandleOnStack retTypes)\r\n   at System.Reflection.RuntimeAssembly.GetExportedTypes()\r\n   at Microsoft.Practices.Prism.Modularity.DirectoryModuleCatalog.InnerModuleInfoLoader.&lt;&gt;c__DisplayClassf.b__b(FileInfo file)\r\n   at System.Linq.Enumerable.d__14`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n   at Microsoft.Practices.Prism.Modularity.DirectoryModuleCatalog.InnerModuleInfoLoader.GetModuleInfos(String path)\r\n   at Microsoft.Practices.Prism.Modularity.DirectoryModuleCatalog.InnerModuleInfoLoader.GetModuleInfos(String path)\r\n   at Microsoft.Practices.Prism.Modularity.DirectoryModuleCatalog.InnerLoad()\r\n   at Microsoft.Practices.Prism.Modularity.ModuleCatalog.Initialize()\r\n   at Microsoft.Practices.Prism.Modularity.ModuleManager.Run()\r\n   at Microsoft.Practices.Prism.UnityExtensions.UnityBootstrapper.InitializeModules()\r\n   at company.Fdm.Windows.Client.Bootstrapper.InitializeModules()</pre>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-08-20T10:10:18.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "902039",
    "ThreadId": "392362",
    "Html": "<p>Hi,</p>\r\n<p>Based on my understanding the cause of this error is that the \"<strong>Specific Version</strong>&rdquo; property is only a build-time directive (used by <strong>Visual Studio</strong>). It has no effect on the run-time version resolution of the referenced assembly. Hence, when you run the application, the run-time attempts to bind with the exact version of the assembly that the module was built with, causing the error you mentioned.</p>\r\n<p>Regarding this topic, I believe you could also find the following resources interesting:</p>\r\n<ul>\r\n<li><a href=\"http://social.msdn.microsoft.com/Forums/en/csharpide/thread/11098ece-d1ca-45b7-90be-88df14fa05dd\">Specific Version = False doesn't work as expected</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/7wd6ex19.aspx\">Redirecting Assembly Versions</a></li>\r\n</ul>\r\n<p>Also, as far as I know, the aforementioned scenario is not supported in <strong>Prism </strong>as out of the box, as <strong>Prism </strong>doesn't provide any mechanism to control the versions of the assemblies of each module. In my opinion, usually it's expected that all the modules consumed by the application are compatible between each other and the shell application itself, and that the versions of the assemblies they share are the same.</p>\r\n<p>Regards,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-08-21T09:55:22.89-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "902161",
    "ThreadId": "392362",
    "Html": "<p>Thanks for the reply Agustin. &nbsp;I want to clarify a couple of things.</p>\r\n<p>\"Specific Version is set to false.\" &nbsp;This implies (at least with .NET assemblies) that, depending on the publishers policies, during runtime, a more current version can be used if the exact version is not located. &nbsp;So if I built against System.Core 3.5 but only have System.Core 4.0 on my system, the assembly will bind to the 4.0 version. &nbsp;</p>\r\n<p>Assembly.ReflectionOnlyLoad does not inspect the publishers policies, but&nbsp;requires&nbsp;that the exact version be present on the system. &nbsp;Assembly.Load DOES inspect the publishers policies and will allow a binding redirect.</p>\r\n<p>The DirectoryModuleCatalog does a ReflectionOnlyLoad in order to determine which modules are available in the module directory. &nbsp;The use of ReflectionOnlyLoad puts a restriction on module loading that any referenced assemblies must be the same version that it was built against. &nbsp;Even though during a normal Assembly.Load it may successfully bind to a more current version.</p>\r\n<p>Am I correct so far? &nbsp;If so, it would seem to me that the DirectoryModuleCatalog could change to use Assembly.Load instead of ReflectionOnlyLoad. &nbsp;The ModuleCatalog uses a temporary AppDomain and disposes it after discovering all modules, so there shouldn't be a concern of assemblies being left loaded. &nbsp;I have done this in a local copy of&nbsp;Microsoft.Practices.Prism.dll and this seems to correct the problem.</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks,</p>\r\n<p>&nbsp;</p>\r\n<p>Jeff</p>",
    "PostedDate": "2012-08-21T14:41:23.467-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "902642",
    "ThreadId": "392362",
    "Html": "<p>Hi Jeff,</p>\r\n<p>Thanks for sharing your findings. I believe you could create a work item in the <a href=\"http://compositewpf.codeplex.com/workitem/list/advanced\">Issue Tracker</a> section as a suggestion portraying them, so that the team can analyze it and take it into account for future releases.</p>\r\n<p>Also, take into account that, as far as I know, you can define your custom implementation of a <strong>DirectoryModuleCatalog </strong>without needing to change the <strong>Prism Library</strong>'s source code. You can find more about this in the following chapter of the <strong>Prism </strong>documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg430866%28v=pandp.40%29\">Appendix E - Extending Prism</a></li>\r\n</ul>\r\n<p>Regards,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-08-22T11:01:53.48-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "902732",
    "ThreadId": "392362",
    "Html": "<p>Thank you Damian. &nbsp;I have created an issue and have created a custom class which implements the changes I suggested for our use.</p>",
    "PostedDate": "2012-08-22T15:02:41.29-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]