[
  {
    "Id": "823492",
    "ThreadId": "352230",
    "Html": "<p>I have an application in which each module has a MainView with nested region and its own menu structure, and other module views are shown in this nested&nbsp;region, all views have ViewModels that implements INavigationAware interface. The shell application has a menu that navigates between Modules Main Views. When i navigate to another Module view i want to clear ViewModels of the previous Module views, so i need to call the OnNavigateFrom method of the&nbsp;viewmodels of&nbsp;active views of the&nbsp;previous Module. I set <span style=\"font-family: Consolas; color: #ff0000; font-size: x-small;\"><span style=\"font-family: Consolas; color: #ff0000; font-size: x-small;\"><span style=\"font-family: Consolas; color: #ff0000; font-size: x-small;\"><span style=\"font-family: Consolas; color: #ff0000; font-size: x-small;\">ClearChildViewsRegionBehavior.ClearChildViews</span></span></span></span><span style=\"font-family: Consolas; color: #0000ff; font-size: x-small;\"><span style=\"font-family: Consolas; color: #0000ff; font-size: x-small;\"><span style=\"font-family: Consolas; color: #0000ff; font-size: x-small;\">=\"True\" <span style=\"color: #000000;\">for each MainView and when i navigate away i remove previous active MainView from RegionManager.Regions[\"ShellMainRegion\"] and call </span></span></span></span></p>\n<p>Microsoft.Practices.Prism.Regions.<span style=\"font-family: Consolas; color: #2b91af; font-size: x-small;\"><span style=\"font-family: Consolas; color: #2b91af; font-size: x-small;\"><span style=\"font-family: Consolas; color: #2b91af; font-size: x-small;\">RegionManager</span></span></span><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">.UpdateRegions(); </span></span></p>\n<p><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">to remove child views of the previous active module thinking this will call NavigateFrom methods of the view models of the active views, but this doesnt help too.</span></span></p>\n<p>&nbsp;What is the best pattern to clear view models of the previous active module?</p>\n<p><span style=\"font-family: Consolas; color: #0000ff; font-size: x-small;\">&nbsp;</span></p>\n<div id=\"_mcePaste\" class=\"mcePaste\" style=\"position: absolute; width: 1px; height: 1px; overflow: hidden; top: 0px; left: -10000px;\">ï»¿</div>",
    "PostedDate": "2012-04-13T08:12:22.703-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "823571",
    "ThreadId": "352230",
    "Html": "<p>Hi,</p>\r\n<p>Based on my understanding, when implementing the <strong>INavigationAware </strong>interface, the <strong>OnNavigatedFrom </strong>method of the corresponding view (or view model) will be called when a navigation request is performed on the region containing the aforementioned view. As the scoped views of the \"main view\" are hosted in scoped regions, the <strong>OnNavigatedFrom </strong>method of those view wouldn't be called as the navigation request was performed in the \"main region,\" not in the scoped ones.</p>\r\n<p>If after the navigation request is performed, the \"main view\" and its child views are removed from their corresponding regions (by specifying that the \"main view\" should not be kept alive when deactivated and using the <strong>ClearChildViewsRegionBehavior</strong>) and the reason you wish to call the <strong>OnNavigatedFrom </strong>method of the child views / view models is to execute some kind of \"clean-up logic\" before the they are disposed, a possible approach for this kind of scenario could be to implement the <strong>IDisposable </strong>pattern.</p>\r\n<p>The <strong>.NET Framework</strong> provides an <strong>IDisposable </strong>interface which defines a <strong>Dispose </strong>method. As far as I know, this method would be automatically invoked before the object is garbage collected (in this case, the views or view models) allowing to execute \"clean-up logic,\" for example, releasing resources. You can find more information about this in the following link:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/system.idisposable.aspx\">IDisposable Interface on MSDN</a></li>\r\n</ul>\r\n<p>If the aforementioned is not the case, I believe another possible approach could be to implement some custom logic in the <strong>OnNavigatedFrom </strong>method of the \"main view\" in order to retrieve all of its child elements and their corresponding <strong>DataContext</strong>s, filter them to find which ones implement the <strong>INavigationAware</strong> interface, and invoke their <strong>OnNavigatedFrom </strong>method manually.</p>\r\n<p>Please let us know if we have misunderstood your scenario,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-04-13T11:12:00.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "823602",
    "ThreadId": "352230",
    "Html": "<p>Hi, thanks for your reply.</p>\r\n<p>Yes, my aim is to clear some large collections when navigated away, for memory issues, i thought <span style=\"font-family: Consolas; color: #ff0000; font-size: x-small;\"><span style=\"font-family: Consolas; color: #ff0000; font-size: x-small;\"><span style=\"font-family: Consolas; color: #ff0000; font-size: x-small;\"><span style=\"font-family: Consolas; color: #ff0000; font-size: x-small;\">ClearChildViewsRegionBehavior <span style=\"color: #000000;\">may call OnNavigatedFrom method of&nbsp;active views viewmodels automaticaly. When navigated away from main view, the active views Unloaded event is called so i decided to make calls to <strong>OnNavigatedFrom </strong>method of the viewmodel in that event as you suggested in your reply last part. I dont need to call all viewmodels,&nbsp;becuase only the axctive view will need clearup, if not active it means it is never visited or OnNavigatedFrom is already called.</span></span></span></span></span></p>\r\n<p>\r\n<p><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">\r\n<p>Unloaded += (s, e) =&gt;{ <span style=\"font-family: Consolas; font-size: x-small;\">((</span><span style=\"font-family: Consolas; color: #2b91af; font-size: x-small;\"><span style=\"font-family: Consolas; color: #2b91af; font-size: x-small;\"><span style=\"font-family: Consolas; color: #2b91af; font-size: x-small;\">INavigationAware</span></span></span><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">)</span></span><span style=\"font-family: Consolas; color: #0000ff; font-size: x-small;\"><span style=\"font-family: Consolas; color: #0000ff; font-size: x-small;\"><span style=\"font-family: Consolas; color: #0000ff; font-size: x-small;\">this</span></span></span><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">.DataContext).OnNavigatedFrom(</span></span><span style=\"font-family: Consolas; color: #0000ff; font-size: x-small;\"><span style=\"font-family: Consolas; color: #0000ff; font-size: x-small;\"><span style=\"font-family: Consolas; color: #0000ff; font-size: x-small;\">null</span></span></span><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\">); };</span></span></p>\r\n</span></span>\r\n<p><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\"><span style=\"font-family: Consolas; font-size: x-small;\"></span></span></span><span style=\"font-family: Consolas;\">works.</span></p>\r\n</p>\r\n</p>\r\n<p>&nbsp;Regards.</p>",
    "PostedDate": "2012-04-13T12:40:42.81-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]