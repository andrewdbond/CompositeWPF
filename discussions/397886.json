[
  {
    "Id": "921248",
    "ThreadId": "397886",
    "Html": "\r\n<p>I am using InteractionRequests with a PopupAction a couple different ways. First, the traditional way of simply notifying the user with an OK button. Second, with an OK/Cancel using Confirmation. Finally, I wanted to simply notify the user of the current\r\n state. This notification would display with text, and when the operation finished, the &quot;Complete&quot; method would be called on it, which in turn would close itself.</p>\r\n<p>The problem I am having is that for the third style described above, the window will display, but the text inside does not display. If I specify that I want the window to be Modal, the text will display fine. I suspect there's some threading issue where\r\n the GUI thread is blocking and the text isn't being drawn.</p>\r\n<p>Can anyone help me figure out why my text doesn't display on my notification?</p>\r\n<p><strong>Here is my notification class</strong>:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ZActionNotificationViewModel : Notification, IPopupWindowActionAware\n    {\n        <span style=\"color:blue\">public</span> Window HostWindow { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\n\n        <span style=\"color:blue\">public</span> Notification HostNotification { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\n\n        <span style=\"color:blue\">public</span> ZActionNotificationViewModel()\n        {\n            Title = <span style=\"color:blue\">string</span>.Empty;\n        }\n\n        <span style=\"color:blue\">public</span> ZActionNotificationViewModel(<span style=\"color:blue\">string</span> content)\n            : <span style=\"color:blue\">base</span>()\n        {\n            <span style=\"color:blue\">this</span>.Content = content;\n        }\n\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> CompleteAction()\n        {\n            <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.HostWindow != <span style=\"color:blue\">null</span>)\n            {\n                <span style=\"color:blue\">this</span>.HostWindow.Close();\n            }\n        }\n    }</pre>\r\n</div>\r\n<p>The PopupWindowAction (a TriggerAction) checks if my notification is IPopupWindowActionAware which just assigns the Window it creates to the property on the notification so that it has control of itself.</p>\r\n<p>Here is how I declare my popup in my XAML:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre style=\"color:black\"><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">i</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Interaction.Triggers</span><span style=\"color:blue\">&gt;</span>\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">InteractionRequestTrigger</span> <span style=\"color:red\">SourceObject</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding Path=ActionNotification, Mode=OneWay}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\n        &lt;int_req:PopupWindowAction IsModal=&quot;True&quot; CenterOverAssociatedObject=&quot;True&quot; WindowStyle=&quot;None&quot; WindowHeight=&quot;150&quot; WindowWidth=&quot;520&quot;&gt;\n            &lt;int_req:PopupWindowAction.WindowContent&gt;\n                <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">local</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ZActionNotificationView</span><span style=\"color:blue\">/&gt;</span>\n             &lt;/int_req:PopupWindowAction.WindowContent&gt;\n         &lt;/int_req:PopupWindowAction&gt;\n     <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">InteractionRequestTrigger</span><span style=\"color:blue\">&gt;</span>\n <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">i</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Interaction.Triggers</span><span style=\"color:blue\">&gt;</span></pre>\r\n</div>\r\n<p>Now my <strong>ZActionNotificationView</strong>:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">UserControl</span> <span style=\"color:red\">x:Class</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Zeller.Gp.ZActionNotificationView</span><span style=\"color:black\">&quot;</span>\n             <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:black\">&quot;</span>\n             <span style=\"color:red\">xmlns:x</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:black\">&quot;</span>\n             <span style=\"color:red\">xmlns:mc</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.openxmlformats.org/markup-compatibility/2006</span><span style=\"color:black\">&quot;</span> \n             <span style=\"color:red\">xmlns:d</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/expression/blend/2008</span><span style=\"color:black\">&quot;</span> \n             <span style=\"color:red\">mc:Ignorable</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">d</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">&gt;</span>\n    <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">TextBlock</span> <span style=\"color:red\">Text</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding Path=Content}</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">HorizontalAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Center</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">VerticalAlignment</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Center</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\n    <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Grid</span><span style=\"color:blue\">&gt;</span>\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">UserControl</span><span style=\"color:blue\">&gt;</span></pre>\r\n</div>\r\n<p>And finally, <strong>how I use the notification</strong>:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>ZActionNotificationViewModel actionNotification = <span style=\"color:blue\">new</span> ZActionNotificationViewModel() { Content = <span style=\"color:#a31515\">&quot;Saving contract...&quot;</span> };\nActionNotification.Raise(actionNotification);\n\nstate.Contract = contractName;\nstate.ContractRevLevel = revisionLevel;\n\nThreadPool.QueueUserWorkItem(DoContractSave, state);\nstate.Event.WaitOne();\n\nactionNotification.CompleteAction();</pre>\r\n</div>\r\n",
    "PostedDate": "2012-10-03T06:57:37.413-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921399",
    "ThreadId": "397886",
    "Html": "<p>The more I research this, the more I'm feeling like it is an issue with the WPF \"rendering thread\". Basically, the view itself isn't being rendered inside of the window. The window displays, but the rendering thread blocks because I'm doing other work on the GUI thread.</p>",
    "PostedDate": "2012-10-03T11:07:10.387-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921439",
    "ThreadId": "397886",
    "Html": "<p>Hi,</p>\r\n<p>It seems you are using a modified version of the <strong>PopupWindowAction </strong>described in this blog post: <a href=\"http://blogs.southworks.net/dcherubini/2012/05/24/popupwindowaction-using-custom-views-instead-of-windows-in-wpf-and-prism/\">PopupWindowAction: using custom views instead of windows in WPF and Prism</a>.</p>\r\n<p>Using the aforementioned <strong>PopupWindowAction </strong>we  were able to reproduce the behavior you are mentioning and it seems to  be related to a race condition between the composition of the <strong>Window </strong>and the call to the <strong>WaitOne </strong>method (which I assume is the one blocking the UI thread.)</p>\r\n<p>This race condition can be seen by removing the call to the <strong>CompleteAction </strong>method at the end of the code-snippet you provided. Like this, when the <strong>WaitOne</strong> method return, you should see the \"<em><strong>Saving contact...</strong></em>\" message appearing in the <strong>Window</strong>.</p>\r\n<p>The reason why this doesn't happen when setting the <strong>IsModel </strong>property to <em><strong>false</strong></em>, is that the <strong>Window </strong>is created using the <strong>ShowDialog </strong>method. Therefore, the logic following the invocation of the <strong>Raise </strong>method will be executed only after the <strong>Window </strong>is closed.</p>\r\n<p>How to solve this race condition will depend mostly of the requirements of your scenario and your personal preferences.</p>\r\n<p>A  possible approach to avoid this could be to change the implementation  used to wait for the background thread to finish. For example, instead  of blocking the UI thread, you could provide a <strong>callback </strong>to the <strong>state </strong>object that could be invoked after the background thread finishes.</p>\r\n<p>Another approach could be to wait for the <strong>Window </strong>to  be composed before executing the rest of the code. For example, before  raising the interaction request, your view model could subscribe to a <strong>ViewLoaded </strong>event in the <strong>Event Aggregator</strong>. Then in the <strong>Loaded </strong>event of the <strong>ZActionNotificationView</strong>, you could publish this event (through the <strong>Event Aggregator</strong>) to inform the view model that the <strong>Window </strong>was rendered correctly.</p>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-10-03T12:09:40.103-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]