[
  {
    "Id": "714302",
    "ThreadId": "283487",
    "Html": "\r\n<p>I have a custom control with 2 content areas. Here is the Style</p>\r\n<p>&lt;Style TargetType=&quot;{x:Type local:CustomControl1}&quot;&gt;&nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;Setter Property=&quot;Template&quot;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;Setter.Value&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;ControlTemplate TargetType=&quot;{x:Type local:CustomControl1}&quot;&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;Grid&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;Grid.RowDefinitions&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;RowDefinition Height=&quot;Auto&quot;/&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;RowDefinition /&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;/Grid.RowDefinitions&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;!-- Content presenter for hosting the content --&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;ContentPresenter x:Name=&quot;contentPresenter&quot; Grid.Row=&quot;1&quot;/&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;ContentPresenter x:Name=&quot;contentPresenter1&quot; Content=&quot;{TemplateBinding ExpandedContent}&quot; Visibility=&quot;Visible&quot; Grid.Row=&quot;1&quot;/&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;/Grid&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;/ControlTemplate&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;/Setter.Value&gt;&nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>&lt;/Setter&gt;&nbsp; &nbsp;</p>\r\n<p>&lt;/Style&gt;</p>\r\n<p>&nbsp;</p>\r\n<p>Whenever I put a region in the second ExpandedContent, it never get's registered?? Where am I going wrong? Here is the code for the control:</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp; &nbsp; public class CustomControl1 : ContentControl&nbsp; &nbsp;</p>\r\n<p>{&nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>static CustomControl1()&nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>{&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>DefaultStyleKeyProperty.OverrideMetadata(typeof(CustomControl1), new FrameworkPropertyMetadata(typeof(CustomControl1)));&nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>}</p>\r\n<p>public Object ExpandedContent&nbsp; &nbsp; &nbsp; &nbsp; {&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>get { return (Boolean)this.GetValue(ExpandedContentProperty); }&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>set { this.SetValue(ExpandedContentProperty, value); }&nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p>} &nbsp; &nbsp; &nbsp;&nbsp;</p>\r\n<p>public static readonly DependencyProperty ExpandedContentProperty = DependencyProperty.Register(&quot;ExpandedContent&quot;, typeof(Object), typeof(CustomControl1));&nbsp; &nbsp; }</p>\r\n",
    "PostedDate": "2011-12-19T08:48:53.3-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "714433",
    "ThreadId": "283487",
    "Html": "<p>Hi,</p>\r\n<p>Based on my understanding, your problem might be related to a known issue in Prism where if a <strong>Region </strong>is defined inside a template, the region is never registered in the <strong>RegionManager</strong>. This issue is described in the following work item, where you might find some useful approaches to workaround it:</p>\r\n<ul>\r\n<li><a href=\"http://compositewpf.codeplex.com/workitem/3612\">Region Registration Fails w/ Templated Controls</a></li>\r\n</ul>\r\n<p>If your problem is not related to this issue, it would be helpful if you could provide us with a repro-sample application portraying this problem so that we can help you further with it.</p>\r\n<p>I hope you find this useful,<br /><br />Damian Cherubini<br /><a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-12-19T12:28:53.397-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "714689",
    "ThreadId": "283487",
    "Html": "<p>I'm not entirely sure if it is that or not exactly, below is a link to the project. All I am wanting is the control to display two different content areas. It is two content presenters. The first one works but my additional content doesn't.</p>\r\n<p><a href=\"https://skydrive.live.com/#cid=A53184DCECF800FE&amp;id=A53184DCECF800FE%21125\">https://skydrive.live.com/#cid=A53184DCECF800FE&amp;id=A53184DCECF800FE%21125</a></p>",
    "PostedDate": "2011-12-20T01:46:22.677-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "715028",
    "ThreadId": "283487",
    "Html": "<p>Hi,</p>\n<p>We have checked your repro-sample application and found that when the <strong> ContentControl </strong>containing the region \"<strong>ExpandedRegion</strong>\" is added to your custom control through the <strong>ExpandedContent </strong>property, the corresponding <strong>RegionManager </strong>is not attached as a dependency property in the <strong>ContentControl</strong>. Based on my understanding, it might be possible that as the aforementioned <strong>ContentControl </strong>is added through the template, it might not have a parent from which the <strong>RegionManagerRegistrationBehavior </strong>can obtain the corresponding <strong> RegionManager</strong>; therefore, the region is never registered.</p>\n<p>As the view model implements the <strong>IRegionManagerAware </strong>interface, which allows it to know the <strong>RegionManager </strong>of its view (through the <strong>RegionManagerAwareBehavior</strong>), you can attach the <strong>RegionManager </strong>as a dependency property in the <strong>ContentControl </strong>doing something like this:</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">custom</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">CustomControl1.ExpandedContent</span><span style=\"color: blue;\">&gt;</span>\n    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Grid</span><span style=\"color: blue;\">&gt;</span>\n        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ContentControl</span> <span style=\"color: red;\">cal:RegionManager.RegionName</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">ExpandedRegion</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">cal:RegionManager.RegionManager</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding RegionManager}</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\n        <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">ContentControl</span><span style=\"color: blue;\">&gt;</span>\n    <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Grid</span><span style=\"color: blue;\">&gt;</span>\n<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">custom</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">CustomControl1.ExpandedContent</span><span style=\"color: blue;\">&gt;</span>\n</pre>\n</div>\n<p>You can check that the \"<strong>ExpandedRegion</strong>\" was correctly registered by, for example, adding a view when clicking the <strong>Navigate </strong>button of the view, adding this code in the <strong>Navigate </strong>method of the view model:</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">void</span> Navigate()\n{\n    <span style=\"color: blue;\">this</span>.regionManager.Regions[<span style=\"color: #a31515;\">\"ExpandedRegion\"</span>].Add(<span style=\"color: #a31515;\">\"Some text\"</span>);\n}\n</pre>\n</div>\n<p>Also, you can find more information about the <strong>IRegionManagerAware </strong> interface and the <strong>RegionManagerAwareBehavior </strong>it uses in the following blog post:</p>\n<ul>\n<li><a href=\"http://blogs.southworks.net/dcherubini/2011/11/10/regions-inside-datatemplates-in-prism-v4-using-a-region-behavior/\">Regions inside DataTemplates in Prism v4 using a region behavior</a> </li>\n</ul>\n<p>I hope you find this useful,<br /> <br /> Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-12-20T12:05:44.89-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "715337",
    "ThreadId": "283487",
    "Html": "<p>So presumably because in my actual control I am using, I have the ExpandedContent collapsed, the region only get's added when it is made visible? Because of the binding?</p>\r\n<p>It feels like I haven't defined the <strong>ExpandedContent </strong>property correctly. If I make <strong>CustomControl1 </strong>inherit from <strong>Control</strong> instead of <strong>ContentControl</strong>&nbsp;and only use my <strong>ExpandedContent</strong> property it still doesn't work, so what am I doing wrong?</p>",
    "PostedDate": "2011-12-21T01:47:14.837-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "715555",
    "ThreadId": "283487",
    "Html": "<p>Hi,</p>\r\n<p>Based on my understanding, as Damian Cherubini mentioned above, the reason that the region is not getting registered might be caused by the fact that the <strong>ContentControl </strong>is being added through the template, and might not have a parent from which the <strong>RegionManagerRegistrationBehavior </strong>can obtain the corresponding <strong>RegionManager </strong>to achieve the region registration, hence it doesn't seem to be related to the \"visibility\" of the <strong>ExpandedContent </strong>property. As a possible approach, this can be solved binding the <strong>RegionManager </strong>to the <strong>ContentControl </strong>in the <strong>ExpandedContent </strong>property as shown in the code snippet above.</p>\r\n<p>Also as an alternative to binding the <strong>RegionManager </strong>to the <strong>ContentControl </strong>you could try using the <a href=\"http://msdn.microsoft.com/en-us/library/ff921098(v=PandP.40).aspx#sec25\">View Discovery approach</a>. In this approach you set up a relationship in the <strong>RegionViewRegistry </strong>between a region's name and the type of a view, without querying the <strong>RegionManager</strong>. When the region is available it automatically instantiates and loads the corresponding views. Take into account that this approach may be appropriate depending the requirements of your scenario as you will not have explicit control over when the views that correspond to a region are loaded and displayed.</p>\r\n<p>On the other hand, regarding how to add <strong>DependencyProperties </strong>you might find the following links useful:</p>\r\n<ul>\r\n<li><a href=\"http://www.wpftutorial.net/HowToCreateACustomControl.html\">How to Create a WPF Custom Control</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ms753358.aspx\">Custom Dependency Properties﻿</a></li>\r\n</ul>\r\n<p>I hope you find this handy,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a>﻿</p>",
    "PostedDate": "2011-12-21T09:14:25.03-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "716524",
    "ThreadId": "283487",
    "Html": "<p>Well trying the approach suggested with the binding, it doesn't seem to be registered when I first navigate to the ViewModel like other regions. So causes a few timing issues when attempting to navigate. I just presumed it may not get added until the region was made visible.</p>\r\n<p>&nbsp;</p>\r\n<p>To simplify the issue I wanted to make my own Content Control as I don't understand why in theory just adding another content property shouldn't work? So I created a my control inheriting from Control and added my own content property, but this still doesn't work. It should work as the standard content control works?? How would I get this to work? It seems like the standard control works so this example should work as well?? I shouldn't have to add this workaround which messes up timings.</p>\r\n<p>&nbsp;</p>\r\n<p>I have uploaded my example to:&nbsp;<a href=\"https://skydrive.live.com/#cid=A53184DCECF800FE&amp;id=A53184DCECF800FE%21125\">https://skydrive.live.com/#cid=A53184DCECF800FE&amp;id=A53184DCECF800FE%21125</a>&nbsp;</p>\r\n<p>I don't see why this wouldn't work I am trying to replicate Microsoft's standard content control? There must be something else that is required.</p>",
    "PostedDate": "2011-12-23T02:26:18.87-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "716526",
    "ThreadId": "283487",
    "Html": "<p>Merry Christmas btw!</p>",
    "PostedDate": "2011-12-23T02:27:01.857-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "717242",
    "ThreadId": "283487",
    "Html": "<p>Hi,</p>\r\n<p>As explained before, this problems seems to occur because the content added to the <strong>ExpandedContentProperty </strong>is not part of the logical tree of the control, and thus, it doesn't have a logical parent from which the <strong>RegionManagerRegistrationBehavior</strong> can obtain the corresponding<strong> RegionManager</strong>. If the previous approaches are not fit for your scenario, you could also try to add the content of the <strong>ExpandedContentProperty </strong>to the logical tree of your control manually. This can be done overriding the <strong>OnPropertyChanged </strong>method of the control to \"listen\" to any changes on the <strong>ExpandedContentPropert</strong>, doing something similar to this:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> CustomControl1 : ContentControl\r\n    {\r\n        \r\n        <span style=\"color: blue;\">static</span> CustomControl1()\r\n        {\r\n            DefaultStyleKeyProperty.OverrideMetadata(<span style=\"color: blue;\">typeof</span>(CustomControl1), <span style=\"color: blue;\">new</span> FrameworkPropertyMetadata(<span style=\"color: blue;\">typeof</span>(CustomControl1)));\r\n        }\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">readonly</span> DependencyProperty ExpandedContentProperty = DependencyProperty.Register(<span style=\"color: #a31515;\">\"ExpandedContent\"</span>, <span style=\"color: blue;\">typeof</span>(<span style=\"color: blue;\">object</span>), <span style=\"color: blue;\">typeof</span>(CustomControl1));\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">object</span> ExpandedContent\r\n        {\r\n            <span style=\"color: blue;\">get</span> { <span style=\"color: blue;\">return</span> (<span style=\"color: blue;\">object</span>)GetValue(ExpandedContentProperty); }\r\n            <span style=\"color: blue;\">set</span> { SetValue(ExpandedContentProperty, value); }\r\n        }\r\n\r\n        <span style=\"color: blue;\">protected</span> <span style=\"color: blue;\">override</span> <span style=\"color: blue;\">void</span> OnPropertyChanged(DependencyPropertyChangedEventArgs e)\r\n        {\r\n            <span style=\"color: blue;\">base</span>.OnPropertyChanged(e);\r\n\r\n            <span style=\"color: green;\">// If ExpandedContentProperty changed,</span>\r\n            <span style=\"color: blue;\">if</span> (e.Property.Name == ExpandedContentProperty.Name)\r\n            {\r\n                <span style=\"color: green;\">// and its value is diferent than before,</span>\r\n                <span style=\"color: blue;\">if</span>(e.NewValue != e.OldValue)\r\n                {\r\n                    <span style=\"color: green;\">// we remove the old element from the Logical Tree</span>\r\n                    <span style=\"color: blue;\">if</span> (e.OldValue <span style=\"color: blue;\">is</span> FrameworkElement)\r\n                    {\r\n                        <span style=\"color: blue;\">this</span>.RemoveLogicalChild(e.OldValue);\r\n                        BindingOperations.ClearBinding(e.OldValue <span style=\"color: blue;\">as</span> DependencyObject, FrameworkElement.DataContextProperty); \r\n                    }\r\n                    \r\n                    <span style=\"color: green;\">// and if the new value is a FrameworkElement...</span>\r\n                    <span style=\"color: blue;\">if</span> (e.NewValue <span style=\"color: blue;\">is</span> FrameworkElement)\r\n                    {\r\n                        <span style=\"color: green;\">// we add the new value to the Logical Tree.</span>\r\n                        <span style=\"color: blue;\">this</span>.AddLogicalChild(e.NewValue);\r\n\r\n                        <span style=\"color: green;\">// We also set the DataContext of the new value to be the same that the DataContext of this control.</span>\r\n                        BindingOperations.SetBinding(e.NewValue <span style=\"color: blue;\">as</span> DependencyObject, FrameworkElement.DataContextProperty, <span style=\"color: blue;\">new</span> Binding(<span style=\"color: #a31515;\">\"DataContext\"</span>) { Source = <span style=\"color: blue;\">this</span> });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>Then, the ContentTemplate for the control can be simply defined as this:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ControlTemplate</span> <span style=\"color: red;\">TargetType</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{x:Type local:CustomControl1}</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Grid</span><span style=\"color: blue;\">&gt;</span>\r\n        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Grid.RowDefinitions</span><span style=\"color: blue;\">&gt;</span>\r\n            <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">RowDefinition</span> <span style=\"color: red;\">Height</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Auto</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n            <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">RowDefinition</span> <span style=\"color: blue;\">/&gt;</span>\r\n        <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Grid.RowDefinitions</span><span style=\"color: blue;\">&gt;</span>\r\n\r\n        <span style=\"color: green;\">&lt;!-- Content presenter for hosting the content --&gt;</span>\r\n        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ContentPresenter</span> <span style=\"color: red;\">x:Name</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">contentPresenter</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Content</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{TemplateBinding Content}</span><span style=\"color: black;\">\"</span>  <span style=\"color: red;\">Grid.Row</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">0</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ContentPresenter</span> <span style=\"color: red;\">x:Name</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">contentPresenter1</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Content</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{TemplateBinding ExpandedContent}</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Grid.Row</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">1</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n    <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Grid</span><span style=\"color: blue;\">&gt;</span>\r\n<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">ControlTemplate</span><span style=\"color: blue;\">&gt;</span>\r\n</pre>\r\n</div>\r\n</p>\r\n<p>And used as this:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">custom</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">CustomControl1</span><span style=\"color: blue;\">&gt;</span>\r\n    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">custom</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">CustomControl1.Content</span><span style=\"color: blue;\">&gt;</span>\r\n        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Grid</span><span style=\"color: blue;\">&gt;</span>\r\n            <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ContentControl</span> <span style=\"color: red;\">cal:RegionManager.RegionName</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">SmallRegion</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n            <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">ContentControl</span><span style=\"color: blue;\">&gt;</span>\r\n        <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">Grid</span><span style=\"color: blue;\">&gt;</span>\r\n    <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">custom</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">CustomControl1.Content</span><span style=\"color: blue;\">&gt;</span>\r\n    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">custom</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">CustomControl1.ExpandedContent</span><span style=\"color: blue;\">&gt;</span>\r\n        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">StackPanel</span><span style=\"color: blue;\">&gt;</span>\r\n            <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ContentControl</span> <span style=\"color: red;\">cal:RegionManager.RegionName</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">ExpandedRegion</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n            <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">ContentControl</span><span style=\"color: blue;\">&gt;</span>\r\n            <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">Button</span> <span style=\"color: red;\">Content</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">Navigate</span><span style=\"color: black;\">\"</span> <span style=\"color: red;\">Command</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding NavigateCommand}</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n        <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">StackPanel</span><span style=\"color: blue;\">&gt;</span>\r\n    <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">custom</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">CustomControl1.ExpandedContent</span><span style=\"color: blue;\">&gt;</span>\r\n<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">custom</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">CustomControl1</span><span style=\"color: blue;\">&gt;</span>\r\n</pre>\r\n</div>\r\nAs a side note and based on my understanding, I think that a <strong>ContentControl </strong>is supposed to have only one \"content.\" If more that one content is required, it might make sense to inherit from a <strong>ItemsControl </strong>instead, and wrap the items in the <strong>Items </strong>collection through properties, creating the look of a control with more than one content property. However, this depends mostly of your personal preferences and the requirements of your scenario.</p>\r\n<p>I hope you find the above workaround useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-12-26T11:47:52.753-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "726216",
    "ThreadId": "283487",
    "Html": "<p>Thank you I have added the OnPropertyChanged method to listen for changes. Will see how this goes as it seems the easiest solution at present.&nbsp;</p>",
    "PostedDate": "2012-01-17T00:50:02.677-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]