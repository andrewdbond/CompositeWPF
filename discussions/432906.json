[
  {
    "Id": "1000290",
    "ThreadId": "432906",
    "Html": "I am using Unity with Prism 4.1 and working on to create wizard page for add an employee to the database. The new employee form has 2 Views.\r<br />\n<br />\n1st view (NewEmployeePage1) gathers name and address and some other additional details with next and cancel buttons, 2nd view (NewEmployeePage2) gathers preferences and few other information with back, cancel and finish buttons. \r<br />\n<br />\nWhen I navigate to the NewEmployeePage1, I would like to the page to be in New Mode every time the new button is pressed (New Button is on the top level application menu). This does not happen if I dont set the RegionMemberLifeTime to false. But this causes the data to be cleared whent he user clicks back from the previous page.\r<br />\n<br />\nWhen the user fills the data and presses next it moves to the second page (Not sure how I do the view injection for this). How do I navigate to the next view (NewEmployeePage2)? I use the delegatecommand but using RequestNavigate gives System.Object and does not show the next page. I am thinking the view is not registered? But I dont want to carry the UnityContainer on to the view models register. May be I am missing some thing.\r<br />\n<br />\nAny advise on how I should do the view injection to clear data only when the New Employee page is clicked for the first time.<br />\n",
    "PostedDate": "2013-02-12T14:27:49.917-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1000804",
    "ThreadId": "432906",
    "Html": "Hi,\r<br />\n<br />\nBased on the description of your scenario, I believe that using <strong>Region Navigation</strong> could be a useful approach.\r<br />\n<br />\nFirst of all, in order to being able to navigate to your <strong>NewEmployeePage1</strong> and <strong>NewEmployeePage2</strong> views you will need to register them for navigation in the <strong>Unity</strong> container. You can register them in the module by doing something like this:<br />\n<pre><code>public WizardModule(IUnityContainer container)\n{\n    this.container = container;\n}\n\npublic void Initialize()\n{\n    this.container.RegisterType&lt;object, NewEmployeePage1&gt;(&quot;NewEmployeePage1&quot;);\n    this.container.RegisterType&lt;object, NewEmployeePage2&gt;(&quot;NewEmployeePage2&quot;);\n}</code></pre>\n\nAfter that you should be able to use a <strong>navigation request</strong> to navigate to those views. Like this, you should be able to navigate to the <strong>NewEmployeePage1</strong> from any command and also navigate to the <strong>NewEmployeePage2</strong> view from the &quot;Next&quot; command without needing the views to know each other (as you use the view's names instead of the type.) Also, you can navigate back from the <strong>NewEmployeePage2</strong> view to the <strong>NewEmployeePage1</strong> view using the <strong>NavigationJournal</strong> (or a common navigation request.)\r<br />\n<br />\nFinally, to solve the problem about regarding the <strong>NewEmployeePage1</strong> view, I believe a possible approach could be to use the <strong>IRegionMemberLifetime</strong> interface, the <strong>INavigationAware</strong> interface and the a parameter in the navigation request. By default, the view model of the <strong>NewEmployeePage1</strong> could return <strong>true</strong> in both its <strong>KeepAlive</strong> property and its <strong>IsNavigationTarget</strong> method. Like this, the view will be kept alive and you can navigate back and forth from the <strong>NewEmployeePage2</strong>. Then, when you need to inject a clear <strong>NewEmployeePage1</strong> view, you could use a navigation request with a parameter such as <strong>&quot;new=true&quot;</strong>. You can check for this parameter in the <strong>IsNavigationTarget</strong> method and if it's present you could set the <strong>KeepAlive</strong> property to <strong>false</strong> and return <strong>false</strong> in the aforementioned method. Like this, a new view will be created an the previous one will be removed from the region.\r<br />\n<br />\nYou can find more information about navigation in the following chapter of the <strong>Prism</strong> documentation:<br />\n<ul>\n<li>\n<a href=\"http://msdn.microsoft.com/en-us/library/gg430861%28v=pandp.40%29.aspx\" rel=\"nofollow\">Chapter 8 - Navigation</a><br />\n</li>\n</ul>\nI hope you find this useful,\r<br />\n<br />\nDamian Cherubini\r<br />\n<a href=\"http://blogs.southworks.net/dcherubini\" rel=\"nofollow\">http://blogs.southworks.net/dcherubini</a><br />\n",
    "PostedDate": "2013-02-13T13:11:18.02-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1001228",
    "ThreadId": "432906",
    "Html": "Hello Damian<br />\n<br />\nThanks for your comments. It worked perfectly for the first comment. I was missing the piece of registering in the module Initialization. I was also under the impression that registering actually resolves it. But in fact it resolves only when it is activated or navigated to.<br />\n<br />\nI now have to figure the KeepAlive as you suggested and tweak to the business needs. I am sure it will work like you mentioned. I did a quick check and it was good. But the Finish button and deciding if to use single view model for both pages is what I am deciding. If I have to have single view model for both pages, I have to think of passing the context of page 1 to page 2.<br />\n<br />\nI really appreciate your time!<br />\n",
    "PostedDate": "2013-02-14T07:15:56.093-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]