[
  {
    "Id": "180678",
    "ThreadId": "53676",
    "Html": "<span style=\"font-size:12pt;font-family:'times new roman','serif'\">I seem to have gotten myself into a bit of a bind and was looking for some direction on the approach to take.<br>\r\n<br>\r\nBasically I have a master view /w several content regions each represented by a view/presenter.  I have a single controller for the masterView that I use to manage everything.<br>\r\n<br>\r\nAnyhow I have created a standard interface for a view / presenter.  In my view I have some standard events that I need/want.  My interface for the view is passed to the constructor of my presenter and I can subscribe to the events I want.  I have a set of standard events that I need to manage for all the different views in a single master view /w a controller.<br>\r\n<br>\r\nEverything works great and I can delegate the events as needed up the chain.<br>\r\n<br>\r\nMy problem is that a couple of my views need some additional events and properties.  So I created another layer of view/presenter.<br>\r\n<br>\r\nso I had IView1 &amp; IPresenter1<br>\r\n<br>\r\nIPresenter1 has a property<br>\r\nIView1 View {get;set}<br>\r\n<br>\r\nand then I do <br>\r\npublic presenter(IView1 view)<br>\r\n{<br>\r\n    View = view;<br>\r\n    View.Event1 += ...<br>\r\n    View.Event2 += ...<br>\r\n}<br>\r\n<br>\r\nNow I have a more complicated view that I need an additional event so I created another set<br>\r\n<br>\r\nIView2 : IView1<br>\r\n    event EvemttHandler &lt;...&gt; Event3<br>\r\n<br>\r\nI also created a new presenter IPresenter2 : IPresenter1 <br>\r\n<br>\r\nI started to put in <br>\r\nnew IView2 View {get;set}<br>\r\n<br>\r\nso as to 'hide' the prior implemenation ... that didn't work.  When I actually create my real view from IView2 I have to implement both View Properties which I can't do.<br>\r\n<br>\r\nI then decided that in my Presenter2 I would just cast my IView to an IView2 and subscribe to the events.  This seems to work and seems okay in my mind but is it asking for trouble down the road?  Sort of seems a bit like I almost tried to merge inheritence /w two interfaces.<br>\r\n<br>\r\npublic Presenter2(IView2 view)<br>\r\n{<br>\r\n    View = view;<br>\r\n<br>\r\n    View.Event1 += ...<br>\r\n    View.Event2 += ...<br>\r\n<b>    (View as IView2).Event3 += ...</b><br>\r\n}<br>\r\n<br>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:consolas\">This particular view happens to have a list on it so I need to handle the change in list items where the other views don't have that.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:consolas\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:consolas\">Really my question boils down to the best way to 'extend' an interface that is used in more than one place.  The other option would be to add a generic 'listItemChanged' event to my IView1 interface and not use it anywhere else.  </span><span style=\"font-family:consolas\">That seemed a little annoying since I had to implement it in each object but I'm not that opposed to it.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:consolas\"> </span></p>\r\n<br>\r\nThanks<br>\r\n<br>\r\njack<br>\r\n<br>\r\n</span>\r\n",
    "PostedDate": "2009-04-17T13:39:28.37-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "180703",
    "ThreadId": "53676",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi Jack,</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">The way you are hiding a member inherited from a base class is correct and there should not be a problem since the member from <b>IView2</b> is the one that will be called by Visual Studio. Plus, adding the generic 'listItemChanged' in <b>IView1</b> is not such a good approach, because as you say, some Views will unnecessarily implement a member.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">If I understand correctly in <b>IPresenter1</b> and <b>Presenter1</b> you have something like:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">interface IPresenter1 </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 69.6pt\"><span style=\"font-size:10pt;font-family:'courier new'\">IView1 View { get; set; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">//More code here</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">-----------------------------------------------</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 33.6pt\"><span style=\"font-size:10pt;font-family:'courier new'\">public Presenter1(IView1 view)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 33.6pt\"><span style=\"font-size:10pt;font-family:'courier new'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 69pt\"><span style=\"font-size:10pt;font-family:'courier new'\">View = view;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 68.4pt\"><span style=\"font-size:10pt;font-family:'courier new'\">//More code here        </span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">And in <b>IPresenter2</b>:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    interface IPresenter2 : IPresenter1</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">            new IView2 View { get; set; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    public Presenter1(IView2 view)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    {</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">        View = view;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">//More code here        </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">The approach I would take would be creating another interface, let’s say <b>IPresenterBase</b>. This interface would take all members from  <b>IPresenter1</b>,  except for the <b>IView1</b> View. <b>IPresenter2</b> should implement <b>IBasePresenter</b>, and add its own members like the 'listItemChanged' and <b>IView2</b> View. Doing this avoids having to hide the View member.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">The current approach you are taking is also viable. Having a method in your presenters in charge of getting <b>IView1</b> casted to <b>IView2</b> if you wanted to remain with it  could be another approach.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Please let me know if this helps.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\">Damian Schenkelman</span></p>\r\n<span style=\"font-size:11pt;font-family:'calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></span>\r\n",
    "PostedDate": "2009-04-17T15:19:57.37-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "180715",
    "ThreadId": "53676",
    "Html": "\r\n\r\n<div class=Section1>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">Damian,</span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">Thank you for your reply - You were very close to what I was\r\ndoing.</span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">My IPresenter1 and IView1 are equivalent to the IPresenterBase\r\n(almost same name) / IViewBase. </span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">I am unable to compile Presenter2 : IPresenter2 when I have new\r\nIView2 View in IPresenter2</span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">interface\r\nIPresenter1 </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">{</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:69.6pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">IView1\r\nView { get; set; }</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">//More\r\ncode here</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">}</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">interface\r\nIPresenter2 : IPresenter1</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">{</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:69.6pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">new\r\nIView2 View { get; set; }</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">//More\r\ncode here</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">}</span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\"> </span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">object\r\nPresenter2 : IPresenter2</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">                {</span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:69.6pt;margin-bottom:.0001pt\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> public IView2 </span><span style=\"font-size:10.0pt;font-family:'Courier New'\">View { get; set; }</span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:69.6pt;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">...</span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:36.0pt;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">}</span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">The Presenter2 won't compile as it says I haven't implements\r\nIPresenter1.</span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">'Presenter2' does not implement interface member 'IPresenter1.View'.\r\n'Presenter2.View' cannot implement 'IPresenter.View' because it does not have\r\nthe matching return type of 'IView1'.             </span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">That threw me before I posted.  However I think that I might\r\nhave put IView1 View into my base interface too early.  Each child view of my master\r\nview will have its own IViewXXX so I don't gain anything.  I can still make\r\neach IViewXXX implement IViewBase, I just don't need to implement it in the\r\nbase presenter.  I think I was looking for a 'placeholder' to ensure I always\r\nimplemented a View property in each Presenter.</span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">Thanks</span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">jack</span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p>\r\n\r\n<div>\r\n\r\n<div style=\"border:none;border-top:solid #B5C4DF 1.0pt;padding:3.0pt 0cm 0cm 0cm\">\r\n\r\n<p class=MsoNormal><b><span lang=EN-US style=\"font-size:10.0pt;font-family:'Tahoma','sans-serif'\">From:</span></b><span lang=EN-US style=\"font-size:10.0pt;font-family:'Tahoma','sans-serif'\"> dschenkelman\r\n[mailto:notifications@codeplex.com] <br>\r\n<b>Sent:</b> April-17-09 4:20 PM<br>\r\n<b>To:</b> jaddington@alexandergracie.com<br>\r\n<b>Subject:</b> Re: Extending common interfaces for view/presenter\r\n[CompositeWPF:53676]</span></p>\r\n\r\n</div>\r\n\r\n</div>\r\n\r\n<p class=MsoNormal> </p>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">From:\r\ndschenkelman</span></p>\r\n\r\n<div style=\"margin-bottom:24.0pt\" id=ThreadNotificationPostBody>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">Hi Jack,</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\"> </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">The way you are hiding a member inherited\r\nfrom a base class is correct and there should not be a problem since the member\r\nfrom <b>IView2</b> is the one that will be called by Visual Studio. Plus,\r\nadding the generic 'listItemChanged' in <b>IView1</b> is not such a good\r\napproach, because as you say, some Views will unnecessarily implement a member.</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\"> </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">If I understand correctly in <b>IPresenter1</b>\r\nand <b>Presenter1</b> you have something like:</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">interface\r\nIPresenter1 </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">{</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:69.6pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">IView1\r\nView { get; set; }</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">//More\r\ncode here</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">}</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">-----------------------------------------------</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:33.6pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">public\r\nPresenter1(IView1 view)</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:33.6pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">{</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:69.0pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">View\r\n= view;</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:68.4pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">//More\r\ncode here        </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">}</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\"> </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">And in <b>IPresenter2</b>:</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">    interface IPresenter2 :\r\nIPresenter1    {</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">            new\r\nIView2 View { get; set; }</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">    }</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">    public Presenter1(IView2\r\nview)</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">    {</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">        View\r\n= view;</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">//More\r\ncode here        </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">    }</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\"> </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">The approach I would take would be creating\r\nanother interface, let’s say <b>IPresenterBase</b>. This interface would take\r\nall members from  <b>IPresenter1</b>,  except for the <b>IView1</b>\r\nView. <b>IPresenter2</b> should implement <b>IBasePresenter</b>, and add its\r\nown members like the 'listItemChanged' and <b>IView2</b> View. Doing this\r\navoids having to hide the View member.</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\"> </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">The current approach you are taking is also\r\nviable. Having a method in your presenters in charge of getting <b>IView1</b>\r\ncasted to <b>IView2</b> if you wanted to remain with it  could be another\r\napproach.</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\"> </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">Please let me know if this helps.</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\"> </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">Damian Schenkelman</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"> </span></p>\r\n\r\n</div>\r\n\r\n<div style=\"border:none;border-top:solid #CCCCCC 1.0pt;padding:0cm 0cm 0cm 0cm\" id=ThreadNotificationFooter>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">Read\r\nthe <a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=53676&ANCHOR#Post180703\">full\r\ndiscussion online</a>.</span></p>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">To\r\nadd a post to this discussion, reply to this email (<a href=\"mailto:CompositeWPF@discussions.codeplex.com?subject=[CompositeWPF:53676]\">CompositeWPF@discussions.codeplex.com</a>)</span></p>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">To\r\nstart a new discussion for this project, email <a href=\"mailto:CompositeWPF@discussions.codeplex.com\">CompositeWPF@discussions.codeplex.com</a></span></p>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">You\r\nare receiving this email because you subscribed to this discussion on CodePlex.\r\nYou can <a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/53676\">unsubscribe</a>\r\non codePlex.com.</span></p>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">Please\r\nnote: Images and attachments will be removed from emails. Any posts to this\r\ndiscussion will also be available online at codeplex.com</span></p>\r\n\r\n</div>\r\n\r\n</div>\r\n\r\n",
    "PostedDate": "2009-04-17T16:01:13.343-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "180717",
    "ThreadId": "53676",
    "Html": "\r\n\r\n<div class=Section1>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">Actually that didn't work - I need the View in the IPresenterBase\r\nInterface because in my Controller for the whole set of Views I'm using it to\r\ngenerically process all my Presenters as I enable them and get the data, etc.</span></p>\r\n\r\n<p class=MsoNormal><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\"> </span></p>\r\n\r\n<div>\r\n\r\n<div style=\"border:none;border-top:solid #B5C4DF 1.0pt;padding:3.0pt 0cm 0cm 0cm\">\r\n\r\n<p class=MsoNormal><b><span lang=EN-US style=\"font-size:10.0pt;font-family:'Tahoma','sans-serif'\">From:</span></b><span lang=EN-US style=\"font-size:10.0pt;font-family:'Tahoma','sans-serif'\"> jaddington\r\n[mailto:notifications@codeplex.com] <br>\r\n<b>Sent:</b> April-17-09 5:01 PM<br>\r\n<b>To:</b> jaddington@alexandergracie.com<br>\r\n<b>Subject:</b> Re: Extending common interfaces for view/presenter\r\n[CompositeWPF:53676]</span></p>\r\n\r\n</div>\r\n\r\n</div>\r\n\r\n<p class=MsoNormal> </p>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">From:\r\njaddington</span></p>\r\n\r\n<div style=\"margin-bottom:24.0pt\" id=ThreadNotificationPostBody>\r\n\r\n<div>\r\n\r\n<p class=MsoNormal style=\"\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">Damian,</span></p>\r\n\r\n<p class=MsoNormal style=\"\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">Thank\r\nyou for your reply - You were very close to what I was doing.</span></p>\r\n\r\n<p class=MsoNormal style=\"\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">My\r\nIPresenter1 and IView1 are equivalent to the IPresenterBase (almost same name)\r\n/ IViewBase. </span></p>\r\n\r\n<p class=MsoNormal style=\"\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">I am\r\nunable to compile Presenter2 : IPresenter2 when I have new IView2 View in\r\nIPresenter2</span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">interface IPresenter1 </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">{</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:69.6pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">IView1 View { get; set; }</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">//More code here</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">}</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">interface IPresenter2 : IPresenter1</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">{</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:69.6pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">new IView2 View { get; set; }</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">//More code here</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">}</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">object Presenter2 : IPresenter2</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p class=MsoNormal style=\"\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">               \r\n{</span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:69.6pt;margin-bottom:.0001pt\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">public IView2 </span><span style=\"font-size:10.0pt;font-family:'Courier New'\">View { get; set; }</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:69.6pt;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">...</span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:36.0pt;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">}</span></p>\r\n\r\n<p class=MsoNormal style=\"\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">The\r\nPresenter2 won't compile as it says I haven't implements IPresenter1.</span></p>\r\n\r\n<p class=MsoNormal style=\"\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">'Presenter2'\r\ndoes not implement interface member 'IPresenter1.View'. 'Presenter2.View'\r\ncannot implement 'IPresenter.View' because it does not have the matching return\r\ntype of\r\n'IView1'.            \r\n</span></p>\r\n\r\n<p class=MsoNormal style=\"\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">That\r\nthrew me before I posted.  However I think that I might have put IView1\r\nView into my base interface too early.  Each child view of my master view\r\nwill have its own IViewXXX so I don't gain anything.  I can still make each\r\nIViewXXX implement IViewBase, I just don't need to implement it in the base\r\npresenter.  I think I was looking for a 'placeholder' to ensure I always\r\nimplemented a View property in each Presenter.</span></p>\r\n\r\n<p class=MsoNormal style=\"\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">Thanks</span></p>\r\n\r\n<p class=MsoNormal style=\"\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif';color:#1F497D\">jack</span></p>\r\n\r\n<div>\r\n\r\n<div style=\"border:none;border-top:solid #B5C4DF 1.0pt;padding:3.0pt 0cm 0cm 0cm\">\r\n\r\n<p class=MsoNormal style=\"\"><b><span lang=EN-US style=\"font-size:10.0pt;font-family:'Tahoma','sans-serif'\">From:</span></b><span lang=EN-US style=\"font-size:10.0pt;font-family:'Tahoma','sans-serif'\">\r\ndschenkelman [mailto:notifications@codeplex.com] <br>\r\n<b>Sent:</b> April-17-09 4:20 PM<br>\r\n<b>To:</b> jaddington@alexandergracie.com<br>\r\n<b>Subject:</b> Re: Extending common interfaces for view/presenter\r\n[CompositeWPF:53676]</span></p>\r\n\r\n</div>\r\n\r\n</div>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\">From:\r\ndschenkelman</span></p>\r\n\r\n<div style=\"margin-bottom:24.0pt\" id=ThreadNotificationPostBody>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">Hi Jack,</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">The way you are hiding a member inherited from\r\na base class is correct and there should not be a problem since the member from\r\n<b>IView2</b> is the one that will be called by Visual Studio. Plus, adding the\r\ngeneric 'listItemChanged' in <b>IView1</b> is not such a good approach, because\r\nas you say, some Views will unnecessarily implement a member.</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">If I understand correctly in <b>IPresenter1</b>\r\nand <b>Presenter1</b> you have something like:</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">interface IPresenter1 </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">{</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:69.6pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">IView1 View { get; set; }</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">//More code here</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">}</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">-----------------------------------------------</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:33.6pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">public Presenter1(IView1 view)</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:33.6pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">{</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:69.0pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">View = view;</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:68.4pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">//More code here </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">}</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">And in <b>IPresenter2</b>:</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">interface IPresenter2 : IPresenter1 {</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">new IView2 View { get; set; }</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">}</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">public Presenter1(IView2 view)</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">{</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">View = view;</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin-right:0cm;margin-bottom:0cm;margin-left:34.2pt;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">//More code here </span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:10.0pt;font-family:'Courier New'\">}</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">The approach I would take would be creating\r\nanother interface, let’s say <b>IPresenterBase</b>. This interface would take\r\nall members from <b>IPresenter1</b>, except for the <b>IView1</b> View. <b>IPresenter2</b>\r\nshould implement <b>IBasePresenter</b>, and add its own members like the 'listItemChanged'\r\nand <b>IView2</b> View. Doing this avoids having to hide the View member.</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">The current approach you are taking is also\r\nviable. Having a method in your presenters in charge of getting <b>IView1</b>\r\ncasted to <b>IView2</b> if you wanted to remain with it could be another\r\napproach.</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">Please let me know if this helps.</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p style=\"margin:0cm;margin-bottom:.0001pt\"><span style=\"font-size:9.0pt;font-family:'Calibri','sans-serif'\">Damian Schenkelman</span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"></span></p>\r\n\r\n<p class=MsoNormal style=\"\"><span style=\"font-size:11.0pt;font-family:'Calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></span><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif'\"> </span></p>\r\n\r\n</div>\r\n\r\n<div style=\"border:none;border-top:solid #CCCCCC 1.0pt;padding:0cm 0cm 0cm 0cm\" id=ThreadNotificationFooter>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">Read\r\nthe <a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=53676&ANCHOR#Post180703\">full\r\ndiscussion online</a>.</span></p>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">To\r\nadd a post to this discussion, reply to this email (<a href=\"mailto:CompositeWPF@discussions.codeplex.com?subject=[CompositeWPF:53676]\">CompositeWPF@discussions.codeplex.com</a>)</span></p>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">To\r\nstart a new discussion for this project, email <a href=\"mailto:CompositeWPF@discussions.codeplex.com\">CompositeWPF@discussions.codeplex.com</a></span></p>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">You\r\nare receiving this email because you subscribed to this discussion on CodePlex.\r\nYou can <a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/53676\">unsubscribe</a>\r\non codePlex.com.</span></p>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">Please\r\nnote: Images and attachments will be removed from emails. Any posts to this\r\ndiscussion will also be available online at codeplex.com</span></p>\r\n\r\n</div>\r\n\r\n</div>\r\n\r\n</div>\r\n\r\n<div style=\"border:none;border-top:solid #CCCCCC 1.0pt;padding:0cm 0cm 0cm 0cm\" id=ThreadNotificationFooter>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">Read\r\nthe <a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=53676&ANCHOR#Post180715\">full\r\ndiscussion online</a>.</span></p>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">To\r\nadd a post to this discussion, reply to this email (<a href=\"mailto:CompositeWPF@discussions.codeplex.com?subject=[CompositeWPF:53676]\">CompositeWPF@discussions.codeplex.com</a>)</span></p>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">To\r\nstart a new discussion for this project, email <a href=\"mailto:CompositeWPF@discussions.codeplex.com\">CompositeWPF@discussions.codeplex.com</a></span></p>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">You\r\nare receiving this email because you subscribed to this discussion on CodePlex.\r\nYou can <a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/53676\">unsubscribe</a>\r\non codePlex.com.</span></p>\r\n\r\n<p><span style=\"font-size:9.0pt;font-family:'Verdana','sans-serif';color:gray\">Please\r\nnote: Images and attachments will be removed from emails. Any posts to this\r\ndiscussion will also be available online at codeplex.com</span></p>\r\n\r\n</div>\r\n\r\n</div>\r\n\r\n",
    "PostedDate": "2009-04-17T16:14:33.397-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]