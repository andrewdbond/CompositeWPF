[
  {
    "Id": "168593",
    "ThreadId": "50339",
    "Html": "Hi,<br>\r\nI just stumbled across the code in the commanding example, which looks like this:<br>\r\n<br>\r\n<strong>&nbsp;&nbsp;&nbsp; public static class OrdersCommands<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static CompositeCommand SaveAllOrdersCommand = new CompositeCommand();<br>\r\n&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp; public class OrdersCommandProxy<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public virtual CompositeCommand SaveAllOrdersCommand<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return OrdersCommands.SaveAllOrdersCommand; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp; }</strong><br>\r\n<br>\r\nI think there was a reason for using a proxy and not refering the static class directly in the code behind file of the example. Does anybody know which reason it was?<br>\r\n<strong>[EDIT] When writing this post, it came back to me: You can't databind to static classes... I think thats it?</strong><br>\r\nThanks, Chris<br>\r\n<br>\r\nPS: Here the code behind (is there any way to highligh code here?)<br>\r\n<br>\r\n<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public OrdersToolBar()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.DataContext = new OrdersCommandProxy();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</strong> \r\n",
    "PostedDate": "2009-03-16T09:17:07.227-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "169184",
    "ThreadId": "50339",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi Chris,</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:calibri\">The Composite Application Guidance documentation gives one extra reason to use that technique in the <a href=\"http://msdn.microsoft.com/en-us/library/dd458890.aspx\"><span style=\"font-family:calibri\">Commanding Quickstart</span></a></span><span style=\"font-family:calibri\">:</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">&quot;<i>To create a globally available command, you typically create a static instance of a <b>CompositeCommand</b> class and expose it publicly through a static class. This approach is straightforward, because you can access the command instance directly from your code. However, this approach makes your classes that use the command hard to test in isolation, because your classes are tightly coupled to the command. When testability is a concern in an application, a proxy class can be used to access global commands. A proxy class can be easily replaced with mock implementations when writing unit tests.&quot;</i></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\">Hope this helps!</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Matias Bonaventura</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><a href=\"http://blogs.southworks.net/\"><span style=\"font-family:calibri\">http://blogs.southworks.net/matiasb</span></a> </p>\r\n",
    "PostedDate": "2009-03-17T14:24:48.807-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]