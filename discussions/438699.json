[
  {
    "Id": "1023893",
    "ThreadId": "438699",
    "Html": "Hello, \r<br />\nI am fairly new to the MVVM model and need some help. \r<br />\n<br />\nMy application is called with a GUID on the querystring. \r<br />\n<br />\nIn my App.xaml.cs I gather the GUID, run a sub called SetupUserPrincipal with that guid. Inside that function I create object UserPrincipal.<br />\n<pre><code>    private void Application_Startup(object sender, StartupEventArgs e)\n    {\n        string val = HtmlPage.Document.QueryString[&quot;GUID&quot;];\n        Bootstrapper bootStrapper = new Bootstrapper(this.SetupUserPrincipal(val));\n        bootStrapper.Run();\n    }\n\n    private UserPrincipal SetupUserPrincipal(string userid)\n    {\n        UserPrincipal principal = new UserPrincipal(userid);\n        return principal;\n    }\n</code></pre>\n\nInside of my UserPrincipal class, I set the GUID and then call a web service to see if that GUID is correct and if so, gather some more information out of it.<br />\n<pre><code>public class UserPrincipal\n{\n    private string _guid;\n    private Int32 _userID;\n    private DateTime _lastAccess;\n\n    public DateTime LastAccess\n    {\n        get { return this._lastAccess; }\n    }\n\n   public string GUID\n    {\n        get { return this._guid; }\n    }\n\n    public Int32 UserID\n    {\n        get { return this._userID; }\n    }\n\n    public UserPrincipal(string guid)\n    {\n        _guid = guid;\n\n        LoadUserInfo();\n    }\n\n    public void LoadUserInfo()\n    {\n        UserSecurityServiceClient service = new UserSecurityServiceClient();\n        service.GetUserByGUIDCompleted += new EventHandler&lt;GetUserByGUIDCompletedEventArgs&gt;(UserInfo);\n        service.GetUserByGUIDAsync(this._guid);\n    }\n\n    void UserInfo(object sender, GetUserByGUIDCompletedEventArgs e)\n    {\n        NSAMedia.VendorAutomation.Infrastructure.UserSecurityService.Users serviceResponse = e.Result;\n\n        for (int j = 0; j &lt; serviceResponse.User.UserSecurity.Count; j++)\n        {\n            this._userID = serviceResponse.User.UserSecurity[j].userID;\n            this._lastAccess = serviceResponse.User.UserSecurity[j].lastAccess;\n        }\n        ServiceLocator.Current.GetInstance&lt;IEventAggregator&gt;().GetEvent&lt;UserInitialized&gt;().Publish(true);\n    }\n\n}\n</code></pre>\n\nSince I am in Silverlight, this is a async call. This means the call to run the bootstrapper and register my modules and even Register the Instance of my UserPrincipal object is called and loaded before my web service is called. <br />\n<pre><code>public class Bootstrapper : UnityBootstrapper\n{\n    UserPrincipal userPrincipal;\n\n    protected override DependencyObject CreateShell()\n    {\n        Shell rootShell = new Shell();\n        Application.Current.RootVisual = rootShell;\n        return rootShell;\n    }\n\n    protected override void ConfigureContainer()\n    {\n        Container.RegisterInstance(typeof(UserPrincipal), userPrincipal, new ContainerControlledLifetimeManager());\n\n        base.ConfigureContainer();\n    }\n\n    public Bootstrapper(UserPrincipal principal)\n    {\n        this.userPrincipal = principal;\n    }\n\n    protected override IModuleCatalog CreateModuleCatalog()\n    {\n        ModuleCatalog modules = new ModuleCatalog();\n        //modules.AddModule(typeof(NSAMedia.VendorAutomation.Modules.HelloWorld.HelloWorldModule));\n        modules.AddModule(typeof(NSAMedia.VendorAutomation.Modules.VendorDetail.VendorDetailModule));\n        modules.AddModule(typeof(NSAMedia.VendorAutomation.Modules.VendorSelection.VendorSelectionModule));\n        modules.AddModule(typeof(NSAMedia.VendorAutomation.Modules.ProductSelection.ProductSelectionModule));\n        modules.AddModule(typeof(NSAMedia.VendorAutomation.Modules.ProductDetails.ProductDetailsModule));\n        return modules;\n    }\n\n}\n</code></pre>\n\nAt this point I wanted to use the UserPrincipal object in each of my Modules constructors to determine if they have the ability to access the page or items on the page. <br />\n<pre><code>       public VendorSelectionViewModel(IVendorSelectionView view, IEventAggregator eventAggregator, User user)\n        {\n            View = view;\n            View.Model = this;\n            _user = user;\n            //this.HeaderInfo = &quot;Hello World&quot;;\n            this.VendorList = new ObservableCollection&lt;NSAMedia.VendorAutomation.Infrastructure.Model.VendorModel&gt;();\n            this.eventAggregator = eventAggregator;\n\n            //this.eventAggregator.GetEvent&lt;UserInitialized&gt;().Subscribe(this.checkUser);\n\n            try\n            {\n                this.LoadVendors();\n            }\n            catch\n            {\n                // log service faults \n                //this.AddError(&quot;Failed to set up data for Specialties, please see the event log for more details!&quot;);\n            }\n\n        }\n</code></pre>\n\nBecause of the async call, my user object that was Registered has none of the information populated from my web service call.\r<br />\n<br />\nMy question is there a way to stop the system pre-bootstrapper to allow the userprincipal object to acquire the information? Or should I be doing something different?\r<br />\n<br />\nThanks<br />\n",
    "PostedDate": "2013-04-01T12:38:39.957-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1025085",
    "ThreadId": "438699",
    "Html": "Duplicate of:<br />\n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/438700\" rel=\"nofollow\">Gathering User Information before Bootstrapper Runs</a></li>\n</ul>\n",
    "PostedDate": "2013-04-03T13:50:34.293-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]