[
  {
    "Id": "538522",
    "ThreadId": "239059",
    "Html": "\r\n<p>I have a Silverlight Prism app. and depending on the selection in the &quot;tree&quot; a &quot;view&quot; (xmal module) is displayed in the &quot;mainRegion&quot;.&nbsp; Simple enough.&nbsp; When the user clicks &quot;A&quot;, the A module is shown.&nbsp; When the user clicks &quot;B&quot; the &quot;A&quot; region\r\n is removed from the &quot;mainRegion&quot; and the &quot;B&quot; region is shown. The problem comes in when the user again clicks &quot;A&quot;, which has already been initialized which means when I call LoadModule(&quot;A&quot;), region B is removed, and nothing is displayed.&nbsp;</p>\r\n<p>The code below is linked to a button that simply swaps the views, but removing one, and loading the other, except on the second time through, the Load(&quot;A&quot;) is called succesfully, but nothing is shown in the mainRegion, it is empty.&nbsp; Yet the view resides\r\n in memory and in fact its timer (a variable associated with the view) is still firing away.</p>\r\n<pre>This code is linked to a button that simply swaps the views.  There is no errors generated, but the behavior is not correct.</pre>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">object</span> o = m_RegionManager.Regions[<span style=\"color:#a31515\">&quot;mainRegion&quot;</span>].Views.FirstOrDefault();\r\n<span style=\"color:blue\">if</span> (o != <span style=\"color:blue\">null</span>)\r\n\tm_RegionManager.Regions[<span style=\"color:#a31515\">&quot;mainRegion&quot;</span>].Remove(o);\r\n<span style=\"color:blue\">if</span> (m_bTestModule)\r\n\tm_ModuleManager.LoadModule(<span style=\"color:#a31515\">&quot;A&quot;</span>);\r\n<span style=\"color:blue\">else</span>\r\n\tm_ModuleManager.LoadModule(<span style=\"color:#a31515\">&quot;B&quot;</span>);\r\n\r\nm_bTestModule = !m_bTestModule;\r\n</pre>\r\n<pre>If anyone knows a work around for this problem, please let me know.  Even more bizare is when the brower is stopped and restarted, the view is sometimes </pre>\r\n<pre>present even after a restart, which means the code persists between instations of the browser.  That is scary.</pre>\r\n<pre>Thanks,</pre>\r\n<pre>Chris</pre>\r\n</div>\r\n",
    "PostedDate": "2010-12-20T15:36:54.017-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "538774",
    "ThreadId": "239059",
    "Html": "\r\n<p>Hi Chris,</p>\r\n<p>The problem you're experiencing is probably because you're trying to load a module twice. As explained on the\r\n<a href=\"http://msdn.microsoft.com/en-us/library/gg405479%28PandP.40%29.aspx\">Modularity chapter</a> of the Prism MSDN documentation, modules can only be loaded once, and cannot be unloaded. You might find more information about this in the following threads:</p>\r\n<ul>\r\n<li><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=223941\"><span>Prism Unload Module</span></a>\r\n</li><li><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=217492\"><span>Loading and unloading modules on demand</span></a>\r\n</li></ul>\r\n<p>In order to achieve your scenario, you could use the Event Aggregator (more information on\r\n<a href=\"http://msdn.microsoft.com/en-us/library/gg405479%28PandP.40%29.aspx\">this chapter</a>) to publish an event indicating that the views from certain module should be added. For example:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">object</span> o = m_RegionManager.Regions[<span style=\"color:#a31515\">&quot;mainRegion&quot;</span>].Views.FirstOrDefault();\r\n<span style=\"color:blue\">if</span> (o != <span style=\"color:blue\">null</span>)\r\n    m_RegionManager.Regions[<span style=\"color:#a31515\">&quot;mainRegion&quot;</span>].Remove(o);\r\n<span style=\"color:blue\">if</span> (m_bTestModule)\r\n    eventAggregator.GetEvent&lt;LoadViewToMainRegionEvent&gt;().Publish(<span style=\"color:#a31515\">&quot;A&quot;</span>);\r\n<span style=\"color:blue\">else</span>\r\n    eventAggregator.GetEvent&lt;LoadViewToMainRegionEvent&gt;().Publish(<span style=\"color:#a31515\">&quot;B&quot;</span>);\r\n\r\nm_bTestModule = !m_bTestModule;\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Then, in both of your modules respectively, you should subscribe to those events, and make them add their views to the Main Region. In order to do so, you could use\r\n<a href=\"http://msdn.microsoft.com/en-us/library/gg430861%28PandP.40%29.aspx\">Navigation</a> or any of the\r\n<a href=\"http://msdn.microsoft.com/en-us/library/ff921098%28PandP.40%29.aspx\">UI Composition</a> mechanisms provided by prism. You can read more about this in the following threads:</p>\r\n<ul>\r\n<li><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=212991\"><span>Login / Logout View Switching</span></a>\r\n</li><li><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=239016\"><span>Show / Hide Views?</span></a>\r\n</li></ul>\r\n<p>You might find the following QuickStarts useful to illustrate some of the concepts I've explained you:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921173%28PandP.40%29.aspx\">Event Aggregation QuickStart</a>\r\n</li><li><a href=\"http://msdn.microsoft.com/en-us/library/gg430881%28PandP.40%29.aspx\">View-Switching Navigation QuickStart</a>\r\n</li><li><a href=\"http://msdn.microsoft.com/en-us/library/ff921174%28PandP.40%29.aspx\">UI Composition QuickStart</a>\r\n</li></ul>\r\n<p>As an additional note, you can only add and remove views from regions, as explained on the\r\n<a href=\"http://msdn.microsoft.com/en-us/library/ff921098%28PandP.40%29.aspx\">UI Composition</a> chapter of the Prism MSDN documentation. If you need to place a region inside another region, the recommended approach is to use scoped regions (also explained\r\n in the aforementioned chapter), which implies adding a view that contains a region, inside another region (which also complies with the fact that you can only add views to regions).</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2010-12-21T07:16:30.52-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "538786",
    "ThreadId": "239059",
    "Html": "\r\n<p>Thanks for the reply Guido. &nbsp;The event publishing solution also suggest that the views have subscribe to an &quot;Unload&quot; event which would free the objects currently associated with the view.</p>\r\n<p>&nbsp;</p>\r\n<p>Chris</p>\r\n",
    "PostedDate": "2010-12-21T07:37:56.367-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "538803",
    "ThreadId": "239059",
    "Html": "\r\n<p>Yes, that's a possibility. In your case, as you're removing the only active view in that region, it's not strictly needed to subscribe to an &quot;Unload&quot; event in your modules, and you could use the approach that you were using to remove the view from the region.</p>\r\n<p>However, if you plan to design your solution so that it could be extended in the future to support adding and removing views dinamically, you could benefit from using an unload event to notify the modules that they should remove their views from the main\r\n region.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2010-12-21T08:23:39.463-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]