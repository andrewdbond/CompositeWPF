[
  {
    "Id": "508945",
    "ThreadId": "231365",
    "Html": "<p>WPF</p>\r\n<p>I get the following error when removing a View from a Region with the following code:</p>\r\n<p>\r\n<p>\r\n<p>&nbsp;</p>\r\n</p>\r\n</p>\r\n<p>\r\n<p>\r\n<p>\r\n<p>\r\n<p>&nbsp;</p>\r\n</p>\r\n</p>\r\n</p>\r\n<p><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\"><span style=\"font-family:Consolas;font-size:x-small\">\r\n<p><span style=\"font-family:Consolas;color:#0000ff;font-size:x-small\"><span style=\"font-family:Consolas;color:#0000ff;font-size:x-small\"><span style=\"font-family:Consolas;color:#0000ff;font-size:x-small\">Dim reg As IRegion = _regionManager.Regions(RegionNames .MainRegion) <br>Dim v As Object = reg.GetView(param.ScreenKey) <br>If v Is Nothing Then <br>Else <br>&nbsp; reg.Remove(v) <br>End If </span></span></span></p>\r\n<p>&nbsp;</p>\r\n<span style=\"font-family:Consolas;color:#0000ff;font-size:x-small\"><span style=\"font-family:Consolas;color:#0000ff;font-size:x-small\"><span style=\"font-family:Consolas;color:#0000ff;font-size:x-small\">\r\n<p>\r\n<p>\r\n<p>\r\n<p>&nbsp;</p>\r\n</p>\r\n</p>\r\n</p>\r\nSystem.InvalidOperationException was unhandled<br>&nbsp; Message=Collection Remove event must specify item position.<br>&nbsp; Source=PresentationFramework<br>&nbsp; StackTrace:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at MS.Internal.Data.EnumerableCollectionView.ProcessCollectionChanged(NotifyCollectionChangedEventArgs args)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Data.CollectionView.OnCollectionChanged(Object sender, NotifyCollectionChangedEventArgs args)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Collections.Specialized.NotifyCollectionChangedEventHandler.Invoke(Object sender, NotifyCollectionChangedEventArgs e)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.ViewsCollection.OnCollectionChanged(NotifyCollectionChangedEventArgs e) in c:\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Regions\\ViewsCollection.cs:line 121<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.ViewsCollection.NotifyRemove(IList items) in c:\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Regions\\ViewsCollection.Desktop.cs:line 40<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.ViewsCollection.SourceCollectionChanged(Object sender, NotifyCollectionChangedEventArgs e) in c:\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Regions\\ViewsCollection.cs:line 266<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(NotifyCollectionChangedEventArgs e)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(Int32 index)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Collections.ObjectModel.Collection`1.Remove(T item)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Regions.Region.Remove(Object view) in c:\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Regions\\Region.cs:line 287<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Bestpass.AM.Desktop.ScreenConductor.CloseScreen(ScreenCloseEventArgs param) in C:\\Development\\BestpassEM\\Bestpass.Desktop\\Classes\\ScreenConductor.vb:line 136<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Events.EventSubscription`1.InvokeAction(Action`1 action, TPayload argument) in c:\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Events\\EventSubscription.cs:line 126<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Events.EventSubscription`1.&lt;&gt;c__DisplayClass2.&lt;GetExecutionStrategy&gt;b__0(Object[] arguments) in c:\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Events\\EventSubscription.cs:line 109<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Events.EventBase.InternalPublish(Object[] arguments) in c:\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Events\\EventBase.cs:line 71<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.Practices.Prism.Events.CompositePresentationEvent`1.Publish(TPayload payload) in c:\\WorkingDir\\PrismLibraryBuild\\PrismLibrary\\Desktop\\Prism\\Events\\CompositePresentationEvent.cs:line 167<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Bestpass.UI.Infrastructure.ViewModelBase.ExecuteCloseCommand(Object param) in C:\\Development\\BestpassEM\\WPFInfrastructure\\Infrastructure\\ViewModelBase.vb:line 130<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Bestpass.AM.UI.AccountManagement.ViewModels.AccountMaintenanceViewModel.ExecuteCloseCommand(Object param) in C:\\Development\\BestpassEM\\Bestpass.AM.Desktop.AccountManagement\\ViewModel\\CompanyAccount\\AccountMaintenanceViewModel.vb:line 182<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Bestpass.UI.Infrastructure.WPF.RelayCommand`1.Execute(Object parameter) in C:\\Development\\BestpassEM\\WPFInfrastructure\\Infrastructure\\RelayCommand.vb:line 78<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at MS.Internal.Commands.CommandHelpers.CriticalExecuteCommandSource(ICommandSource commandSource, Boolean userInitiated)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Controls.Primitives.ButtonBase.OnClick()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Controls.Button.OnClick()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(MouseButtonEventArgs e)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.UIElement.OnMouseLeftButtonUpThunk(Object sender, MouseButtonEventArgs e)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.UIElement.ReRaiseEventAs(DependencyObject sender, RoutedEventArgs args, RoutedEvent newEvent)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.UIElement.OnMouseUpThunk(Object sender, MouseButtonEventArgs e)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.UIElement.RaiseEvent(RoutedEventArgs args, Boolean trusted)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Input.InputManager.ProcessStagingArea()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Interop.HwndMouseInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawMouseActions actions, Int32 x, Int32 y, Int32 wheel)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Interop.HwndMouseInputProvider.FilterMessage(IntPtr hwnd, WindowMessage msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean&amp; handled)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at MS.Internal.Threading.ExceptionFilterHelper.TryCatchWhen(Object source, Delegate method, Object args, Int32 numArgs, Delegate catchHandler)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.Dispatcher.InvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG&amp; msg)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Threading.Dispatcher.Run()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Application.RunDispatcher(Object ignore)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Application.RunInternal(Window window)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Application.Run(Window window)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Application.Run()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Bestpass.AM.Desktop.Application.Main() in C:\\Development\\BestpassEM\\Bestpass.Desktop\\obj\\x86\\Debug\\Application.g.vb:line 72<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.AppDomain._nExecuteAssembly(RuntimeAssembly assembly, String[] args)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ThreadHelper.ThreadStart_Context(Object state)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean ignoreSyncCtx)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Threading.ThreadHelper.ThreadStart()<br>&nbsp; InnerException: <br></span></span></span></span></span></span></p>\r\n</p>",
    "PostedDate": "2010-10-18T12:29:09.307-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "509313",
    "ThreadId": "231365",
    "Html": "<p>I forgot to add that this worked fine before upgrading from v2.2 to drop 10&nbsp;of v4.0.&nbsp; I also did a little more testing and it has to do with the control I am using as a region.&nbsp; I am using the Telerik TabControl.&nbsp; Can you point me in the direction of what possibly changed in the prism libs to change how it would interact with a 3rd party control?</p>",
    "PostedDate": "2010-10-19T05:23:11.82-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "509367",
    "ThreadId": "231365",
    "Html": "<p>Hi,</p>\r\n<p>I am glad that you solved this scenario. On the other hand, if you need to expose a UI  control as a region (e.g. Telerik TabControl), you could  create a <strong>Region Adapter</strong>. For more information on  this topic you could  take a&nbsp; look at the following documentation section on  MSDN:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921129(PandP.20).aspx\">How to:  Create a Custom Region Adapter</a></li>\r\n</ul>\r\n<p>Additionally, take into account that Prism provides region adapters out-of-the-box. From the MSDN documentation:</p>\r\n<ul>\r\n<li> <em><strong>ContentControlRegionAdapter</strong>. This adapter adapts controls of type <strong>System.Windows.Controls.ContentControl</strong> and derived classes.</em></li>\r\n<li><em> <strong>SelectorRegionAdapter</strong>. This adapter adapts controls derived from the class <strong>System.Windows.Controls.Primitives.Selector</strong>, such as the <strong>System.Windows.Controls.TabControl</strong> control.</em></li>\r\n<li><em> <strong>ItemsControlRegionAdapter</strong>. This adapter adapts controls of type <strong>System.Windows.Controls.ItemsControl</strong> and derived classes.</em></li>\r\n<li><em>The Silverlight version of the Composite Application Library contains a fourth region adapter named <strong>TabControlRegionAdapter</strong>. This is because the <strong>TabControl</strong> control in Silverlight 3 does not extend the <strong>Selector</strong> class and has a behavior that is different from its WPF counterpart.</em></li>\r\n</ul>\r\n<p>I am not aware how the Telerik TabControl works. But I assume that it derives from Selector, so you will be able to use this control as a region (SelectorRegionAdapter). If it does not or you experience a non expected behavior, you will need to create a particular region adapter for this.</p>\r\n<p>Hope this helps.</p>\r\n<p>Fernando Antivero <br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n<ul>\r\n</ul>",
    "PostedDate": "2010-10-19T06:42:23.183-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "509371",
    "ThreadId": "231365",
    "Html": "<p>Right, I know how to create a custom region adapter.&nbsp; Its just that the control worked just fine with the SelectorRegionAdapter prior to upgrading from v2.2 to v4.0.&nbsp; All I changed in my project were the Prism assemblies and something that had been working for weeks now broke.</p>",
    "PostedDate": "2010-10-19T06:48:48.7-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "509429",
    "ThreadId": "231365",
    "Html": "<p>The CollectionView was reworked around Drop9 (perhaps between 9 and 10) to enable support of the RegionLifetimeBehavior.&nbsp; It appears that in the remove notification, the item position is not specified.&nbsp; Was this a Silverlight or WPF application you were building</p>",
    "PostedDate": "2010-10-19T08:14:14.093-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "509437",
    "ThreadId": "231365",
    "Html": "<p>WPF</p>",
    "PostedDate": "2010-10-19T08:24:31.023-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "510494",
    "ThreadId": "231365",
    "Html": "<p>I am having the exact same problem. Same error and mine also worked with the CAL before changing everything to Prism. Mine is also WPF. I am not using a 3rd party control though. I did get the remove to work with the code in&nbsp;<a href=\"http://blogs.southworks.net/matiasb/2009/07/02/how-to-hide-views-inside-composite-application-guidance-aka-prism-v2-regions/\">http://blogs.southworks.net/matiasb/2009/07/02/how-to-hide-views-inside-composite-application-guidance-aka-prism-v2-regions/</a>&nbsp;after updating it to use Prism. I modified it to more closely match my situation, which is loading the catalog from a xaml file like this:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleCatalog</span> <span style=\"color:red\">xmlns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:black\">&quot;</span>\r\n\t\t\t\t\t <span style=\"color:red\">xmlns:x</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:black\">&quot;</span>\r\n\t\t\t\t\t <span style=\"color:red\">xmlns:sys</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">clr-namespace:System;assembly=mscorlib</span><span style=\"color:black\">&quot;</span>\r\n\t\t\t\t\t <span style=\"color:red\">xmlns:Prism</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">clr-namespace:Microsoft.Practices.Prism.Modularity;assembly=Microsoft.Practices.Prism</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfoGroup</span> <span style=\"color:red\">Ref</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ViewsModule.dll</span><span style=\"color:black\">&quot;</span>\r\n\t\t\t\t\t\t   <span style=\"color:red\">InitializationMode</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">WhenAvailable</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n\t\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfo</span> <span style=\"color:red\">ModuleName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ViewsModule.ViewsModule</span><span style=\"color:black\">&quot;</span>\r\n\t\t\t\t\t\t  <span style=\"color:red\">ModuleType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ViewsModule.ViewsModule, ViewsModule, Version=1.0.0.0</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfoGroup</span><span style=\"color:blue\">&gt;</span>\r\n<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Prism</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleCatalog</span><span style=\"color:blue\">&gt;</span>\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>and it still worked. The one difference is that my project is using MVVM and rather then adding the regions like this:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()\r\n        {\r\n            regionManager.Regions[<span style=\"color:#a31515\">&quot;TabRegion&quot;</span>].Add(<span style=\"color:blue\">new</span> View1(), <span style=\"color:#a31515\">&quot;View1&quot;</span>);\r\n            regionManager.Regions[<span style=\"color:#a31515\">&quot;TabRegion&quot;</span>].Add(<span style=\"color:blue\">new</span> View2(), <span style=\"color:#a31515\">&quot;View2&quot;</span>);\r\n            regionManager.Regions[<span style=\"color:#a31515\">&quot;TabRegion&quot;</span>].Add(<span style=\"color:blue\">new</span> View3(), <span style=\"color:#a31515\">&quot;View3&quot;</span>);\r\n        }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<pre>I am using the container to resolve the view like this:</pre>\r\n<pre><div style=\"color:black;background-color:white\"><pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> Initialize()\r\n        {\r\n            <span style=\"color:blue\">this</span>.regionManager.Regions[RegionConstants.DisplayRegion].Add(container.Resolve&lt;GroupSummaryView&gt;(), &quot;GroupSummaryView&quot;);\r\n        }\r\n</pre>\r\n</div>\r\nwhere the GroupSummaryView constructor is like this:</pre>\r\n<pre><div style=\"color:black;background-color:white\"><pre> <span style=\"color:blue\">public</span> GroupSummaryView(GroupViewModel viewModel)\r\n        {\r\n            InitializeComponent();\r\n            viewModel.PropertyChanged += <span style=\"color:blue\">new</span> System.ComponentModel.PropertyChangedEventHandler(GroupSummaryViewModel_PropertyChanged);\r\n            <span style=\"color:blue\">this</span>.Loaded += (s, e) =&gt; { <span style=\"color:blue\">this</span>.DataContext = viewModel; viewModel.Initialize(); };\r\n            \r\n        }\r\n</pre>\r\n</div>\r\nHopefully that gives some insight into what the problem could be.</pre>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-21T06:49:45.013-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "510694",
    "ThreadId": "231365",
    "Html": "<p>Update: I got my problem solved. Changed the xaml from&nbsp;</p>\r\n<p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ItemsControl</span> <span style=\"color:red\">x:Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">DisplayRegionControl</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">regions:RegionManager.RegionName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">DisplayRegion</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span>\r\n</pre>\r\n</div>\r\nto</p>\r\n<pre><div style=\"color:black;background-color:white\"><pre style=\"color:black\"><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ContentControl</span> <span style=\"color:red\">x:Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">DisplayRegionControl</span><span style=\"color:black\">&quot; </span><span style=\"color:red\">regions:RegionManager.RegionName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">DisplayRegion</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span></pre>\r\n</div>\r\nand everything removed correctly.</pre>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-21T12:11:31.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "510698",
    "ThreadId": "231365",
    "Html": "<p>So, if the ItemsControl throws the same error&nbsp;that means its not only occuring with a 3rd&nbsp;party control (I was using the Telerik Tab Control).</p>",
    "PostedDate": "2010-10-21T12:18:04.59-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "510699",
    "ThreadId": "231365",
    "Html": "<p>Thanks to everyone on the thread for reporting the issue. We are looking into fixing this bug.&nbsp;&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-10-21T12:18:34.333-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "510701",
    "ThreadId": "231365",
    "Html": "<p>hnolan: Correct. I was injecting my own views on demand and trying to remove them, which worked before. Changing from ItemsControl to ContentControl fixed the problem.&nbsp;</p>",
    "PostedDate": "2010-10-21T12:21:23.01-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "511499",
    "ThreadId": "231365",
    "Html": "\r\n<p>Hi!</p>\r\n<p>Our team&nbsp;experiencing the same issue and it is really a showstopper for us. We're using ItemsControl in WPF build and , unfortunately,&nbsp;due to some UI design reasons&nbsp;ContentControl is no solution for us.</p>\r\n<p>When we can expect a fix?</p>\r\n<p>Thanks.</p>\r\n",
    "PostedDate": "2010-10-23T06:31:34.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "511546",
    "ThreadId": "231365",
    "Html": "\r\n<p>Last week, the whole p&amp;p team was tied up hosting the patterns &amp; practices Symposium and did not get much done outside of the Symposium.&nbsp; Bob &amp; I did look at this issue a little bit, and we have a repro case in the form of a unit test and\r\n a plan on how to fix it.&nbsp; We plan on tackling this Monday.</p>\r\n<p>Our next drop should include a fix, and I will talk to Bob and Karl about posting the required code changes here to unblock you all between the time we fix it and drop the code officially.</p>\r\n<p>Please post any other issues you are facing, as we are in docs/bug-fix mode and will be wrapping the project up soon.</p>\r\n<p>Thanks again for your help in posting&nbsp;the details (which helped us find the root cause of the issue quickly) and your patience working with pre-release software.</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-23T11:08:57.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512449",
    "ThreadId": "231365",
    "Html": "\r\n<p>I want to give those of you who ran into this issue a chance to try out the fix before the next drop. There are three files that are affected by the fix: ViewsCollection.cs, ViewsCollection.Desktop.cs, and ViewsCollection.Silverlight.cs which are all shown\r\n below, as well as the unit tests.</p>\r\n<p>If you want to do a custom build to test this out, replace the files with the contents from below, rebuild the PrismLibrary solution, and run the UpdatePrismLibraries.bat file.&nbsp; NOTE: The UpdatePrismLibraries.bat will overwrite the signed binaries we\r\n shipped with Prismv4 Drop10, so you may want to do a back up before you run this.</p>\r\n<p>Let me know if you have any questions or run into problems after incorporating the fix,<br>\r\nMichael Puleio</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">// ViewsCollection.cs</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:green\">// Microsoft patterns &amp; practices</span>\r\n<span style=\"color:green\">// Composite Application Guidance for Windows Presentation Foundation and Silverlight</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:green\">// Copyright (c) Microsoft Corporation.  All rights reserved.</span>\r\n<span style=\"color:green\">// THIS CODE AND INFORMATION IS PROVIDED &quot;AS IS&quot; WITHOUT WARRANTY</span>\r\n<span style=\"color:green\">// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT</span>\r\n<span style=\"color:green\">// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND</span>\r\n<span style=\"color:green\">// FITNESS FOR A PARTICULAR PURPOSE.</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:green\">// The example companies, organizations, products, domain names,</span>\r\n<span style=\"color:green\">// e-mail addresses, logos, people, places, and events depicted</span>\r\n<span style=\"color:green\">// herein are fictitious.  No association with any real company,</span>\r\n<span style=\"color:green\">// organization, product, domain name, email address, logo, person,</span>\r\n<span style=\"color:green\">// places, or events is intended or should be inferred.</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Collections;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Collections.ObjectModel;\r\n<span style=\"color:blue\">using</span> System.Collections.Specialized;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n\r\n<span style=\"color:blue\">namespace</span> Microsoft.Practices.Prism.Regions\r\n{\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> Implementation of &lt;see cref=&quot;IViewsCollection&quot;/&gt; that takes an &lt;see cref=&quot;ObservableCollection{T}&quot;/&gt; of &lt;see cref=&quot;ItemMetadata&quot;/&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> and filters it to display an &lt;see cref=&quot;INotifyCollectionChanged&quot;/&gt; collection of</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;see cref=&quot;object&quot;/&gt;</span><span style=\"color:green\"> elements (the items which the &lt;see cref=&quot;ItemMetadata&quot;/&gt; wraps).</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> ViewsCollection : IViewsCollection\r\n    {\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> ObservableCollection&lt;ItemMetadata&gt; subjectCollection;\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> Dictionary&lt;ItemMetadata, MonitorInfo&gt; monitoredItems =\r\n            <span style=\"color:blue\">new</span> Dictionary&lt;ItemMetadata, MonitorInfo&gt;();\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> Predicate&lt;ItemMetadata&gt; filter;\r\n        <span style=\"color:blue\">private</span> Comparison&lt;<span style=\"color:blue\">object</span>&gt; sort;\r\n        <span style=\"color:blue\">private</span> List&lt;<span style=\"color:blue\">object</span>&gt; filteredItems = <span style=\"color:blue\">new</span> List&lt;<span style=\"color:blue\">object</span>&gt;();\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Initializes a new instance of the &lt;see cref=&quot;ViewsCollection&quot;/&gt; class.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;list&quot;&gt;</span><span style=\"color:green\">The list to wrap and filter.&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;filter&quot;&gt;</span><span style=\"color:green\">A predicate to filter the &lt;paramref name=&quot;list&quot;/&gt; collection.&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">public</span> ViewsCollection(ObservableCollection&lt;ItemMetadata&gt; list, Predicate&lt;ItemMetadata&gt; filter)\r\n        {\r\n            <span style=\"color:blue\">this</span>.subjectCollection = list;\r\n            <span style=\"color:blue\">this</span>.filter = filter;\r\n            <span style=\"color:blue\">this</span>.MonitorAllMetadataItems();\r\n            <span style=\"color:blue\">this</span>.subjectCollection.CollectionChanged &#43;= <span style=\"color:blue\">this</span>.SourceCollectionChanged;\r\n            <span style=\"color:blue\">this</span>.UpdateFilteredItemsList();\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Occurs when the collection changes.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> NotifyCollectionChangedEventHandler CollectionChanged;\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the comparison used to sort the views.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:green\">The comparison to use.&lt;/value&gt;</span>\r\n        <span style=\"color:blue\">public</span> Comparison&lt;<span style=\"color:blue\">object</span>&gt; SortComparison\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.sort; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.sort != value)\r\n                {\r\n                    <span style=\"color:blue\">this</span>.sort = value;\r\n                    <span style=\"color:blue\">this</span>.OnCollectionChanged(<span style=\"color:blue\">new</span> NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset));\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> IEnumerable&lt;<span style=\"color:blue\">object</span>&gt; FilteredItems\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.filteredItems; }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Determines whether the collection contains a specific value.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;value&quot;&gt;</span><span style=\"color:green\">The object to locate in the collection.&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span><span style=\"color:gray\">&lt;see langword=&quot;true&quot; /&gt;</span><span style=\"color:green\"> if &lt;paramref name=&quot;value&quot;/&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> Contains(<span style=\"color:blue\">object</span> value)\r\n        {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.FilteredItems.Contains(value);\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span><span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\">Returns an enumerator that iterates through the collection.</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\">A &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">public</span> IEnumerator&lt;<span style=\"color:blue\">object</span>&gt; GetEnumerator()\r\n        {\r\n            <span style=\"color:blue\">return</span>\r\n                <span style=\"color:blue\">this</span>.FilteredItems.OrderBy&lt;<span style=\"color:blue\">object</span>, <span style=\"color:blue\">object</span>&gt;(o =&gt; o, <span style=\"color:blue\">new</span> RegionItemComparer(<span style=\"color:blue\">this</span>.SortComparison)).\r\n                    GetEnumerator();\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span><span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\">Returns an enumerator that iterates through a collection.</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\">An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        IEnumerator IEnumerable.GetEnumerator()\r\n        {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.GetEnumerator();\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Used to invoked the &lt;see cref=&quot;CollectionChanged&quot;/&gt; event.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;e&quot;&gt;</span><span style=\"color:gray\">&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> OnCollectionChanged(NotifyCollectionChangedEventArgs e)\r\n        {\r\n            NotifyCollectionChangedEventHandler handler = <span style=\"color:blue\">this</span>.CollectionChanged;\r\n            <span style=\"color:blue\">if</span> (handler != <span style=\"color:blue\">null</span>) handler(<span style=\"color:blue\">this</span>, e);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> NotifyReset()\r\n        {\r\n            <span style=\"color:blue\">this</span>.OnCollectionChanged(<span style=\"color:blue\">new</span> NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset));\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Removes all monitoring of underlying MetadataItems and re-adds them.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> ResetAllMonitors()\r\n        {\r\n            <span style=\"color:blue\">this</span>.RemoveAllMetadataMonitors();\r\n            <span style=\"color:blue\">this</span>.MonitorAllMetadataItems();\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Adds all underlying MetadataItems to the list from the subjectCollection</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> MonitorAllMetadataItems()\r\n        {\r\n            <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> item <span style=\"color:blue\">in</span> <span style=\"color:blue\">this</span>.subjectCollection)\r\n            {\r\n                <span style=\"color:blue\">this</span>.AddMetadataMonitor(item, <span style=\"color:blue\">this</span>.filter(item));\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Removes all monitored items from our monitoring list.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RemoveAllMetadataMonitors()\r\n        {\r\n            <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> item <span style=\"color:blue\">in</span> <span style=\"color:blue\">this</span>.monitoredItems)\r\n            {\r\n                item.Key.MetadataChanged -= <span style=\"color:blue\">this</span>.OnItemMetadataChanged;\r\n            }\r\n\r\n            <span style=\"color:blue\">this</span>.monitoredItems.Clear();\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Adds handler to monitor the MetadatItem and adds it to our monitoring list.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;itemMetadata&quot;&gt;</span><span style=\"color:gray\">&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;isInList&quot;&gt;</span><span style=\"color:gray\">&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> AddMetadataMonitor(ItemMetadata itemMetadata, <span style=\"color:blue\">bool</span> isInList)\r\n        {\r\n            itemMetadata.MetadataChanged &#43;= <span style=\"color:blue\">this</span>.OnItemMetadataChanged;\r\n            <span style=\"color:blue\">this</span>.monitoredItems.Add(\r\n                itemMetadata,\r\n                <span style=\"color:blue\">new</span> MonitorInfo\r\n                    {\r\n                        IsInList = isInList\r\n                    });\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Unhooks from the MetadataItem change event and removes from our monitoring list.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;itemMetadata&quot;&gt;</span><span style=\"color:gray\">&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RemoveMetadataMonitor(ItemMetadata itemMetadata)\r\n        {\r\n            itemMetadata.MetadataChanged -= <span style=\"color:blue\">this</span>.OnItemMetadataChanged;\r\n            <span style=\"color:blue\">this</span>.monitoredItems.Remove(itemMetadata);\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Invoked when any of the underlying ItemMetadata items we're monitoring changes.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;sender&quot;&gt;</span><span style=\"color:gray\">&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;e&quot;&gt;</span><span style=\"color:gray\">&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> OnItemMetadataChanged(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n        {\r\n            ItemMetadata itemMetadata = (ItemMetadata) sender;\r\n\r\n            <span style=\"color:green\">// Our monitored item may have been removed during another event before</span>\r\n            <span style=\"color:green\">// our OnItemMetadataChanged got called back, so it's not unexpected</span>\r\n            <span style=\"color:green\">// that we may not have it in our list.</span>\r\n            MonitorInfo monitorInfo;\r\n            <span style=\"color:blue\">bool</span> foundInfo = <span style=\"color:blue\">this</span>.monitoredItems.TryGetValue(itemMetadata, <span style=\"color:blue\">out</span> monitorInfo);\r\n            <span style=\"color:blue\">if</span> (!foundInfo) <span style=\"color:blue\">return</span>;\r\n\r\n            <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.filter(itemMetadata))\r\n            {\r\n                <span style=\"color:blue\">if</span> (!monitorInfo.IsInList)\r\n                {\r\n                    <span style=\"color:green\">// This passes our filter and wasn't marked</span>\r\n                    <span style=\"color:green\">// as in our list so we can consider this</span>\r\n                    <span style=\"color:green\">// an Add.</span>\r\n                    monitorInfo.IsInList = <span style=\"color:blue\">true</span>;\r\n                    <span style=\"color:blue\">this</span>.UpdateFilteredItemsList();\r\n                    NotifyAdd(itemMetadata.Item);\r\n                }\r\n            }\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                <span style=\"color:green\">// This doesn't fit our filter, we remove from our</span>\r\n                <span style=\"color:green\">// tracking list, but should not remove any monitoring in</span>\r\n                <span style=\"color:green\">// case it fits our filter in the future.</span>\r\n                monitorInfo.IsInList = <span style=\"color:blue\">false</span>;\r\n                <span style=\"color:blue\">this</span>.RemoveFromFilteredList(itemMetadata.Item);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> The event handler due to changes in the underlying collection.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;sender&quot;&gt;</span><span style=\"color:gray\">&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;e&quot;&gt;</span><span style=\"color:gray\">&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> SourceCollectionChanged(<span style=\"color:blue\">object</span> sender, NotifyCollectionChangedEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">switch</span> (e.Action)\r\n            {\r\n                <span style=\"color:blue\">case</span> NotifyCollectionChangedAction.Add:\r\n                    <span style=\"color:blue\">this</span>.UpdateFilteredItemsList();\r\n                    <span style=\"color:blue\">foreach</span> (ItemMetadata itemMetadata <span style=\"color:blue\">in</span> e.NewItems)\r\n                    {\r\n                        <span style=\"color:blue\">bool</span> isInFilter = <span style=\"color:blue\">this</span>.filter(itemMetadata);\r\n                        <span style=\"color:blue\">this</span>.AddMetadataMonitor(itemMetadata, isInFilter);\r\n                        <span style=\"color:blue\">if</span> (isInFilter)\r\n                        {\r\n                            NotifyAdd(itemMetadata.Item);\r\n                        }\r\n                    }\r\n\r\n                    <span style=\"color:green\">// If we're sorting we can't predict how</span>\r\n                    <span style=\"color:green\">// the collection has changed on an add so we </span>\r\n                    <span style=\"color:green\">// resort to a reset notification.</span>\r\n                    <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.sort != <span style=\"color:blue\">null</span>)\r\n                    {\r\n                        <span style=\"color:blue\">this</span>.NotifyReset();\r\n                    }\r\n\r\n                    <span style=\"color:blue\">break</span>;\r\n\r\n                <span style=\"color:blue\">case</span> NotifyCollectionChangedAction.Remove:\r\n                    <span style=\"color:blue\">foreach</span> (ItemMetadata itemMetadata <span style=\"color:blue\">in</span> e.OldItems)\r\n                    {\r\n                        <span style=\"color:blue\">this</span>.RemoveMetadataMonitor(itemMetadata);\r\n                        <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.filter(itemMetadata))\r\n                        {\r\n                            <span style=\"color:blue\">this</span>.RemoveFromFilteredList(itemMetadata.Item);\r\n                        }\r\n                    }\r\n\r\n                    <span style=\"color:blue\">break</span>;\r\n\r\n                <span style=\"color:blue\">default</span>:\r\n                    <span style=\"color:blue\">this</span>.ResetAllMonitors();\r\n                    <span style=\"color:blue\">this</span>.UpdateFilteredItemsList();\r\n                    <span style=\"color:blue\">this</span>.NotifyReset();\r\n\r\n                    <span style=\"color:blue\">break</span>;\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> NotifyAdd(<span style=\"color:blue\">object</span> item)\r\n        {\r\n            <span style=\"color:blue\">int</span> newIndex = <span style=\"color:blue\">this</span>.filteredItems.IndexOf(item);\r\n            <span style=\"color:blue\">this</span>.NotifyAdd(<span style=\"color:blue\">new</span>[] { item }, newIndex);\r\n        }\r\n        \r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> RemoveFromFilteredList(<span style=\"color:blue\">object</span> item)\r\n        {\r\n            <span style=\"color:blue\">int</span> index = <span style=\"color:blue\">this</span>.filteredItems.IndexOf(item);\r\n            <span style=\"color:blue\">this</span>.UpdateFilteredItemsList();\r\n            <span style=\"color:blue\">this</span>.NotifyRemove(<span style=\"color:blue\">new</span>[] { item }, index);\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> UpdateFilteredItemsList()\r\n        {\r\n            <span style=\"color:blue\">this</span>.filteredItems = <span style=\"color:blue\">this</span>.subjectCollection.Where(i =&gt; <span style=\"color:blue\">this</span>.filter(i)).Select(i =&gt; i.Item).ToList();\r\n        }\r\n        \r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">class</span> MonitorInfo\r\n        {\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> IsInList { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">class</span> RegionItemComparer : Comparer&lt;<span style=\"color:blue\">object</span>&gt;\r\n        {\r\n            <span style=\"color:blue\">private</span> <span style=\"color:blue\">readonly</span> Comparison&lt;<span style=\"color:blue\">object</span>&gt; comparer;\r\n\r\n            <span style=\"color:blue\">public</span> RegionItemComparer(Comparison&lt;<span style=\"color:blue\">object</span>&gt; comparer)\r\n            {\r\n                <span style=\"color:blue\">this</span>.comparer = comparer;\r\n            }\r\n\r\n            <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">int</span> Compare(<span style=\"color:blue\">object</span> x, <span style=\"color:blue\">object</span> y)\r\n            {\r\n                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.comparer == <span style=\"color:blue\">null</span>)\r\n                {\r\n                    <span style=\"color:blue\">return</span> 0;\r\n                }\r\n\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.comparer(x, y);\r\n            }\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">//ViewsCollection.Desktop.cs</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:green\">// Microsoft patterns &amp; practices</span>\r\n<span style=\"color:green\">// Composite Application Guidance for Windows Presentation Foundation and Silverlight</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:green\">// Copyright (c) Microsoft Corporation.  All rights reserved.</span>\r\n<span style=\"color:green\">// THIS CODE AND INFORMATION IS PROVIDED &quot;AS IS&quot; WITHOUT WARRANTY</span>\r\n<span style=\"color:green\">// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT</span>\r\n<span style=\"color:green\">// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND</span>\r\n<span style=\"color:green\">// FITNESS FOR A PARTICULAR PURPOSE.</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:green\">// The example companies, organizations, products, domain names,</span>\r\n<span style=\"color:green\">// e-mail addresses, logos, people, places, and events depicted</span>\r\n<span style=\"color:green\">// herein are fictitious.  No association with any real company,</span>\r\n<span style=\"color:green\">// organization, product, domain name, email address, logo, person,</span>\r\n<span style=\"color:green\">// places, or events is intended or should be inferred.</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:blue\">using</span> System.Collections;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Collections.Specialized;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n\r\n<span style=\"color:blue\">namespace</span> Microsoft.Practices.Prism.Regions\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> ViewsCollection\r\n    {\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> NotifyAdd(IList items, <span style=\"color:blue\">int</span> newStartingIndex)\r\n        {\r\n            <span style=\"color:blue\">if</span> (items.Count &gt; 0)\r\n            {\r\n                OnCollectionChanged(<span style=\"color:blue\">new</span> NotifyCollectionChangedEventArgs(\r\n                                            NotifyCollectionChangedAction.Add,\r\n                                            items,\r\n                                            newStartingIndex));\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> NotifyRemove(IList items, <span style=\"color:blue\">int</span> originalIndex)\r\n        {\r\n            <span style=\"color:blue\">if</span> (items.Count &gt; 0)\r\n            {\r\n                OnCollectionChanged(<span style=\"color:blue\">new</span> NotifyCollectionChangedEventArgs(\r\n                    NotifyCollectionChangedAction.Remove,\r\n                    items, \r\n                    originalIndex));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">//ViewsCollection.Silverlight.cs</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:green\">// Microsoft patterns &amp; practices</span>\r\n<span style=\"color:green\">// Composite Application Guidance for Windows Presentation Foundation and Silverlight</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:green\">// Copyright (c) Microsoft Corporation.  All rights reserved.</span>\r\n<span style=\"color:green\">// THIS CODE AND INFORMATION IS PROVIDED &quot;AS IS&quot; WITHOUT WARRANTY</span>\r\n<span style=\"color:green\">// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT</span>\r\n<span style=\"color:green\">// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND</span>\r\n<span style=\"color:green\">// FITNESS FOR A PARTICULAR PURPOSE.</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:green\">// The example companies, organizations, products, domain names,</span>\r\n<span style=\"color:green\">// e-mail addresses, logos, people, places, and events depicted</span>\r\n<span style=\"color:green\">// herein are fictitious.  No association with any real company,</span>\r\n<span style=\"color:green\">// organization, product, domain name, email address, logo, person,</span>\r\n<span style=\"color:green\">// places, or events is intended or should be inferred.</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:blue\">using</span> System.Collections;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Collections.Specialized;\r\n\r\n<span style=\"color:blue\">namespace</span> Microsoft.Practices.Prism.Regions\r\n{\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> ViewsCollection\r\n    {\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> NotifyAdd(IList items, <span style=\"color:blue\">int</span> newStartingIndex)\r\n        {\r\n            <span style=\"color:blue\">if</span> (items.Count &lt;= 0)\r\n            {\r\n                <span style=\"color:blue\">return</span>;\r\n            }\r\n\r\n            <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> item <span style=\"color:blue\">in</span> items)\r\n            {\r\n                <span style=\"color:blue\">this</span>.OnCollectionChanged(<span style=\"color:blue\">new</span> NotifyCollectionChangedEventArgs(\r\n                                             NotifyCollectionChangedAction.Add,\r\n                                             item,\r\n                                             newStartingIndex));\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> NotifyRemove(IList items, <span style=\"color:blue\">int</span> originalIndex)\r\n        {\r\n            <span style=\"color:blue\">if</span> (items.Count &lt;= 0)\r\n            {\r\n                <span style=\"color:blue\">return</span>;\r\n            }\r\n\r\n            <span style=\"color:blue\">foreach</span> (<span style=\"color:blue\">var</span> item <span style=\"color:blue\">in</span> items)\r\n            {\r\n                <span style=\"color:blue\">this</span>.OnCollectionChanged(<span style=\"color:blue\">new</span> NotifyCollectionChangedEventArgs(\r\n                                             NotifyCollectionChangedAction.Remove,\r\n                                             item,\r\n                                             originalIndex));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Here are the updated unit tests as well:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:green\">//ViewsCollectionFixture.cs</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:green\">// Microsoft patterns &amp; practices</span>\r\n<span style=\"color:green\">// Composite Application Guidance for Windows Presentation Foundation and Silverlight</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:green\">// Copyright (c) Microsoft Corporation.  All rights reserved.</span>\r\n<span style=\"color:green\">// THIS CODE AND INFORMATION IS PROVIDED &quot;AS IS&quot; WITHOUT WARRANTY</span>\r\n<span style=\"color:green\">// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT</span>\r\n<span style=\"color:green\">// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND</span>\r\n<span style=\"color:green\">// FITNESS FOR A PARTICULAR PURPOSE.</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:green\">// The example companies, organizations, products, domain names,</span>\r\n<span style=\"color:green\">// e-mail addresses, logos, people, places, and events depicted</span>\r\n<span style=\"color:green\">// herein are fictitious.  No association with any real company,</span>\r\n<span style=\"color:green\">// organization, product, domain name, email address, logo, person,</span>\r\n<span style=\"color:green\">// places, or events is intended or should be inferred.</span>\r\n<span style=\"color:green\">//===================================================================================</span>\r\n<span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.Collections;\r\n<span style=\"color:blue\">using</span> System.Collections.ObjectModel;\r\n<span style=\"color:blue\">using</span> System.Collections.Specialized;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> System.Windows.Data;\r\n<span style=\"color:blue\">using</span> Microsoft.Practices.Prism.Regions;\r\n<span style=\"color:blue\">using</span> Microsoft.Practices.Prism.TestSupport;\r\n<span style=\"color:blue\">using</span> Microsoft.VisualStudio.TestTools.UnitTesting;\r\n\r\n<span style=\"color:blue\">namespace</span> Microsoft.Practices.Prism.Tests.Regions\r\n{\r\n    [TestClass]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ViewsCollectionFixture\r\n    {\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> CanWrapCollectionCollection()\r\n        {\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;();\r\n            IViewsCollection viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, x =&gt; <span style=\"color:blue\">true</span>);\r\n\r\n            Assert.AreEqual(0, viewsCollection.Count());\r\n\r\n            <span style=\"color:blue\">var</span> item = <span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>();\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(item));\r\n            Assert.AreEqual(1, viewsCollection.Count());\r\n            Assert.AreSame(item, viewsCollection.First());\r\n        }\r\n\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> CanFilterCollection()\r\n        {\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;();\r\n            IViewsCollection viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, x =&gt; x.Name == <span style=\"color:#a31515\">&quot;Possible&quot;</span>);\r\n\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>()));\r\n\r\n            Assert.AreEqual(0, viewsCollection.Count());\r\n\r\n            <span style=\"color:blue\">var</span> item = <span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>();\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(item) {Name = <span style=\"color:#a31515\">&quot;Possible&quot;</span>});\r\n            Assert.AreEqual(1, viewsCollection.Count());\r\n\r\n            Assert.AreSame(item, viewsCollection.First());\r\n        }\r\n\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> RaisesCollectionChangedWhenFilteredCollectionChanges()\r\n        {\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;();\r\n            IViewsCollection viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, x =&gt; x.IsActive);\r\n            <span style=\"color:blue\">bool</span> collectionChanged = <span style=\"color:blue\">false</span>;\r\n            viewsCollection.CollectionChanged &#43;= (s, e) =&gt; collectionChanged = <span style=\"color:blue\">true</span>;\r\n\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>()) {IsActive = <span style=\"color:blue\">true</span>});\r\n\r\n            Assert.IsTrue(collectionChanged);\r\n        }\r\n\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> RaisesCollectionChangedWithAddAndRemoveWhenFilteredCollectionChanges()\r\n        {\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;();\r\n            IViewsCollection viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, x =&gt; x.IsActive);\r\n            <span style=\"color:blue\">bool</span> addedToCollection = <span style=\"color:blue\">false</span>;\r\n            <span style=\"color:blue\">bool</span> removedFromCollection = <span style=\"color:blue\">false</span>;\r\n            viewsCollection.CollectionChanged &#43;= (s, e) =&gt;\r\n                                                     {\r\n                                                         <span style=\"color:blue\">if</span> (e.Action == NotifyCollectionChangedAction.Add)\r\n                                                         {\r\n                                                             addedToCollection = <span style=\"color:blue\">true</span>;\r\n                                                         }\r\n                                                         <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (e.Action == NotifyCollectionChangedAction.Remove)\r\n                                                         {\r\n                                                             removedFromCollection = <span style=\"color:blue\">true</span>;\r\n                                                         }\r\n                                                     };\r\n            <span style=\"color:blue\">var</span> filteredInObject = <span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>()) {IsActive = <span style=\"color:blue\">true</span>};\r\n\r\n            originalCollection.Add(filteredInObject);\r\n\r\n            Assert.IsTrue(addedToCollection);\r\n            Assert.IsFalse(removedFromCollection);\r\n\r\n            originalCollection.Remove(filteredInObject);\r\n\r\n            Assert.IsTrue(removedFromCollection);\r\n        }\r\n\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> DoesNotRaiseCollectionChangedWhenAddingOrRemovingFilteredOutObject()\r\n        {\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;();\r\n            IViewsCollection viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, x =&gt; x.IsActive);\r\n            <span style=\"color:blue\">bool</span> collectionChanged = <span style=\"color:blue\">false</span>;\r\n            viewsCollection.CollectionChanged &#43;= (s, e) =&gt; collectionChanged = <span style=\"color:blue\">true</span>;\r\n            <span style=\"color:blue\">var</span> filteredOutObject = <span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>()) {IsActive = <span style=\"color:blue\">false</span>};\r\n\r\n            originalCollection.Add(filteredOutObject);\r\n            originalCollection.Remove(filteredOutObject);\r\n\r\n            Assert.IsFalse(collectionChanged);\r\n        }\r\n\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> CollectionChangedPassesWrappedItemInArgumentsWhenAdding()\r\n        {\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;();\r\n            <span style=\"color:blue\">var</span> filteredInObject = <span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>());\r\n            originalCollection.Add(filteredInObject);\r\n\r\n            IViewsCollection viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, x =&gt; <span style=\"color:blue\">true</span>);\r\n            IList oldItemsPassed = <span style=\"color:blue\">null</span>;\r\n            viewsCollection.CollectionChanged &#43;= (s, e) =&gt; { oldItemsPassed = e.OldItems; };\r\n            originalCollection.Remove(filteredInObject);\r\n\r\n            Assert.IsNotNull(oldItemsPassed);\r\n            Assert.AreEqual(1, oldItemsPassed.Count);\r\n            Assert.AreSame(filteredInObject.Item, oldItemsPassed[0]);\r\n        }\r\n\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> CollectionChangedPassesWrappedItemInArgumentsWhenRemoving()\r\n        {\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;();\r\n            IViewsCollection viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, x =&gt; <span style=\"color:blue\">true</span>);\r\n            IList newItemsPassed = <span style=\"color:blue\">null</span>;\r\n            viewsCollection.CollectionChanged &#43;= (s, e) =&gt; { newItemsPassed = e.NewItems; };\r\n            <span style=\"color:blue\">var</span> filteredInObject = <span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>());\r\n\r\n            originalCollection.Add(filteredInObject);\r\n\r\n            Assert.IsNotNull(newItemsPassed);\r\n            Assert.AreEqual(1, newItemsPassed.Count);\r\n            Assert.AreSame(filteredInObject.Item, newItemsPassed[0]);\r\n        }\r\n\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> EnumeratesWrappedItems()\r\n        {\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;()\r\n                                         {\r\n                                             <span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>()),\r\n                                             <span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>())\r\n                                         };\r\n            IViewsCollection viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, x =&gt; <span style=\"color:blue\">true</span>);\r\n            Assert.AreEqual(2, viewsCollection.Count());\r\n\r\n            Assert.AreSame(originalCollection[0].Item, viewsCollection.ElementAt(0));\r\n            Assert.AreSame(originalCollection[1].Item, viewsCollection.ElementAt(1));\r\n        }\r\n\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> ChangingMetadataOnItemAddsOrRemovesItFromTheFilteredCollection()\r\n        {\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;();\r\n            IViewsCollection viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, x =&gt; x.IsActive);\r\n            <span style=\"color:blue\">bool</span> addedToCollection = <span style=\"color:blue\">false</span>;\r\n            <span style=\"color:blue\">bool</span> removedFromCollection = <span style=\"color:blue\">false</span>;\r\n            viewsCollection.CollectionChanged &#43;= (s, e) =&gt;\r\n                                                     {\r\n                                                         <span style=\"color:blue\">if</span> (e.Action == NotifyCollectionChangedAction.Add)\r\n                                                         {\r\n                                                             addedToCollection = <span style=\"color:blue\">true</span>;\r\n                                                         }\r\n                                                         <span style=\"color:blue\">else</span> <span style=\"color:blue\">if</span> (e.Action == NotifyCollectionChangedAction.Remove)\r\n                                                         {\r\n                                                             removedFromCollection = <span style=\"color:blue\">true</span>;\r\n                                                         }\r\n                                                     };\r\n\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>()) {IsActive = <span style=\"color:blue\">true</span>});\r\n            Assert.IsTrue(addedToCollection);\r\n            Assert.IsFalse(removedFromCollection);\r\n            addedToCollection = <span style=\"color:blue\">false</span>;\r\n\r\n            originalCollection[0].IsActive = <span style=\"color:blue\">false</span>;\r\n\r\n            Assert.AreEqual(0, viewsCollection.Count());\r\n            Assert.IsTrue(removedFromCollection);\r\n            Assert.IsFalse(addedToCollection);\r\n            Assert.AreEqual(0, viewsCollection.Count());\r\n            addedToCollection = <span style=\"color:blue\">false</span>;\r\n            removedFromCollection = <span style=\"color:blue\">false</span>;\r\n\r\n            originalCollection[0].IsActive = <span style=\"color:blue\">true</span>;\r\n\r\n            Assert.AreEqual(1, viewsCollection.Count());\r\n            Assert.IsTrue(addedToCollection);\r\n            Assert.IsFalse(removedFromCollection);\r\n        }\r\n\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> AddingToOriginalCollectionFiresAddCollectionChangeEvent()\r\n        {\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;();\r\n            IViewsCollection viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, (i) =&gt; <span style=\"color:blue\">true</span>);\r\n\r\n            <span style=\"color:blue\">var</span> eventTracker = <span style=\"color:blue\">new</span> CollectionChangedTracker(viewsCollection);\r\n\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>()));\r\n\r\n            Assert.IsTrue(eventTracker.ActionsFired.Contains(NotifyCollectionChangedAction.Add));\r\n        }\r\n\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> AddingToOriginalCollectionFiresResetNotificationIfSortComparisonSet()\r\n        {\r\n            <span style=\"color:green\">// Reset is fired to support the need to resort after updating the collection</span>\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;();\r\n            <span style=\"color:blue\">var</span> viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, (i) =&gt; <span style=\"color:blue\">true</span>);\r\n            viewsCollection.SortComparison = (a, b) =&gt; { <span style=\"color:blue\">return</span> 0; };\r\n\r\n            <span style=\"color:blue\">var</span> eventTracker = <span style=\"color:blue\">new</span> CollectionChangedTracker(viewsCollection);\r\n\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:blue\">new</span> <span style=\"color:blue\">object</span>()));\r\n\r\n            Assert.IsTrue(eventTracker.ActionsFired.Contains(NotifyCollectionChangedAction.Add));\r\n            Assert.AreEqual(\r\n                1,\r\n                eventTracker.ActionsFired.Count(a =&gt; a == NotifyCollectionChangedAction.Reset));\r\n        }\r\n\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> OnAddNotifyCollectionChangedThenIndexProvided()\r\n        {\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;();\r\n            IViewsCollection viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, (i) =&gt; <span style=\"color:blue\">true</span>);\r\n\r\n            <span style=\"color:blue\">var</span> eventTracker = <span style=\"color:blue\">new</span> CollectionChangedTracker(viewsCollection);\r\n\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:#a31515\">&quot;a&quot;</span>));\r\n\r\n            <span style=\"color:blue\">var</span> addEvent = eventTracker.NotifyEvents.Single(e =&gt; e.Action == NotifyCollectionChangedAction.Add);\r\n            Assert.AreEqual(0, addEvent.NewStartingIndex);\r\n        }\r\n\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> OnRemoveNotifyCollectionChangedThenIndexProvided()\r\n        {\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;();\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:#a31515\">&quot;a&quot;</span>));\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:#a31515\">&quot;b&quot;</span>));\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:#a31515\">&quot;c&quot;</span>));\r\n            IViewsCollection viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, (i) =&gt; <span style=\"color:blue\">true</span>);\r\n\r\n            <span style=\"color:blue\">var</span> eventTracker = <span style=\"color:blue\">new</span> CollectionChangedTracker(viewsCollection);\r\n            originalCollection.RemoveAt(1);\r\n\r\n            <span style=\"color:blue\">var</span> removeEvent = eventTracker.NotifyEvents.Single(e =&gt; e.Action == NotifyCollectionChangedAction.Remove);\r\n            Assert.IsNotNull(removeEvent);\r\n            Assert.AreEqual(1, removeEvent.OldStartingIndex);\r\n        }\r\n\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> OnRemoveOfFilterMatchingItemThenViewCollectionRelativeIndexProvided()\r\n        {\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;();\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:#a31515\">&quot;a&quot;</span>));\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:#a31515\">&quot;b&quot;</span>));\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:#a31515\">&quot;c&quot;</span>));\r\n            IViewsCollection viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, (i) =&gt; !<span style=\"color:#a31515\">&quot;b&quot;</span>.Equals(i.Item));\r\n\r\n            <span style=\"color:blue\">var</span> eventTracker = <span style=\"color:blue\">new</span> CollectionChangedTracker(viewsCollection);\r\n            originalCollection.RemoveAt(2);\r\n\r\n            <span style=\"color:blue\">var</span> removeEvent = eventTracker.NotifyEvents.Single(e =&gt; e.Action == NotifyCollectionChangedAction.Remove);\r\n            Assert.IsNotNull(removeEvent);\r\n            Assert.AreEqual(1, removeEvent.OldStartingIndex);\r\n        }\r\n\r\n\r\n        [TestMethod]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> RemovingFromFilteredCollectionDoesNotThrow()\r\n        {\r\n            <span style=\"color:blue\">var</span> originalCollection = <span style=\"color:blue\">new</span> ObservableCollection&lt;ItemMetadata&gt;();\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:#a31515\">&quot;a&quot;</span>));\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:#a31515\">&quot;b&quot;</span>));\r\n            originalCollection.Add(<span style=\"color:blue\">new</span> ItemMetadata(<span style=\"color:#a31515\">&quot;c&quot;</span>));\r\n            IViewsCollection viewsCollection = <span style=\"color:blue\">new</span> ViewsCollection(originalCollection, (i) =&gt; <span style=\"color:blue\">true</span>);\r\n\r\n            CollectionViewSource cvs = <span style=\"color:blue\">new</span> CollectionViewSource {Source = viewsCollection};\r\n\r\n            <span style=\"color:blue\">var</span> view = cvs.View;\r\n            <span style=\"color:blue\">try</span>\r\n            {\r\n                originalCollection.RemoveAt(1);\r\n            }\r\n            <span style=\"color:blue\">catch</span> (Exception ex)\r\n            {\r\n                Assert.Fail(ex.Message);\r\n            }\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-25T16:41:08.14-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512657",
    "ThreadId": "231365",
    "Html": "\r\n<p>So far its working for me.&nbsp; Thank you!!!</p>\r\n",
    "PostedDate": "2010-10-26T05:18:04.07-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512761",
    "ThreadId": "231365",
    "Html": "\r\n<p>Works for me as well. Thanks.</p>\r\n",
    "PostedDate": "2010-10-26T08:06:00.157-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "513511",
    "ThreadId": "231365",
    "Html": "\r\n<p>That is good to hear.</p>\r\n<p>Let us know if you run into any other issues.</p>\r\n",
    "PostedDate": "2010-10-27T10:26:45.667-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "516575",
    "ThreadId": "231365",
    "Html": "\r\n<p>Works here as well! Thank you!</p>\r\n<p>P.S. test fixture failes to compile (NotifyEvents not found)</p>\r\n",
    "PostedDate": "2010-11-03T10:45:09.017-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "517424",
    "ThreadId": "231365",
    "Html": "\r\n<p>It&acute;s working, Thanks!!!</p>\r\n",
    "PostedDate": "2010-11-04T17:40:45.107-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "518971",
    "ThreadId": "231365",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>michaelpuleio wrote:</strong><br>\r\n<p>That is good to hear.</p>\r\n<p>Let us know if you run into any other issues.</p>\r\n</blockquote>\r\n<p>Issue: Region.Remove( view ) crashes when ViewSortHintAttribute applied to a view.</p>\r\n<p>We have workaround for it, so it is not urgent.</p>\r\n<p>Let me know if you need a repro.</p>\r\n",
    "PostedDate": "2010-11-08T12:57:25.96-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "519023",
    "ThreadId": "231365",
    "Html": "\r\n<p>DenisZ,</p>\r\n<p>Do you have a simple repro for this?</p>\r\n<p>Thanks,</p>\r\n<p>-b</p>\r\n",
    "PostedDate": "2010-11-08T14:45:09.57-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "519204",
    "ThreadId": "231365",
    "Html": "\r\n<blockquote style=\"border:solid .1em #ccc; font-style:italic; margin:.25em 1em 0 1em; padding:0 .25em 0 .25em\">\r\n<strong>brumfb wrote:</strong><br>\r\n<p>DenisZ,</p>\r\n<p>Do you have a simple repro for this?</p>\r\n<p>Thanks,</p>\r\n<p>-b</p>\r\n</blockquote>\r\n<p>&nbsp;I'll try to prepare the repro today evening.</p>\r\n<p>Denis.</p>\r\n",
    "PostedDate": "2010-11-09T00:34:37.25-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "519290",
    "ThreadId": "231365",
    "Html": "Thanks. With the code in our repo that includes the fix posted above, I can't repro this error in a simple test app I put together.\r\n",
    "PostedDate": "2010-11-09T04:22:46.973-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "519613",
    "ThreadId": "231365",
    "Html": "\r\n<p>Ok! I have a small repro (15K ZIP). How can I attach it here?</p>\r\n",
    "PostedDate": "2010-11-09T14:30:39.163-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "519624",
    "ThreadId": "231365",
    "Html": "\r\n<p>DenisZ,</p>\r\n<p>Great.&nbsp; Can you either open an issue to which you can attache the repro or if you have a skydrive account, put it on a public folder where I can grab it.</p>\r\n<p>-b</p>\r\n",
    "PostedDate": "2010-11-09T14:42:28.1-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "519639",
    "ThreadId": "231365",
    "Html": "Here it is http://cid-763513c3edb31492.skydrive.live.com/redir.aspx?resid=763513C3EDB31492!120",
    "PostedDate": "2010-11-09T15:03:53.9-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "519670",
    "ThreadId": "231365",
    "Html": "\r\n<p>Got it, thanks!&nbsp;</p>\r\n<p>So I used your project to repro it on Drop 10 and Drop 10 with the above modifications.&nbsp; Then I updated the references to the prism bits we are planning to release today/tomorrow and it appears to work correctly then.&nbsp; So I believe we have this\r\n taken care of.&nbsp; Thanks for your effort in putting the repro together.</p>\r\n<p>-b</p>\r\n",
    "PostedDate": "2010-11-09T16:00:25.743-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]