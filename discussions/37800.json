[
  {
    "Id": "125337",
    "ThreadId": "37800",
    "Html": "In my Shell.xaml:<br>\r\n.....<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;StackPanel DockPanel.Dock=&quot;Top&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Grid Name=&quot;titleHook&quot; Background=&quot;Gainsboro&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Grid Name=&quot;ribbonGrid&quot; Background=&quot;WhiteSmoke&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/StackPanel&gt;<br>\r\n......<br>\r\n<br>\r\nIn Shell class:<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private RibbonController ribbonController = null;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Shell()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.ribbonController = new RibbonController(this.ribbonGrid, this.titleHook, this);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\nAnd then all modules works with ribbonController:<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Dependency]<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public IShell Shell { get; set; }<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Initialize()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Window shell = (Window)Shell;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IRegion mainRegion = this.regionManager.Regions[&quot;MainRegion&quot;];<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Views.OperationListView.OperationListView view = new Views.OperationListView.OperationListView();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view.ParentWindow = shell; //then module works with this property: ((IShell)this.view.ParentWindow).RibbonController ....<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mainRegion.Add(view);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mainRegion.Activate(view);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n<br>\r\nBut how to do somethink like this:<br>\r\n<p><span style=\"font-size:14pt;font-family:Consolas\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span>\r\nInitialize()</span></p>\r\n<p><span style=\"font-size:14pt;font-family:Consolas\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n</span></p>\r\n<span style=\"font-size:14pt;font-family:Consolas\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:rgb(43, 145, 175)\">IRegion</span> mainRegion = <span style=\"color:blue\">this</span>.regionManager.Regions[<span style=\"color:rgb(163, 21, 21)\">&quot;MainRegion&quot;</span>];</span>\r\n<p><span style=\"font-size:14pt;font-family:Consolas\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\nViews.OperationListView.<span style=\"color:rgb(43, 145, 175)\">OperationListView</span>\r\nview = <span style=\"color:blue\">new</span> Views.OperationListView.<span style=\"color:rgb(43, 145, 175)\">OperationListView</span>();</span></p>\r\n<p><span style=\"font-size:14pt;font-family:Consolas\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\nmainRegion.Add(view)</span></p>\r\n<p><span style=\"font-size:14pt;font-family:Consolas\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style=\"font-size:14pt;font-family:Consolas\">mainRegion.Activate(view);</span></p>\r\n<p><span style=\"font-size:14pt;font-family:Consolas\"><br>\r\n</span></p>\r\n<p><span style=\"font-size:14pt;font-family:Consolas\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:rgb(43, 145, 175)\">IRegion</span> mainRegion = <span style=\"color:blue\">this</span>.regionManager.Regions[<span style=\"color:rgb(163, 21, 21)\">&quot;MenuRegion&quot;</span>];</span></p>\r\n<p><span style=\"font-size:14pt;font-family:Consolas\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\nViews.OperationListView.<span style=\"color:rgb(43, 145, 175)\">OperationMenu</span> menu =\r\n<span style=\"color:blue\">new</span> Views.OperationListView.<span style=\"color:rgb(43, 145, 175)\"> OperationMenu</span>();</span></p>\r\n<p><span style=\"font-size:14pt;font-family:Consolas\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\nmainRegion.Add(menu);</span></p>\r\n<p><span style=\"font-size:14pt;font-family:Consolas\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style=\"font-size:14pt;font-family:Consolas\">mainRegion.Activate(menu);</span></p>\r\n<p><span style=\"font-size:14pt;font-family:Consolas\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n}</span></p>\r\n<p></p>\r\n<p>Thanks<span style=\"font-size:14pt;font-family:Consolas\"><br>\r\n</span></p>\r\n<br>\r\n",
    "PostedDate": "2008-10-15T08:44:02.4-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "126588",
    "ThreadId": "37800",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Hi,</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">If you are using the UnityContainer, what you could do is register the instance of the RibbonController in the container using an interface (i.e.: IRibbonController) and, then, create the views by resolving them in the container, in order to get the RibbonController injected (via constructor or using the Dependency attribute on a property). For example:</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">1- Registering the instance:</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:#4bacc6;font-family:'Courier New'\">IRibbonController</span><span style=\"font-size:10pt;font-family:'Courier New'\"> ribbonController = <span style=\"color:blue\">new</span> <span style=\"color:#4bacc6\">RibbonController</span>(<span style=\"color:blue\">this</span>.ribbonGrid, <span style=\"color:blue\">this</span>.titleHook, <span style=\"color:blue\">this</span>);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">myUnityContainer.RegisterInstance&lt;<span style=\"color:#4bacc6\">IRibbonController</span>&gt;(ribbonController);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">2-a) Setting the view to get the RibbonController via constructor injection:</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\">public</span><span style=\"font-size:10pt;font-family:'Courier New'\"> <span style=\"color:#4bacc6\">IRibbonController</span> MyRibbonController { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\">public</span><span style=\"font-size:10pt;font-family:'Courier New'\"> OperationListView(<span style=\"color:#4bacc6\">IRibbonController</span> ribbonController)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">{</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">&nbsp;&nbsp;&nbsp; MyRibbonController = ribbonController;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">}</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">2-b) Or, setting the view to get the RibbonController via setter injection:</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">[<span style=\"color:#4bacc6\">Dependency</span>]</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-size:10pt;color:blue;font-family:'Courier New'\">public</span><span style=\"font-size:10pt;font-family:'Courier New'\"> <span style=\"color:#4bacc6\">IRibbonController</span> MyRibbonController { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">3- Using the container to create the view and resolve its dependencies:</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-size:10pt;color:#4bacc6;font-family:'Courier New'\">IRegion</span><span style=\"font-size:10pt;font-family:'Courier New'\"> mainRegion = <span style=\"color:blue\">this</span>.regionManager.Regions[<span style=\"color:#c00000\">&quot;MainRegion&quot;</span>]; </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">Views.OperationListView.<span style=\"color:#4bacc6\">OperationListView</span> view = myUnityContainer.Resolve&lt;Views.OperationListView.<span style=\"color:#4bacc6\">OperationListView</span>&gt;();</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">mainRegion.Add(view)</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-size:10pt;font-family:'Courier New'\">mainRegion.Activate(view);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">To get a reference to the Main Window (as shown in the thread </span><a href=\"http://www.codeplex.com/CompositeWPF/Thread/View.aspx?ThreadId=36484\"><span style=\"font-family:Calibri\">How to set .Owner to Shell for a new Window</span></a><span style=\"font-family:Calibri\">): </span></span><span style=\"font-size:10pt;color:#4bacc6;font-family:'Courier New'\">Application</span><span style=\"font-size:10pt;font-family:'Courier New'\">.Current.MainWindow</span> </p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">If this is not your scenario, please send more information.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Please, let me know if this helps.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span><span style=\"font-family:Calibri\">Ignacio Baumann Fonay</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><a href=\"http://blogs.southworks.net/ibaumann/\"><span><span style=\"color:#0000ff;font-family:Calibri\">http://blogs.southworks.net/ibaumann/</span></span></a> </p>\r\n",
    "PostedDate": "2008-10-21T09:54:19.703-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]