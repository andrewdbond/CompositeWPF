[
  {
    "Id": "894510",
    "ThreadId": "389946",
    "Html": "\r\n<p>First of all, I have read&nbsp;<a href=\"http://stackoverflow.com/questions/3612027/mvvm-with-aggregated-model-classes-how-to-wrap-in-viewmodels\">this post</a>&nbsp;and did not find the answer for my problem.</p>\r\n<p>I am not sure if this is an aggregated&nbsp;<strong>Model</strong>&nbsp;class or an aggregated&nbsp;<strong>ViewModel</strong>&nbsp;class, but this is what I have:</p>\r\n<p>In my WPF (with Prism) application, I have a view '<em>Filter Customers View</em>' that connects to a service and requests a list of 'Customer' objects, based on a filter.</p>\r\n<p>The list that is returned from the service is this :</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>List&lt;CustomerDTO&gt;    FilteredCustomers;</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>And the&nbsp;<strong><em>CustomerDTO</em>&nbsp;</strong>looks like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> CustomerDTO\n{\n\t<span style=\"color:blue\">public</span>\tGuid\t\t\tCustomerId;\n\t<span style=\"color:blue\">public</span>\tString\t\t\tName;\n\t<span style=\"color:blue\">public</span>\tString\t\t\tAddress;\n\t<span style=\"color:blue\">public</span>\tString\t\t\tPhoneNumber;\n\t<span style=\"color:blue\">public</span>\tOrderInfoDTO\t\tLastOrderInformation;\n\t<span style=\"color:blue\">public</span>\tList&lt;OtherClass&gt;\tListOfSomething;\n}\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>And the <strong><em>OrderInfoClass </em></strong>looks like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> OrderInfoDTO\n{\n\t<span style=\"color:blue\">public</span>\tGuid\t\tOrderId;\n\t<span style=\"color:blue\">public</span>\tDateTime\tOrderDate;\n\t<span style=\"color:blue\">public</span>\t<span style=\"color:blue\">int</span>\t\tNumberOfProducts;\n\t<span style=\"color:blue\">public</span>\t<span style=\"color:blue\">double</span>\t\tTotalAmountSpent;\n}\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>And the <strong><em>OtherClass </em></strong>looks like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> OtherClass\n{\n\t<span style=\"color:blue\">public</span>\tGuid\t\tId;\n\t<span style=\"color:blue\">public</span>\tString\t\tSomeText;\n}\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>As you can see - the customer might or might not have a 'Last Order',</p>\r\n<p>I would like to wrap the '<strong><em>CustomerDTO</em></strong>' object in a ViewModel, so that I can bind it to the view.</p>\r\n<p>This is what I thought of doing :</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> CustomerViewModel : NotificationObject\n{\n\t<span style=\"color:blue\">private</span>\tCustomerDTO\t_customerDTO;\n\n\t<span style=\"color:blue\">public</span> CustomerViewModel(CustomerDTO customerDTO)\n\t{\n\t\t_customerDTO = customerDTO;\n\t}\n\n\t<span style=\"color:blue\">public</span> Guid CustomerId\n\t{\n\t\t<span style=\"color:blue\">get</span>  {  <span style=\"color:blue\">return</span> _customerDTO.CustomerId;  }\n\t\t<span style=\"color:blue\">set</span>  {  _customerDTO.CustomerId = value; RaisePropertyChanged(<span style=\"color:#a31515\">&quot;CustomerId &quot;</span>); }\n\t}\n\n\t<span style=\"color:blue\">public</span> String Name\n\t{\n\t\t<span style=\"color:blue\">get</span>  {  <span style=\"color:blue\">return</span> _customerDTO.Name;  }\n\t\t<span style=\"color:blue\">set</span>  {  _customerDTO.Name = value; RaisePropertyChanged(<span style=\"color:#a31515\">&quot;Name&quot;</span>); }\n\t}\n\n\t<span style=\"color:blue\">public</span> String Address\n\t{\n\t\t<span style=\"color:blue\">get</span>  {  <span style=\"color:blue\">return</span> _customerDTO.Address;  }\n\t\t<span style=\"color:blue\">set</span>  {  _customerDTO.Address = value; RaisePropertyChanged(<span style=\"color:#a31515\">&quot;Address&quot;</span>); }\n\t}\n\n\t<span style=\"color:blue\">public</span> String PhoneNumber\n\t{\n\t\t<span style=\"color:blue\">get</span>  {  <span style=\"color:blue\">return</span> _customerDTO.PhoneNumber;  }\n\t\t<span style=\"color:blue\">set</span>  {  _customerDTO.PhoneNumber= value; RaisePropertyChanged(<span style=\"color:#a31515\">&quot;PhoneNumber&quot;</span>); }\n\t}\n}\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p><strong>Questions:</strong></p>\r\n<ol>\r\n<li>First of all - is 'CustomerDTO' what is known as a&nbsp;<strong>Model</strong>&nbsp;? And is 'OrderInfoDTO' also a Model ? and what about 'OtherClass' ?\r\n</li><li>How do I treat the 'OrderInfoDTO' in my&nbsp;<em>CustomerViewModel</em>&nbsp;class ? Do I create a 'ViewModel' for it also ? where do I create the 'OrderInfoDTO' view-model ??? What happens if now someone updates the customer and sets the 'OrderInfoDTO'\r\n value ? </li><li>How do I treat the list of 'OtherClass' in my&nbsp;<em>CustomerViewModel</em>&nbsp;class ? Do I create an ObservableCollection for it ? What happens if someone will want to delete an item in it or update an item in it or add an item to it ?\r\n</li></ol>\r\n",
    "PostedDate": "2012-08-02T01:27:36.937-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "894863",
    "ThreadId": "389946",
    "Html": "<p>Hi,</p>\r\n<p>I believe that most of those questions do not have a \"correct\" or \"wrong\" answer, as they seem to be more related to designing decisions in your application. Hence, which approach you should follow will depend mostly on your personal preferences and the requirements of your scenario.</p>\r\n<p>However, I will try to answer them providing my personal opinion:</p>\r\n<ul>\r\n<li>\r\n<p>Based on my understanding, a model could be as simple as a representation of data used in your application or as complex as a part of the data access layer in charge of the accessing the corresponding data. Therefore, I believe that all of the three classes can be considered <strong>Models </strong>(or at least, primitive types of models.) Also, in my opinion, you should wrap the attributes of your models inside properties, as attributes should not be accessed directly from outside of an object.</p>\r\n</li>\r\n<li>\r\n<p>As far as I know, there is no limitation about using only one model per view model. Therefore, I believe your <strong>CustomerViewModel </strong>could also expose the <strong>OrderInfoDTO </strong>model or encapsulate it by exposing its data through other properties. Also, creating a separate <strong>OrderInfoViewModel </strong>for it is a valid approach. What is more, you could even divide the <strong>CustomerView </strong>in different and more modular views, creating a <strong>OrderInfoView </strong>for the <strong>OrderInfoViewModel</strong>. The same goes for the <strong>OtherClass </strong>model: for each <strong>OtherClass </strong>model in the collection, you could have an associated view and view model. As you can see, this is a designing decision. You can implement either a single view / view model or three separated ones.</p>\r\n</li>\r\n<li>\r\n<p>In my opinion, if you only want to show the <strong>OtherClass </strong>collection of the <strong>CustomerDTO</strong>, the simpler approach is to simply expose them through a collection in the <strong>CustomerViewModel </strong>and consume the collection in the view. As you are not performing any presentation of business logic on the data contained in the <strong>OtherClass</strong> models, just showing it, it might no be required to have another view model for it, besides the <strong>CustomerViewModel</strong>. However, if you wish to edit <strong>OtherClass </strong>models, then it would be required to have a view model to handle these operations. The same goes for the <strong>OrderInfoDTO </strong>models.</p>\r\n</li>\r\n<li>\r\n<p>In case you decide to use separated views / view models for each model, the challenge you will need to address is how the view models interact and shared data. This again, depends of your personal preferences and the requirements of your scenario. You could have the <strong>CustomerViewModel </strong>in charge of creating the other view models or you could communicate them in a more loosely coupled fashion using one of the <a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28v=pandp.40%29\">communication approaches provided in Prism</a>.</p>\r\n</li>\r\n</ul>\r\n<p>Again, in my opinion, this is more related to designing decisions rather that \"correct\" or \"incorrect\" approaches.</p>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-08-02T13:26:38.667-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]