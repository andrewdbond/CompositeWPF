[
  {
    "Id": "554053",
    "ThreadId": "242962",
    "Html": "\r\n<pre><pre><span>public</span>&nbsp;<span>static</span>&nbsp;<span>class</span>&nbsp;<span>ContactsCommands</span><br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span>&nbsp;<span>static</span>&nbsp;<span>CompositeCommand</span>&nbsp;SaveAllContactsCommand&nbsp;=&nbsp;<span>new</span>&nbsp;<span>CompositeCommand</span>();<br>&nbsp;&nbsp;&nbsp;&nbsp;}</pre>\r\n</pre>\r\n<pre><br></pre>\r\n<pre>&nbsp;[<span>PartCreationPolicy</span>(<span>CreationPolicy</span>.NonShared)]<br>&nbsp;&nbsp;&nbsp;&nbsp;[<span>Export</span>]<br>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span>&nbsp;<span>class</span>&nbsp;<span>ContactsCommandProxy</span><br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span>&nbsp;<span>virtual</span>&nbsp;<span>CompositeCommand</span>&nbsp;SaveAllContactsCommand<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>get</span>&nbsp;{&nbsp;<span>return</span>&nbsp;<span>ContactsCommands</span>.SaveAllContactsCommand;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}</pre>\r\n<pre><br></pre>\r\n<pre>Hi, </pre>\r\n<pre>I would like to implement the SaveAll CompositeCommand, so that my childSaveCommands on each tab would subscribe to it.&nbsp;</pre>\r\n<pre><br></pre>\r\n<pre>1) Just to make sure I understand it right, the reason we are wrapping the static class into a proxy, is to make sure there is no memory leak if the commands are not unregistered from the composite command? Since the proxy could be garbage collected once the ViewModel doesnt live anymore.&nbsp;</pre>\r\n<pre>But if the viewmodel registers to the static class directly and wouldnt unregister, GC can't collect the viewmodel in first place. Or if I am wrong what is the reason to use the proxy class?</pre>\r\n<pre><br></pre>\r\n<pre>2) The RI.Stocktrader is very confusing. I don't understand how the OrdersController class fits in there. It seems only TestableOrdersController (unit test) is using that class. Yet the controller class has the responsibility to register and unregister the child save commands to the composite command inside proxy. So it must be used somehow in the real app.</pre>\r\n<pre>I just don't see how the controller class should be used. If I have a OrderModule, with one View and one ViewModel and I have set the view to export itself into a TabContol region on the shell, so that each instance would be landing on a new tabItem, how does the controller class fit in there?</pre>\r\n<pre><br></pre>\r\n<p>Many Thanks,<br>\r\nHouman&nbsp;</p>\r\n",
    "PostedDate": "2011-01-23T13:27:55.39-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "554082",
    "ThreadId": "242962",
    "Html": "\r\n<p>1. On page 130 of the guidance it says &quot;Note:&nbsp; To increase the testability of your code, you can use a proxy class to access the\r\n<br>\r\nglobally available commands and mock that proxy class in your tests.&quot; when I look at the StockTraderRI that looks like exactly\r\n<br>\r\nwhat they are using it for.&nbsp;</p>\r\n<p><a href=\"http://www.softinsight.com/bnoyes/2009/10/05/AvoidingMemoryLeaksWithCompositeCommands.aspx\" target=\"_blank\">From the looks of it, you need to deregister global commands when you release the ViewModel.</a></p>\r\n<p>Edit: If you look at StartOrder in the OrdersController you can see them doing the UnregisterCommand in the\r\n<br>\r\nCloseViewRequested delegate.</p>\r\n<p>2. Take a look at PositionSummaryViewModel.&nbsp; I find it helps to search for the Export of the class rather than the class name.&nbsp;\r\n<br>\r\nOrdersController is exported as IOrdersController.</p>\r\n<p>Edit: One thing note is that OrdersController is exported as Shared, so it will be Singleton.</p>\r\n<p>And yes, it can be confusing, I'm still muddling my way through it.</p>\r\n<p>I'm still fighting with the where does the controller fit issue myself, so I'll let some one else answer that one.</p>\r\n",
    "PostedDate": "2011-01-23T15:44:25.427-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "556251",
    "ThreadId": "242962",
    "Html": "\r\n<p>Hi John,</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks for your help and advice.&nbsp;I have solved the issue in this way:</p>\r\n<p><strong>Case:</strong></p>\r\n<p>The Shell's MainRegion shall be a TabContainer.&nbsp;Each TabItem gets a closeButton templated, the button is bound to a command on the view Model.\r\n<br>\r\nThe ViewModel in this case would be the ViewModel of the View hosted in the region. Within the&nbsp;handler of the command delegate&nbsp;I would do the unregistering for the CompositeCommand, however how do I remove the View in first place?</p>\r\n<p>Therefore I had to refactor it. The CloseButton doesn't bind to the command anymore but uses a code-behind-shell&nbsp;eventhandler. WIthin the eventhandler I would do the removal of the active tab as planned. Now the challenge is how to unregister the command\r\n in a clean way? <br>\r\nIn the underlying View that is hosted in that region, I go into the code-behind and subscribe to the Unloaded() event.&nbsp; And do call my ViewModel's Command to unregister for the composite command like this:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Public ContactView(ContactViewModel vm)\r\n{\r\nInitializeComponent();\r\n<span style=\"color:blue\">this</span>.Unloaded &#43;= (s, e) =&gt; vm.CloseContactCommand.Execute(<span style=\"color:blue\">null</span>);\r\n}\r\n</pre>\r\n</div>\r\n<p><strong>The moment the view is closed as previously described, the Unloaded event is fired and the command would unregister itself from the Composite Command.</strong><br>\r\n<br>\r\nWhat do you think of this idea?<br>\r\n<br>\r\nRegarding Controller, I made some more research, it seems the Controller is only used for Presenter-First pattern.&nbsp; You may find a good example of that on Prism Training Kit 4.0 project, excersice 4.<br>\r\nA fake ViewModel (without implementing NotificationObject nor any kind of INotifyPropertyChanged) is generated and the View is injected in it. The Controller class then holds the fake ViewModel.<br>\r\nPersonally I don't see any use for a controller class yet, when you can use real MVVM classes.&nbsp; It seems to be a remaining of old Prism 1.0/2.0 code.</p>\r\n<p>Still investigating...<br>\r\nRegards,<br>\r\nHouman</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-01-27T06:50:26.793-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]