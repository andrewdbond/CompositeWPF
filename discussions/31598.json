[
  {
    "Id": "104965",
    "ThreadId": "31598",
    "Html": "<p dir=ltr style=\"margin-right:0px\">I am loading a view which holds a usercontrol into a region using the&nbsp;StaticModuleEnumerator in the Bootstrapper class as described in the docs.<br>\r\n<br>\r\nBecause the usercontrol has no width or height set, and the horizontal and vertical alignment defaults to &quot;Stretch&quot;, I would expect the usercontrol to grow to fill the region when loaded.<br>\r\n<br>\r\nWhat I am seeing however is that the listbox's height seems to be set to fit all the items in the list (way off the screen), so that most of the listbox is clipped at the edge of the region,&nbsp;leaving the vertical scrollbar inactive.<br>\r\n<br>\r\nIf I explicitly set the height of the usercontrol to &quot;400&quot;, then it's height remains at 400 when loaded into the region, and the scrollviewer works as expected with the scrollbar working, but I want the usercontrol to automatically grow to fill the region.<br>\r\n<br>\r\nI suspect it's due to the usercontrol being dynamically loaded, and something's not being measured correctly, or at the right time.<br>\r\nI am fairly new to WPF so could use some help if anyone know's what's going on?<br>\r\n<br>\r\nThe usercontrol is defined as follows:<br>\r\n<br>\r\n&lt;UserControl x:Class=&quot;EventListView&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp; xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp; MinHeight=&quot;200&quot; MinWidth=&quot;240&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;ScrollViewer VerticalScrollBarVisibility=&quot;Visible&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ListBox Name=&quot;listBox&quot;&nbsp;ItemsSource=&quot;{Binding}&quot; DisplayMemberPath=&quot;EventName&quot; /&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/ScrollViewer&gt;<br>\r\n&lt;/UserControl&gt;</p>\r\n",
    "PostedDate": "2008-07-15T20:12:51.637-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "105030",
    "ThreadId": "31598",
    "Html": "Hi there Jason, one good thing about some ItemsControl classes like the ListBox is that they already have a ScrollViewer present in their template, to show the vertical scrollbar all you need to do is set the property as in the following:<br>\r\n<br>\r\n<code>\r\n&nbsp;&nbsp;&nbsp; &lt;ListBox <strong>ScrollViewer.VerticalScrollBarVisibility=&quot;Visible&quot;</strong><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name=&quot;listBox&quot; DisplayMemberPath=&quot;EventName&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/ListBox&gt;<br>\r\n</code>\r\n<br>\r\nYou should find that the ListBox has this set to &quot;Auto&quot; by default. Your control should occupy all the space provided to it where possible, what context are you using the user control in that's preventing it from occupying the whole space? If you place the above UserControl in a Window you should find it will occupy the whole window.<br>\r\n<br>\r\n&nbsp;<code>&nbsp;&nbsp;&nbsp; &lt;Window x:Class=&quot;BrettRyan.Sample.Window1&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:elv=&quot;clr-namespace:BrettRyan.EventListView;assembly=BrettRyan.EventListView&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Title=&quot;Window1&quot; Height=&quot;300&quot; Width=&quot;300&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;elv:EventListView/&gt;<br>\r\n&nbsp;&nbsp;&nbsp; &lt;/Window&gt;<br>\r\n</code>\r\n<br>\r\nHope this helps<br>\r\n-Brett<br>\r\n",
    "PostedDate": "2008-07-16T04:06:20.367-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "105699",
    "ThreadId": "31598",
    "Html": "<p>Jason,</p>\r\n<p>I am having same problem and wasted hours so far trying to get the desired behavior. Basically, I have a Module which contain a View (UserControl). The View has a ListBox within a Border. I want to set to Height and Width so that it expands to take up all the space in the MainRegion when the View is added to the MainRegion. The issue is that when I fill the ListBox with data, the Border and ListBox expand to way off the screen and there is no scroll bar or anything. I would think that the Border and ListBox would only expand to take up the available space in the MainRegion and then no more. Only thing I can do right now is set a value for Height, like 400. However, this makes it so that ListBox will only expand to 400 and then adds ScrollBar. It doesn't take up all the space in the MainRegion. If I set to Auto, then it expands off the screen. I have no idea how to get the host UserControl to honor the bounds of the container in the Shell. <br>\r\n<br>\r\nDid you ever get a resolution on this? Any ideas would be greatly appreciated.<br>\r\n-Rob</p>\r\n",
    "PostedDate": "2008-07-18T12:38:56.2-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "105745",
    "ThreadId": "31598",
    "Html": "No I'm sorry I've not had time to investigate this further, but likewise, I've wasted hours on this already. I'll try spend some time on it tomorrow, but I'm not sure what to try next.\r\n",
    "PostedDate": "2008-07-19T00:22:01.393-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "105798",
    "ThreadId": "31598",
    "Html": "<p>I have a solution but please bear in mind that it may not be the correct solution; currently I'm investing my time in learning WPF and Unity and once I have them under my belt will attack the CompositeWPF (I should then know what I'm looking at); although I did cheat and had to figure out / understand how the RegionManager worked before I could move on&nbsp;&nbsp;;)<br>\r\n<br>\r\nFor anyone who wants to visualize the problem:<br>\r\n&nbsp;<br>\r\n1. Load the <strong>Commanding</strong> solution and change&nbsp; the Commanding.Modules.Order project's PresentationModels\\OrdersEditorPresentationModel.cs&nbsp; <em>InitialOrdersCount</em> constant int from 3 to 25 - when you run the app you'll find the listbox has no scrollbars and it extends below the visible grid cell area (there will be 25 items in the list versus 3).<br>\r\n<br>\r\n2. First we'll fix the scrollbar issue - Views\\OrdersEditorView.xaml.&nbsp;&nbsp; Update the ListView element by adding x:Name=&quot;ListView1&quot; and change the Height attribute from &quot;Auto&quot; to &quot;200&quot;; the listview will have scrollbars and fit nicely in the Grid cell.<br>\r\n<br>\r\n3.&nbsp; The solution lies in Event notification - the view is nicely decoupled from the shell so it doesn't know when the shell size changes (perhaps the CompositeWPF framework has something to notify???);&nbsp; we'll let it know so that we can adjust the ListView1 height accordingly.&nbsp;&nbsp;Let's get two very useful&nbsp;Unity Projects (Event processing may be in CompositeWPF but again, I do&nbsp;not know it yet :)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; a.&nbsp; Load the EventBrokerExtension and SimpleEventBroker projects from the latest Unity download (UnityQuickStarts\\language\\EventBroker\\Src).<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; b.&nbsp; Set references to each in the Commanding and Commanding.Modules.Order projects<br>\r\n<br>\r\n4.&nbsp; In the Commanding project's CommandBootStrapper.CreateShell method add the following statement before the <em>Shell shell</em> statement:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;<strong><em> Container.AddNewExtension&lt;SimpleEventBrokerExtension&gt;();</em></strong>&nbsp; // and add&nbsp;using/imports as applicable<br>\r\n<br>\r\n5.&nbsp; Update your <strong>Commanding</strong> Shell XAML so that it will notify code behind when the size has changed:<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; &lt;Window x:Class=&quot;Commanding.Shell&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:x=&quot;<a href=\"http://schemas.microsoft.com/winfx/2006/xaml\">http://schemas.microsoft.com/winfx/2006/xaml</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xmlns:cal=&quot;<a href=\"http://www.codeplex.com/CompositeWPF\">http://www.codeplex.com/CompositeWPF</a>&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Title=&quot;Shell&quot; Height=&quot;385&quot; Width=&quot;500&quot; MinHeight=&quot;385&quot;<br>\r\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </em><strong><em>SizeChanged=&quot;Window_SizeChanged&quot;<br>\r\n</em></strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;<br>\r\n<br>\r\n6.&nbsp;&nbsp;Update the Shell's code behind as follows:<br>\r\n<br>\r\n<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Publishes(&quot;ShellSizeChanged&quot;)]<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public event EventHandler ShellSizeChanged;</strong></p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Shell()<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InitializeComponent();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void Window_SizeChanged(object sender, SizeChangedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (ShellSizeChanged != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShellSizeChanged(sender, e);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</strong></p>\r\n<p>7.&nbsp; Update the OrdersEditorView code behind as follows:<br>\r\n<br>\r\n<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SubscribesTo(&quot;ShellSizeChanged&quot;)]<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void OnSizeChanged(object sender, EventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SizeChangedEventArgs args = e as SizeChangedEventArgs;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ListView1.Height = args.NewSize.Height-160;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n</strong><br>\r\n<br>\r\nIf&nbsp;we (you or I)&nbsp;didn't miss anything, when you resize the form your ListView1 control will resize accordingly<br>\r\n<br>\r\n</p>\r\n",
    "PostedDate": "2008-07-19T14:36:57.367-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "105985",
    "ThreadId": "31598",
    "Html": "<p>Bill,</p>\r\n<p>Thanks for your detailed idea. I tried to implement your suggestions, but it is still not giving the desired result. Here are some points about what I did.</p>\r\n<p>1. The CompositeWPF DOES include event pub/sub mechanism already, so there was no need to add in the extensions and such from Unity project.<br>\r\n2. I added a new Event to my Infrastructure project to be used by the Shell and module with View that needs to be notified when Shell size changes.<br>\r\n3. In the Shell, I hooked up the event for SizeChanged and published the SizeChangedEventArgs with the new event.<br>\r\n4. In the Module with the View containing ListView, I subscribed to the size changed event from the Shell.<br>\r\n5. I do receive the events when Shell size changes, and I can modify the ListView Height.<br>\r\n6.&nbsp;However, the real problem is not with the Shell changing sizes, but the Listview changes sizes and ignoring the bounds of the container. For example, I launch the program and Shell is shown and View from Module is loaded into the MainRegion. When I fill the ListView with data, the ListView expands and ignores the bounds of the MainRegion. It just expands outside the form and no Scrollbar is provided on the ListView. During all of this, the Shell size is not changing at all and therefore no event is fired here. <br>\r\n7. I think you may be on to something with the event mechanism, but the Shell SizeChanged event doesn't seem to be the correct place to plug-in to fix this issue.<br>\r\n8. I definitely think that something must be going on in the CompositeWPF code that is causing this. I don't have these problems if I just create a normal WPF application and add a UserControl to a Panel or something without using CompositeWPF. </p>\r\n<p>I sure wish someone from the CompositeWPF team would comment on this or provide some guidance...</p>\r\n<p>Rob</p>\r\n",
    "PostedDate": "2008-07-21T06:52:40.027-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "105996",
    "ThreadId": "31598",
    "Html": "Hi Rob,<br>\r\n<br>\r\nDo you have the time to slap together a small prototype that will help us visualize the problem?&nbsp;&nbsp;&nbsp;We (the community and perhaps the CompositeWPF team)&nbsp;can use it to come up with a solution that will help others now, and in the future.&nbsp;&nbsp; I'm currently doing Bill Steeles 18 part <a href=\"http://www.global-webnet.net/BlogEngine/post/2008/07/20/WPF-the-next-big-adventure.aspx\">webcast on WPF</a>; perhaps one of them will hold the answer...&nbsp; <br>\r\n<br>\r\nEDITED:&nbsp; [Rob] <em>6.&nbsp;However, the real problem is not with the Shell changing sizes, but the Listview changes sizes and ignoring the bounds of the container. For example, I launch the program and Shell is shown and View from Module is loaded into the MainRegion. When I fill the ListView with data, the ListView expands and ignores the bounds of the MainRegion. It just expands outside the form and no Scrollbar is provided on the ListView. During all of this, the Shell size is not changing at all and therefore no event is fired here. </em><br>\r\n<br>\r\nIf I understand your scenario correctly you should configure a height for your listbox (so that it is within the bounds of your container) and as the number of items grow the scrollbar will appear.&nbsp;&nbsp; Then the event subscription can be used to resize your listbox (which now has a configured height) so that it will be anchored to the container.&nbsp;&nbsp;&nbsp;I think I have enough to address this issue - I'll see if I can't crank out a solution and blog it this evening...&nbsp;\r\n",
    "PostedDate": "2008-07-21T07:12:07.277-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "106096",
    "ThreadId": "31598",
    "Html": "<p>Bill,</p>\r\n<p>I found solution to the problem by looking around at some of the other issues on this website. There was a post at&nbsp;<a href=\"http://www.codeplex.com/CompositeWPF/Thread/View.aspx?ThreadId=28522\">http://www.codeplex.com/CompositeWPF/Thread/View.aspx?ThreadId=28522</a>&nbsp;that discussed an issue with getting the View to take up all the space available in the Shell. I figured this solution might help me out so I tried it. Everything is working like I&nbsp;want now. <br>\r\n<br>\r\nBefore, in the Shell, I had a StackPanel with the ItemsControl inside it. This was the MainRegion (This is how all the examples are for CompositeWPF).&nbsp;Whenever I loaded my View into this region, it wouldn't automatically take up the available space. Also, when the ListView in the View was filled with data, it would expand beyond view. Anyway, based on the above link:<br>\r\n<br>\r\n1. In the Shell, I changed the StackPanel to a DockPanel and had it take up all available space.<br>\r\n2. In the Shell, I changed the ItemsControl to be docked to Top of DockPanel and set the ItemsControl.ItemsPanel to have a template of DockPanel. This is what was discussed in the View.<br>\r\n3. In my View that gets loaded, I got rid of all the MinHeight, MaxHeight stuff so that it would expand fully when loaded into MainRegion.<br>\r\n4. After this, when the View was loaded, it correctly took up all the space in the containing DockPanel. Also, when ListView was filled with data, it honors the bounds of the container and doesn't stretch beyone view.<br>\r\n<br>\r\nHOORAY!!!! Not sure why this all works, but it does. <br>\r\n<br>\r\n- Rob</p>\r\n",
    "PostedDate": "2008-07-21T14:55:18.433-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "106115",
    "ThreadId": "31598",
    "Html": "Great news!!&nbsp; Thanks for providing the steps for us (as well as the link); when it's my turn I trust it will save me a lot of time :)\r\n",
    "PostedDate": "2008-07-21T16:30:55.097-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "106137",
    "ThreadId": "31598",
    "Html": "YES! thanks so much for that. It did the trick. It still doesn't explain though, why it doesn't work with the default&nbsp;ItemsControl.ItemsPanel.\r\n",
    "PostedDate": "2008-07-21T18:25:34.34-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "113070",
    "ThreadId": "31598",
    "Html": "Not so fast! This works for this particular case ... because we only ever populate the ItemsControl with one thing. In fact, I am wondering exactly why this region is an ItemsControl. Because the minute you add another view into this Main Region ... It puts the second view to the right of the first. Each subsequent view is stacked to the right ... and I can't figure out how to stop that. [Aside: I'm goint to ask why in a separate thread.]<br>\r\n<br>\r\nThis <strong>bit </strong>me when I was trying to use this same trick to have WPF manage the size of a ListView (think ListBox, ItemsControl, etc.) that is in one of my nested views. Of course it&nbsp;doesn't work; it expands without scrollbar and is cropped by the&nbsp;Window.&nbsp;I'm back to square one ... forced to put&nbsp;a fixed height on the ListView and figure out how to adjust that height dynamically.<br>\r\n<br>\r\nI've scoured the web and found no answers. HELP! <br>\r\n<br>\r\n<em>Update 8/24</em>: I elaborate on this topic in <a title=\"Beware ListView inside StackPanel\" href=\"http://www.codeplex.com/CompositeWPF/Thread/View.aspx?ThreadId=34179\">this Prism discussion thread</a>.\r\n",
    "PostedDate": "2008-08-22T16:23:06.573-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]