[
  {
    "Id": "283294",
    "ThreadId": "82445",
    "Html": "<p>I have a tab based application which is somewhat similar to windows explorer where there are alot of icons and such.</p>\r\n<p>Each time I open a tab i have a delay until all the viewmodel and views are initialized (mostly the icons).</p>\r\n<p>I think this problem can applied generally to most applications.</p>\r\n<p>Im wondering if anyone have thought about caching and resuing viewmodels and views? Is it a good idea?</p>\r\n<p>Ive tried something like this (wont compile i just wrote it as an example).</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"font-family:'Segoe UI', 'Microsoft Sans Serif', Arial, Geneva, sans-serif\"><span style=\"white-space:normal\"><span style=\"font-family:Consolas, 'Courier New', Courier, monospace;color:#0000ff\"><span style=\"white-space:pre\"><pre><span style=\"color:#0000ff\"><span style=\"color:#000000\"><pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:#0000ff\"><pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">class</span> SomeViewModel : IDisposable\r\n{\r\n      <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">readonly</span> IUnityContainer container;\r\n      <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">readonly</span> ICacheService cacheService;\r\n\r\n      <span style=\"color:Blue\">public</span> ViewModel(IMyView view, IUnityContainer container, ICacheService cacheService)\r\n      {\r\n\t   <span style=\"color:Blue\">this</span>.View = view;\r\n           <span style=\"color:Blue\">this</span>.View.DataContext = <span style=\"color:Blue\">this</span>;\r\n           <span style=\"color:Blue\">this</span>.container = container;\r\n           <span style=\"color:Blue\">this</span>.cacheService = cacheService;\r\n      }\r\n\r\n      <span style=\"color:Blue\">public</span> View { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n \r\n      <span style=\"color:Blue\">public</span> ObservableCollection Children { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n\r\n      <span style=\"color:Blue\">void</span> Initialize(Model model)\r\n      {\r\n \t   <span style=\"color:Blue\">this</span>.Children = <span style=\"color:Blue\">new</span> ObservableCollection();\r\n\r\n           <span style=\"color:Blue\">foreach</span>(<span style=\"color:Blue\">var</span> item <span style=\"color:Blue\">in</span> model.Items)            \r\n          {                   \r\n             ViewModel viewModel = cacheService.Get();      \r\n              <span style=\"color:Blue\">if</span>(viewModel == <span style=\"color:Blue\">null</span>)                         \r\n                      viewModel = container.Resolve();              \r\n               viewModel.Initialize(item);                   \r\n               <span style=\"color:Blue\">this</span>.Children.Add(item);                \r\n            }      \r\n        }        \r\n\r\n        <span style=\"color:Blue\">void</span> Dispose()       \r\n        {             \r\n               <span style=\"color:Blue\">foreach</span>(<span style=\"color:Blue\">var</span> child <span style=\"color:Blue\">in</span> <span style=\"color:Blue\">this</span>.Children)             \r\n               {                  \r\n                       child.Dispose();       \r\n                       cacheService.Push(child);           \r\n                }             \r\n                <span style=\"color:Blue\">this</span>.Children = <span style=\"color:Blue\">null</span>;       \r\n         } \r\n}\r\n</pre>\r\n</div>\r\n</pre>\r\n</span></pre>\r\n</div>\r\n</pre>\r\n</span></span></pre>\r\n</span></span></span></span></pre>\r\n</div>\r\n<p>This way i simply reinitialize the viewmodel when i want to use it again. But there are alot of things one can do to optimize this.</p>\r\n<p>For example the &quot;CacheService&quot; would see if there is a cached viewModel with the same already initialized &quot;model&quot; or maybe it would find the viewModel that has the closest initialized state to what one wants.</p>\r\n<p>Maybe i should only dispose and cache in certain cases? For example in my example i remove all the &quot;Children&quot; in &quot;SomeViewModel&quot; soo that the children can be used by other new instances of &quot;SomeViewModel&quot;.</p>\r\n<p>However maybe it would be a good idea to keep the children incase i want to open an almost identitical instance of the current one.</p>\r\n<p>Another idea is that the cacheservice becomes responsible for &quot;tearing apart/disposing&quot; viewModels soo that items in a cached viewModel are only used if required and the cached object maintain a &quot;state level&quot; (close to requested final state) as high as possible.&nbsp;</p>\r\n<p>There are alot of ways to do this... I would like to hear some opinions and ideas on the matter?</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-01-29T04:26:19.363-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "284703",
    "ThreadId": "82445",
    "Html": "<p id=c6ab5830-f225-012c-12d1-1231390c3961>Hi,</p>\r\n<p id=c6ab6ae0-f225-012c-12d2-1231390c3961>Without knowing the specifics of your application, having a cache service could be useful if the initialization of your Views/ViewModels is taking too long. You should take into account how much memory usage that will consume, but if you have &ldquo;long lived views&rdquo; in your application that don&rsquo;t suffer many changes there shouldn&rsquo;t be much overhead.</p>\r\n<p id=c6ab7e20-f225-012c-12d3-1231390c3961>A couple of other things you could do to avoid initializing the views again:</p>\r\n<ul>\r\n<li>Keep the view in the region, but deactivate it. That way the same view instance will persist, but the end user won&rsquo;t be able to see it. You can reactivate your view when necessary. </li>\r\n<li>Register the view/view model instance in the container. That way you can remove it from the view, but retrieve it when you require it. </li>\r\n</ul>\r\n<p id=c6ab9150-f225-012c-12d4-1231390c3961>You should follow the approach that best suits your needs (in this case faster view initialization), and if you find a good solution you can always post it for the community.</p>\r\n<p id=c6aba5c0-f225-012c-12d5-1231390c3961>If you consider this kind of guidance could be useful of the community, you can add an item to the <a href=\"../WorkItem/List.aspx\">Issue Tracker</a>. The team might take it into account for a future version.</p>\r\n<p id=c6abb980-f225-012c-12d6-1231390c3961>Please let me know if this helps.</p>\r\n<p id=c6abcda0-f225-012c-12d7-1231390c3961>Damian Schenkelman    <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2010-02-02T05:03:21.827-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]