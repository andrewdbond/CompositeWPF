[
  {
    "Id": "558456",
    "ThreadId": "244078",
    "Html": "\r\n<p>Hi,</p>\r\n<p>&nbsp;</p>\r\n<p>I have read this awesome article http://blogs.msdn.com/b/kashiffl/archive/2010/10/04/prism-v4-region-navigation-pipeline.aspx</p>\r\n<p>I am now using Silverlight &#43; Prism, first I have this:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\"></span><pre></pre>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ActionViewModel : IRegionMemberLifetime {\r\n\r\n<span style=\"color:blue\">     public</span> ActionVIewModel() {}\r\n  \r\n<span style=\"color:blue\">     public</span> <span style=\"color:blue\">bool</span> KeepAlive { <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">true</span>; } } <br>} \r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>and then a simple view</p>\r\n<p>&nbsp;</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> ActionsView:UserControl\r\n{\r\n       <span style=\"color:blue\">public</span> ActionsView()\r\n      {\r\n              InitializeComponent();\r\n      }\r\n\r\n      [Dependency]\r\n      <span style=\"color:blue\">public</span> ActionViewModel ViewModel {<span style=\"color:blue\">get</span>;<span style=\"color:blue\">set</span>;} \r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>In my Module Initialize, I have the following</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Container.RegisterType&lt;<span style=\"color:blue\">object</span>, ActionsView&gt;(ViewNames.DriverManagement.DriverActionView);\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>Then I use RegionManager.Regions[&quot;RegionName&quot;].RequestNavigate( ... ) to request that view</p>\r\n<p>The navigation works, but the ViewModel constructor is always hit when I navigate away from it and come back to this view. That means, every time I request this view, a new instance is created, even KeepAlive returns true.</p>\r\n<p>So, did I miss anything here?</p>\r\n<p>Thanks a lot!</p>\r\n",
    "PostedDate": "2011-01-31T20:28:23.23-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "558800",
    "ThreadId": "244078",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Take into account that when you are navigating from one view to the other, Unity is resolving your views.</p>\r\n<p>Since you register <em>ActionView</em> in the container without specifying any\r\n<strong>LifetimeManager</strong> (that is in charge of controlling how the container the scope of a registration), each time you navigate to a view, the container is resolving a new instance of that view. The property marked with the [Dependency] attribute,\r\n in this case the view model <em>ActionViewModel</em> is also being resolved as a new instance, when Unity performs\r\n<a href=\"http://msdn.microsoft.com/en-us/library/ff660903(PandP.20).aspx\">Property Injection</a>. This is the reason why the\r\n<em>ActionViewModel</em> constructor is called every time you request the view during navigation.</p>\r\n<p>In case your scenario needs to always use the same instance of the ViewModel, you need to register it like this to use a Singleton scope:&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>Container.RegisterType&lt;ActionViewModel&gt;(<span style=\"color:blue\">new</span> ContainerControlledLifetimeManager()); </pre>\r\n</div>\r\n<p>You can read more about Unity <a href=\"http://msdn.microsoft.com/en-us/library/ff660923(PandP.20).aspx\">\r\nhere</a>, more specific the &quot;<em>Using a LifeTime Manager with the RegisterType Method</em>&quot; section.</p>\r\n<p>I hope you find this information useful.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br>\r\n<a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-02-01T09:33:50.65-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "558836",
    "ThreadId": "244078",
    "Html": "\r\n<p>Hi, that's a great help</p>\r\n<p>I am now using the ContainerControllerLifetimeManager to register my view, they really get created again when I request&nbsp; the view second time.</p>\r\n<p>But there are one further question:</p>\r\n<p>1) If I return TRUE in KeepAlive, the view stays in the RegionManager.Regions[&quot;name&quot;].Views, I can't simply RequestNavigate it again, instead, I need to call GetView and Activate it</p>\r\n<p>2) If I return FALSE in KeepAlive, the view doesn't stay in the Views collection, so next time I request it, it will execute RequestNavigate, but the Container doesn't create a new instance of that view. Why?</p>\r\n<p>&nbsp;</p>\r\n<p>I found a similar issue here</p>\r\n<p>http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=239142</p>\r\n<p>but that guy was using MEF, but I am not</p>\r\n<p>The ContainerControlledLifetimeManager seems to ignore the KeepAlive value, as long as it is there, the instance just stays somewhere.</p>\r\n<p>&nbsp;</p>\r\n<p>many thanks!</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-02-01T10:41:22.903-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]