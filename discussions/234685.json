[
  {
    "Id": "521950",
    "ThreadId": "234685",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I'm using Prism 4 with MEF. I have my bootstrapper inheriting from MefBootstrapper as follows</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Bootstrapper : MefBootstrapper\r\n    {\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> DependencyObject CreateShell()\r\n        {\r\n            <span style=\"color:blue\">var</span> shell = <span style=\"color:blue\">new</span> MainPage();\r\n            Application.Current.RootVisual = shell;\r\n            shell.Container = Container;\r\n            shell.AggregateCatalog = AggregateCatalog;\r\n            <span style=\"color:blue\">return</span> shell;\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureAggregateCatalog()\r\n        {\r\n            <span style=\"color:blue\">base</span>.ConfigureAggregateCatalog();\r\n\r\n            AggregateCatalog.Catalogs.Add(<span style=\"color:blue\">new</span> AssemblyCatalog(Assembly.GetExecutingAssembly()));\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfigureContainer()\r\n        {\r\n            <span style=\"color:blue\">base</span>.ConfigureContainer();\r\n            <span style=\"color:blue\">base</span>.Container.ComposeParts(<span style=\"color:blue\">new</span> MyModuleInitializer());\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> IModuleCatalog CreateModuleCatalog()\r\n        {\r\n            <span style=\"color:blue\">var</span> localModule1 = <span style=\"color:blue\">new</span> ModuleInfo\r\n            {\r\n                Ref = <span style=\"color:#a31515\">&quot;LocalModule1.xap&quot;</span>,\r\n                ModuleName = <span style=\"color:#a31515\">&quot;LocalModule1&quot;</span>,\r\n                ModuleType = <span style=\"color:#a31515\">&quot;LocalModule1.Module, LocalModule1, Version=1&quot;</span>,\r\n                InitializationMode = InitializationMode.OnDemand\r\n            };\r\n            <span style=\"color:blue\">var</span> moduleCatalog = <span style=\"color:blue\">new</span> ModuleCatalog(<span style=\"color:blue\">new</span>[] { localModule1} );\r\n            <span style=\"color:blue\">return</span> moduleCatalog;\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>My project structure is a follows</p>\r\n<ul>\r\n<li>Web\r\n<ul>\r\n<li>Main Host application\r\n<ul>\r\n<li>Has a region&nbsp;Region2 defined in Main.xaml </li></ul>\r\n</li><li>Loca Module 1 application\r\n<ul>\r\n<li>It registers itself with Region2 in the Initialize of its module. </li></ul>\r\n</li></ul>\r\n</li></ul>\r\n<p>My Local Module 1 is as follows</p>\r\n<p>MainPage.xaml.cs</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Export]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> MainPage : UserControl\r\n    {\r\n        <span style=\"color:blue\">public</span> MainPage()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        [Import]\r\n        <span style=\"color:blue\">public</span> MainViewModel Model\r\n        {\r\n            <span style=\"color:blue\">set</span> { DataContext = value; }\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>MainViewModel</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Export]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MainViewModel : INotifyPropertyChanged\r\n    {\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> _text;\r\n\r\n        <span style=\"color:blue\">public</span> MainViewModel()\r\n        {\r\n            Text = <span style=\"color:#a31515\">&quot;Local Module 1&quot;</span>;\r\n        }\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Text\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> _text; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                _text = value;\r\n                OnPropertyChanged(<span style=\"color:#a31515\">&quot;Text&quot;</span>);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">void</span> OnPropertyChanged(<span style=\"color:blue\">string</span> propertyName)\r\n        {\r\n            <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.PropertyChanged != <span style=\"color:blue\">null</span>)\r\n            {\r\n                <span style=\"color:blue\">this</span>.PropertyChanged(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">new</span> PropertyChangedEventArgs(propertyName));\r\n            }\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>Module</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[ModuleExport(<span style=\"color:blue\">typeof</span>(Module))]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> Module : IModule\r\n    {\r\n        <span style=\"color:blue\">private</span> IRegionManager _regionManager;\r\n\r\n        [ImportingConstructor]\r\n        <span style=\"color:blue\">public</span> Module(IRegionManager regionManager)   \r\n        {   \r\n            _regionManager = regionManager;   \r\n        }  \r\n\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()\r\n        {\r\n            _regionManager.RegisterViewWithRegion(<span style=\"color:#a31515\">&quot;Region2&quot;</span>, <span style=\"color:blue\">typeof</span> (MainPage));\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>Now in the&nbsp;MainPage of&nbsp;my host application&nbsp;I have a button, clicking on which I download the LocalModule1 as follows</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> MainPage : UserControl\r\n    {\r\n        <span style=\"color:blue\">private</span> IModuleCatalog _moduleCatalog;\r\n        <span style=\"color:blue\">private</span> IModuleManager _moduleManager;\r\n\r\n        <span style=\"color:blue\">public</span> MainPage()\r\n        {\r\n            \r\n            InitializeComponent();\r\n        }\r\n\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> LoadRemotModule()\r\n        {\r\n            _moduleCatalog = Container.GetExportedValue&lt;IModuleCatalog&gt;();\r\n            _moduleManager = Container.GetExportedValue&lt;IModuleManager&gt;();\r\n\r\n            <span style=\"color:blue\">var</span> moduleInCatalog = _moduleCatalog.Modules.Single(m =&gt; m.ModuleName.ToLower() == <span style=\"color:#a31515\">&quot;localmodule1&quot;</span>);\r\n            <span style=\"color:blue\">if</span>(moduleInCatalog.State == ModuleState.NotStarted)\r\n                _moduleManager.LoadModule(moduleInCatalog.ModuleName);\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> deploymentCatalog_DownloadCompleted(<span style=\"color:blue\">object</span> sender, System.ComponentModel.AsyncCompletedEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">if</span> (e.Error != <span style=\"color:blue\">null</span>)\r\n                <span style=\"color:blue\">throw</span> e.Error;\r\n        }\r\n\r\n        <span style=\"color:blue\">public</span> CompositionContainer Container { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n        <span style=\"color:blue\">public</span> AggregateCatalog AggregateCatalog { <span style=\"color:blue\">get</span>; <span style=\"color:blue\">set</span>; }\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> Button_Click(<span style=\"color:blue\">object</span> sender, System.Windows.RoutedEventArgs e)\r\n        {\r\n            LoadRemotModule();\r\n        }\r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;When&nbsp;<strong>_moduleManager.LoadModule(moduleInCatalog.ModuleName)&nbsp;</strong>is called I get the below error.</p>\r\n<p>An exception occurred while initializing module 'LocalModule1'. <br>\r\n&nbsp;&nbsp;&nbsp; - The exception message was: The composition remains unchanged. The changes were rejected because of the following error(s): The composition produced multiple composition errors, with 15 root causes. The root causes are provided below. Review\r\n the CompositionException.Errors property for more detailed information.</p>\r\n<p>1) Change in exports prevented by non-recomposable import 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleInitializer..ctor (Parameter=&quot;downloadedPartCatalogs&quot;, ContractName=&quot;Microsoft.Practices.Prism.MefExtensions.Modularity.DownloadedPartCatalogCollection&quot;)'\r\n on part 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleInitializer'.</p>\r\n<p>2) Change in exports prevented by non-recomposable import 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager.MefXapModuleTypeLoader (ContractName=&quot;Microsoft.Practices.Prism.MefExtensions.Modularity.MefXapModuleTypeLoader&quot;)' on part 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager'.</p>\r\n<p>3) Change in exports prevented by non-recomposable import 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager..ctor (Parameter=&quot;moduleInitializer&quot;, ContractName=&quot;Microsoft.Practices.Prism.Modularity.IModuleInitializer&quot;)' on part 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager'.</p>\r\n<p>4) Change in exports prevented by non-recomposable import 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefXapModuleTypeLoader..ctor (Parameter=&quot;downloadedPartCatalogs&quot;, ContractName=&quot;Microsoft.Practices.Prism.MefExtensions.Modularity.DownloadedPartCatalogCollection&quot;)'\r\n on part 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefXapModuleTypeLoader'.</p>\r\n<p>5) Change in exports prevented by non-recomposable import 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleInitializer..ctor (Parameter=&quot;downloadedPartCatalogs&quot;, ContractName=&quot;Microsoft.Practices.Prism.MefExtensions.Modularity.DownloadedPartCatalogCollection&quot;)'\r\n on part 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleInitializer'.</p>\r\n<p>6) Change in exports prevented by non-recomposable import 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager.MefXapModuleTypeLoader (ContractName=&quot;Microsoft.Practices.Prism.MefExtensions.Modularity.MefXapModuleTypeLoader&quot;)' on part 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager'.</p>\r\n<p>7) Change in exports prevented by non-recomposable import 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager..ctor (Parameter=&quot;moduleInitializer&quot;, ContractName=&quot;Microsoft.Practices.Prism.Modularity.IModuleInitializer&quot;)' on part 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager'.</p>\r\n<p>8) More than one export was found that matches the constraint '((exportDefinition.ContractName == &quot;Microsoft.Practices.Prism.Regions.RegionAdapterMappings&quot;) AndAlso (exportDefinition.Metadata.ContainsKey(&quot;ExportTypeIdentity&quot;) AndAlso &quot;Microsoft.Practices.Prism.Regions.RegionAdapterMappings&quot;.Equals(exportDefinition.Metadata.get_Item(&quot;ExportTypeIdentity&quot;))))'.</p>\r\n<p>Resulting in: Cannot set import 'Microsoft.Practices.Prism.MefExtensions.Regions.Behaviors.MefDelayedRegionCreationBehavior..ctor (Parameter=&quot;regionAdapterMappings&quot;, ContractName=&quot;Microsoft.Practices.Prism.Regions.RegionAdapterMappings&quot;)' on part 'Microsoft.Practices.Prism.MefExtensions.Regions.Behaviors.MefDelayedRegionCreationBehavior'.<br>\r\nElement: Microsoft.Practices.Prism.MefExtensions.Regions.Behaviors.MefDelayedRegionCreationBehavior..ctor (Parameter=&quot;regionAdapterMappings&quot;, ContractName=&quot;Microsoft.Practices.Prism.Regions.RegionAdapterMappings&quot;) --&gt;&nbsp; Microsoft.Practices.Prism.MefExtensions.Regions.Behaviors.MefDelayedRegionCreationBehavior\r\n --&gt;&nbsp; AssemblyCatalog (Assembly=&quot;Microsoft.Practices.Prism.MefExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;)</p>\r\n<p>9) Change in exports prevented by non-recomposable import 'Microsoft.Practices.Prism.MefExtensions.Regions.MefTabControlRegionAdapter..ctor (Parameter=&quot;regionBehaviorFactory&quot;, ContractName=&quot;Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory&quot;)' on part\r\n 'Microsoft.Practices.Prism.MefExtensions.Regions.MefTabControlRegionAdapter'.</p>\r\n<p>10) Change in exports prevented by non-recomposable import 'Microsoft.Practices.Prism.MefExtensions.Regions.MefSelectorRegionAdapter..ctor (Parameter=&quot;regionBehaviorFactory&quot;, ContractName=&quot;Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory&quot;)' on part\r\n 'Microsoft.Practices.Prism.MefExtensions.Regions.MefSelectorRegionAdapter'.</p>\r\n<p>11) Change in exports prevented by non-recomposable import 'Microsoft.Practices.Prism.MefExtensions.Regions.MefItemsControlRegionAdapter..ctor (Parameter=&quot;regionBehaviorFactory&quot;, ContractName=&quot;Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory&quot;)' on\r\n part 'Microsoft.Practices.Prism.MefExtensions.Regions.MefItemsControlRegionAdapter'.</p>\r\n<p>12) Change in exports prevented by non-recomposable import 'Microsoft.Practices.Prism.MefExtensions.Regions.MefContentControlRegionAdapter..ctor (Parameter=&quot;regionBehaviorFactory&quot;, ContractName=&quot;Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory&quot;)'\r\n on part 'Microsoft.Practices.Prism.MefExtensions.Regions.MefContentControlRegionAdapter'.</p>\r\n<p>13) More than one export was found that matches the constraint '((exportDefinition.ContractName == &quot;Microsoft.Practices.Prism.Regions.IRegionViewRegistry&quot;) AndAlso (exportDefinition.Metadata.ContainsKey(&quot;ExportTypeIdentity&quot;) AndAlso &quot;Microsoft.Practices.Prism.Regions.IRegionViewRegistry&quot;.Equals(exportDefinition.Metadata.get_Item(&quot;ExportTypeIdentity&quot;))))'.</p>\r\n<p>Resulting in: Cannot set import 'Microsoft.Practices.Prism.MefExtensions.Regions.Behaviors.MefAutoPopulateRegionBehavior..ctor (Parameter=&quot;regionViewRegistry&quot;, ContractName=&quot;Microsoft.Practices.Prism.Regions.IRegionViewRegistry&quot;)' on part 'Microsoft.Practices.Prism.MefExtensions.Regions.Behaviors.MefAutoPopulateRegionBehavior'.<br>\r\nElement: Microsoft.Practices.Prism.MefExtensions.Regions.Behaviors.MefAutoPopulateRegionBehavior..ctor (Parameter=&quot;regionViewRegistry&quot;, ContractName=&quot;Microsoft.Practices.Prism.Regions.IRegionViewRegistry&quot;) --&gt;&nbsp; Microsoft.Practices.Prism.MefExtensions.Regions.Behaviors.MefAutoPopulateRegionBehavior\r\n --&gt;&nbsp; AssemblyCatalog (Assembly=&quot;Microsoft.Practices.Prism.MefExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;)</p>\r\n<p>14) Change in exports prevented by non-recomposable import 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager.MefXapModuleTypeLoader (ContractName=&quot;Microsoft.Practices.Prism.MefExtensions.Modularity.MefXapModuleTypeLoader&quot;)' on part 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager'.</p>\r\n<p>15) Change in exports prevented by non-recomposable import 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager..ctor (Parameter=&quot;moduleInitializer&quot;, ContractName=&quot;Microsoft.Practices.Prism.Modularity.IModuleInitializer&quot;)' on part 'Microsoft.Practices.Prism.MefExtensions.Modularity.MefModuleManager'.</p>\r\n<p>&nbsp;&nbsp;&nbsp; Check the InnerException property of the exception for more information. If the exception occurred\r\n<br>\r\n&nbsp;&nbsp;&nbsp; while creating an object in a DI container, you can exception.GetRootException() to help locate the\r\n<br>\r\n&nbsp;&nbsp;&nbsp; root cause of the problem.</p>\r\n<p>I think the reason for this is that the module being downloaded also references teh PRISM dll's and it is trying to recompose them. How do I work around this?</p>\r\n",
    "PostedDate": "2010-11-14T21:50:04.907-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "521955",
    "ThreadId": "234685",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I actually fixed the above issue a minute after posting this. I just set the CopyLocal to False for the PRISM dll's in my LocalModule1 project. But now I ran into another issue. When it tries to load the module it gives me this error</p>\r\n<p><strong><em>Unable to locate the module with type 'LocalModule1.Module, LocalModule1, Version=1.0.0.0' among the exported modules. Make sure the module name in the module catalog matches that specified on ModuleExportAttribute for the module type.</em></strong></p>\r\n<p>Not sure why. the ModuleExport attribute on the LocalModule1.Module does specify\r\n<strong>typeof(Module) </strong>but still I get this error.</p>\r\n",
    "PostedDate": "2010-11-14T22:06:40.797-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "521978",
    "ThreadId": "234685",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Sorry for the trouble. I fixed the above by providing the contract name in the export.</p>\r\n<p>I ran into the navigation framework in prism. It works well when calling RequestNavigate on a view within the same project. But when I try to call it on a view in another project it fails. I have the view decorated with the Export attribute and the Contract\r\n name same as the View name. But it doesnt seem to work</p>\r\n<p>// Works : TestView is in same project</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> regionManager = Container.GetExportedValue&lt;IRegionManager&gt;();\r\n            <span style=\"color:blue\">var</span> query = <span style=\"color:blue\">new</span> UriQuery();\r\n            query.Add(<span style=\"color:#a31515\">&quot;text&quot;</span>, <span style=\"color:#a31515\">&quot;Some query&quot;</span>);\r\n                      regionManager.RequestNavigate(<span style=\"color:#a31515\">&quot;Region1&quot;</span>, <span style=\"color:blue\">new</span> Uri(<span style=\"color:#a31515\">&quot;TestView&quot;</span> &#43; query, UriKind.Relative));\r\n</pre>\r\n</div>\r\n<p>// Doesnt work :&nbsp; LocalModule1MainPage is a view in another silverlight application</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> regionManager = Container.GetExportedValue&lt;IRegionManager&gt;();\r\n            <span style=\"color:blue\">var</span> query = <span style=\"color:blue\">new</span> UriQuery();\r\n            query.Add(<span style=\"color:#a31515\">&quot;text&quot;</span>, <span style=\"color:#a31515\">&quot;Some query&quot;</span>);\r\n            regionManager.RequestNavigate(<span style=\"color:#a31515\">&quot;Region2&quot;</span>, <span style=\"color:blue\">new</span> Uri(<span style=\"color:#a31515\">&quot;LocalModule1MainPage&quot;</span> &#43; query, UriKind.Relative), NavigationCompleted);\r\n</pre>\r\n</div>\r\n<p>Is it also possible to dowload an external xap into a region using RequestNavigate? By external I mean hosted under a different virtual directory altogether.</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-14T23:44:14.213-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "522101",
    "ThreadId": "234685",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Do I need to post this in a separate discussion to get a response?</p>\r\n",
    "PostedDate": "2010-11-15T05:50:10.513-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]