[
  {
    "Id": "474317",
    "ThreadId": "221865",
    "Html": "<p>Hi there,</p>\r\n<p>first of all, thanks for this great piece of work even if it's very complex for a beginner.</p>\r\n<p>I've just started to play around with the quickstarts and experience several problems with the modularity samples. For some reason i'm not able to add own modules to either RemoteModularityQuickstart or DefiningModulesInCodeQuickStart (my teammate tried different sample but with no success too).</p>\r\n<p>Here is, what  i've done with RemoteModularityQucikStart:</p>\r\n<p>I made a copy of ModuleX and renamed everything to ModuleA, added a new ModuleInfoGroup to ModuleCatalog.xaml (just copied / renamed ModuleX. I also tried Module without info group like ModuleZ, same bad result).</p>\r\n<p>Then Added a button to DefaultViewY and a correspondig&nbsp; event-handler to load ModuleA(again, same code as used for ModuleX).   Everything compiles fine so far and i can load ModuleX but not the new ModuleA:(</p>\r\n<p>&nbsp;</p>\r\n<p>I then used debugger to look whats happening and some strange behaviour appeared to me.  The problem takes place in    <strong>public virtual IEnumerable&lt;ModuleInfo&gt; CompleteListWithDependencies(IEnumerable&lt;ModuleInfo&gt; modules)</strong> of <strong>ModuleCatalog.cs</strong>.</p>\r\n<p>At the end of this function there are these 2 code lines</p>\r\n<p>IEnumerable&lt;ModuleInfo&gt; sortedList = <span style=\"color:blue\">this</span>.Sort(completeList); <span style=\"color:blue\">&nbsp;</span></p>\r\n<p><span style=\"color:blue\">return</span> sortedList;</p>\r\n<p><strong><em>completeList</em> </strong>contains one entry for ModuleA, looks good too  me so far. But after <strong><em>this.sort(...)&nbsp;&nbsp;&nbsp; sortedList</em></strong> is empty(<strong>null</strong> to be correct).</p>\r\n<p>So i changed code to   <strong><em>return completeList;</em></strong> and ModuleA appeared:)&nbsp; But after that, ModuleX (which has no code changes done by me at all) from the sample does not work anymore.</p>\r\n<p>Again i used debugger, and navigated through the code, and i saw that modulemanager thinks ModuleX has 2 dependencies (ModuleY and ModuleW). But i can't see these dependencies from  ModuleCatalog.xaml and for some reason needs a sortedList (mabe anyone can tell me whats the reason for sorting). So changing code back to what it was, helps for ModuleX, but then ModuleA does not work.  So where i'm wrong?</p>\r\n<p>Thanks for your help, Joachim</p>",
    "PostedDate": "2010-07-29T08:38:20.38-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "474449",
    "ThreadId": "221865",
    "Html": "<p>Hi Joachim,</p>\r\n<p>Based on our understanding, you need to extend the Modularity Quickstart for adding a new module. Although you copied an existent module, I though that we could review the requirements in order to achieve this scenario (some of the following steps was taken from <a href=\"http://msdn.microsoft.com/en-us/library/ff647246.aspx\">this</a> and <a href=\"http://msdn.microsoft.com/en-us/library/ff647274.aspx\">this</a> documentation sections on MSDN):</p>\r\n<ol>\r\n<li>It is necessary to prepare a module (project) for Remote Downloading. So, delete the App/Page xaml files and in the Silverlight tab of your module (it must be a SL app), select <strong>(not set)</strong> in the Startup object drop down list. </li>\r\n<li>Next, the ModulesCatalog.xaml should be updated&nbsp; by adding a new <strong>ModuleInfo</strong> element inside the <strong>ModuleCatalog</strong> tag. The config element should be similar to the following: \r\n<ul>\r\n<li><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfo </span><span style=\"color:red\">Ref</span><span style=\"color:blue\">=&quot;ModuleA.xap&quot; </span><span style=\"color:red\">ModuleName</span><span style=\"color:blue\">=&quot;ModuleA&quot; </span><span style=\"color:red\">ModuleType</span><span style=\"color:blue\">=&quot;ModuleA.ModuleA, ModuleA, Version=1.0.0.0&quot; </span><span style=\"color:red\">InitializationMode</span><span style=\"color:blue\">=&quot;OnDemand&quot;/&gt;</span> </li>\r\n</ul>\r\n</li>\r\n<li>In the handler method of the button click event, you could use the following code line for loading your module: \r\n<ul>\r\n<li><span style=\"color:blue\">this</span>.moduleManager.LoadModule(<span style=\"color:#a31515\">&quot;ModuleA&quot;</span>); </li>\r\n</ul>\r\n</li>\r\n<li>You must update the <strong>Assembly</strong> <strong>name </strong>and <strong>Xap file name</strong> from ModuleX to ModuleA in&nbsp;the properties page&nbsp;of the ModuleA.Silverlight project. </li>\r\n<li>Finally, and one of the most important parts, add a reference to your <strong>ModuleA.xap</strong> file in the <strong>Silverlight Application</strong> tab from the properties page of the <strong>RemoteModuleLoading.Silverlight.Web</strong> project. </li>\r\n</ol>\r\n<p>Please let me know if this helps.</p>\r\n<p>Fernando Antivero <br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>",
    "PostedDate": "2010-07-29T13:39:55.447-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "474609",
    "ThreadId": "221865",
    "Html": "<p>Hi&nbsp;Fernando,</p>\r\n<p>thanks for your quick answer. Thats exactly what i did when adding ModuleA. And as i wrote, in some conditions (if i patch Modularity)&nbsp; ModuleA loads.</p>\r\n<p>Next I will debug the stock sample and look how the module catalog loads there. I can't see any big mistake so far that could cause what i've seen.</p>\r\n<p>&nbsp;</p>\r\n\r\n<p><b>*Update* I did everything from scatch and now it's working. Thx for your support!</b></p>\r\n<p>Joachim</p>",
    "PostedDate": "2010-07-30T00:17:43.93-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]