[
  {
    "Id": "221059",
    "ThreadId": "64919",
    "Html": "<p>Hi everybody</p>\r\n<p>I'm developing a application using a composite application guidance. I encounter a resourceDictionary management problem. What i mean is that.</p>\r\n<p>I define a ResourceDictionary file&nbsp;in each module. What i would like to do is to update some of my resources(the values)&nbsp;from my shell when the module is load.</p>\r\n<p>Basically if the color of my button is defined as red in the module, i would like to change this color&nbsp;to black when it is displayed in my shell.</p>\r\n<p>How can i deal with this issu in the composite application guidance context.</p>\r\n<p>Thanks</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-08T02:59:11.787-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "221101",
    "ThreadId": "64919",
    "Html": "<p>Hi blochaou,</p>\r\n<p>If your PRISM bootstrapper application contains a Resource file that looks as follows:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">ResourceDictionary</span>\r\n    <span style=\"color:Red\">xmlns</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:Black\">&quot;</span>\r\n    <span style=\"color:Red\">xmlns:x</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>    \r\n\r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">SolidColorBrush</span> <span style=\"color:Red\">x:Key</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">backgroundBrush</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>Red<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">SolidColorBrush</span><span style=\"color:Blue\">&gt;</span>\r\n    \r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Style</span> <span style=\"color:Red\">TargetType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Button</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n        <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Setter</span> <span style=\"color:Red\">Property</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">Background</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">Value</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{DynamicResource backgroundBrush}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">/&gt;</span>\r\n    <span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">Style</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">ResourceDictionary</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>Then all of your buttons will be red - if you wanted to change them globally - the resource file would be the place to do it.&nbsp;</p>\r\n<p>Let's say in your module you have a presenter that wants to change &quot;only&quot; it's view to where it's buttons are blue - you could do the following:</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n<span style=\"color:Gray\">///</span><span style=\"color:Green\"> </span>\r\n<span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n<span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> DetailsViewPresenter : PresenterBase&lt;IDetailsView&gt;\r\n</span>{\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Initializes a new instance of the &lt;see cref=&quot;DetailsViewPresenter&quot;/&gt; class.</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;view&quot;&gt;</span><span style=\"color:Green\">The view.&lt;/param&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;model&quot;&gt;</span><span style=\"color:Green\">The model.&lt;/param&gt;</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;container&quot;&gt;</span><span style=\"color:Green\">The container.&lt;/param&gt;</span>\r\n    <span style=\"color:Blue\">public</span> DetailsViewPresenter(\r\n        IDetailsView view, \r\n        IDemoPresentationModel model, \r\n        IUnityContainer container) : <span style=\"color:Blue\">base</span>(view, model, container)\r\n    {\r\n        <span style=\"color:Blue\">if</span> (View.Resources.Contains(<span style=\"color:#A31515\">&quot;backgroundBrush&quot;</span>))\r\n            View.Resources.Remove(<span style=\"color:#A31515\">&quot;backgroundBrush&quot;</span>);\r\n\r\n        View.Resources.Add(<span style=\"color:#A31515\">&quot;backgroundBrush&quot;</span>, <span style=\"color:Blue\">new</span> SolidColorBrush(Colors.Blue));\r\n    }\r\n}\r\n\r\n<strong>Where IDetailsView looks as follows:</strong></pre>\r\n<pre><br>    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">interface</span><span style=\"color:MediumTurquoise\"> IDetailsView : IView\r\n    </span>{\r\n\r\n    }\r\n</pre>\r\n<pre><strong>And IView looks as follows:</strong></pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">using</span> System.Windows.Threading;\r\n<span style=\"color:Blue\">using</span> Microsoft.Practices.Unity;\r\n<span style=\"color:Blue\">using</span> System.Windows;\r\n<span style=\"color:Blue\">using</span> System.Windows.Controls;\r\n<span style=\"color:Blue\">using</span> win = System.Windows.Forms;\r\n\r\n<span style=\"color:Blue\">namespace</span> PrismContrib.Interfaces\r\n{\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> View Interface</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">interface</span><span style=\"color:MediumTurquoise\"> IView\r\n    </span>{\r\n<span style=\"color:Blue\">#if</span> !WinForm\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Occurs when [size changed].</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Blue\">event</span> SizeChangedEventHandler SizeChanged;\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets the controls.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;value&gt;</span><span style=\"color:Green\">The controls.&lt;/value&gt;</span>\r\n        UIElementCollection Controls { <span style=\"color:Blue\">get</span>; }\r\n\r\n<strong>        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets or sets the resources.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;value&gt;</span><span style=\"color:Green\">The resources.&lt;/value&gt;</span>\r\n        ResourceDictionary Resources { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }</strong>\r\n\r\n<span style=\"color:Blue\">#else</span>\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets the controls.  Specifically for WinForms</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;value&gt;</span><span style=\"color:Green\">The controls.&lt;/value&gt;</span>\r\n        win.Control.ControlCollection Controls { <span style=\"color:Blue\">get</span>; }\r\n\r\n<span style=\"color:Blue\">#endif</span>\r\n\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets or sets the data context.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;value&gt;</span><span style=\"color:Green\">The data context.&lt;/value&gt;</span>\r\n        <span style=\"color:Blue\">object</span> DataContext { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets or sets the container.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;value&gt;</span><span style=\"color:Green\">The container.&lt;/value&gt;</span>\r\n        IUnityContainer Container { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Finds the name.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;controlName&quot;&gt;</span><span style=\"color:Green\">Name of the control.&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;returns&gt;</span><span style=\"color:Gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:Blue\">object</span> FindName(<span style=\"color:Blue\">string</span> controlName);\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets the name.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;value&gt;</span><span style=\"color:Green\">The name.&lt;/value&gt;</span>\r\n        <span style=\"color:Blue\">string</span> Name { <span style=\"color:Blue\">get</span>; }\r\n\r\n<span style=\"color:Blue\">#if</span> WinForm\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets or sets the width.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;value&gt;</span><span style=\"color:Green\">The width.&lt;/value&gt;</span>\r\n        <span style=\"color:Blue\">int</span> Width { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n        \r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets or sets the height.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;value&gt;</span><span style=\"color:Green\">The height.&lt;/value&gt;</span>\r\n        <span style=\"color:Blue\">int</span> Height {<span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n<span style=\"color:Blue\">#else</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets or sets the width.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;value&gt;</span><span style=\"color:Green\">The width.&lt;/value&gt;</span>\r\n        <span style=\"color:Blue\">double</span> Width { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Gets or sets the height.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;value&gt;</span><span style=\"color:Green\">The height.&lt;/value&gt;</span>\r\n        <span style=\"color:Blue\">double</span> Height { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n<span style=\"color:Blue\">#endif</span>\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-08T07:53:46.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "221113",
    "ThreadId": "64919",
    "Html": "<p>Hi billkrat</p>\r\n<p>Thanks for message. This is not exactly what i'm looking for but i think i'll work around using your solution.</p>\r\n<p>My goal is to inject the resources in the module from the&nbsp;shell. The idea is as follow:</p>\r\n<p>1. i've just received&nbsp;the .dll of the module</p>\r\n<p>2. no way to change anything in the module</p>\r\n<p>3. i'have a documentation telling me the keys and the types of the resources defined in the module.</p>\r\n<p>Based on&nbsp; these informations i'll change&nbsp; the resources as i want.</p>\r\n<p>May be the composition application guidance doesn't deal with this issu because all modules have to know the shell (View injection or discovery).</p>\r\n<p>In my idea no module know the shell. Only the shell knows the nodules.</p>\r\n<p>Thanks</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-08-08T09:27:24.903-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]