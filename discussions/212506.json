[
  {
    "Id": "442394",
    "ThreadId": "212506",
    "Html": "<p>Yikes, that doesn't sound too good!</p>\r\n<p>I was hoping someone could please help me with this;</p>\r\n<p>&nbsp;</p>\r\n<p>I want to include some additional parameters on a view's constructor, like this;</p>\r\n<p><span style=\"font-family:Consolas;font-size:x-small\">\r\n<div style=\"color:black;background-color:white\">\r\n<pre>        public LoginView(IEventAggregator eventAggregator, string test)\r\n        {\r\n            InitializeComponent();\r\n            this._eventAggregator = eventAggregator;\r\n            this._test = test;\r\n        }\r\n\r\n</pre>\r\n</div>\r\n</span></p>\r\n<p>&nbsp;</p>\r\n<p>It's the &quot;test&quot; bit I can't seem to pass/inject correctly.</p>\r\n<p>Another View loads this view like this;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>var pageLogin = Container.Resolve&lt;MainContentModule.Views.LoginView&gt;();\r\nregion.Add(pageLogin);\r\nregion.Activate(pageLogin);\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Who do I inject this string during the construction of the view?</p>\r\n<p>&nbsp;</p>\r\n<p>thanks</p>\r\n<p>g</p>",
    "PostedDate": "2010-05-12T22:46:18.14-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "442908",
    "ThreadId": "212506",
    "Html": "<p>Hi,</p>\r\n<p>When you do <a href=\"http://msdn.microsoft.com/en-us/library/ff660875(PandP.20).aspx\">constructor injection</a>, the <a href=\"http://msdn.microsoft.com/en-us/library/ff647202.aspx\">container</a> will try to find the type you&rsquo;ve specified (string in your case) to inject it into the object you are resolving (the LoginView in your case). If you haven&rsquo;t registered that type or an instance of that type into the container, it will try to instantiate it. Since <a href=\"http://msdn.microsoft.com/en-us/library/system.string.string.aspx\">the constructors for string</a> contain parameters that the container can&rsquo;t resolve, it will throw an exception. So in order to inject a dependency that the container can&rsquo;t construct into an object, you must already have that dependency registered.</p>\r\n<p>In this case you could register a named instance of your type through the <a href=\"http://msdn.microsoft.com/en-us/library/ff661673(PandP.20).aspx\">IUnityContainer.RegisterInstance&lt;T&gt;</a> method.</p>\r\n<p>The code for registering it would look like this:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre>container.RegisterInstance&lt;<span style=\"color:blue\">string</span>&gt;(<span style=\"color:#a31515\">&quot;MyString&quot;</span>, <span style=\"color:#a31515\">&quot;Test&quot;</span>);\r\n</pre>\r\n</div>\r\n<p>And the LoginView constructor would look like this:</p>\r\n<div style=\"color:black;background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> LoginView(IEventAggregator eventAggregator, [Dependency(<span style=\"color:#a31515\">&quot;MyString&quot;</span>)]<span style=\"color:blue\">string</span> test) \r\n{ \r\n    InitializeComponent(); \r\n    <span style=\"color:blue\">this</span>._eventAggregator = eventAggregator; \r\n    <span style=\"color:blue\">this</span>._test = test; \r\n} \r\n</pre>\r\n</div>\r\n<p>You can find more information about it in <a href=\"http://msdn.microsoft.com/en-us/library/ff660875(PandP.20).aspx#cnstrctinj_named\">this article</a>.</p>\r\n<p>However, if what you are trying to pass to the LoginView is only a string, construction injection might be a bit of an overkill. Dependency injection is generally useful to decouple a class from the concrete implementation of its dependencies, and to improve testability (among other things).In this case, the implementation of string won&rsquo;t change, and you can easily mock it in a test. So if you&rsquo;re going to pass a simple type (string, int, etc), I would recommend you to follow a simpler approach, for example defining &lsquo;test&rsquo; as a property, and setting its value directly.</p>\r\n<p>If you have another questions realted specifically to Unity, you could ask it in the <a href=\"http://unity.codeplex.com/Thread/List.aspx\">Unity Forums</a>&nbsp;where you could get a more specific answer, as the community there deals specifically with Unity.</p>\r\n<p>Please let me know if this helps.</p>\r\n<p>Damian Schenkelman&nbsp;<br><a href=\"http://blogs.southworks.net/dschenkelman/\">http://blogs.southworks.net/dschenkelman/</a></p>",
    "PostedDate": "2010-05-14T07:03:51.923-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]