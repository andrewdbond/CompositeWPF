[
  {
    "Id": "567638",
    "ThreadId": "246419",
    "Html": "\r\n<p>Hello,</p>\r\n<p>I have the following scenario, The ToolbarViewmodel resides within the Navigation Module. When the New Button on the toolbar is clicked this event shall be raised to notify the NavigationViewModel.</p>\r\n<p><span style=\"font-family:Consolas,'Courier New',Courier,monospace\"><span style=\"white-space:pre\"></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>_eventAggregator.GetEvent&lt;NotifyNavigationViewModelEvent&gt;().Publish(<span style=\"color:blue\">null</span>);\r\n</pre>\r\n</div>\r\n<br>\r\n</span></span>\r\n<p></p>\r\n<p>In the Ctor of NavigationViewModel I have subscribed to the event like this:</p>\r\n<pre><div style=\"color:black; background-color:white\"><pre>_compositeEventAggregator.GetEvent&lt;NotifyNavigationViewModelEvent&gt;().Subscribe(OnAddNewContact);\r\n</pre>\r\n</div>\r\n<br></pre>\r\n<pre><br></pre>\r\n<pre>All it does is to create a new instance of type Contact. Hold a reference to it in a collection for later saving and passes it to another event to be sent to the&nbsp;</pre>\r\n<pre>Contact Module. (<strong>Question 1:</strong> I read in the Prism developer guide: <em>It is not recommended to modify the payload object from within a callback delegate because several threads could be&nbsp;</em></pre>\r\n<pre><em>accessing the payload object simultaneously. You could have the payload be immutable to avoid concurrency errors.</em> However how am I supposed to send my objects around then. What is the recommended way if not by Events?)</pre>\r\n<pre><br></pre>\r\n<pre><pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> OnAddNewContact(<span style=\"color:blue\">object</span> o)\r\n        {\r\n            <span style=\"color:blue\">var</span> contact = <span style=\"color:blue\">new</span> Contact();\r\n            Contacts.Add(contact);\r\n \r\n            _compositeEventAggregator.GetEvent&lt;NotifyContactModuleEvent&gt;().Publish(contact);\r\n        }\r\n</pre>\r\n</div>\r\n<br></pre>\r\n<br></pre>\r\n<pre><span style=\"font-family:'Segoe UI','Microsoft Sans Serif',Arial,Geneva,sans-serif\"><span style=\"white-space:normal\">Within the Contact Module's ctor I subscribe to the second event like this:<br>&nbsp;</span></span></pre>\r\n<pre><span style=\"font-family:'Segoe UI','Microsoft Sans Serif',Arial,Geneva,sans-serif\"><span style=\"white-space:normal\"><div style=\"color:black; background-color:white\"><pre>_eventAggregator.GetEvent&lt;NotifyContactModuleEvent&gt;().Subscribe(DisplayContact);\r\n\r\n</pre>\r\n</div>\r\n</span></span></pre>\r\n<pre><pre><span style=\"font-family:'Segoe UI','Microsoft Sans Serif',Arial,Geneva,sans-serif; white-space:normal\">All it does is to inject the Contact object into the View so that it can be filled in.</span></pre>\r\n</pre>\r\n<pre><span style=\"font-family:'Segoe UI','Microsoft Sans Serif',Arial,Geneva,sans-serif\"><span style=\"white-space:normal\"><br><pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> DisplayContact(Contact contact)\r\n        {\r\n            <span style=\"color:blue\">var</span> contactViewModel = _container.Resolve&lt;ContactViewModel&gt;();\r\n            <span style=\"color:blue\">var</span> view = <span style=\"color:blue\">new</span> ContactView(contactViewModel);\r\n            view.Initialize(contact);\r\n            _regionManager.RegisterViewWithRegion(Constants.MainRegion, () =&gt; view);\r\n        }\r\n \r\n</pre>\r\n</div>\r\n<br></pre>\r\n</span></span></pre>\r\n<pre><span style=\"font-family:'Segoe UI','Microsoft Sans Serif',Arial,Geneva,sans-serif\"><span style=\"white-space:normal\">The first event from Toolbar to NavigationViewModel works perfectly fine, but then at the time the second event NotifyContactModuleEvent is meant to be raised, it doesn't do anything.&nbsp;</span></span></pre>\r\n<pre><span style=\"font-family:'Segoe UI','Microsoft Sans Serif',Arial,Geneva,sans-serif\"><span style=\"white-space:normal\"><strong>Question 2:</strong> Why is that? Am I missing a concept here?</span></span></pre>\r\n<pre><span style=\"font-family:'Segoe UI','Microsoft Sans Serif',Arial,Geneva,sans-serif\"><span style=\"white-space:normal\"><br>The events are implemented like this:<br><br><pre><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> NotifyContactModuleEvent : CompositePresentationEvent&lt;Contact&gt;\r\n    {\r\n \r\n    }\r\n\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> NotifyNavigationViewModelEvent : CompositePresentationEvent&lt;<span style=\"color:blue\">object</span>&gt;\r\n    {\r\n \r\n    }\r\n</pre>\r\n<pre><br></pre>\r\n<pre>ModulesCatalog:<br><br><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfo</span> <span style=\"color:red\">Ref</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">X.Modules.ContactModule.xap</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">ModuleName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">ContactModule</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">ModuleType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">X.Modules.ContactModule.ContactModule, X.Modules.ContactModule, Version=1.0.0.0, Culture=neutral, PublicToken=null</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span>\r\n        <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfo</span> <span style=\"color:red\">Ref</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">X.Modules.NavigationModule.xap</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">ModuleName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">NavigationModule</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">ModuleType</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">X.Modules.NavigationModule.NavigationModule, X.Modules.NavigationModule, Version=1.0.0.0, Culture=neutral, PublicToken=null</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfo.DependsOn</span><span style=\"color:blue\">&gt;</span>\r\n                <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">sys</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">String</span><span style=\"color:blue\">&gt;</span>ContactModule<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">sys</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">String</span><span style=\"color:blue\">&gt;</span>\r\n            <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfo.DependsOn</span><span style=\"color:blue\">&gt;</span>\r\n        <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Modularity</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">ModuleInfo</span><span style=\"color:blue\">&gt;</span>     \r\n</pre>\r\n</div>\r\n&nbsp;</pre>\r\n</div>\r\nMany Thanks for your advice on this,<br>Houman&nbsp;</pre>\r\n</span></span></pre>\r\n",
    "PostedDate": "2011-02-16T23:29:50.857-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "568060",
    "ThreadId": "246419",
    "Html": "<p>Hi Houman,</p>\r\n<p>From my understanding of the note in the Prism documentation, the suggestion is to avoid modifying the payload object from within the delegate callback; there isn&rsquo;t any recommendation regarding not to publish an event from within the callback of another event, so there is no reason for you not to do so.</p>\r\n<p>The unexpected behavior you&rsquo;re experiencing might be caused by the fact that the region in which you&rsquo;re trying to add the ContactView could be a ContentControl (that is, a SingleActiveRegion).</p>\r\n<p>Additionally, you should take into account that the <strong>View Injection Approach</strong> could be more suitable for your scenario, as it is useful for cases in which you need explicit programmatic control on when the views are added to a region. For example, on the <em>DisplayContact</em> delegate you could do something like this:</p>\r\n<p><span style=\"font-size: 9.5pt;\" lang=\"EN-US\">\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">var</span> contactViewModel = _container.Resolve&lt;ContactViewModel&gt;();\r\n<span style=\"color: blue;\">var</span> view = <span style=\"color: blue;\">new</span> ContactView(contactViewModel);\r\nview.Initialize(contact);\r\n_regionManager.Regions[Constants.MainRegion].Add(view);\r\n</pre>\r\n</div>\r\n</span></p>\r\n<p>You might find the <a href=\"http://msdn.microsoft.com/en-us/library/ff921098(v=PandP.40).aspx\">UI Composition Chapter</a> of the Prism MSDN documentation useful to this purpose.</p>\r\n<p>If you keep experiencing this kind of problems, it would be helpful if you could provide us with a repro sample, so that we can help you determine which is the cause for it.</p>\r\n<p>I hope you find this information useful.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br /><a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-02-17T11:18:59.987-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "584826",
    "ThreadId": "246419",
    "Html": "<p>Hi Miguel,</p>\r\n<p>&nbsp;</p>\r\n<p>I don't get the event aggregators work consistently and it scares me off going into production like this. I have applied your suggestions regarding View Injection Approach and still it doesnt work.</p>\r\n<p>And it seems impossible to me to debug through it. &nbsp;Is there anyway you could provide me with your email and I would send you a copy of the app?<br />I am quite stuck here.</p>\r\n<p>&nbsp;</p>\r\n<p>Many Thanks,</p>\r\n<p>Houman&nbsp;</p>",
    "PostedDate": "2011-03-23T00:30:45.03-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "584898",
    "ThreadId": "246419",
    "Html": "<p>Hey guys,</p>\n<p>I have found out the problem after pulling half of my hair out.<br /><br />The second event subscription needs to be kept alive (strong reference) otherwise its possible that its sometimes garbage collected and hence it remains unresponsive.</p>\n<p>_eventAggregator.GetEvent().Subscribe(DisplayContact, ThreadOption.UIThread, <strong>true</strong>);</p>\n<p>﻿This way it would work fine.&nbsp; Since I seem to have now a strong event subscription between a ViewModel and a different Module, what does that mean for the memory management?<br /><br />ToolbarViewModel --publishes--&gt; EventA<br />NavigationViewModel --Subscribes (Weak)--&gt; Event A<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; Publishes EventB<br />ContactModule --Subscribes (Strong)--&gt; EventB<br /><br /><br />1) Does this mean the NavigationViewModel (part of NavigationModule) can't be garbage collected as long as ContactModule is strongly-subscribed to the former? Or is it the other way around? I am now quite confused. :)<br /><br />2) What determines the life cycle of a weak event? How comes my second event is garbage collected so fast if&nbsp;the subscription&nbsp;isn't set to be strong? <br />It seems ContactModule looses its subscription to NavigationViewModel&nbsp;if the event&nbsp;was set to be weak. Could it ﻿generally be that Prism Module classes have a shorter life span?</p>\n<p><br />Many Thanks for your advice on this matter,<br />Houman</p>",
    "PostedDate": "2011-03-23T02:46:45.313-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "585085",
    "ThreadId": "246419",
    "Html": "<p>Hi Houman,</p>\r\n<p>When you set the <strong>keepSubscriberReference </strong>alive parameter to true on the <strong>Subscribe</strong> method, you specify that a strong reference should be maintained between your event and its subscriber. Therefore, you will grant that the subscriber won't be garbage collected until you manually unsubscribe to that event.</p>\r\n<p>In your case, since your subscriber is the <strong>ContactModule</strong>, that's the one that won't be garbage collected until you've unsubscribed from the event.</p>\r\n<p>On the other hand, a weak event subscription won't hold a strong reference to the Subscriber, hence it will be active as long as the subscriber is kept alive. For example, if you subscribe to an event from within your <strong>ContactModule</strong>, if you don't have any other references to it, that instance will eventually be garbage collected. Note that it's usual to have the <strong>IModule </strong>be garbage collected; instead, you should create an instance of a controller or a similar class, and make that instance keep alive, instead of the <strong>IModule </strong>itself.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi&nbsp;<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-03-23T08:29:31.2-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "585096",
    "ThreadId": "246419",
    "Html": "<p>Hi Guido,</p>\r\n<p>Many Thanks for your response.<br /><br />It makes now more sense to me. And by&nbsp;the way it looks like I have a non-optimal architecture.&nbsp; If I would like to apply your suggestion here and don't let a module&nbsp;subscribing to my event, <br />and would have to&nbsp;utilize a&nbsp;controller class instead; how would I design such controller class? <br />- Do you have a simple example for it how to make it fit there? e.g. should it be part of the Module project or rather a class within the Infrastructure project? <br />- Do I have to make it inherit from anything special or just a plain class?<br /><br />Its just that I would like to have the architecture right from beginning, as much as possible. :)</p>\r\n<p>Thank you,<br />Houman</p>",
    "PostedDate": "2011-03-23T08:52:54.747-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "585117",
    "ThreadId": "246419",
    "Html": "<p>Houman,</p>\n<p>Based on my understanding, a possible way to achieve the aforementioned idea would be to use a controller class inside the module project; the class shouldn't inherit from anything special unless you specifically require it.</p>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi&nbsp;<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-03-23T09:29:32.047-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]