[
  {
    "Id": "172188",
    "ThreadId": "51354",
    "Html": "Hi.<br>\r\n<br>\r\nI wonder whether there are guidelines for running commands defined in other modules. Imagine we have module A with a command called CommandA. CommandA is executing code in module A. Then we have module B, who also would like to use CommandA. How would we go about implementing the relationship between the two modules when they shouldn't know each others existance?<br>\r\n<br>\r\nI was hoping there was some structure similar to composite event aggregating, but CompositeCommand (with the register/unregister functionality) seems more adapted to bundling multiple commands, not solve the issue I'm having.<br>\r\n<br>\r\nBest regards,<br>\r\nMattias \r\n",
    "PostedDate": "2009-03-26T01:35:51.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "172454",
    "ThreadId": "51354",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Hi Mattias,</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">In this scenario, a viable approach could be making <b>CommandA</b> available globally (for multiple modules). There is a topic in the Composite Application Guidance for WPF &amp; Silverlight, that explains how to get this done:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/dd458862.aspx\"><span style=\"color:#0000ff;font-family:calibri\">How to: Create Globally Available Commands</span></a>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">If you would like more details about commands, and when to use each of the different possible combinations with them, you could check the following topics in the Prism-v2 documentation:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/dd458928.aspx\"><span style=\"color:#0000ff;font-family:calibri\">Commands</span></a>\r\n<p style=\"margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/dd458878.aspx\"><span style=\"color:#0000ff;font-family:calibri\">Communication</span></a>\r\n<p style=\"margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><a href=\"http://msdn.microsoft.com/en-us/library/dd458931.aspx\"><span style=\"color:#0000ff;font-family:calibri\">How to: Create Locally Available Commands</span></a>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d;font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Another good alternative would be to register the command in the container using a string key to differentiate between commands:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    container.RegisterInstance&lt;ICommand&gt;(&quot;Module1Command&quot;,myCommand); //Container is an instance of the Unity Container</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-family:calibri\">Then you can get the same command in another module like this:</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"font-size:10pt;font-family:'courier new'\">    ICommand module1Command = container.Resolve&lt;ICommand&gt;(&quot;Module1Command&quot;);</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Once you have an instance of the command you will be able to bind it to a control of your choosing.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">The approach you decide to take, if it is one of the above or not, depends on your specific application’s needs.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"color:#1f497d;font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:calibri\">Please let me know if this helps.</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:calibri\">Damian Schenkelman</span></p>\r\n<span style=\"font-size:11pt;font-family:'calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"color:#0000ff\">http://blogs.southworks.net/dschenkelman</span></a></span></span></p>\r\n</span></p>\r\n</span></p>\r\n</span></p>\r\n",
    "PostedDate": "2009-03-26T12:04:25.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "172795",
    "ThreadId": "51354",
    "Html": "The first solution where you have a global CompositeCommand was the thing I was after. Just wasn't sure CompositeCommands was designed to work like that.<br>\r\n<br>\r\nThanks for the quick feedback!<br>\r\n<br>\r\nBest regards,<br>\r\nMattias<br>\r\n",
    "PostedDate": "2009-03-27T08:00:21.357-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "246321",
    "ThreadId": "51354",
    "Html": "<p>I have been having this problem for several days.&nbsp; I have a view that has a has a button.&nbsp; I want the the code to handle the button enable and execute to be in viewmodel that is not the viewmodel where the contrl is.&nbsp; I am using the&nbsp;<span style=\"font-size:x-small;color:#2b91af\"><span style=\"font-size:x-small;color:#2b91af\">CompositeCommand&nbsp;can not seem to get things wired up correctly.&nbsp;\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">namespace</span> Test_Commanding_Binding\r\n{\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Interaction logic for Window1.xaml</span>\r\n    <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">partial</span> <span style=\"color:Blue\">class</span> Window1 : Window\r\n    {\r\n        <span style=\"color:Blue\">public</span> Window1()\r\n        {\r\n            InitializeComponent();\r\n\r\n            ViewModel vm = <span style=\"color:Blue\">new</span> ViewModel();\r\n\r\n            vm.changeCount();\r\n\r\n            vm.changeCount();\r\n\r\n            vm.changeCount();\r\n\r\n            vm.changeCount();\r\n        }\r\n    }\r\n}\r\n\r\n&lt;Window x:Class=<span style=\"color:#A31515\">&quot;Test_Commanding_Binding.Window1&quot;</span>\r\n    xmlns=<span style=\"color:#A31515\">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span>\r\n    xmlns:x=<span style=\"color:#A31515\">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span>\r\n    xmlns:View=<span style=\"color:#A31515\">&quot;clr-namespace:Test_Commanding_Binding.View&quot;</span>\r\n    Title=<span style=\"color:#A31515\">&quot;Window1&quot;</span> Height=<span style=\"color:#A31515\">&quot;300&quot;</span> Width=<span style=\"color:#A31515\">&quot;300&quot;</span>&gt;\r\n    &lt;Grid&gt;\r\n&lt;View:RibbionView /&gt;\r\n    &lt;/Grid&gt;\r\n&lt;/Window&gt;\r\n\r\n<span style=\"color:Blue\">using</span> Microsoft.Practices.Composite.Presentation.Commands;\r\n\r\n<span style=\"color:Blue\">namespace</span> Infrastructure\r\n{\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">class</span> Commands\r\n    {\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> CompositeCommand Save = <span style=\"color:Blue\">new</span> CompositeCommand(<span style=\"color:Blue\">true</span>);\r\n    }\r\n}\r\n\r\n<span style=\"color:Blue\">using</span> System.Windows.Forms;\r\n<span style=\"color:Blue\">using</span> System.Windows.Input;\r\n<span style=\"color:Blue\">using</span> Infrastructure;\r\n<span style=\"color:Blue\">using</span> Microsoft.Practices.Composite.Presentation.Commands;\r\n\r\n<span style=\"color:Blue\">namespace</span> Test_Commanding_Binding\r\n{\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> ViewModel\r\n    {\r\n        <span style=\"color:Blue\">protected</span> ICommand _saveCommand;\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">int</span> _count;\r\n\r\n        <span style=\"color:Blue\">public</span> ViewModel()\r\n        {\r\n            _saveCommand = <span style=\"color:Blue\">new</span> DelegateCommand&lt;<span style=\"color:Blue\">object</span>&gt;(parm =&gt; SaveEntity(), parm =&gt; IsDirty());\r\n            Commands.Save.RegisterCommand(_saveCommand);\r\n        }\r\n\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">bool</span> IsDirty()\r\n        {\r\n            <span style=\"color:Blue\">return</span> _count &gt; 3;\r\n\r\n           \r\n        }\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">object</span> SaveEntity()\r\n        {\r\n            <span style=\"color:Blue\">return</span> MessageBox.Show(<span style=\"color:#A31515\">&quot;Hello&quot;</span>);\r\n        }\r\n\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">void</span> changeCount()\r\n        {\r\n            _count++;\r\n            _saveCommand.CanExecute(<span style=\"color:Blue\">this</span>);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>Please&nbsp;help me understand</p>\r\n</span></span></p>",
    "PostedDate": "2009-10-15T18:23:55.847-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "246720",
    "ThreadId": "51354",
    "Html": "<p id=c3752c30-9c88-012c-46c1-12313b005981>Hi,</p>\r\n<p id=c37535a0-9c88-012c-46c2-12313b005981>Assuming you are trying to bind the button to the command in code behind, one thing to note is that the <strong>DataContext</strong> of the view that contains the button must be set to the ViewModel that has the command (you can check the <a href=\"http://msdn.microsoft.com/en-us/library/dd458890.aspx\">Commanding Quickstart</a> for more information about that). How are you setting the <strong>DataContext</strong> of the RibbonView?</p>\r\n<p id=c3753f10-9c88-012c-46c3-12313b005981>Could you provide a small repro sample that illustrates the full scenario?</p>\r\n<p id=c37548a0-9c88-012c-46c4-12313b005981>In the meantime the following documents might provide more information:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd458931.aspx\">How to: Create Locally Available Commands</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd458862.aspx\">How to: Create Globally Available Commands</a></li>\r\n</ul>\r\n<p id=c3755260-9c88-012c-46c5-12313b005981>Please let me know if this helps.</p>\r\n<p id=c3755c60-9c88-012c-46c6-12313b005981>Damian Schenkelman    <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2009-10-16T14:35:08.703-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]