[
  {
    "Id": "814267",
    "ThreadId": "349695",
    "Html": "\r\n<p>I made a short list of a few things I was thinking of when reading through the book and starting my first project using Prism... This is what I had so far.</p>\r\n<p><strong><span style=\"text-decoration:underline\">There's no main menu example</span></strong></p>\r\n<p>It was mentioned that a menu service could be implemented, but this is a common&nbsp;exercise&nbsp;and question and I really thought there could have been an example that showed a data bound menu implementation that was configurable by the different modules.\r\n I've written my own version of this, but not sure if I'd ever post it somewhere or not. I think it is decent, but it was quite difficult being new to WPF and Prism.</p>\r\n<p><span style=\"text-decoration:underline\"><strong>There was no explanation of including your data templates from your modules into the shell</strong></span></p>\r\n<p><span style=\"text-decoration:underline\"><strong>&nbsp;</strong></span>&nbsp;For example, if your view for something is only a DataTemplate in a resource dictionary, how do you inject it into your application shell? &nbsp;The book mentions that your view\r\n can be only a data template and shows the template, but not how to include it. Here's what I've done... it would have been nice if the book said how this should be done. I think this is reasonable...</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>ResourceDictionary dictionary = <span style=\"color:blue\">new</span> ResourceDictionary();\r\ndictionary.Source = <span style=\"color:blue\">new</span> Uri(<span style=\"color:#a31515\">&quot;pack://application:,,,/Company.Product.Menu;Component/Resources/MainMenuResources.xaml&quot;</span>);\r\nApplication.Current.Resources.MergedDictionaries.Add(dictionary);\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> menu = container.Resolve&lt;MainMenuViewModel&gt;();\r\nregionManager.Regions[RegionNames.MenuRegion].Add(menu);\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p><span style=\"text-decoration:underline\"><strong>No explanation of conditionally interacting with a module / service</strong></span></p>\r\n<p>Ok, so.. you have modules, some have dependencies on other interfaces implemented by other modules. But what if it isn't necessary for a service to exist, however if it does, I want to add some functionality? &nbsp;For example, if the main menu module doesn't\r\n exist, then perhaps I just don't register my commands with the menu, but the module can still load and be interacted with in other ways. If I require that dependency through injection into my constructor, then I think I'll get an error if it doesn't exist.\r\n Here's what I've done, for example for the MenuService.</p>\r\n<pre><span>&nbsp;</span><div style=\"color:black; background-color:white\"><pre><span style=\"color:blue\">if</span> (container.IsRegistered&lt;IMainMenuService&gt;())\r\n{\r\n<span style=\"color:green\">//....</span>\r\n}\r\n</pre>\r\n</div>\r\n</pre>\r\n<p>My thought is I'm going to have to live with the Container being a dependency so I suppose this is better than relying on that service directly if it is an optional thing..</p>\r\n<p><strong><span style=\"text-decoration:underline\">Stock Trader Reference Implementation is sometimes overly confusing</span></strong></p>\r\n<p>The book talks about how to do things like setting up a [Export] attribute to export a module and use its initialize method to initialize the module. However, the only reference implementation decides to completely avoid doing this and instead provide a\r\n custom attribute (think it is called ViewExportAttribute or something). I found this confusing and I didn't understand why the book would explain the way to do things while the reference example would do something completely different in what I felt was at\r\n times overly complicated.</p>\r\n<p><strong><span style=\"text-decoration:underline\">No example of registering types for module initialization even though it is listed as a step</span></strong></p>\r\n<p>Ok this is probably minor, but the book mentioned registering the types provided by the module with the container, but only shows examples of doing this with MEF not Unity. (Chapter 4, Module Loading Process figure). At least I believe so... been a while\r\n but I remember specifically looking through the examples for this.. I've been using container.ReigsterType&lt;Type&gt;() to register my types in the Module.Initialize method.</p>\r\n<p><span style=\"text-decoration:underline\"><strong>Internationalization &amp; Localization</strong></span></p>\r\n<p>I would have liked to see some explanation of how to implement multiple language resources in a modular application. Should the language resources be declared in the infrastructure project? Should they be different versions of each module. I would think\r\n that would be undesirable as it may multiple the number of assemblies you have.</p>\r\n<p><strong><span style=\"text-decoration:underline\">Help functionality</span></strong></p>\r\n<p>Any thought on implementing help functionality for a modular application. One advantage of my application being modular is being able to release different component configurations or versions separately. I suppose we will probably just have to write the\r\n documentation somehow with that in mind and have multiple versions but I wonder if anyone else has thought about any way to go about simplifying this.</p>\r\n<p>&nbsp;</p>\r\n<p>Anyway, those were my first thoughts... I'm sure I'll have some questions when I work with it more.</p>\r\n",
    "PostedDate": "2012-03-22T13:19:35.01-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "814778",
    "ThreadId": "349695",
    "Html": "<p>Hi,</p>\n<p>First of all, I want to thank you for taking the time to provide this feedback as it might be very helpful for the team to keep improving the guidance. Hence we have created the following <a href=\"http://compositewpf.codeplex.com/workitem/9263\">work item</a>&nbsp; in the <a href=\"http://compositewpf.codeplex.com/workitem/list/advanced\"> Issue Tracker</a> with your suggestions, so the P&amp;P team can analyze them for future releases.</p>\n<p>Additionally, below you can find my opinion regarding some of the points you mentioned:</p>\n<ul>\n<li>I agree there is no main menu example and it might result handy for the community. For example, I believe a possible approach to achieve this kind of scenarios, could be the suggestions proposed by Damian Cherubini in the following work item: \n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/workitem/3593\">Introduce CAB's UIExtensionSite alternative</a> </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Regarding the way on how to include data templates from your modules in the shell, as far as I know there is no explanation in the documentation. On the other hand, there have been several discussions about this subject with possible approaches: \n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/workitem/3020\">ResourceDictionary in a Module</a> </li>\n<li><a href=\"http://compositewpf.codeplex.com/workitem/3504\">Add ability to create resource dictionaries shared between all modules</a> </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Based on my understanding the Stock Trader RI intentionally register views in the Container with the mentioned approach to demonstrate the use of declarative attributes. Different approaches to compose the UI can be found in the different available <a href=\"http://msdn.microsoft.com/en-us/library/gg430879%28v=pandp.40%29.aspx\">Quickstarts</a> provided with the Prism library. Also, more information that might result helpful to understand the current implementation of the RI can be found in Appendix F,  Reference Implementations of the documentation (which is not available in the printed version): \n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921074%28v=pandp.40%29.aspx#sec16\">Stock Trader Reference Implementation,How the Stock Trader RI Works</a> </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Examples on how to register types in both <strong>MEF </strong>and <strong>Unity</strong>, can be found in the following chapter of the documentation (perhaps this is why it doesn't appear in the chapter 4 as you mentioned): \n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921140%28v=pandp.40%29.aspx#sec4\">Chapter 3: Managing Dependencies Between Components, Registering</a> </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Regarding Internationalization &amp; Localization, as far as I know there is no guidance about this. I believe that if you want to define a resource that will be used by several projects of your application it's a good practice to define them in a common /  infrastructure project. </li>\n</ul>\n<p>Thanks!</p>\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a>ï»¿</p>",
    "PostedDate": "2012-03-23T11:37:17.02-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]