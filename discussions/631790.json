[
  {
    "Id": "1415987",
    "ThreadId": "631790",
    "Html": "How does the &quot;ConfigureAggregateCatalog&quot; differ from &quot;ConfigureModuleCatalog&quot;? The prism 5.0 quickstart example on mef shows 3 ways of loading modules: from assembly catalog, from directory catalog, and from a config file. Looks like the AggregateCatalog.Catalogs.Add(new AssemblyCatalog(...)) is enough to find and load modules. Without the ConfigureModuleCatalog's ModuleCatalog.Add(new ModuleInfo(...) I am not even able to get any error; the module is not loaded.\r<br />\n<br />\nI get the following exception when loading the module in the way shown below.\r<br />\n<br />\nAn unhandled exception of type 'Microsoft.Practices.Prism.Modularity.ModuleTypeLoadingException' occurred in Microsoft.Practices.Prism.Composition.dll\r<br />\n<br />\nAdditional information: Failed to load type for module ExportBuildPreferencesModule.\r<br />\n<br />\nError was: Unable to locate the module with type 'FourZero.ExportBuild.Preferences.ExportBuildPreferencesModule, FourZero.ExportBuild.Preferences, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' among the exported modules. Make sure the module name in the module catalog matches that specified on ModuleExportAttribute for the module type..`\r\n\r\nIf I remove the ConfigureModuleCatalog method, I get: Additional information: Module ExportBuildPreferencesModule was not found in the catalog.\r<br />\n<br />\npublic class BootStrapper : MefBootstrapper\r<br />\n{<br />\n<pre><code>protected override DependencyObject CreateShell()\n{\n    return this.Container.GetExportedValue&lt;MainWindow&gt;(&quot;MainWindow&quot;);\n}\n\nprotected override void InitializeModules()\n  {\n      this.ModuleCatalog.Initialize();\n  }\n\nprotected override void InitializeShell()\n{\n    base.InitializeShell();\n    Application.Current.MainWindow = (Window)this.Shell;\n    Application.Current.MainWindow.Show();\n    this.moduleManager = this.Container.GetExportedValue&lt;IModuleManager&gt;();\n    this.moduleManager.LoadModule(&quot;ExportBuildPreferencesModule&quot;);\n    //this.moduleManager;\n}\n\nprivate IModuleManager moduleManager;\n\nprotected override void ConfigureAggregateCatalog()\n{\n    base.ConfigureAggregateCatalog();\n    //get the exported Shell from the assembly containing the bootstrapper (this) (MainWindow)\n    this.AggregateCatalog.Catalogs.Add(new AssemblyCatalog(typeof(BootStrapper).Assembly));\n\n\n    //get the exports from the Preferences assembly\n    this.AggregateCatalog.Catalogs.Add(new AssemblyCatalog(typeof(ExportBuildPreferencesModule).Assembly));\n}\n\n\nprotected override void ConfigureModuleCatalog()\n{\n\n     base.ConfigureModuleCatalog();\n     string path = @&quot;G:\\ExportBuild\\FourZero.ExportBuild\\FourZero.ExportBuild.Main\\bin\\Debug\\FourZero.ExportBuild.Preferences.dll&quot;;\n     Type modulePreferencesType = typeof (ExportBuildPreferencesModule);\n     this.ModuleCatalog.AddModule(new ModuleInfo()\n                                 {\n                                     ModuleName   = modulePreferencesType.Name,\n                                     ModuleType = modulePreferencesType.AssemblyQualifiedName,\n                                     Ref = new Uri(path, UriKind.RelativeOrAbsolute).AbsoluteUri,\n                                     InitializationMode = InitializationMode.WhenAvailable\n\n                                 });            \n}</code></pre>\n\n}\r<br />\nFollowing is the class that exports the module. Changing to [ModuleExport(&quot;ExportBuildPreferenceModule&quot;, typeof(ExportBuildPreferencesModule))] gives the same error.\r<br />\n<br />\n[ModuleExport( typeof(ExportBuildPreferencesModule))]\r<br />\npublic class ExportBuildPreferencesModule : IModule\r<br />\n{<br />\n<pre><code>//[Import(AllowRecomposition = false)] \nprivate readonly IRegionManager _regionManager;\n\n[ImportingConstructor]\npublic ExportBuildPreferencesModule(IRegionManager inRegionManager)\n{\n    this._regionManager = inRegionManager;\n}\n\n[Import]\nprivate ExportBuildPreferencesView _exportBuildPreferencesView;\npublic void Initialize()\n{\n     this._regionManager.RegisterViewWithRegion(RegionNames.ExportBuildPreferencesRegion,\n     typeof (ExportBuildPreferencesView));\n}</code></pre>\n\n}<br />\n",
    "PostedDate": "2015-04-20T08:56:57.767-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]