[
  {
    "Id": "581142",
    "ThreadId": "249867",
    "Html": "\r\n<p>Hello guys, &nbsp;i have to admit that i am new into the idea of designing software with MvvM and other accepted patterns, but i am sold to the idea! The obvious&nbsp;consequence&nbsp;of my lack of experience is that i reached a point where my nagging doubts\r\n can no longer be answered by reading documentation. So here i reach the community and ask a&nbsp;couple&nbsp;of questions:</p>\r\n<p>1: I am using sync framework 4.0 and with it i get a bunch of generated proxy classes that is used by my local component to communicate and&nbsp;persist&nbsp;that data, the question is, since those classes implement INotifyPropertyChange and are partial\r\n classes (so it can be extended with validation or whatever) they make perfect classes to use in binding, can i bind to using this classes or i have to create a wrapper&nbsp;class to be on good terms with the best practices? &nbsp; (at first glance for me the\r\n wrapper class&nbsp;appear&nbsp;&nbsp;to give more separation but at the cost of having to recreate all the model &#43; having to do copy the data from &nbsp;proxy to wrapper &nbsp;and back when using the repository).</p>\r\n<p>2: I have a search module, and&nbsp;surpassingly it&nbsp;searches&nbsp;for customers, i can&nbsp;communicate&nbsp;that a particular customer is now selected in the search using the proposed methods in prism documentation (Prism service, the Region Context\r\n or an Event Aggregator) i can see all of that working, but here is my idea. &nbsp;</p>\r\n<p>I was thinking that i could bind the search result list box selected Item&nbsp;to a ActiveCustomer Property on my Search viewmodel, &nbsp;but this ActiveCustomer property would be exposed as an public property of my model that the&nbsp;search&nbsp;viewmodel\r\n is holding, something like model.activeCustomer property on my viewmodel, &nbsp;and on the Customer details viewmodel i bind to that same property&nbsp;hence&nbsp;having&nbsp;the effect i want &nbsp;(you select a different customer on the&nbsp;search, you\r\n see its details) &nbsp;this looks to me as a good solution, is it&nbsp;really&nbsp;that bad to have that dependency?</p>\r\n<p>I am&nbsp;really&nbsp;interested in any feedback &nbsp;tank you!.</p>\r\n",
    "PostedDate": "2011-03-15T21:08:49.443-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "582116",
    "ThreadId": "249867",
    "Html": "<p>Hi,</p>\r\n<p>The decision of whether to use your generated classes as ViewModels, or create a class on your own depends on your requirements for the application. While it's not the usual approach, it shouldn't cause problems as long as you don't place too many responsibilities in one single class.</p>\r\n<p>As for your second concern, if I understood your scenario correctly, you would be using the same instance of the model accross your ViewModels. In my opinion, that doesn't seem to be an invalid possiblity.</p>\r\n<p>You might find the following chapter from the Prism MSDN documentation useful:</p>\r\n<p><a href=\"http://msdn.microsoft.com/en-us/library/gg405484%28PandP.40%29.aspx\">Chapter 5: Implementing the MVVM Pattern</a></p>\r\n<p>Also, you might find the following QuickStarts and Reference Implementation useful to check how this pattern is implemented in Prism:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg430857%28PandP.40%29.aspx\">Basic MVVM QuickStart</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg430869%28PandP.40%29.aspx\">MVVM QuickStart</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg405492%28PandP.40%29.aspx\">MVVM Reference Implementation</a></li>\r\n</ul>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi&nbsp;<br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-03-17T07:57:07.363-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]