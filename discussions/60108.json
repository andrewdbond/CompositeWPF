[
  {
    "Id": "203484",
    "ThreadId": "60108",
    "Html": "<p>Is there anyone I can submit a patch to the CAL for?</p>\r\n<p>Basically, in the Silverlight implementation of DelegateCommand&lt;T&gt;.OnCanExecuteChanged, there is a call to Deployment.Current.</p>\r\n<p>In a unit test environment (specifically, NUnit), this code throws an exception because there is no current deployment.&nbsp; I believe it is safe to wrap the block in an try/catch and set it to null on exception.</p>\r\n<p>I hope this gets to the right people, in case the DelegateCommand makes it into Silverlight 3 in its current form.&nbsp; Without this change, we can't use the CAL implementation of DelegateCommand.</p>\r\n<p>Note: The same is true of CompositeCommand.</p>\r\n<p>The Class is: <strong>Microsoft.Practices.Composite.Presentation.Commands.DelegateCommand&lt;T&gt;</strong>.</p>\r\n<p><strong>The code currently is:</strong></p>\r\n<p>\r\n<pre>        protected virtual void OnCanExecuteChanged()\r\n        {\r\n            Dispatcher dispatcher = null;\r\n\r\n            if (Deployment.Current != null)\r\n            {\r\n                dispatcher = Deployment.Current.Dispatcher;\r\n            }</pre>\r\n</p>\r\n<p><strong>The code can be changed to</strong>:</p>\r\n<p>&nbsp;</p>\r\n<pre>        protected virtual void OnCanExecuteChanged()\r\n        {\r\n            Dispatcher dispatcher = null;\r\n\r\n            try\r\n            {\r\n                if (Deployment.Current != null)\r\n                {\r\n                    dispatcher = Deployment.Current.Dispatcher;\r\n                }\r\n            }\r\n            catch (Exception)\r\n            {\r\n                dispatcher = null;\r\n            }</pre>\r\n<p>&nbsp;</p>\r\n<p>Thank you,</p>\r\n<p>Brian Genisio</p>",
    "PostedDate": "2009-06-19T12:12:49.22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "203530",
    "ThreadId": "60108",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">Hi Brian,</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">If you believe your suggestion could be useful for the community, you could create a work item in the </span><a href=\"http://compositewpf.codeplex.com/WorkItem/List.aspx\"><span style=\"font-family:Calibri;font-size:small\">Issue Tracker</span></a><span style=\"font-family:Calibri;font-size:small\">, so people can vote for it. <span style=\"color:#1f497d\">I</span>t might be taken into account for future releases.</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">On the other hand, if you need to use a delegate command in a test, you might consider using a mocking the DelegateCommand class.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">The following thread deals with a &nbsp;similar situation and explains how could this be achieved:</span></span></span></p>\r\n<p style=\"text-indent:-18pt;margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:Symbol\" lang=EN-US><span style=\"\"><span style=\"font-size:small\">&middot;</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"\" lang=EN-US><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=58515\"><span style=\"font-family:Calibri;font-size:small\">DelegateCommand.RaiseCanExecuteChanged -- Can't test it :(</span></a></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Please let me know if this helps.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Damian Schenkelman</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"font-family:Calibri;font-size:small\">http://blogs.southworks.net/dschenkelman</span></a></span></p>",
    "PostedDate": "2009-06-19T14:16:21.5-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "203568",
    "ThreadId": "60108",
    "Html": "<p>Unfortunately, mocking out the DelegateCommand doesn't make a lot of sense in my case.&nbsp; I am testing my ViewModel behavior, which is composed of several DelegateCommands.&nbsp; The logic that the DelegateCommand wraps is what I want to test, so mocking it out would muddy the code significantly if I want to test the two delegates it wraps.&nbsp; For example, here is a VERY simple ViewModel that I might want to test:</p>\r\n<p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span><span style=\"color:MediumTurquoise\"> ViewModel\r\n</span>{\r\n    <span style=\"color:Blue\">public</span> ViewModel()\r\n    {\r\n        _searchCommand = <span style=\"color:Blue\">new</span> DelegateCommand&lt;<span style=\"color:Blue\">object</span>&gt;(ExecuteSearch, SearchText.Length &gt; 0);\r\n    }\r\n\r\n    <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">string</span> _searchText;\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> SearchText\r\n    {\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> _searchText; }\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">set</span>\r\n        {\r\n            _searchText = value;\r\n            _searchCommand.NotifyCanExecuteChanged();\r\n        }\r\n    }\r\n\r\n    <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">readonly</span> DelegateCommand&lt;<span style=\"color:Blue\">object</span>&gt; _searchCommand;\r\n    <span style=\"color:Blue\">public</span> ICommand SearchCommand { <span style=\"color:Blue\">get</span> { <span style=\"color:Blue\">return</span> _searchCommand; } }\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>To test this, it really requires that the ViewModel relies on the concrete implementation of DelegateCommand, not a mock... since all the behavior is delegated by the DelegateCommand itself.</p>\r\n<p>Because of this, simply setting the SearchText in a test will cause an exception.&nbsp; Plus, I might want t test that validates the &quot;CanExecuteChanged&quot; event gets fired when SearchText is set.&nbsp; In either case, I don't want to mock out the DelegateCommand.</p>\r\n<p>Unfortunately, in the current state of the code, I cannot write tests against the CAL DelegateCommand.&nbsp; Of course, it is VERY easy to implement my own... but I am hoping to not re-invent the wheel.</p>\r\n<p>I will do as you suggested... submit it to the &quot;Issue Tracker&quot;.</p>\r\n<p>Thanks,</p>\r\n<p>Brian</p>",
    "PostedDate": "2009-06-19T18:15:36.64-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]