[
  {
    "Id": "870861",
    "ThreadId": "371332",
    "Html": "\r\n<p>I am implementing a WPF client application in MVVM architecture using PRISM (I am new to PRISM).</p>\r\n<p>The WPF application has 3 main regions :</p>\r\n<ul>\r\n<li>Left Region </li><li>Right Region </li><li>Side Region </li></ul>\r\n<p>The left region has a view with a 'Fetch Button', that when pressed should connect to a 'FETCH' WCF service, fetch items, disconnect from the service and present the items in the view.</p>\r\n<p>The right region has a view with no buttons. This view should connect every 10 minutes to the 'POLL' WCF service, fetch items, disconnect from the service and present the items in the view.</p>\r\n<p>The side region has a view with no buttons. This view should connect to the 'NOTIFICATIONS' WCF service,&nbsp;<strong>and stay connected to it during the whole application life cycle</strong>. It should receive callbacks from the service, that should be\r\n presented in the Side view.</p>\r\n<p>Here is an&nbsp;<a rel=\"nofollow\" href=\"http://s11.postimage.org/xfjheqc0h/SO_Question_4.png\">image</a>&nbsp;showing what it should look like:</p>\r\n<p><strong>Questions :</strong></p>\r\n<ol>\r\n<li>\r\n<p>What should I pass on to the constructor of the 'FETCH MODULE' that includes the 'Fetch View' ? should it be the service itself or should it be some channel factory ? I think it should be some kind of channel factory, because the connection to the 'Fetch\r\n WCF Service' needs to be initiated every time the user pressed the 'fetch' button.</p>\r\n</li><li>\r\n<p>Same question goes for the 'POLL MODULE'.</p>\r\n</li><li>\r\n<p>Regarding the 'NOTIFICATIONS MODULE' - should I pass a Singleton instance of the 'Notification Service Client' ? (since the application needs to open only one client to the service, and it should stay connected all the time)</p>\r\n</li><li>\r\n<p>In order to avoid the 'Notifications' client faulting because of a timeout, I need to implement some sort of 'heartbeat', that will call a stub method on the 'Notifications' WCFservice, so that it doesn't timeout. Where should I place the code for the heartbeat\r\n ? should it be in the 'NOTIFICATIONS MODULE' ? who should initiate it ? (I believe it should run in some sort of background thread)</p>\r\n</li><li>\r\n<p>I am currently using MEF, and I don't really know what I am doing (I decorated the views with [Export] and the [ViewModel] setter with [Import] etc, but I still don't understand how I control who gets loaded and when). In addition - I don't understand how\r\n the Dependency Injection works in MEF. What are the differences between using 'MEF Bootstrapper' and 'Unity Bootstrapper' ?</p>\r\n</li><li>\r\n<p>I have seen some people use MEF and just use [Import] and [Export] attributes, and some people that inherit their modules from 'IModule' and implement 'InitializeModule' with EventAggreagator, Container and RegionManager. What are the differences between\r\n these approaches, and when should you use each approach ?</p>\r\n</li><li>\r\n<p>Do you recommend using the 'Add Service Reference...' or to manually create an 'IChannelFactory' ? (PROs \\ CONs)</p>\r\n</li><li>\r\n<p>Should the service clients be part of the Modules or part of the Infrastructure ?</p>\r\n</li><li>\r\n<p>I have searched a lot on the internet for samples of WPF&#43;PRISM&#43;WCF and could not find any good samples I can use, so I can understand how to inject the services into my view-models. Can anyone offer any examples \\ sample links ?</p>\r\n</li></ol>\r\n<p>Following 4 questions are a&nbsp;<strong>tough cookie:</strong></p>\r\n<ol>\r\n<li>\r\n<p>All 3 WCF services I have mentioned use the same 'Username&#43;Password' authentication method, which means I need to pop-up a 'Login' window when the application loads. What is the best practice for doing such a thing in PRISM and MVVM ? Should the 'Login'\r\n window replace the 'Shell' window ? (I don't think so, so what should it be ?)</p>\r\n</li><li>\r\n<p>When the user enters the username&#43;password - Should I try to connect to just the first service, and if it succeeds - disconnect from it and close the 'Login' view (meaning, I assume that the connection will succeed with the other services).</p>\r\n</li><li>\r\n<p>Where could I store the username&#43;password the user has entered, so that the application can keep on reconnecting to the services without requesting the user to provide the credentials each time ?</p>\r\n</li><li>\r\n<p>What do you advise should be the approach I take if for some reason - one of the modules tries to connect to one of the WCF services, and doesn't succeed because of credentials ? Should I raise an event that forces all other modules to disconnect from their\r\n services, and then pop-up the 'Login' view ?</p>\r\n</li></ol>\r\n<p><strong>Sorry for the long post ...</strong></p>\r\n",
    "PostedDate": "2012-07-17T08:39:15.01-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "874130",
    "ThreadId": "371332",
    "Html": "<p>Hi,</p>\r\n<p>Take into account that, as far as I know, there is no official guidance regarding <strong>WCF Services</strong> in <strong>Prism</strong>. However, I will try to answer your questions within the scope of Prism the best I can:</p>\r\n<ol>\r\n<li>\r\n<p>In my opinion, which of the two services (the &ldquo;<strong>Fetch WCF Service</strong>&rdquo; or the &ldquo;<strong>channel factory</strong>&rdquo; service) you should pass will depend mostly on your personal preferences and requirements. For example, if in your implementation you initiate the &ldquo;<strong>Fetch WCF Service</strong>&rdquo; each time you need to fetch items and you will be doing this through a channel factory, then it make sense to inject the channel factory in the module&rsquo;s constructor.</p>\r\n</li>\r\n<li>\r\n<p>Same as above.</p>\r\n</li>\r\n<li>\r\n<p>In this case, it makes sense to pass a singleton instance of the &ldquo;<strong>Notification Service Client</strong>.&rdquo; However, I believe this too will depend mostly on your personal preferences and requirements. For example, you may want to make the code in each module &ldquo;consistent&rdquo; with the other ones (for example, passing always a &ldquo;channel factory&rdquo;) or you may want to implement some logic to reinitialize the service in case of failure, etc.</p>\r\n</li>\r\n<li>\r\n<p>As a possible approach, I believe that initializing a background thread in the &ldquo;<strong>Notifications Module</strong>&rdquo; to implement this &ldquo;heart beat&rdquo; could be reasonable since this is related to the notifications logic only and the module knows the service. However, take into account that <strong>Prism</strong> does not provide guidance about background threads either and that, once the initialization of a module is completed, the module instance is garbage collected unless a strong reference is created (hence, you will need to think how to reference and control this background thread in the module).</p>\r\n</li>\r\n<li>\r\n<p>The most important difference between them is that the <strong>MEFBootstrapper</strong> is prepared to be used with <strong>MEF</strong> and the <strong>UnityBootstrapper</strong> is prepared to be used with <strong>Unity</strong> (you cannot use the <strong>UnityBootstrapper</strong> with <strong>MEF</strong> and backwards.)</p>\r\n<p>Generally speaking and based on my understanding, when you ask <strong>MEF</strong> to resolve a class, it will check it in order to find any [<strong>Import</strong>] or [<strong>ImportingConstructor</strong>] attributes that need to be satisfied. To do this, <strong>MEF</strong> checks the <strong>exported classes</strong> in order to find the required ones and compose them. To compose those classes that are required by the first one, <strong>MEF</strong> check them in order to find any [<strong>Import</strong>] or [<strong>ImportingConstructors</strong>] attributes and so on. After resolving this &ldquo;chain&rdquo; of dependencies <strong>MEF</strong> returns the corresponding instance of the class.</p>\r\n<p>This is a very simplified explanation of how <strong>MEF</strong> inject dependencies. If you are interested in this topic, I believe you could find better support about it in the <strong>MEF</strong> site:</p>\r\n<ul>\r\n<li><a href=\"http://mef.codeplex.com/\">MEF CodePlex Site&nbsp;</a></li>\r\n<li><a href=\"http://mef.codeplex.com/wikipage?title=Guide&amp;referringTitle=Home\">MEF Programming Guide</a></li>\r\n</ul>\r\n<p>Also, you can find more information about MEF and Unity in the following chapter of the Prism documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921140%28v=pandp.40%29\">Chapter 3: Managing Dependencies Between Components</a> </li>\r\n</ul>\r\n</li>\r\n<li>\r\n<p>I am sorry but I don't understand to which \"approaches\" you are referring. In <strong>Prism</strong>, a module must always inherit from <strong>IModule </strong>and its <strong>Initialize </strong>method will always run.</p>\r\n</li>\r\n<li>\r\n<p>Again, <strong>Prism</strong> does not provide guidance about this topic and I believe this will depend mostly of your personal preferences and the requirements of your scenario.</p>\r\n</li>\r\n<li>\r\n<p>In my opinion, the implementation of the services should be part of the <strong>Modules</strong>, while the interfaces implemented by those services (which will be used to register them in the container) should be in the <strong>Infrastructure </strong>project. However, this will depend on how you want to distribute the logic of your application.</p>\r\n</li>\r\n<li>\r\n<p>I believe you could find the following sample by Guido Maliandi interesting, where <strong>WCF services</strong> are included in a <strong>Prism </strong>application. Although the application is developed in <strong>Silverlight</strong>, it can provide useful pointers on how to use <strong>WCF </strong>in <strong>Prism</strong>:</p>\r\n<ul>\r\n<li><a href=\"http://blogs.southworks.net/gmaliandi/2011/10/using-wcf-services-in-prism-silverlight-applications/\">Using WCF services in Prism Silverlight applications</a> </li>\r\n</ul>\r\n<p>Also, if you want a more complex \"real life\" scenario of WCF services in Prism, you can check the <a href=\"http://archive.msdn.microsoft.com/VideoEditor\">Microsoft Media Platform Video Editor</a> which was built using <strong>Prism v2</strong></p>\r\n</li>\r\n<li>\r\n<p>Also, I believe you could find the following approach for an authentication scenario (also by Guido Maliandi) containing a <strong>login screen</strong> useful too :</p>\r\n<ul>\r\n<li><a href=\"http://blogs.southworks.net/gmaliandi/2011/10/authentication-and-role-based-authorization-in-prism-v4/\">Authentication and role based authorization in Prism v4</a></li>\r\n</ul>\r\n</li>\r\n<li>\r\n<p>How you should handle this will depend mostly on your personal preferences and requirements. Personally, I would check the connection to all services before accepting the user; or even better, authorize the user through other means (for example, and authorization service).</p>\r\n</li>\r\n<li>\r\n<p>As a possible approach, you could simply store the user and password in a <strong>shared service</strong> which could be accessed when needing to connect to the WCF services. For more information regarding shared services you could check the following chapter of the <strong>Prism </strong>documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28v=pandp.40%29\">Chapter 9: Communicating Between Loosely Coupled Components</a></li>\r\n</ul>\r\n</li>\r\n<li>\r\n<p>What you mentioned seems to be a valid approach for this case. Also you could show an error message or handle each module separately (if a module could not connect to the service, only that module is affected and the others could keep working.) However, I believe this is more of a design decision and will depend on the requirements of your scenario.</p>\r\n</li>\r\n</ol>\r\n<p>Take into account that most of the questions are highly related to design decision which, in my opinion, does not have a correct &ldquo;approach,&rdquo; but depend mostly of the requirements on the application, and the personal choices.</p>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-07-18T10:44:24.323-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "874396",
    "ThreadId": "371332",
    "Html": "<p>Thanks so much.</p>\r\n<p>Your help is much appreciated...</p>\r\n<p>I have come accross so many problems trying to use 'async WCF clients' in my WPF PRISM app, that need to supply a username+password credentials.</p>\r\n<p>It just seems like PRISM was not meant for such stuff...</p>",
    "PostedDate": "2012-07-18T12:33:33.353-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]