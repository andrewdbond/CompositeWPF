[
  {
    "Id": "837389",
    "ThreadId": "356066",
    "Html": "<p>In my project I have created classes that store the data for my project. I would imagine that some data models are inherently singleton type and some data models are instance based. I'm wondering what should be responsible for loading the data into these  class objects and what is responsible for storing it? The models have the capability of loading the data from disk, but something has to manage the current instance(s) of the data....</p>\n<p>For example, let's consider visual studio, or a similar type application. Visual studio has the capability of having a \"Solution\" which contains projects, files and data. Now, imagine, if there were a SolutionModule which contained all the logic for working  with solutions. It would expose views for SolutionExplorer, SolutionNavigator, and the like.&nbsp;If this application didn't have the SolutionModule perhaps it would still be able to open and edit single code files, but would have no concept of a solution project.  We also voluntarily impose the restriction that only one solution can be open at any time.</p>\n<p>Now, it is clear there would need to be a SolutionExplorerViewModel and a SolutionNavigatorViewModel, each of these views depend on the instance of the Solution class. But, where exactly do they get that instance? Where is it stored?</p>\n<p>Do we use dependency injection of the data model itself? I would not think so, because then the data model would need to be registered (I assume in the SolutionModule if using unity) as a Singleton, but then where would the logic be stored to implement commands  for Loading, Saving, or Closing a solution?</p>\n<p>I would think that perhaps a SolutionController, or SolutionService needs to be implemented. In the Prism examples they have both services and controllers. Why the distinction? What's the difference between a \"service\" and a \"controller\"? Right now, my assumption  is I would need to implement a SolutionController that holds a reference to the current solution data module, and has methods or perhaps commands to Load, Open, Save a solution.</p>\n<p>You know.. that brings up another good question. This application also has a main menu. Just like visual studio, it has options in the menu that interact with the current solution (open, save). Would it be best for this proposed SolutionController to implement  actual Commands that are passed to the MenuService? Or would it be best for the SolutionModule.Initialize method to take care of setting up the commands for interacting with SolutionController?</p>\n<p>I again, think it would make sense for the SolutionController to create its own commands and interact with the MenuService... Is it then, that the SolutionModule.Initiliaze would create and register an instance of the ISolutionController interface as a SolutionController,  which then would during construction invoke the IMenuService to add its commands to the appropriate Menu?</p>\n<p>Let me know if I'm thinking on the right track.. there's a lot of talk about creating ViewModels for Views or Views for ViewModels, etc. I'm a bit more confused how where, how, and when to interact with the vast amount of data behind my application. (none  of which is database oriented).</p>\n<p>Thanks,</p>\n<p>&nbsp;</p>",
    "PostedDate": "2012-05-16T13:08:27.147-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "837863",
    "ThreadId": "356066",
    "Html": "<p>Hi,</p>\r\n<p>First of all take into account that the implementation details of your application will depend mostly on your personal preferences and the requirements of your scenario.</p>\r\n<p>Based on my understanding you could benefit from implementing a repository that will mediate between the domain and data mapping layers you could have, acting like an in-memory domain object collection. In other words the repository will encapsulate the set of objects persisted in a data store and the operations performed over them.</p>\r\n<p>You could find more information about this in the following resources:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921146(v=pandp.40)\">Appendix B: Patterns in the Prism Library</a> </li>\r\n<li><a href=\"http://www.martinfowler.com/eaaCatalog/repository.html\">Repository (abbreviated version)</a></li>\r\n<li><a href=\"http://compositewpf.codeplex.com/discussions/276985 \">Data Access across modules</a></li>\r\n</ul>\r\n<p>Also you could benefit from the use of <a href=\"http://msdn.microsoft.com/en-us/library/ff921122(v=pandp.40)#sec7\">shared services</a> to access this repository from across your different modules without them knowing its specific implementation. Then your view models could interact with your repository and update its corresponding values.</p>\r\n<p>Take into account that the <strong>Controller pattern</strong> allows you to separate the responsibility of creating and displaying views into a controller class. On the other hand <strong>Services </strong>are components that encapsulate <strong>non-UI related</strong> functionality, such as logging, exception management, and data access. These can be defined by the application or within a module. Usually <strong>Services </strong>are registered with the dependency injection container so that they can be located or constructed as required and used by other components that depend on them.</p>\r\n<p>Also, I believe you could check the <a href=\"http://msdn.microsoft.com/en-us/library/ff921074(v=pandp.40)\">Stock Trader RI </a>application as a reference that illustrates a common baseline architecture. There you could also find different approaches on how commanding can be used inside <strong>Composite Applications</strong>.</p>\r\n<p>Additionally I believe you could find the following thread interesting:</p>\r\n<ul>\r\n<li><a href=\"http://compositewpf.codeplex.com/discussions/241013\">How to create the optimal infrastructure?</a></li>\r\n</ul>\r\n<p>I hope you find this useful,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-05-17T13:27:08.64-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "838151",
    "ThreadId": "356066",
    "Html": "<p>I do not think the Repository pattern helps me. I read about it and it seems <strong> overly complicated</strong> for what I need. I don't need complex querying logic of databases, etc.</p>\n<p>Like I said, all I need is the ability to add logic including opening and saving a project and getting the data from within it. The projects are XML based files that would get loaded into an object-oriented data model.&nbsp;</p>\n<p>Please give me a simple example. I need some basic commands for opening from file, saving to file. Then that instance of the project needs to be able to be accessed from within the same Module's &nbsp;ViewModels. This sounds simple, and I need a simple solution.</p>\n<p>Suggestions?</p>",
    "PostedDate": "2012-05-18T07:44:09.06-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "838230",
    "ThreadId": "356066",
    "Html": "<p>Hi,</p>\n<p>In my opinion you could define this logic in a <a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28v=pandp.40%29#sec7\"> shared service</a>. There you can define your custom implementation to retrieve and update your data models.</p>\n<p>By using a dependency injection container, you could resolve this custom service implementation through a common Interface, this way you should be able  to consume this information for example in your different view models in a different module.</p>\n<p>An example of this can be found in the <strong>StockTrader RI,</strong> particularly in the <strong>MarketFeedService.cs</strong> and <strong>MarketHistoryService.cs</strong>, which exposes the data obtained from parsing two <strong>XML </strong>files. This services are registered as singletons in the container trough a common interface (<strong>IMarketFeedService </strong>and <strong>IMarketHistoryService</strong>) so they can be consumed by other modules through them.</p>\n<p>Regards,</p>\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-05-18T11:18:40.243-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "839083",
    "ThreadId": "356066",
    "Html": "\r\n<p>Thanks for your help so far. I read the book front to back and looked over the examples but I still wasn't clear about the data models and some of the specifics of implementing my application using Prism/MVVM. This helps a lot but I could still use a little\r\n more guidance. Let me make an effort to be more exact about what I'm trying to accomplish.<span style=\"text-decoration:underline\"> I just want to make sure I start off on the right foot, so that I can use these approaches for the rest of my future modules.</span></p>\r\n<ol>\r\n<li>I choose to use unity, and I've divided my application up into several modules. Each module has a Module class that implements IModule. The module I'm working on is my &quot;ProjectModule&quot; (Or at least that's what I'm calling it here for simplicity)\r\n</li><li>The application's project includes the following: List of locations, List of times, list of associated data files (for given time, place).\r\n</li><li>The application's projects are stored as XML. Objects representing the different classes are created from the XML file when it is loaded.\r\n</li><li>There will be<em><span style=\"text-decoration:underline\"> three views</span></em> for this module. A view of the list of locations, list of times, and a view of data files in the project.\r\n</li><li>There will be commands in the MainMenu (if it exists) that allow the user to view each of these three views (similar to solution explorer). I've implemented a MainMenuService\r\n<em>in a separate module</em> that has commands for adding MenuItems. </li><li>The three views should not be displayed when no project is open, and should be displayed by default when a project is opened.\r\n</li></ol>\r\n<p>So.. would this be about the right idea?</p>\r\n<ol>\r\n<li>ProjectModule.Initialize method would register the Services and Controllers for the module?\r\n</li><li>ProjectController would create the 3 views and have commands to switch to and display each one. The project controller could find the IMenuService if it exists and add a command to the MainMenu? It would subscribe to events from the ProjectService to handle\r\n displaying views. </li><li>The ProjectService could keep the current instance of the Project and allow other Modules to retrieve it, close it, open etc. The Project service may have events that it publishes when such things happen.\r\n</li></ol>\r\n<p>Here's where I'm confused or unsure of the details.</p>\r\n<ol>\r\n<li>What exactly is normal to do in the Module.Initialize method? The StockTrader example is\r\n<strong>very poor </strong>&nbsp;because it uses a custom attribute and <strong>does not use the initialize method.</strong> I would like to do my work in the Module initialize instead of a custom attribute. However, I do not know if I should create the 3 views\r\n in Initialize and add them to the region, or create the Controller and let it create the views and add them to their regions. Should the module's initialize method register the ProjectService as well?\r\n</li><li>Should the controller implement the commands for opening, saving, and closing a project? Does it add the commands to the IMainMenuService? The logic for saving and opening projects, wouldn't that be in the IProjectService? So, does the controller implement\r\n these commands and call into the ProjectService to accomplish them? </li></ol>\r\n<p>There's one more concern of mine, and I haven't understood this from the book either.</p>\r\n<p>I need to be able to detect if data is added to the project to make sure the views update. I understand that this should work through Data Bindings, IPropertyChanged, and ICollectionChanged. Here's my questions..</p>\r\n<ol>\r\n<li>Does the ListCollectionView class automatically synchronize / databind? If so, how does it work? The constructor takes an IList and does not require a&nbsp;ObservableCollection&lt;T&gt;, or a ICollectionChanged. Do views automatically update when the underlying\r\n data changes? </li><li>For all of my project data, &nbsp;I cannot implement ICollectionChanged or ObservableCollection&lt;T&gt; because they\r\n<strong>do not exist</strong> for one of the target platforms in which I'm using my code. (The library for these classes is shared with the\r\n<strong>CompactFramework 3.5</strong>). How would I ensure that my Views automatically update when the data changes? I could implement my own version of ObservableCollection which has events when the collection changes. However, I would need a way to link this\r\n to the ViewModels and then through that the Views. </li></ol>\r\n",
    "PostedDate": "2012-05-21T12:59:13.067-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "839615",
    "ThreadId": "356066",
    "Html": "<p>Hi,</p>\r\n<p>In my opinion the architecture you described, seems to be like a valid approach for this scenario.</p>\r\n<p>Regarding your first concern, take into account that in the <strong>Module.Initialize</strong> method, you can implement whatever logic is required to initialize and integrate the module's functionality with the application, that is to say registering views, registering additional services or extending the application's functionality.</p>\r\n<p>Therefore it wouldn't be wrong if you want to register views in a region when the modules initializes. On the other hand if showing your views will depend on a particular event like when your project is opened, then creating a <strong>Controller</strong>, which for example would subscribe to a<strong> loosely coupled event </strong>to handle the initialization and construction of the views, sounds like a logical choice. Also it seems fine to register your <strong>ProjectService </strong>in this method.</p>\r\n<p>Regarding where to implement the commands for opening, saving, and closing a project, I believe this will depend mostly on your personal preferences and who will be consuming these commands. As a possible&nbsp; example you could check the <strong>WatchListService </strong>in the <strong>StockTrader RI </strong>which consumes the <strong>marketFeedService</strong>, and based on this service exposes the commands that are consumed by the view models.</p>\r\n<p>About the <strong>ListCollectionView </strong>class you mentioned, as far as I know the corresponding view will be automatically updated if the source collection implements the <strong>INotifyCollectionChanged </strong>interface, then changes raised by the <strong>CollectionChanged </strong>event will be propagated to the view. Hence, using a collection that implements this interface like the <strong>ObservableCollection </strong>class will be required to automatically synchronize with the view.</p>\r\n<p>You could find more information about this in the following <strong>MSDN </strong>article:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/system.windows.data.listcollectionview.aspx\">ListCollectionView Class</a></li>\r\n</ul>\r\n<p>Finally, as far as I know currently <strong>Prism </strong>does not provide support or guidance for <strong>CompactFramework 3.5</strong>. As you can see in the source code <strong>Prism </strong>provides a version of its library for <strong>WPF </strong>/ <strong>Silverlight </strong>and <strong>Windows Phone 7</strong> but not for the aforementioned framework.</p>\r\n<p>Therefore, I believe you could find better support on how to implement the <strong>MVVM </strong>pattern in <strong>Compact Framework 3.5</strong>&nbsp; for example in the <a href=\"http://social.msdn.microsoft.com/Forums/en-US/netfxcompact/threads\">.NET Compact Framework forums</a>.<br /><br />Regards,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-05-22T13:54:51.267-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "839629",
    "ThreadId": "356066",
    "Html": "<p>Just for clarification I'm not using Prism in any way or MVVM (oops?) in the <strong>compactframework </strong>=). There are two applications here, one on a <strong>device </strong>and one on the <strong>desktop</strong>.</p>\r\n<p>It's just that data files and project files need to be opened in the CF. Therefore I have a data library that includes these types only for re-use. The <strong>Desktop </strong>Application, which is implemented using Prism/MVVM, references this library then wraps that up in a Service for the data model etc.. I'll probably just have to wrap it in an ObservableCollection on the desktop so that it can support databinding.</p>\r\n<p>That example for the WatchListService is helpful, it looks like it demonstrates what I could be doing, just implement my command in the service, wrap it in my ViewModel and expose it to the View that way.</p>\r\n<p>Thanks a lot for your help.. after I complete this module I should have demonstrated several patterns using Prism that will be beneficial for myself and other developer to use as an example for implementing the future modules.</p>\r\n<p>Thanks Again!</p>\r\n<p>-Alan</p>",
    "PostedDate": "2012-05-22T14:19:26.08-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]