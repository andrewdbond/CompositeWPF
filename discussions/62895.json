[
  {
    "Id": "213562",
    "ThreadId": "62895",
    "Html": "<p>I may be understanding incorrectly.</p>\r\n<p>I have a WPF application with the following:</p>\r\n<p>Bootstraper.vb</p>\r\n<p><span style=\"font-size:x-small\">&lt;font size=&quot;2&quot;&gt;\r\n<p>&nbsp;</p>\r\n&lt;/font&gt;</span></p>\r\n<p><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#0000ff;font-size:x-small\">&nbsp; <span style=\"color:Blue\">Protected</span> <span style=\"color:Blue\">Overrides</span> <span style=\"color:Blue\">Function</span> CreateShell() <span style=\"color:Blue\">As</span> System.Windows.DependencyObject<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">Dim</span> shell <span style=\"color:Blue\">As</span> Shell = Container.Resolve(Of Shell)()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shell.Content = Container.Resolve(Of ShellPresentationModel)()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shell.Show()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">Return</span> shell<br>&nbsp;&nbsp;&nbsp; <span style=\"color:Blue\">End</span> <span style=\"color:Blue\">Function</span><br></span></span><span style=\"color:#0000ff;font-size:x-small\"></span></p>\r\n<p><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#000000\">Shell.xaml</span></span></span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#0000ff;font-size:x-small\">\r\n<p>&nbsp;</p>\r\n</span>&lt;font size=&quot;2&quot; color=&quot;#0000ff&quot;&gt;\r\n<p>&nbsp;</p>\r\n&lt;/font&gt;</span></p>\r\n<p>ShellPresentationModel.vb</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">Public</span> <span style=\"color:Blue\">Class</span> ShellPresentationModel\r\n\r\n<span style=\"color:Blue\">#Region</span> <span style=\"color:#A31515\">&quot;Fields&quot;</span>\r\n    <span style=\"color:Blue\">Private</span> _mainRegion <span style=\"color:Blue\">As</span> <span style=\"color:Blue\">New</span> Region\r\n    <span style=\"color:Blue\">Private</span> _globalCommandsRegion <span style=\"color:Blue\">As</span> <span style=\"color:Blue\">New</span> Region\r\n<span style=\"color:Blue\">#End Region</span>\r\n\r\n<span style=\"color:Blue\">#Region</span> <span style=\"color:#A31515\">&quot;Properties&quot;</span>\r\n    <span style=\"color:Blue\">Public</span> <span style=\"color:Blue\">Property</span> MainRegion() <span style=\"color:Blue\">As</span> Region\r\n        <span style=\"color:Blue\">Get</span>\r\n            <span style=\"color:Blue\">Return</span> _mainRegion\r\n        <span style=\"color:Blue\">End</span> <span style=\"color:Blue\">Get</span>\r\n        <span style=\"color:Blue\">Set</span>(<span style=\"color:Blue\">ByVal</span> value <span style=\"color:Blue\">As</span> Region)\r\n            _mainRegion = value\r\n        <span style=\"color:Blue\">End</span> <span style=\"color:Blue\">Set</span>\r\n    <span style=\"color:Blue\">End</span> <span style=\"color:Blue\">Property</span>\r\n\r\n    <span style=\"color:Blue\">Public</span> <span style=\"color:Blue\">Property</span> GlobalCommandsRegion() <span style=\"color:Blue\">As</span> Region\r\n        <span style=\"color:Blue\">Get</span>\r\n            <span style=\"color:Blue\">Return</span> _globalCommandsRegion\r\n        <span style=\"color:Blue\">End</span> <span style=\"color:Blue\">Get</span>\r\n        <span style=\"color:Blue\">Set</span>(<span style=\"color:Blue\">ByVal</span> value <span style=\"color:Blue\">As</span> Region)\r\n            _globalCommandsRegion = value\r\n        <span style=\"color:Blue\">End</span> <span style=\"color:Blue\">Set</span>\r\n    <span style=\"color:Blue\">End</span> <span style=\"color:Blue\">Property</span>\r\n<span style=\"color:Blue\">#End Region</span>\r\n\r\n    <span style=\"color:Blue\">Public</span> <span style=\"color:Blue\">Sub</span> <span style=\"color:Blue\">New</span>(<span style=\"color:Blue\">ByVal</span> regionManager <span style=\"color:Blue\">As</span> IRegionManager)\r\n        regionManager.Regions.Add(<span style=\"color:#A31515\">&quot;MainRegion&quot;</span>, _mainRegion)\r\n        regionManager.Regions.Add(<span style=\"color:#A31515\">&quot;GlobalCommandsRegion&quot;</span>, _globalCommandsRegion)\r\n    <span style=\"color:Blue\">End</span> <span style=\"color:Blue\">Sub</span>\r\n\r\n<span style=\"color:Blue\">End</span> <span style=\"color:Blue\">Class</span>\r\n</pre>\r\n</div>\r\n<p>ResourceDictionary.xaml</p>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">ResourceDictionary</span> <span style=\"color:Red\">xmlns</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">http://schemas.microsoft.com/winfx/2006/xaml/presentation</span><span style=\"color:Black\">&quot;</span> \r\n    <span style=\"color:Red\">xmlns:x</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">http://schemas.microsoft.com/winfx/2006/xaml</span><span style=\"color:Black\">&quot;</span>\r\n    <span style=\"color:Red\">xmlns:local</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">clr-namespace:FinanceManager</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n    <span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">DataTemplate</span> <span style=\"color:Red\">DataType</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{x:Type local:ShellPresentationModel}</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">DataTemplate</span><span style=\"color:Blue\">&gt;</span>\r\n<span style=\"color:Blue\">&lt;/</span><span style=\"color:#A31515\">ResourceDictionary</span><span style=\"color:Blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>&nbsp;The code thus far comes from the commanding qs.</p>\r\n<p>I want to completely change the style of the window. I will need to handle minimize, maximize, exit and drag events for the window. I put the xaml for the buttons in ResourceDictionary.xaml. I ran into a snag when I went to write the code in ShellPresentationModel.vb. ShellPresentationModel doesn't know about the window. Should I even be trying to skin the window this way? If so, how do I gain access to the current window in ShellPresentationModel?</p>",
    "PostedDate": "2009-07-19T09:20:04.283-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "213934",
    "ThreadId": "62895",
    "Html": "<p>Hi&nbsp;</p>\r\n<p>Are you using the <a href=\"http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=537da1cd-43e1-4799-88e7-a1da9166fb46\">Prism Visual Basic release</a> in your code? The code I have in the <strong>CommandingBootstrapper</strong> is:<br><span style=\"font-size:10pt\" lang=EN-US>Protected Overrides Function CreateShell() As DependencyObject<br></span><span style=\"font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim shell = Container.Resolve(Of Shell)()<br></span><span style=\"font-size:10pt\" lang=EN-US>#If SILVERLIGHT Then<br></span><span style=\"font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application.Current.RootVisual = shell<br></span><span style=\"font-size:10pt\" lang=EN-US>#Else<br></span><span style=\"font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shell.Show()<br></span><span style=\"font-size:10pt\" lang=EN-US>#End If<br></span><span style=\"font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Return shell<br></span><span style=\"font-size:10pt\" lang=EN-US>End Function</span></p>\r\n<p>The usual approach when using Dependency Injection and resolving a UI component and its <strong>Presenter</strong>/<strong>ViewModel</strong> is resolving one of them and injecting the other. For example, you could simply resolve the Shell, which gets its <strong>ViewModel</strong> through <a href=\"http://msdn.microsoft.com/en-us/library/dd203129.aspx\">constructor injection</a> and set it as the <strong>DataContext</strong> (not the Content). In this scenario, the <strong>CreateShell</strong> method would look like the one above. You can also set a property in the <strong>ViewModel</strong> that keeps a reference to the Shell window, which is the goal of all this. The following code could be in the Shell&rsquo;s constructor:</p>\r\n<p><span style=\"font-size:10pt\" lang=EN-US>Public Sub New(ByVal model As ShellPresentationModel)</span></p>\r\n<p><span style=\"font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Me.DataContext = model</span></p>\r\n<p><span style=\"font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; model.View = Me</span></p>\r\n<p><span style=\"font-size:10pt\" lang=EN-US>End Sub</span></p>\r\n<p><span style=\"color:#1f497d\" lang=EN-US>&nbsp;</span></p>\r\n<p>You might find useful as a starting point the Reference Implementation that uses a presenter for the Shell and uses Styles to skin the popup windows. There is also a good post from <span style=\"color:#1f497d\"><a href=\"http://blogs.southworks.net/jdominguez/\">Julian Dominguez</a>, </span><a title=\"Permanent Link to Presentation Model with DataTemplates in CompositeWPF (Prism) Sample\" href=\"http://blogs.southworks.net/jdominguez/2008/09/presentation-model-with-datatemplates-in-compositewpf-prism-sample/\">Presentation Model with DataTemplates in CompositeWPF (Prism) Sample</a>, that provides a sample of the commanding quickstart (of Prism v1) modified to use DataTemplates.</p>\r\n<p><span style=\"color:#1f497d\" lang=EN-US>&nbsp;</span></p>\r\n<p>You might find useful the following topics of the Unity documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd203172.aspx\">Dependency Injection Types and Mappings</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd203204.aspx\">System Design When Using a Dependency Injection Container</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd203191.aspx\">Key Scenarios</a></li>\r\n</ul>\r\n<p>Please let me know if this helps.</p>\r\n<p>Damian Schenkelman<br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2009-07-20T11:44:47.053-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]