[
  {
    "Id": "815469",
    "ThreadId": "350035",
    "Html": "\r\n<p>Hi</p>\r\n<p>In my viewmodel I have properties as follows:</p>\r\n<pre><span>private</span><span> </span><span>MyModel_DTO</span><span> _myModel_DTO</span><span>;</span><span> \r\n \r\n</span><span>public</span><span> </span><span>int</span><span> </span><span>OrderID</span><span> \r\n</span><span>{</span><span> \r\n \r\n</span><span>get</span><span> </span><span>{</span><span>return</span><span> _myModel_DTO</span><span>.</span><span>OrderID</span><span>;}</span><span> \r\n</span><span>set</span><span> \r\n</span><span>{</span><span> \r\n</span><span>if</span><span> </span><span>(</span><span>_myModel_DTO</span><span>.</span><span>OrderID</span><span> </span><span>!=</span><span> value</span><span>}</span><span> \r\n</span><span>{</span><span> \r\n_myModel_DTO</span><span>.</span><span>OrderID</span><span> </span><span>=</span><span> value</span><span>;</span><span> \r\n</span><span>RaisePropertyChanged</span><span>(</span><span>OrderID</span><span>);</span><span> \r\n</span><span>}</span></pre>\r\n<p>Also in my viewmodel I implement the INavigationAware interface. In the OnNavigatedTo method I check the passed in parameter (OrderID) and make a call to my service to fill the _myModel_DTO object.</p>\r\n<p>This call to the service is using reactive extentions.</p>\r\n<p>My problem is that 'get {return _myModel_DTO.OrderID;}' is being called before the method returns the data resulting in my view not displying any data as it hasn't got any yet.</p>\r\n<p>The _myModel_DTO object does get filled with data eventually but this is after the 'get {return_myModel_DTO.OrderID;}' is called.</p>\r\n<p>The only solution I have at the moment is to call the RaisePropertyChanged event for each property in the OnCompleted event of the rx method.</p>\r\n<p>Is there a better approach to this or can anybody spot an<br>\r\nobvious mistake that I can't.</p>\r\n<p>Thanks</p>\r\n<p>Paul</p>\r\n<p>p.s. I also posted this on the Silverlight forums where I was advised that what I was trying to acheive might not work and would need to change it.&nbsp; Posted here hoping that others that have used the INavigationAware interface have found a workaround\r\n for this.</p>\r\n",
    "PostedDate": "2012-03-26T03:05:19.99-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "815651",
    "ThreadId": "350035",
    "Html": "<p>I'm not sure this would work and don't think it is a great solution, but it might be \"something is better than nothing\" at this point :)</p>\r\n<p>I'm thinking you can try to use a single property exposing your entire DB model.</p>\r\n<p>\r\n<pre>public int MyModel_DTO\r\n{ \r\n \r\nget {return _myModel_DTO;} \r\nset \r\n{ \r\nif (_myModel_DTO != value} \r\n{ \r\n_myModel_DTO = value; \r\nRaisePropertyChanged(MyModel_DTO); \r\n}</pre>\r\n</p>\r\n<p>In your view you would bind to the properties of the model.</p>\r\n<p>... Text = \"{binding MyModel_DTO.OrderId}\"...</p>\r\n<p>Then you could raise the single notify property when the object is loaded.</p>\r\n<pre>RaisePropertyChanged(MyModel_DTO); </pre>\r\n<p>I'm just not sure if raising a notify event on the object would trigger binding updates on it's properties.</p>",
    "PostedDate": "2012-03-26T09:11:34.953-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "815687",
    "ThreadId": "350035",
    "Html": "<p>Hi Paul,</p>\n<p>Based on my understanding of your scenario, I believe you could also try implementing the <strong>IConfirmNavigationRequest </strong>interface provided with Prism. This way you can control if the navigation request is carried out immediately or is deferred. This should allow you to retrieve the parameter passed from the navigation context and to  call the service before the navigation is carried.</p>\n<p>The <strong>IConfirmNavigationRequest </strong>interface derives from the <strong> INavigationAware </strong>interface and adds the <strong>ConfirmNavigationRequest </strong>method. The <strong>ConfirmNavigationRequest </strong>method provides two parameters, a reference to the current navigation context as described earlier, and a callback method that you can call when you want navigation to continue.</p>\n<p>If you want to defer navigation, you can store a reference to the continuation callback that you can call when the service completes. The navigation operation will be pending until you call the continuation callback.</p>\n<p>Take into account that this interface should be implemented in the previous view / view model in the navigated region.</p>\n<p>If you are interested, you could find more information about this in the following chapter of the Prism documentation:</p>\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg430861%28v=pandp.40%29.aspx#sec12\">Confirming or Cancelling Navigation</a> </li>\n</ul>\n<p>Also you could find a sample (\"<strong>ConfirmationCallbackSample</strong>\") which might result handy in the following thread:</p>\n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/270953\">How to defer navigation in PRISM</a> </li>\n</ul>\n<p>I hope you find this helpful,</p>\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a>ï»¿</p>",
    "PostedDate": "2012-03-26T10:21:22.783-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "816153",
    "ThreadId": "350035",
    "Html": "<p>Thanks Imcculloch, Agustin Adami.</p>\r\n<p>Agustin Adami my understanding is that the ConfirmNavigationRequest and also the OnNavigatedFrom methods are called when leaving an active view, am I correct in saying this?&nbsp;</p>\r\n<p>In my senario I'm navigating to a view that is not currently in the region so a new view will need to be created and this does work and in this case the ConfirmNavigationRequest will not be invoked, is this correct?</p>\r\n<p>When navigating to this new view in the OnNavigatedTo method I retreive the parameter(orderid) and call a method in a service to get me the details for this order.&nbsp; This fills an order object as shown above.&nbsp; The view is bound to public properties which in their get/set the values are pulled from the order object so to speak(example above).&nbsp;</p>\r\n<p>It does sound like I need to defer navigation/displaying of the view&nbsp;until the service comes back with the data as the public properties are not updaing in the view as the get accessor has been called before the order object has been filled with data from the service call.</p>\r\n<p>Hope I'm making sence here and have not misunderstood what you are saying.</p>\r\n<p>Thanks</p>\r\n<p>Paul</p>",
    "PostedDate": "2012-03-27T09:09:16.45-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "816215",
    "ThreadId": "350035",
    "Html": "<p>Hi,</p>\n<p>As you mentioned, if you wish to defer navigation using <strong>ConfirmNavigationRequest </strong>you will need to have a previous view that implements this interface in the same region.</p>\n<p>In my opinion, another possible approach could be to perform navigation as usual and then change the visual representation of the view depending if the data is loaded or not:</p>\n<p>First of all, as explained in the <a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.propertychanged.aspx\"> INotifyPropertyChanged.PropertyChanged event discription on MSDN</a>, you can raise the <strong>PropertyChange </strong>event passing an empty string (<strong>String.Empty</strong>) to indicate that all the properties in the view model have changed. Based on my understanding, by doing this you should be able to update all the properties in a single  line:</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: green;\">// Method in the view model...</span>\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> OnCompleted (MyModel_DTO model)\n{\n    <span style=\"color: blue;\">this</span>._MyModel_DTO = model;\n    <span style=\"color: blue;\">this</span>.RaisePropertyChanged(String.Empty);\n}\n</pre>\n</div>\n<p>Then, if you wish the view to not being shown before the data has been retrieved for the service, a possible approach could be to notify the view that \"<em>the view model is loading data</em>,\" so that the view can change its appearance to inform the user  about this. For example, the view could show a <strong>TextBlock </strong>with the legend \"<strong><em>Loading</em></strong>\" over the other components of the view or simply hide the view changing its <strong>Visibility </strong>property. The view model could inform the view of this state through an <strong>InteractionRequest</strong>, exposing a simple property to which the view can bind or using another mechanism of your preference.</p>\n<p>You can inform the view that the view model is loading data in the view model's <strong>OnNavigatedTo </strong>method or in its constructor, and change this state when the service returns the data:</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> MyViewModel : NotificationObject, INavigationAware\n{\n    [ . . . ]\n\n    <span style=\"color: green;\">// The view would bind to this property to know</span>\n    <span style=\"color: green;\">// the \"state\" of the view model.</span>\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">bool</span> IsBusy { <span style=\"color: blue;\">get</span>; <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">set</span>; }\n\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> OnNavigatedTo(NavigationContext navigationContext)\n    {\n        <span style=\"color: blue;\">this</span>.IsBusy = <span style=\"color: blue;\">true</span>;\n        <span style=\"color: blue;\">this</span>.RaisePropertyChanged(<span style=\"color: #a31515;\">\"IsBusy\"</span>);\n\n        <span style=\"color: green;\">// Request of data from the service...</span>\n    }\n\n    <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> OnCompleted (MyModel_DTO model)\n    {\n        <span style=\"color: blue;\">this</span>._MyModel_DTO = model;\n        <span style=\"color: blue;\">this</span>.IsBusy = <span style=\"color: blue;\">false</span>;\n        <span style=\"color: blue;\">this</span>.RaisePropertyChanged(String.Empty);\n    }\n\n    [ . . . ]\n}\n</pre>\n</div>\n<p>In my opinion, by doing something like this you can provide feedback to the user about what the application is doing while being able to keep the abstraction between different views / view models in your application without requiring a lot of code.</p>\n<p>I hope you find these suggestion useful,</p>\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-03-27T12:18:48.477-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "816453",
    "ThreadId": "350035",
    "Html": "<p>Perfect Damian</p>\r\n<p>RaisePropertyChanged(string.empty) worked like a charm, thank you very much.&nbsp; Never knew you could do that with propertychanaged.&nbsp; Also thanks to&nbsp;all others who replied.</p>\r\n<p>Paul</p>",
    "PostedDate": "2012-03-28T02:56:21.81-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]