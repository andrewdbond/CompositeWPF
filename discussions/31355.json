[
  {
    "Id": "104232",
    "ThreadId": "31355",
    "Html": "I am trying to integrate Infragistics xamDockManager and Composite WPF.<br>\r\n<br>\r\nI need to create&nbsp; a RegionAdapter for the TabGroupPane:<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;igDock:XamDockManager Grid.Row=&quot;1&quot; x:Name=&quot;dockManager&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;igDock:DocumentContentHost&nbsp; &gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;igDock:SplitPane &gt;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;igDock:TabGroupPane cal:RegionManager.RegionName=&quot;{x:Static infrastructure:RegionNames.Editor}&quot; &gt;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/igDock:TabGroupPane&gt;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/igDock:SplitPane&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/igDock:DocumentContentHost&gt;<br>\r\n<br>\r\nI've followed the instructions provided in the documentation copying the code form the SelectorRegionAdapter<br>\r\n(TabGroupPane : TabControl and if I use the standard TabControl the SelectorRegionAdapter works fine). <br>\r\n<br>\r\nIn the case of&nbsp; TabGroupPane it gives the following error : TabGroupPane can only contain 'ContentPane' and 'ContentPanePlaceholder' instances.<br>\r\n<br>\r\nIf I were in the Shell code behind, I would do the following (but obviosuly that's not the idea with Composite WPF):<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ContentPane newContentPane = new ContentPane();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newContentPane.Content = textEditorPresenter.View;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newContentPane.Activate();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.dockManager.AddDocument(textEditorPresenter.Title, newContentPane);<br>\r\n<br>\r\nSo, it's not very clear to me where should I add such code to the RegionAdapter.<br>\r\n<br>\r\nAny hint or tip is welcomed. <br>\r\n<br>\r\nThanks,<br>\r\nClaudio. <br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-07-11T12:23:15.863-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "104237",
    "ThreadId": "31355",
    "Html": "Looks like I'm not the only one, but you beat me to it....<br>\r\n:-)<br>\r\nThis is EXACTLY my problem and it looks like we went about the solution in a similar way. I hope it's not too much trouble to wire up. I've posted to the Infragistics forum, too. I'll be sure to respond to&nbsp;this thread if I get it working.\r\n",
    "PostedDate": "2008-07-11T12:44:02.957-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "104666",
    "ThreadId": "31355",
    "Html": "<p>I haven't completely worked this out, but I've been able to bind a collection of views to the TabGroupPane by implementing a custom region adapter <em>and region</em> for the TabGroupPane ItemsControl. I got the message below until I modified the add methods in the custom region to wrap the content in a ContentPane if the input wasn't already one. I also didn't get selection changed functionality working at first because I was setting the tab group pane's ItemsSource property to the regions views collection. Apparently this isn't supported by this extension to the ItemsControl.</p>\r\n<p>I don't like that the TabGroupPane is an ItemsControl, but doesn't support ItemsSource. I had to jump through some hoops to handle when the collection changes instead of just letting it do its thing. This might still come back to bite me. I'm not sure why Infragistics likes to do this sort of thing, but it makes it more difficult to use their controls&nbsp;(ie: InitializeRow instead of ItemDataBound).</p>\r\n<p>I'm not sure if what I've done will work in every case, or even if it works completely for my needs, but I've been able to move forward. If you'd like I could send you what I've got. If it doesn't meet your needs you can modify and share back.</p>\r\n<br>\r\n<div style=\"border-right:medium none;padding-right:0.2em;border-top:#aaa 0.1em dotted;padding-left:0.2em;padding-bottom:0.2em;margin:1em 0em 2.5em 3em;border-left:medium none;padding-top:0.2em;border-bottom:#aaa 0.1em dotted;font-style:italic\"><br>\r\ncpi wrote:<br>\r\nI am trying to integrate Infragistics xamDockManager and Composite WPF.<br>\r\n<br>\r\nI need to create&nbsp; a RegionAdapter for the TabGroupPane:<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;igDock:XamDockManager Grid.Row=&quot;1&quot; x:Name=&quot;dockManager&quot;&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;igDock:DocumentContentHost&nbsp; &gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;igDock:SplitPane &gt;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;igDock:TabGroupPane cal:RegionManager.RegionName=&quot;{x:Static infrastructure:RegionNames.Editor}&quot; &gt;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/igDock:TabGroupPane&gt;<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/igDock:SplitPane&gt;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/igDock:DocumentContentHost&gt;<br>\r\n<br>\r\nI've followed the instructions provided in the documentation copying the code form the SelectorRegionAdapter<br>\r\n(TabGroupPane : TabControl and if I use the standard TabControl the SelectorRegionAdapter works fine). <br>\r\n<br>\r\nIn the case of&nbsp; TabGroupPane it gives the following error : TabGroupPane can only contain 'ContentPane' and 'ContentPanePlaceholder' instances.<br>\r\n<br>\r\nIf I were in the Shell code behind, I would do the following (but obviosuly that's not the idea with Composite WPF):<br>\r\n<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ContentPane newContentPane = new ContentPane();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newContentPane.Content = textEditorPresenter.View;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newContentPane.Activate();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.dockManager.AddDocument(textEditorPresenter.Title, newContentPane);<br>\r\n<br>\r\nSo, it's not very clear to me where should I add such code to the RegionAdapter.<br>\r\n<br>\r\nAny hint or tip is welcomed. <br>\r\n<br>\r\nThanks,<br>\r\nClaudio. <br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n</div>\r\n<br>\r\n",
    "PostedDate": "2008-07-14T17:26:32.083-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "104669",
    "ThreadId": "31355",
    "Html": "Yes, please send it. I was doing it the same way you described until I got to the ItemsSource issue (see http://forums.infragistics.com/forums/t/10521.aspx). <br>\r\nI think once we have something stable we can post it somewhere in this site or send it to Infragistics as a start of something similar to the CAB Kit. <br>\r\n<br>\r\nClaudio. <br>\r\n",
    "PostedDate": "2008-07-14T18:14:02.92-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "106880",
    "ThreadId": "31355",
    "Html": "As I didn't receive any code, I continued developing my own adapter which I have almost finished. <br>\r\nOnce finished I will contribute to http://www.codeplex.com/CompositeWPFContrib<br>\r\n<br>\r\n",
    "PostedDate": "2008-07-24T13:05:43.617-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "106929",
    "ThreadId": "31355",
    "Html": "Sorry, got caught up doing a guidance package for composite wpf. I also ran into a few snags around activating views in the tabpanegroup and haven't had the opportunity to debug. I'd be interested to compare your solution with mine. I've never uploaded anything to codeplex before. I'm not satisfied with the quality of my solution, but I'll upload it and hopefully someone more familiar with Infragistics and Composite WPF can fix errors in implementation. <br>\r\n<br>\r\nI've requested to be a contributor. In the mean time, maybe you can contact me via email and I'll send you what I've got?<br>\r\n",
    "PostedDate": "2008-07-24T16:41:52.18-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "107101",
    "ThreadId": "31355",
    "Html": "I am facing some issues when having more than 1 TabGroupPane. When having 1 TabGroupPane everything works as expected. <br>\r\n<br>\r\nRegarding email, I already contact you on July 14 (via codeplex contact) and I haven't received any feedback.<br>\r\nAlso, I 've requested to be a contributor to the CompositeWPFContrib project. <br>\r\n<br>\r\nThanks,<br>\r\nClaudio. <br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-07-25T08:18:54.013-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "107128",
    "ThreadId": "31355",
    "Html": "<p>OK, I don't want to hold you up, so I'll brave criticism and post the code inline. Take a look and tell me what you think needs work. My implementation requires that the views be added with a name. It may be too tightly coupled to my needs, but it'll be good to try to plug into it and see if it meets your needs.<br>\r\n</p>\r\n<p>using System;<br>\r\nusing System.Collections.Generic;<br>\r\nusing System.Linq;<br>\r\nusing System.Text;<br>\r\nusing System.Windows.Controls.Primitives;<br>\r\nusing Microsoft.Practices.Composite.Regions;<br>\r\nusing System.Windows.Controls;<br>\r\nusing System.Collections.Specialized;<br>\r\nusing Infragistics.Windows.DockManager;<br>\r\nusing Microsoft.Practices.Composite.Wpf.Regions;<br>\r\nusing System.Windows.Data;</p>\r\n<p>namespace Composite.Wpf.Extensions<br>\r\n{<br>\r\n&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;/// Adapter that creates a new &lt;see cref=&quot;Region&quot;/&gt; and binds all<br>\r\n&nbsp;/// the views to the adapted &lt;see cref=&quot;Selector&quot;/&gt;.<br>\r\n&nbsp;/// It also keeps the &lt;see cref=&quot;IRegion.ActiveViews&quot;/&gt; and the selected items<br>\r\n&nbsp;/// of the &lt;see cref=&quot;Selector&quot;/&gt; in sync.<br>\r\n&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;public class TabGroupPaneRegionAdapter : SelectorRegionAdapter<br>\r\n&nbsp;{<br>\r\n&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;/// Adapts an &lt;see cref=&quot;Selector&quot;/&gt; to an &lt;see cref=&quot;IRegion&quot;/&gt;.<br>\r\n&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;/// &lt;param name=&quot;region&quot;&gt;The new region being used.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;/// &lt;param name=&quot;regionTarget&quot;&gt;The object to adapt.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;protected override void Adapt(IRegion region, Selector regionTarget)<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;TabGroupPane typedRegionTarget = regionTarget as TabGroupPane;<br>\r\n&nbsp;&nbsp;&nbsp;if (typedRegionTarget == null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;throw new NotSupportedException(String.Format(&quot;Attempt to adapt {0} using {1} adapter failed. Type not supported.&quot;, regionTarget.GetType().Name, this.GetType().Name));</p>\r\n<p>&nbsp;&nbsp;&nbsp;TabGroupPaneRegion typedRegion = region as TabGroupPaneRegion;<br>\r\n&nbsp;&nbsp;&nbsp;if (typedRegion == null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;throw new NotSupportedException(String.Format(&quot;Attempt to adapt {0} region using {1} adapter failed. Region type not supported.&quot;, region.GetType().Name, this.GetType().Name));</p>\r\n<p>&nbsp;&nbsp;&nbsp;if (regionTarget.ItemsSource != null || (BindingOperations.GetBinding(regionTarget, ItemsControl.ItemsSourceProperty) != null))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidOperationException(Resources.ItemsControlHasItemsSourceException);</p>\r\n<p>&nbsp;&nbsp;&nbsp;if (typedRegionTarget.Items.Count &gt; 0)<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//Control must be empty before setting ItemsSource<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//Not tracking items in the target might be bad. Encountering in attempting to save layout.<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//foreach (object childItem in typedRegionTarget.Items)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; typedRegion.Add(childItem);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;typedRegionTarget.Items.Clear();<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;//typedRegion.Views.CollectionChanged += new NotifyCollectionChangedEventHandler(Views_CollectionChanged);<br>\r\n&nbsp;&nbsp;&nbsp;//this.setViews(typedRegion);</p>\r\n<p>&nbsp;&nbsp;&nbsp;//regionTarget.ItemsSource = region.Views;<br>\r\n&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;/// Attach new behaviors.<br>\r\n&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;/// &lt;param name=&quot;region&quot;&gt;The region being used.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;/// &lt;param name=&quot;regionTarget&quot;&gt;The object to adapt.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;/// &lt;remarks&gt;<br>\r\n&nbsp;&nbsp;/// This class attaches the base behaviors and also listens for changes in the<br>\r\n&nbsp;&nbsp;/// activity of the region or the control selection and keeps the in sync.<br>\r\n&nbsp;&nbsp;/// &lt;/remarks&gt;<br>\r\n&nbsp;&nbsp;protected override void AttachBehaviors(IRegion region, Selector regionTarget)<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;//base.AttachBehaviors(region, regionTarget);</p>\r\n<p>&nbsp;&nbsp;&nbsp;TabGroupPane typedTarget = regionTarget as TabGroupPane;<br>\r\n&nbsp;&nbsp;&nbsp;TabGroupPaneRegion typedRegion = region as TabGroupPaneRegion;</p>\r\n<p>&nbsp;&nbsp;&nbsp;//The behavior uses weak references while listening to events to prevent memory leaks<br>\r\n&nbsp;&nbsp;&nbsp;//when destroying the region but not the control or viceversa.<br>\r\n&nbsp;&nbsp;&nbsp;SelectorRegionSyncBehavior syncBehavior = new SelectorRegionSyncBehavior(regionTarget, region);<br>\r\n&nbsp;&nbsp;&nbsp;syncBehavior.Attach();<br>\r\n&nbsp;&nbsp;&nbsp;//The behavior uses weak references while listening to events to prevent memory leaks<br>\r\n&nbsp;&nbsp;&nbsp;//when destroying the region but not the control or viceversa.<br>\r\n&nbsp;&nbsp;&nbsp;TabGroupPanesSyncBehavior tabSyncBehavior = new TabGroupPanesSyncBehavior(typedRegion, typedTarget, region.Views);<br>\r\n&nbsp;&nbsp;&nbsp;tabSyncBehavior.Attach();<br>\r\n&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;//private void setViews(TabGroupPaneRegion region)<br>\r\n&nbsp;&nbsp;//{<br>\r\n&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; Selector target = base.GetSelector();<br>\r\n&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; TabGroupPane typedTarget = target as TabGroupPane;</p>\r\n<p>&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; if (typedTarget != null)<br>\r\n&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typedTarget.Items.Clear();<br>\r\n&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (object tab in region.Views)<br>\r\n&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typedTarget.Items.Add(tab);<br>\r\n&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // typedTarget.ItemsSource = region.Views;<br>\r\n&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;//}</p>\r\n<p>&nbsp;&nbsp;//private void Views_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp;//{<br>\r\n&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; IRegion region = base.GetRegion();<br>\r\n&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; TabGroupPaneRegion typedRegion = region as TabGroupPaneRegion;</p>\r\n<p>&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; if (typedRegion != null)<br>\r\n&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setViews(typedRegion);<br>\r\n&nbsp;&nbsp;//}</p>\r\n<p>&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;/// Creates a new instance of &lt;see cref=&quot;Region&quot;/&gt;.<br>\r\n&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;/// &lt;returns&gt;A new instance of &lt;see cref=&quot;Region&quot;/&gt;.&lt;/returns&gt;<br>\r\n&nbsp;&nbsp;protected override IRegion CreateRegion()<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;return new TabGroupPaneRegion();<br>\r\n&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;private class TabGroupPanesSyncBehavior<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;private readonly WeakReference _collectionWeakReference;<br>\r\n&nbsp;&nbsp;&nbsp;private readonly WeakReference _regionWeakReference;<br>\r\n&nbsp;&nbsp;&nbsp;private readonly WeakReference _selectorWeakReference;</p>\r\n<p>&nbsp;&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;/// Initializes a new instance of &lt;see cref=&quot;CollectionActiveAwareBehavior&quot;/&gt;.<br>\r\n&nbsp;&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;/// &lt;param name=&quot;collection&quot;&gt;The collection to monitor.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;&nbsp;/// &lt;remarks&gt;This instance will keep a &lt;see cref=&quot;WeakReference&quot;/&gt; to the<br>\r\n&nbsp;&nbsp;&nbsp;/// &lt;paramref name=&quot;collection&quot;/&gt;, so the collection can be garbage collected.&lt;/remarks&gt;<br>\r\n&nbsp;&nbsp;&nbsp;/// &lt;param name=&quot;region&quot;&gt;The region to monitor.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;&nbsp;/// &lt;param name=&quot;target&quot;&gt;The target to monitor.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;&nbsp;public TabGroupPanesSyncBehavior(TabGroupPaneRegion region, TabGroupPane target, INotifyCollectionChanged collection)<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;_collectionWeakReference = new WeakReference(collection);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;_regionWeakReference = new WeakReference(region);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;_selectorWeakReference = new WeakReference(target);<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;/// Attaches the behavior to the &lt;see cref=&quot;INotifyCollectionChanged&quot;/&gt;.<br>\r\n&nbsp;&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;public void Attach()<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;INotifyCollectionChanged collection = GetCollection();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (collection != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;collection.CollectionChanged += OnCollectionChanged;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;Selector selector = GetSelector();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;IRegion region = GetRegion();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (selector != null &amp;&amp; region != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selector.SelectionChanged += OnSelectionChanged;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;region.ActiveViews.CollectionChanged += OnActiveViewsChanged;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;/// Detaches the behavior from the &lt;see cref=&quot;INotifyCollectionChanged&quot;/&gt;.<br>\r\n&nbsp;&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;&nbsp;public void Detach()<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;INotifyCollectionChanged collection = GetCollection();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (collection != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;collection.CollectionChanged -= OnCollectionChanged;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;Selector selector = GetSelector();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (selector != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selector.SelectionChanged -= OnSelectionChanged;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;IRegion region = GetRegion();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (region != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;region.ActiveViews.CollectionChanged -= OnActiveViewsChanged;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;private void OnSelectionChanged(object sender, SelectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;TabGroupPaneRegion region = GetRegion();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;TabGroupPane selector = GetSelector();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (region == null || selector == null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Detach();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;else<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (selector == e.OriginalSource)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach (object item in e.RemovedItems)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (region.ActiveViews.Contains(item))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;region.Deactivate(item);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach (object item in e.AddedItems)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (region.Views.Contains(item))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;region.Activate(item);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;private void OnActiveViewsChanged(object sender, NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;TabGroupPane selector = GetSelector();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;TabGroupPaneRegion region = GetRegion();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (region == null || selector == null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Detach();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;else<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e.Action == NotifyCollectionChangedAction.Add)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (selector.Items.Contains(e.NewItems[0]))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selector.SelectedItem = e.NewItems[0];<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (e.Action == NotifyCollectionChangedAction.Remove &amp;&amp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.OldItems.Contains(selector.SelectedItem))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selector.SelectedItem = null;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//if (e.Action == NotifyCollectionChangedAction.Add)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; foreach (object item in e.NewItems)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IActiveAware activeAware = item as IActiveAware;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (activeAware != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; activeAware.IsActive = true;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//else if (e.Action == NotifyCollectionChangedAction.Remove)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; foreach (object item in e.OldItems)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IActiveAware activeAware = item as IActiveAware;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (activeAware != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; activeAware.IsActive = false;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;//}</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;TabGroupPaneRegion region = GetRegion();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;TabGroupPaneRegion typedRegion = region as TabGroupPaneRegion;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;Selector target = GetSelector();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;TabGroupPane typedTarget = target as TabGroupPane;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;if (typedTarget != null &amp;&amp; typedRegion != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedTarget.Items.Clear();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach (object tab in region.Views)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typedTarget.Items.Add(tab);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// typedTarget.ItemsSource = region.Views;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;private INotifyCollectionChanged GetCollection()<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;return _collectionWeakReference.Target as INotifyCollectionChanged;<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;private TabGroupPane GetSelector()<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;return _selectorWeakReference.Target as TabGroupPane;<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;private TabGroupPaneRegion GetRegion()<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;return _regionWeakReference.Target as TabGroupPaneRegion;<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;private class SelectorRegionSyncBehavior<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;private readonly WeakReference _selectorWeakReference;<br>\r\n&nbsp;&nbsp;&nbsp;private readonly WeakReference _regionWeakReference;</p>\r\n<p>&nbsp;&nbsp;&nbsp;internal SelectorRegionSyncBehavior(Selector selector, IRegion region)<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;_selectorWeakReference = new WeakReference(selector);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;_regionWeakReference = new WeakReference(region);<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;internal void Attach()<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;Selector selector = GetSelector();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;IRegion region = GetRegion();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (selector != null &amp;&amp; region != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selector.SelectionChanged += OnSelectionChanged;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;region.ActiveViews.CollectionChanged += OnActiveViewsChanged;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;internal void Detach()<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;Selector selector = GetSelector();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (selector != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selector.SelectionChanged -= OnSelectionChanged;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;IRegion region = GetRegion();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (region != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;region.ActiveViews.CollectionChanged -= OnActiveViewsChanged;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;private void OnSelectionChanged(object sender, SelectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;IRegion region = GetRegion();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;Selector selector = GetSelector();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (region == null || selector == null || selector.ItemsSource != region.Views)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Detach();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;else<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (selector == e.OriginalSource)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach (object item in e.RemovedItems)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (region.ActiveViews.Contains(item))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;region.Deactivate(item);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach (object item in e.AddedItems)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;region.Activate(item);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;private void OnActiveViewsChanged(object sender, NotifyCollectionChangedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;Selector selector = GetSelector();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;IRegion region = GetRegion();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (region == null || selector == null || selector.ItemsSource != region.Views)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Detach();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;else<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e.Action == NotifyCollectionChangedAction.Add)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selector.SelectedItem = e.NewItems[0];<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (e.Action == NotifyCollectionChangedAction.Remove &amp;&amp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.OldItems.Contains(selector.SelectedItem))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selector.SelectedItem = null;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;private Selector GetSelector()<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;return _selectorWeakReference.Target as Selector;<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;private IRegion GetRegion()<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;return _regionWeakReference.Target as IRegion;<br>\r\n&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;}<br>\r\n&nbsp;}<br>\r\n}<br>\r\n<br>\r\n</p>\r\n<p>using System;<br>\r\nusing System.Collections.Generic;<br>\r\nusing System.Linq;<br>\r\nusing System.Text;<br>\r\nusing Microsoft.Practices.Composite.Regions;<br>\r\nusing Microsoft.Practices.Composite.Wpf.Regions;<br>\r\nusing Infragistics.Windows.DockManager;<br>\r\nusing System.Globalization;<br>\r\nusing System.Collections.ObjectModel;<br>\r\nusing System.Windows;<br>\r\nusing Microsoft.Practices.Composite.Wpf;</p>\r\n<p>namespace Composite.Wpf.Extensions<br>\r\n{</p>\r\n<p>&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;/// Implementation of &lt;see cref=&quot;IRegion&quot;/&gt; that allows multiple active views.<br>\r\n&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;public class TabGroupPaneRegion : IRegion<br>\r\n&nbsp;{<br>\r\n&nbsp;&nbsp;private ObservableCollection&lt;ItemMetadata&gt; _itemMetadataCollection;<br>\r\n&nbsp;&nbsp;private IViewsCollection _views;<br>\r\n&nbsp;&nbsp;private IViewsCollection _activeViews;</p>\r\n<p>&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;/// Gets a readonly view of the collection of views in the region.<br>\r\n&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;/// &lt;value&gt;An &lt;see cref=&quot;IViewsCollection&quot;/&gt; of all the added views.&lt;/value&gt;<br>\r\n&nbsp;&nbsp;public virtual IViewsCollection Views<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;get<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (_views == null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_views = new ViewsCollection(ItemMetadataCollection, x =&gt; true);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;return _views;<br>\r\n&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;/// Gets a readonly view of the collection of all the active views in the region.<br>\r\n&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;/// &lt;value&gt;An &lt;see cref=&quot;IViewsCollection&quot;/&gt; of all the active views.&lt;/value&gt;<br>\r\n&nbsp;&nbsp;public virtual IViewsCollection ActiveViews<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;get<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (_activeViews == null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_activeViews = new ViewsCollection(ItemMetadataCollection, x =&gt; x.IsActive);<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;return _activeViews;<br>\r\n&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;///&lt;overloads&gt;Adds a new view to the region.&lt;/overloads&gt;<br>\r\n&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;/// Adds a new view to the region.<br>\r\n&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;/// &lt;param name=&quot;view&quot;&gt;The view to add.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;/// &lt;returns&gt;The &lt;see cref=&quot;IRegionManager&quot;/&gt; that is set on the view if it is a &lt;see cref=&quot;DependencyObject&quot;/&gt;. It will be the current region manager when using this overload.&lt;/returns&gt;<br>\r\n&nbsp;&nbsp;public IRegionManager Add(object view)<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;ContentPane add = wrapInContentPane(view, String.Empty);<br>\r\n&nbsp;&nbsp;&nbsp;return Add(add, null, false);</p>\r\n<p>&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;/// Adds a new view to the region.<br>\r\n&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;/// &lt;param name=&quot;view&quot;&gt;The view to add.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;/// &lt;param name=&quot;viewName&quot;&gt;The name of the view. This can be used to retrieve it later by calling &lt;see cref=&quot;IRegion.GetView&quot;/&gt;.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;/// &lt;returns&gt;The &lt;see cref=&quot;IRegionManager&quot;/&gt; that is set on the view if it is a &lt;see cref=&quot;DependencyObject&quot;/&gt;. It will be the current region manager when using this overload.&lt;/returns&gt;<br>\r\n&nbsp;&nbsp;public IRegionManager Add(object view, string viewName)<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;if (string.IsNullOrEmpty(viewName))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, Composite.Wpf.Extensions.Resources.StringCannotBeNullOrEmpty, &quot;viewName&quot;));</p>\r\n<p>&nbsp;&nbsp;&nbsp;ContentPane add = wrapInContentPane(view, viewName);<br>\r\n&nbsp;&nbsp;&nbsp;return Add(add, viewName, false);<br>\r\n&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;/// Adds a new view to the region.<br>\r\n&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;/// &lt;param name=&quot;view&quot;&gt;The view to add.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;/// &lt;param name=&quot;viewName&quot;&gt;The name of the view. This can be used to retrieve it later by calling &lt;see cref=&quot;IRegion.GetView&quot;/&gt;.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;/// &lt;param name=&quot;createRegionManagerScope&quot;&gt;When &lt;see langword=&quot;true&quot;/&gt;, the added view will receive a new instance of &lt;see cref=&quot;IRegionManager&quot;/&gt;, otherwise it will use the current region manager for this region.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;/// &lt;returns&gt;The &lt;see cref=&quot;IRegionManager&quot;/&gt; that is set on the view if it is a &lt;see cref=&quot;DependencyObject&quot;/&gt;.&lt;/returns&gt;<br>\r\n&nbsp;&nbsp;public virtual IRegionManager Add(object view, string viewName, bool createRegionManagerScope)<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;IRegionManager regionManager = createRegionManagerScope ? this.RegionManager.CreateRegionManager() : this.RegionManager;<br>\r\n&nbsp;&nbsp;&nbsp;ContentPane add = wrapInContentPane(view, viewName);<br>\r\n&nbsp;&nbsp;&nbsp;InnerAdd(add, viewName, regionManager);<br>\r\n&nbsp;&nbsp;&nbsp;return regionManager;<br>\r\n&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;private static ContentPane wrapInContentPane(object view, string viewName)<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;ContentPane add = view as ContentPane;</p>\r\n<p>&nbsp;&nbsp;&nbsp;ContentPanePlaceholder ph = view as ContentPanePlaceholder;</p>\r\n<p>&nbsp;&nbsp;&nbsp;if (add == null &amp;&amp; ph == null &amp;&amp; view != null)<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;add = new ContentPane();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;add.SetValue(ContentPane.NameProperty, ViewUtility.GetViewSafeName(viewName));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;add.Content = view;<br>\r\n&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;if (add != null &amp;&amp; !String.IsNullOrEmpty(viewName))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;add.Header = viewName;</p>\r\n<p>&nbsp;&nbsp;&nbsp;return add;<br>\r\n&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;/// Removes the specified view from the region.<br>\r\n&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;/// &lt;param name=&quot;view&quot;&gt;The view to remove.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;public virtual void Remove(object view)<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;ItemMetadata itemMetadata = GetItemMetadataOrThrow(view);</p>\r\n<p>&nbsp;&nbsp;&nbsp;ItemMetadataCollection.Remove(itemMetadata);</p>\r\n<p>&nbsp;&nbsp;&nbsp;DependencyObject dependencyObject = view as DependencyObject;<br>\r\n&nbsp;&nbsp;&nbsp;if (dependencyObject != null &amp;&amp; Microsoft.Practices.Composite.Wpf.Regions.RegionManager.GetRegionManager(dependencyObject) == this.RegionManager)<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;dependencyObject.ClearValue(Microsoft.Practices.Composite.Wpf.Regions.RegionManager.RegionManagerProperty);<br>\r\n&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;/// Marks the specified view as active. <br>\r\n&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;/// &lt;param name=&quot;view&quot;&gt;The view to activate.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;public virtual void Activate(object view)<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;ContentPane add = wrapInContentPane(view, String.Empty);<br>\r\n&nbsp;&nbsp;&nbsp;ItemMetadata itemMetadata = GetItemMetadataOrThrow(add);</p>\r\n<p>&nbsp;&nbsp;&nbsp;if (!itemMetadata.IsActive)<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;itemMetadata.IsActive = true;<br>\r\n&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;/// Marks the specified view as inactive. <br>\r\n&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;/// &lt;param name=&quot;view&quot;&gt;The view to deactivate.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;public virtual void Deactivate(object view)<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;ContentPane add = wrapInContentPane(view, String.Empty);<br>\r\n&nbsp;&nbsp;&nbsp;ItemMetadata itemMetadata = GetItemMetadataOrThrow(add);</p>\r\n<p>&nbsp;&nbsp;&nbsp;if (itemMetadata.IsActive)<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;itemMetadata.IsActive = false;<br>\r\n&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;/// Returns the view instance that was added to the region using a specific name.<br>\r\n&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;/// &lt;param name=&quot;viewName&quot;&gt;The name used when adding the view to the region.&lt;/param&gt;<br>\r\n&nbsp;&nbsp;/// &lt;returns&gt;Returns the named view or &lt;see langword=&quot;null&quot;/&gt; if the view with &lt;paramref name=&quot;viewName&quot;/&gt; does not exist in the current region.&lt;/returns&gt;<br>\r\n&nbsp;&nbsp;public virtual object GetView(string viewName)<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;if (string.IsNullOrEmpty(viewName))<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, Composite.Wpf.Extensions.Resources.StringCannotBeNullOrEmpty, &quot;viewName&quot;));</p>\r\n<p>&nbsp;&nbsp;&nbsp;ItemMetadata metadata = ItemMetadataCollection.FirstOrDefault(x =&gt; x.Name == ViewUtility.GetViewSafeName(viewName));</p>\r\n<p>&nbsp;&nbsp;&nbsp;if (metadata != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;return metadata.Item;</p>\r\n<p>&nbsp;&nbsp;&nbsp;return null;<br>\r\n&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;/// Gets or sets the &lt;see cref=&quot;IRegionManager&quot;/&gt; that will be passed to the views when adding them to the region, unless the view is added by specifying createRegionManagerScope as &lt;see langword=&quot;true&quot; /&gt;.<br>\r\n&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;/// &lt;value&gt;The &lt;see cref=&quot;IRegionManager&quot;/&gt; where this &lt;see cref=&quot;IRegion&quot;/&gt; is registered.&lt;/value&gt;<br>\r\n&nbsp;&nbsp;/// &lt;remarks&gt;This is usually used by implementations of &lt;see cref=&quot;IRegionManager&quot;/&gt; and should not be<br>\r\n&nbsp;&nbsp;/// used by the developer explicitely.&lt;/remarks&gt;<br>\r\n&nbsp;&nbsp;public IRegionManager RegionManager { get; set; }</p>\r\n<p>&nbsp;&nbsp;/// &lt;summary&gt;<br>\r\n&nbsp;&nbsp;/// Gets the collection with all the views along with their metadata.<br>\r\n&nbsp;&nbsp;/// &lt;/summary&gt;<br>\r\n&nbsp;&nbsp;/// &lt;value&gt;An &lt;see cref=&quot;ObservableCollection{T}&quot;/&gt; of &lt;see cref=&quot;ItemMetadata&quot;/&gt; with all the added views.&lt;/value&gt;<br>\r\n&nbsp;&nbsp;protected virtual ObservableCollection&lt;ItemMetadata&gt; ItemMetadataCollection<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;get<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (_itemMetadataCollection == null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_itemMetadataCollection = new ObservableCollection&lt;ItemMetadata&gt;();<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;return _itemMetadataCollection;<br>\r\n&nbsp;&nbsp;&nbsp;}<br>\r\n&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;private void InnerAdd(object view, string name, IRegionManager regionManager)<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;string safeName = ViewUtility.GetViewSafeName(name);</p>\r\n<p>&nbsp;&nbsp;&nbsp;if (ItemMetadataCollection.FirstOrDefault(x =&gt; x.Item == view) != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidOperationException(Composite.Wpf.Extensions.Resources.RegionViewExistsException);</p>\r\n<p>&nbsp;&nbsp;&nbsp;ItemMetadata itemMetadata = new ItemMetadata(view);<br>\r\n&nbsp;&nbsp;&nbsp;if (!String.IsNullOrEmpty(safeName))<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;if (ItemMetadataCollection.FirstOrDefault(x =&gt; x.Name == safeName) != null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidOperationException(String.Format(CultureInfo.InvariantCulture, Composite.Wpf.Extensions.Resources.RegionViewNameExistsException, safeName));<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;itemMetadata.Name = safeName;<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;DependencyObject dependencyObject = view as DependencyObject;</p>\r\n<p>&nbsp;&nbsp;&nbsp;if (dependencyObject != null)<br>\r\n&nbsp;&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;Microsoft.Practices.Composite.Wpf.Regions.RegionManager.SetRegionManager(dependencyObject, regionManager);<br>\r\n&nbsp;&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;&nbsp;ItemMetadataCollection.Add(itemMetadata);<br>\r\n&nbsp;&nbsp;}</p>\r\n<p>&nbsp;&nbsp;private ItemMetadata GetItemMetadataOrThrow(object view)<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;if (view == null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;throw new ArgumentNullException(&quot;view&quot;);</p>\r\n<p>&nbsp;&nbsp;&nbsp;ItemMetadata itemMetadata = ItemMetadataCollection.FirstOrDefault(x =&gt; x.Item == view);<br>\r\n&nbsp;&nbsp;&nbsp;if (itemMetadata == null)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;throw new ArgumentException(Composite.Wpf.Extensions.Resources.ViewNotInRegionException, &quot;view&quot;);</p>\r\n<p>&nbsp;&nbsp;&nbsp;return itemMetadata;<br>\r\n&nbsp;&nbsp;}<br>\r\n&nbsp;}<br>\r\n}<br>\r\n<br>\r\n</p>\r\n<p>using System;<br>\r\nusing System.Collections.Generic;<br>\r\nusing System.Linq;<br>\r\nusing System.Text;</p>\r\n<p>namespace Composite.Wpf.Extensions<br>\r\n{<br>\r\n&nbsp;public class ViewUtility<br>\r\n&nbsp;{<br>\r\n&nbsp;&nbsp;public static string GetViewSafeName(string viewName)<br>\r\n&nbsp;&nbsp;{<br>\r\n&nbsp;&nbsp;&nbsp;return viewName.Replace(&quot; &quot;, String.Empty).Replace(&quot;:&quot;, String.Empty).Replace(&quot;,&quot;, String.Empty).Replace(&quot;\\&quot;&quot;, String.Empty).Replace(&quot;'&quot;, String.Empty).Replace(&quot;;&quot;, String.Empty).Replace(&quot;-&quot;, String.Empty).Replace(&quot;&amp;&quot;, String.Empty).Replace(&quot;(&quot;, String.Empty).Replace(&quot;)&quot;, String.Empty).Replace(&quot;.&quot;, String.Empty);<br>\r\n&nbsp;&nbsp;}<br>\r\n&nbsp;}<br>\r\n}</p>\r\n",
    "PostedDate": "2008-07-25T10:10:40.65-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "107383",
    "ThreadId": "31355",
    "Html": "Hi,<br>\r\n<br>\r\nI tried your solution for my case (IDE with multiple text editor tabs) and it doesn't work, it gives the exception below. <br>\r\nAlso my case needs sync between the ActiveView and the Active ContentPane (really don't know if your solution manages this correctly, because of the the previous exception). <br>\r\nAlso I don't like the fact of using ViewName as the header of the Tab.&nbsp; I think the ViewName intention (CompositeWPF developers: correct me if I am wrong) is for an internal use only (not to be used as a description). <br>\r\n<br>\r\nI think my extension is much simpler since it only consists of 1 class (public class TabGroupPaneRegionAdapter : RegionAdapterBase&lt;TabGroupPane&gt;)<br>\r\nRight now I am doing high level unit tests coverage and basic documentation, as requested by the CompositeWPFContrib project. <br>\r\nOnce finished I will contribute my solution there.<br>\r\n<br>\r\nClaudio. <br>\r\n<br>\r\n<br>\r\nSystem.InvalidOperationException<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Message=&quot;Specified element is already the logical child of another element. Disconnect it first.&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Source=&quot;PresentationFramework&quot;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StackTrace:<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.FrameworkElement.ChangeLogicalParent(DependencyObject newParent)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at MS.Internal.FrameworkObject.ChangeLogicalParent(DependencyObject newParent)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.FrameworkElement.AddLogicalChild(Object child)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Controls.ContentControl.OnContentChanged(Object oldContent, Object newContent)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Controls.ContentControl.OnContentChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs e)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.DependencyObject.NotifyPropertyChange(DependencyPropertyChangedEventArgs args)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.DependencyObject.UpdateEffectiveValue(EntryIndex entryIndex, DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry oldEntry, EffectiveValueEntry&amp; newEntry, Boolean coerceWithDeferredReference, OperationType operationType)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.DependencyObject.SetValueCommon(DependencyProperty dp, Object value, PropertyMetadata metadata, Boolean coerceWithDeferredReference, OperationType operationType, Boolean isInternal)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.DependencyObject.SetValue(DependencyProperty dp, Object value)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at System.Windows.Controls.ContentControl.set_Content(Object value)<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Composite.Wpf.Extensions.TabGroupPaneRegion.wrapInContentPane(Object view, String viewName) in C:\\Dev\\Infragistics\\IDE Prototype\\CWPFNotepad\\Composite.Wpf.Extensions\\TabGroupPaneRegion.cs:line 108<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at Composite.Wpf.Extensions.TabGroupPaneRegion.Activate(Object view) in C:\\Dev\\Infragistics\\IDE Prototype\\CWPFNotepad\\Composite.Wpf.Extensions\\TabGroupPaneRegion.cs:line 139<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at CWPFNotepad.Modules.TextEditor.Controllers.TextEditorController.OpenTextEditor(FilePayload filePayload) in C:\\Dev\\Infragistics\\IDE Prototype\\CWPFNotepad\\CWPFNotepad.Modules.TextEditor\\Controllers\\TextEditorController.cs:line 43<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InnerException: <br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2008-07-27T16:32:38.7-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115457",
    "ThreadId": "31355",
    "Html": "Hi Claudio,<br>\r\n<br>\r\nDid you post&nbsp;your solution? I'm also looking into a solution for integrating xamDockManager with RegionManager and on googling saw that you have already raised it. Can I get the details of your solution?<br>\r\n<br>\r\nThanks,<br>\r\nKunwar\r\n",
    "PostedDate": "2008-09-02T13:19:14.74-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115460",
    "ThreadId": "31355",
    "Html": "<div dir=ltr>Kunwar,<br><br>You can download the adapter from <a href=\"http://www.codeplex.com/CompositeWPFContrib\">http://www.codeplex.com/CompositeWPFContrib</a><br>You can see how to use it here: <a href=\"http://claudiopi.blogspot.com/2008/07/infragistics-tabgrouppane-region.html\">http://claudiopi.blogspot.com/2008/07/infragistics-tabgrouppane-region.html</a><br>\r\n<br>Thanks,<br>Claudio. <br><br><br><div>On Tue, Sep 2, 2008 at 5:19 PM, kunwargadhok <span dir=ltr>&lt;<a href=\"mailto:notifications@codeplex.com\">notifications@codeplex.com</a>&gt;</span> wrote:<br>\r\n<blockquote style=\"margin:0pt 0pt 0pt 0.8ex;padding-left:1ex\">   <div> <p>From: kunwargadhok</p> <div>Hi Claudio,<br>\r\n<br>\r\nDid you post your solution? I'm also looking into a solution for integrating xamDockManager with RegionManager and on googling saw that you have already raised it. Can I get the details of your solution?<br>\r\n<br>\r\nThanks,<br>\r\nKunwar\r\n</div> <div> <p>Read the <a href=\"http://www.codeplex.com/CompositeWPF/Thread/View.aspx?ThreadId=31355&ANCHOR#Post115457\">full discussion online</a>.</p> <p>To add a post to this discussion, reply to this email (<a href=\"mailto:CompositeWPF@discussions.codeplex.com?subject=[CompositeWPF:31355]\">CompositeWPF@discussions.codeplex.com</a>)</p>\r\n <p>To start a new discussion for this project, email <a href=\"mailto:CompositeWPF@discussions.codeplex.com\">CompositeWPF@discussions.codeplex.com</a></p> <p>You are receiving this email because you subscribed to this discussion on CodePlex. You can <a href=\"http://www.codeplex.com/site/discussions/thread/unsubscribe/31355\">unsubscribe</a> on codePlex.com.</p>\r\n <p>Please note: Images and attachments will be removed from emails. Any posts to this discussion will also be available online at <a href=\"http://codeplex.com\">codeplex.com</a></p> </div> </div> </blockquote>\r\n</div><br></div>",
    "PostedDate": "2008-09-02T13:24:03.587-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115648",
    "ThreadId": "31355",
    "Html": "Thanks Claudio! I checked your blog and it is quite easy to understand. But I'm trying to download the latest sourcecode from <a title=\"http://www.codeplex.com/CompositeWPFContrib\" href=\"http://www.codeplex.com/CompositeWPFContrib\">http://www.codeplex.com/CompositeWPFContrib</a>, but I get an errormessage that it is not a valid zipped file. Could you please upload the zipped file again or just tell me the contents that have changed and I can grab the files from source directory?<br>\r\n<br>\r\nThanks,<br>\r\nKunwar\r\n",
    "PostedDate": "2008-09-03T06:43:27.127-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115651",
    "ThreadId": "31355",
    "Html": "Kunwar,<br>\r\n<br>\r\nI just tried to download the zip file and I can open it without problems (By the way the .zip file is automatically built by the Source Control Server) .<br>\r\nThe size of the .zip file is 1.041.540 bytes . Are you getting the same size ? With which tool are you trying to open it ?<br>\r\n<br>\r\nThanks,<br>\r\nClaudio. <br>\r\n",
    "PostedDate": "2008-09-03T06:54:48.847-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115653",
    "ThreadId": "31355",
    "Html": "Actually I was getting that error yesterday evening but I did not post it last night, but this morning I'm getting a different error message - <br>\r\n<br>\r\n----------<br>\r\nContent Does Not Match Content Type<br>\r\n</td>\r\n</tr>\r\n<tr>\r\n    <td valign=top align=left colspan=2>The transferred file &quot;http://www.codeplex.com/CompositeWPFContrib/SourceControl/DownloadSourceCode.aspx?changeSetId=14588/Trunk/Samples/PrismImageSearch/PrismImageSearch/Properties/AppManifest.xml&quot; has been blocked by Webwasher, because the content of the file does not match the content type &quot;text/xml&quot; and Webwasher can not correct it.<br>\r\n    -----------<br>\r\n    <br>\r\n    Is there another way that I could get the .zip file? I have tried with both IE and Firefox.<br>\r\n    <br>\r\n    Thanks.<br>\r\n    </td>\r\n</tr>\r\n",
    "PostedDate": "2008-09-03T06:59:50.743-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "115657",
    "ThreadId": "31355",
    "Html": "Interestingly I get the same error if I try to download any changesets under this link - <a title=\"http://www.codeplex.com/CompositeWPFContrib\" href=\"http://www.codeplex.com/CompositeWPFContrib\">http://www.codeplex.com/CompositeWPFContrib</a><br>\r\n<br>\r\nBut If I try to download the full source code under this - http://www.codeplex.com/CompositeWPF , IT WORKS (for e.g. <a href=\"http://www.codeplex.com/CompositeWPF/SourceControl/DownloadSourceCode.aspx?changeSetId=14905\">this link works&nbsp; http://www.codeplex.com/CompositeWPF/SourceControl/DownloadSourceCode.aspx?changeSetId=14905</a>).<br>\r\n<br>\r\nKunwar\r\n",
    "PostedDate": "2008-09-03T07:12:10.247-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]