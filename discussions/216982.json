[
  {
    "Id": "458810",
    "ThreadId": "216982",
    "Html": "<p>I have a composite application that consists of around eight modules which in turn are each tied to two shells.&nbsp;</p>\r\n<p>My issue is I do not have any idea on how to switch from one shell to the other on the fly.&nbsp; Only one shell i.e. SHell1 should be visible at a time</p>\r\n<p>So if the user&nbsp;clicks on the shared navigation ribbon to access a module that is in Shell 2.&nbsp; Shell 1 should close and open up shell 2.&nbsp; That way I can also</p>\r\n<p>Create custom splash pages etc.</p>\r\n<p>So to cut a long story short I need some guidance on how to activate/deactivate a Shell.&nbsp; I am using the MVVM pattern as well with view models for all my shells and modules.</p>\r\n<p>How can I switch shells from each Shell&rsquo;s individual view model , or do I have to do something with bootstrapper and basically load both shells at once and then use the hide/show method as needed ?</p>\r\n<p>Basically I am very new to Prism and modular applications as you can see so some detailed examples or even code snippets would be useful.</p>\r\n<p>Thanks!</p>",
    "PostedDate": "2010-06-22T23:49:00.77-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "460064",
    "ThreadId": "216982",
    "Html": "<p id=6e26e770-629b-012d-9269-12313b06d961>Hi,</p>\r\n<p id=6e26f7f0-629b-012d-926a-12313b06d961>A possible approach, as you&rsquo;ve  mentioned, is to load both shells in the <strong>Bootstrapper</strong>, and then  use the <strong>Hide </strong>and <strong>Show </strong>methods when needed.  Based on <a href=\"http://blogs.southworks.net/dschenkelman\">Damian  Shenkelman</a>&rsquo;s <a href=\"http://blogs.southworks.net/dschenkelman/2010/01/26/creating-a-multi-shell-application-in-prism-v2\">blog  post</a>, I&rsquo;ve created a sample application to exemplify how to achieve this,  which you can download from <a href=\"http://public.blu.livefilestore.com/y1pEQ5DNufjWEgdSshAaQqJBYIC9Z-PYIcCQZbtgO4MO4ZfPwFRnNOXF5Yoe84fXodY8fLokS01t7OPPXBzwuZ7ng/SwitchingBetweenTwoShellsSample.zip?download&psid=1\">here</a>.</p>\r\n<p id=6e271380-629b-012d-926b-12313b06d961>There are a couple of things worth  noting about this sample:</p>\r\n<ul>\r\n<li>The most important parts&nbsp;that may help you understand this are the  <strong>CreateShell </strong>method inside&nbsp;the <strong>Bootstrapper.cs </strong>class and&nbsp;the <strong>ShellViewModel.cs</strong> class. </li>\r\n<li>I&rsquo;ve used the <a href=\"http://msdn.microsoft.com/en-us/library/ff649187.aspx\">Event  Aggregator</a> to publish an event from a shared module (which in your case  would be the ribbon one). The <strong>ShellViewModel</strong> subscribes to that  event, and performs the necessary operations to hide and show the shells  accordingly. </li>\r\n<li>I&rsquo;ve used <a href=\"http://msdn.microsoft.com/en-us/library/ff647893.aspx\">Delegate  Commands</a> for the shell switching buttons, but you don&rsquo;t necessarily have to  use them to achieve this scenario. </li>\r\n<li>In <a href=\"http://blogs.southworks.net/dschenkelman\">Damian  Shenkelman</a>&rsquo;s <a href=\"http://cid-09f63fc7ac065e5e.skydrive.live.com/self.aspx/p^0p Samples/TwoShells.zip\">sample</a>,  the <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.shutdownmode.aspx\">ShutDownMode</a> is set to <strong>OnLastWindowClose</strong>, but since you specified that only  one shell should be visible at a time, I&rsquo;ve set it to  <strong>OnMainWindowClose</strong>, and define the current shell as the  <strong>MainWindow</strong> of the application each time the shells are  switched. That guarantees that the application will shut down when the current  shell is closed.</li>\r\n</ul>\r\n<p id=6e272fe0-629b-012d-926c-12313b06d961>I hope you find this helpful.</p>\r\n<p id=6e276360-629b-012d-926d-12313b06d961>Guido Leandro Maliandi <br><a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2010-06-25T12:58:06.003-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]