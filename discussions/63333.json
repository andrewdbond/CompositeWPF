[
  {
    "Id": "215327",
    "ThreadId": "63333",
    "Html": "<p>Hi there,</p>\r\n<p>We're using the EventAggregator in our WinForms application and I've come across a situation where I think it makes sense to use EventAggregator (over a Command).&nbsp; We have a central &quot;context&quot; class that manages all loaded objects associated with a given context (a Customer, in this case).&nbsp; As objects are loaded, they are added to the context and then when we save, we save all loaded objects in the context.&nbsp;</p>\r\n<p>During the save, I want to add an event (ContextSaving?) that subscribers can catch and opt to cancel if they deem it necessary (similar to cancellable events in Windows Forms like the Form's Closing event).&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Question: have others done this before?&nbsp; Is this a gross violation of the EventAggregator concept?&nbsp;&nbsp;</p>",
    "PostedDate": "2009-07-23T08:08:47.353-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "215798",
    "ThreadId": "63333",
    "Html": "<p>Hi Jeremy,&nbsp;</p>\r\n<p>It's great that you have been able to use the prism EventAggregator in a Winforms app!<span style=\"color:#1f497d\"> You might find </span><a href=\"http://blogs.msdn.com/gblock/\">Glenn Block</a>'s &nbsp;post on <a href=\"http://blogs.msdn.com/gblock/archive/2008/10/20/bringing-prism-to-winforms.aspx\">Bringing Prism to WinForms</a> useful.&nbsp;</p>\r\n<p>Back to your question. If I understood your scenario correctly, you need to have an operation (in this case saving) which can be canceled by decoupled entities. If this is the case, there is no out-of-the-box cancellable event in prism. Nevertheless, as you said, you might implement a similar approach to winform's cancellable events by adding an <strong>Cancelled</strong> property to the event payload: When an event is published by the EventAggregator, the same instance of the payload is used for all subscribed handlers. So you can set a property that indicates that the action should not be executed.</p>\r\n<p>The following pseudo code could be used:&nbsp;</p>\r\n<p>In the Subscribers:&nbsp;</p>\r\n<p style=\"padding-left:30px\">public void OnContextSaving(SavingEventArg e)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(shouldCancel)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.Canceled = true;<br>}&nbsp;</p>\r\n<p>In the publisher:</p>\r\n<p style=\"padding-left:30px\">savingEventArg.Canceled = false;<br>eventAggregator.GetEvent&lt;ContextSavingEvent&gt;().Publish(savingEventArg);<br>if(!savingEventArg.Canceled)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Do Saving<br>}</p>\r\n<p><strong><br>NOTE:</strong> for this approach to work properly you need to subscribe using the default thread option (<strong>ThreadOption.PublisherThread </strong>)</p>\r\n<p>There was a similar discussion on the SCSF about cancelling events. It's a different scanario, but same concepts might apply:</p>\r\n<ul>\r\n<li><a href=\"http://smartclient.codeplex.com/Thread/View.aspx?ThreadId=56084\">cancel published events</a>&nbsp; </li>\r\n</ul>\r\n<p>&nbsp;In the prism discussion there also another discussion that might be related (though not using eventAggregator):</p>\r\n<ul>\r\n<li><a href=\"http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=39629\">Cancel a Tab closing event if a view is dirty&nbsp; </a>&nbsp;</li>\r\n</ul>\r\n<p><span style=\"font-size:10pt\" lang=EN-US>&nbsp;</span></p>\r\n<p>Hope it helps!&nbsp;</p>\r\n<p>Matias Bonaventura<br><a href=\"http://blogs.southworks.net/\">http://blogs.southworks.net/matiasb</a></p>",
    "PostedDate": "2009-07-24T10:50:15.323-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]