[
  {
    "Id": "556268",
    "ThreadId": "243530",
    "Html": "\r\n<p>Dear All,</p>\r\n<p>I created a Menu module that hold the menu definition of my application, exactly as the prevuiosly created AVTModule.</p>\r\n<p>The difference is that this menumodule is registered to the MianNavigationRegion.</p>\r\n<p>This is my MenuModule class:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>\t[ModuleExport(<span style=\"color:blue\">typeof</span>(MenusModule))]\r\n\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> MenusModule : IModule\r\n\t{\r\n\t\t[Import]\r\n\t\t<span style=\"color:blue\">public</span> IRegionManager RegionManager;\r\n\t\t\r\n\t\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Initialize()\r\n\t\t{\r\n\t\t\tRegionManager.RegisterViewWithRegion(RegionNames.MainNavigationRegion, \r\n\t\t\t<span style=\"color:blue\">typeof</span>(Views.AppMainMenuView));\r\n\t\t}\r\n\t}\r\n</pre>\r\n<pre>And I add the xaml definition in the cataloge as follows:</pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre>&lt;Modularity:ModuleInfo Ref=<span style=\"color:#a31515\">&quot;GL.Modules.Menu.xap&quot;</span> InitializationMode=<span style=\"color:#a31515\">&quot;WhenAvailable&quot;</span> </pre>\r\n<pre>\tModuleName=<span style=\"color:#a31515\">&quot;MenusModule&quot;</span> </pre>\r\n<pre> \tModuleType=<span style=\"color:#a31515\">&quot;GL.Modules.Menu.MenusModule, MenusModule, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;</span>/&gt;</pre>\r\n<pre>This module class is responsible to register the appmainmenuview in the MainNavigationRegion</pre>\r\n<pre>Here is my AppMainMenuView:</pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre>\t[Export(<span style=\"color:#a31515\">&quot;AppMainMenuView&quot;</span>)]\r\n\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> AppMainMenuView : UserControl\r\n\t{\r\n\t\t<span style=\"color:blue\">public</span> AppMainMenuView()\r\n\t\t{\r\n\t\t\tInitializeComponent();\r\n\t\t}\r\n\t\t[Import]\r\n\t\t<span style=\"color:blue\">public</span> AppMainMenuViewModel ViewModel\r\n\t\t{\r\n\t\t\t<span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.DataContext <span style=\"color:blue\">as</span> AppMainMenuViewModel; }\r\n\t\t\t<span style=\"color:blue\">set</span> { <span style=\"color:blue\">this</span>.DataContext = value; }\r\n\t\t}\r\n\t}\r\n</pre>\r\n</div>\r\nAnd also my AppMainMenuViewModel:</pre>\r\n<pre><div style=\"color:black; background-color:white\"><pre>\t[Export]\r\n\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> AppMainMenuViewModel : NotificationObject\r\n\t{\r\n\t}\r\n</pre>\r\n</div>\r\nNothing complicated right !!.</pre>\r\n<pre>I succesfully can load the other module (AVTModule) into the mainRegion but not this one to the NavigationRegion !!!</pre>\r\n<pre>What is the error here ...</pre>\r\n<pre>Any help is appreciated</pre>\r\n<pre>Regards</pre>\r\n</div>\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2011-01-27T07:29:16.127-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "556281",
    "ThreadId": "243530",
    "Html": "\r\n<p>Need to add this, if I add the menu from the shell it work just fine ...</p>\r\n<p>The VS2010 halted, when I restarted it doesn't give the exception when call from MenuModel class, but not shown neither from the shell or the MenuModel class ..</p>\r\n<p>What is the funny thing here ...</p>\r\n<p>&nbsp;Just in case this is my xaml definition of the MainNavigationRegion in the shell.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Border</span> <span style=\"color:red\">x:Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">MenuBorder</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource MenuBorderStyle}</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">&gt;</span> </pre>\r\n<pre><span style=\"color:blue\">\t&lt;</span><span style=\"color:#a31515\">StackPanel</span><span style=\"color:blue\">&gt;</span> </pre>\r\n<pre><span style=\"color:blue\">\t\t&lt;</span><span style=\"color:#a31515\">StackPanel</span> <span style=\"color:red\">x:Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">MenuStackPanel</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">Style</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{StaticResource LinksStackPanelStyle}</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">&gt;</span> </pre>\r\n<pre><span style=\"color:blue\">\t\t\t&lt;</span><span style=\"color:#a31515\">TextBlock</span> <span style=\"color:red\">Text</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Menu Should Appear here</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">/&gt;</span> </pre>\r\n<pre><span style=\"color:blue\">\t\t\t&lt;</span><span style=\"color:#a31515\">ItemsControl</span> <span style=\"color:red\">x:Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">NavigationItemsControl</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">prism:RegionManager.RegionName</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">MainNavigationRegion</span><span style=\"color:black\">&quot;</span> <span style=\"color:blue\">/&gt;</span> </pre>\r\n<pre><span style=\"color:blue\">\t\t&lt;/</span><span style=\"color:#a31515\">StackPanel</span><span style=\"color:blue\">&gt;</span> </pre>\r\n<pre><span style=\"color:blue\">\t&lt;/</span><span style=\"color:#a31515\">StackPanel</span><span style=\"color:blue\">&gt;</span> </pre>\r\n<pre><span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">Border</span><span style=\"color:blue\">&gt;</span></pre>\r\n</div>\r\n",
    "PostedDate": "2011-01-27T07:50:47.06-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "556339",
    "ThreadId": "243530",
    "Html": "\r\n<p>Hi Waleed,</p>\r\n<p>The problem you're experiencing might be because you're exporting your view with a contract name. You could try specifying an Export without a contract name for your view, for example:</p>\r\n<pre><pre><pre>\t<strong>[Export]</strong> // no contract name here<br>\t<span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> AppMainMenuView : UserControl<br>\t{<br>\t\t<span style=\"color:blue\">public</span> AppMainMenuView()<br>\t\t{<br>\t\t\tInitializeComponent();<br>\t\t}<br>\t\t[Import]<br>\t\t<span style=\"color:blue\">public</span> AppMainMenuViewModel ViewModel<br>\t\t{<br>\t\t\t<span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.DataContext <span style=\"color:blue\">as</span> AppMainMenuViewModel; }<br>\t\t\t<span style=\"color:blue\">set</span> { <span style=\"color:blue\">this</span>.DataContext = value; }<br>\t\t}<br>\t}\r\n</pre>\r\n</pre>\r\n</pre>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2011-01-27T08:56:40.083-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "556353",
    "ThreadId": "243530",
    "Html": "\r\n<p>Well, it works ... but this is strange !!</p>\r\n<p>I mean if I have a view in the same application with the shell, the view will not be available unless I add &quot;Contract Name&quot; if I removed it, it will not show; of course no exception in both cases.</p>\r\n<p>But I would like you explain if possible what is the difference here ...</p>\r\n<p>Appreciate you reply indeed</p>\r\n<p>Regards</p>\r\n<p>Waleed</p>\r\n<p>&nbsp;</p>\r\n<p>Edited:</p>\r\n<p>Also I would like to add that the DelegateCommand on the shell-viewmodel is not working (call view from another xap), even If I specify the full URI as follows :</p>\r\n<p><span style=\"font-family:Consolas; color:#a31515; font-size:x-small\"><span style=\"font-family:Consolas; color:#a31515; font-size:x-small\"><span style=\"font-family:Consolas; color:#a31515; font-size:x-small\">/GL.Modules.Menu;component/Views/AppMainMenuView</span></span></span></p>\r\n<p>Another thing is:</p>\r\n<p>If I try to load the view in the LoadModuleCompleted event from the shell, it works ....</p>\r\n<p>I am lost overhere</p>\r\n",
    "PostedDate": "2011-01-27T09:08:28.077-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "556368",
    "ThreadId": "243530",
    "Html": "\r\n<p>When you export a composable part in MEF, you need to define the contract that it will be exported with. If you don't indicate a string or type for the contract, the part will be exported with its type as the contract type. You can read more about it in\r\n the <a href=\"http://mef.codeplex.com/wikipage?title=Parts&referringTitle=Guide\">\r\nMef Programming Guide</a>.</p>\r\n<p>From the description of the overload you're using of the <strong>RegisterViewWithRegion\r\n</strong>method, it is used to: <em>&quot;Associate a view with a region, by registering a type. When the region get's displayed this type will be resolved using the ServiceLocator into a concrete instance. The instance will be added to the Views collection of the\r\n region.&quot; </em>Therefore, that overload will attempt to resolve the view you have defined, but if you have used a contract that is different from the type you're specifying in the\r\n<strong>RegisterViewWithRegion</strong> method, the ServiceLocator will be unable to retrieve that instance, and therefore it won't be added to the region.</p>\r\n<p>One possibility to achieve your requirement without having to specify a default contract name would be to use another overload of the\r\n<strong>RegisterViewWithRegion</strong>, which would retrieve the instance of your view through the use of a custom delegate . From the description of this overload, it is used to:\r\n<em>&quot;Associate a view with a region, using a delegate to resolve a concreate instance of the view. When the region get's displayed, this delelgate will be called and the result will be added to the views collection of the region.&quot;\r\n</em>For example:</p>\r\n<p>RegionManager.RegisterViewWithRegion(&quot;MainRegion&quot;, () =&gt; ServiceLocator.Current.GetInstance&lt;YourViewType&gt;(&quot;YourViewContract&quot;));</p>\r\n<p>As for the DelegateCommand issue you're mentioning, it would be helpful if you could provide us with more details about what you've implemented in the command's logic.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2011-01-27T09:31:47.553-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "556371",
    "ThreadId": "243530",
    "Html": "\r\n<p>I'm sorry, I didn't read the update you've made regarding your DelegateCommand. As for your concern, it isn't recommended to put the code for adding a view inside the Shell ViewModel. You should place the logic to add a view to a region inside the module\r\n that contains that view.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br>\r\n<a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\r\n",
    "PostedDate": "2011-01-27T09:34:13.073-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "559258",
    "ThreadId": "243530",
    "Html": "\r\n<p>Sorry for my late reply, I guess you are aware of Egypt events.</p>\r\n<p>I would like to add that if I put the [Export(&quot;viewName&quot;, typeof(view))] it will work in both cases.</p>\r\n<p>Why it isn't recommended to put the event handlers in the viewodel ... whereelse.</p>\r\n<p>Best regards</p>\r\n<p>Waleed</p>\r\n",
    "PostedDate": "2011-02-02T02:50:58.597-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "560109",
    "ThreadId": "243530",
    "Html": "\r\n<p id=\"x_0a049c10-1113-012e-a92a-12313b100d68\">Hi Waleed,</p>\r\n<p>The reason why is not recommended to place this kind of logic in the shell, is because your application will be losing the approaches Prism tries to solve. As documentation shows:</p>\r\n<p id=\"x_0a04a5a0-1113-012e-a92b-12313b100d68\">&ldquo;<em>&hellip;The guidance is designed to help architects and developers achieve the following objectives:</em></p>\r\n<p id=\"x_0a04afa0-1113-012e-a92c-12313b100d68\">&middot; <em>Create an application from modules that can be built, assembled, and, optionally, deployed by independent teams using WPF or Silverlight.\r\n</em></p>\r\n<p id=\"x_0a04ba30-1113-012e-a92d-12313b100d68\">&middot; <em>Minimize cross-team dependencies and allow teams to specialize in different areas, such as user interface (UI) design, business logic implementation, and infrastructure code development.\r\n</em></p>\r\n<p id=\"x_0a04c620-1113-012e-a92e-12313b100d68\">&middot; <em>Use an architecture that promotes reusability across independent teams.\r\n</em></p>\r\n<p id=\"x_0a04d2c0-1113-012e-a92f-12313b100d68\">&middot; <em>Increase the quality of applications by abstracting common services that are available to all the teams.\r\n</em></p>\r\n<p id=\"x_0a04dfc0-1113-012e-a930-12313b100d68\">&middot; <em>Incrementally integrate new capabilities.</em></p>\r\n<p id=\"x_0a04edf0-1113-012e-a931-12313b100d68\"><em>&hellip;</em>&rdquo;</p>\r\n<p id=\"x_0a04fc30-1113-012e-a932-12313b100d68\">Therefore, as you separate your applications in modules, like Guido recommends, you might benefit with features such as:</p>\r\n<ul>\r\n<li>\r\n<div id=\"x_0a050c30-1113-012e-a933-12313b100d68\"><strong>Reusability</strong></div>\r\n</li><li>\r\n<div id=\"x_0a051cb0-1113-012e-a934-12313b100d68\"><strong>Testability</strong></div>\r\n</li><li>\r\n<div id=\"x_0a052d10-1113-012e-a935-12313b100d68\"><strong>Interact in a loosely coupled way</strong></div>\r\n</li></ul>\r\n<p id=\"x_0a053e30-1113-012e-a936-12313b100d68\">You might find useful the following link of Prism documentation:</p>\r\n<p id=\"x_0a055130-1113-012e-a937-12313b100d68\"><a href=\"http://msdn.microsoft.com/en-us/library/gg405479(v=PandP.40).aspx\">Chapter 4: Modular Application Development</a></p>\r\n<p id=\"x_0a056640-1113-012e-a938-12313b100d68\">I hope you find this information useful.</p>\r\n<p id=\"x_0a057c60-1113-012e-a939-12313b100d68\">Thanks,</p>\r\n<p>Miguel Bronzovic<br>\r\n<a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-02-03T05:52:24.703-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "560754",
    "ThreadId": "243530",
    "Html": "\r\n<p>Hello,</p>\r\n<p>I am seperating my application into modules already ...!!</p>\r\n<p>you talked about the things that realy attrackted me to PRISM4, you didn't reply where to define &amp; where to wire the events ...</p>\r\n<p>Regards</p>\r\n",
    "PostedDate": "2011-02-04T05:58:45.743-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]