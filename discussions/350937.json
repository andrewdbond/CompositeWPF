[
  {
    "Id": "818972",
    "ThreadId": "350937",
    "Html": "\r\n<p>I have a question about the way Views are loaded. I have this sample code shown below of a view that loads correctly:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System.Windows.Controls;\r\n<span style=\"color:blue\">using</span> Demo.Wpf.EmployeeModule.ViewModels;\r\n<span style=\"color:blue\">using</span> System.ComponentModel.Composition;\r\n<span style=\"color:blue\">using</span> Demo.Wpf.Infrastructure;\r\n<span style=\"color:blue\">using</span> Microsoft.Practices.Prism.Regions;\r\n\r\n\r\n<span style=\"color:blue\">namespace</span> Demo.Wpf.EmployeeModule.Views\r\n{\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> Interaction logic for EmployeeListView.xaml</span>\r\n    <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n    <span style=\"color:gray\">///</span><span style=\"color:green\"> </span>\r\n    [ViewExport(RegionName = RegionNames.LeftRegion)]\r\n    [PartCreationPolicy(CreationPolicy.Shared)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> EmployeeListView : UserControl\r\n    {\r\n        [ImportingConstructor]\r\n        <span style=\"color:blue\">public</span> EmployeeListView(EmployeeListViewModel viewModel)\r\n        {\r\n            InitializeComponent();\r\n            <span style=\"color:green\">//this.DataContext = viewModel;</span>\r\n        }\r\n\r\n        [Import]\r\n        <span style=\"color:blue\">public</span> EmployeeListViewModel Model\r\n        {\r\n            <span style=\"color:blue\">get</span>\r\n            {\r\n                <span style=\"color:blue\">return</span> DataContext <span style=\"color:blue\">as</span> EmployeeListViewModel;\r\n            }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                DataContext = value;\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n</pre>\r\n</div>\r\n<p>NOtes: <br>\r\n1. I added an [ImportingConstructor] attribute to a parameterized constructor which is passing in the ViewModel.<br>\r\n2. I also have an [Import] attribute for the ViewModel setter so I can assign the DataContext.</p>\r\n<p>However, in the Stocktrader demo the loading of the views is done differently. Look for example at the PositionSummaryView.xaml.cs file.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System.ComponentModel.Composition;\r\n<span style=\"color:blue\">using</span> System.Windows.Controls;\r\n<span style=\"color:blue\">using</span> StockTraderRI.Infrastructure;\r\n\r\n<span style=\"color:blue\">namespace</span> StockTraderRI.Modules.Position.PositionSummary\r\n{\r\n    [ViewExport(RegionName = RegionNames.MainRegion)]\r\n    [PartCreationPolicy(CreationPolicy.NonShared)]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> PositionSummaryView : UserControl\r\n    {\r\n        <span style=\"color:blue\">public</span> PositionSummaryView()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        <span style=\"color:blue\">#region</span> IPositionSummaryView Members\r\n\r\n        [Import]\r\n        <span style=\"color:blue\">public</span> IPositionSummaryViewModel Model\r\n        {\r\n            <span style=\"color:blue\">get</span>\r\n            {\r\n                <span style=\"color:blue\">return</span> DataContext <span style=\"color:blue\">as</span> IPositionSummaryViewModel;\r\n            }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                DataContext = value;\r\n            }\r\n        }\r\n        <span style=\"color:blue\">#endregion</span>\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;<br>\r\nMy questions are the following: <br>\r\n1. How is the View being instantiated without the [Importing Constructor] attribute for the class as shown in previous example?</p>\r\n<p>2. What triggers the assignment of the DataContext property? How is value being passed to the ViewModel property ?&nbsp; Whilst playing around with a modified version of StockTrader I created a&nbsp;new&nbsp;view.&nbsp;if I place a breakpoint&nbsp;next to\r\n the line DataContext = value, the breakpoint is never hit.</p>\r\n<p>Any help to answer these questions would be enourmously appreciated.</p>\r\n<p>Thank you</p>\r\n<p>&nbsp;</p>\r\n<p><br>\r\n&nbsp;</p>\r\n",
    "PostedDate": "2012-04-02T15:04:35.077-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "819335",
    "ThreadId": "350937",
    "Html": "<p>Hi,</p>\r\n<p>As far as I know, any type that is exported to <strong>MEF </strong>can be instantiated as long as it has a constructor without parameters. Also, based on my understanding, the <strong>ImportingConstructor </strong>attribute is only required when the class needs to be instantiated through a constructor that require one or more parameters. Therefore, in the first view, the <strong>ImportConstructor </strong>attribute is required as the constructor needs a parameter of type <strong>EmployeeListViewModel</strong>; on the other hand, as the second view's constructor doesn't need any parameter, it seems that <strong>MEF </strong>can instantiate it without using the aforementioned attribute.</p>\r\n<p>Regarding the second question, as far as I know, the <strong>ImportingConstructor </strong>attribute and <strong>Importing </strong>attribute do not depend of each other:</p>\r\n<ul>\r\n<li>Based on my understanding, when resolving a type through the container that has an <strong>ImportingConstructor </strong>attribute, <strong>MEF </strong>automatically inject instances of the corresponding types as parameters in the constructor. It does not modify any properties in the class or inject any dependencies in them. </li>\r\n<li>If the type that is resolved through the container has an <strong>Import </strong>attribute in either a property or a field in the class, the container will try to inject instances of the corresponding types in them after the constructor has been invoked and finalized, regardless if the class has an <strong>ImportingConstructor </strong>or not.</li>\r\n</ul>\r\n<p>Based on my understanding, in the first code snippet, an <strong>EmployeeListViewModel </strong>instance is being injected in the view twice: the first one in the constructor as a parameter (which is not used) and the second one as a value in the property. On the other hand, in the second code snippet, the <strong>IPositionSummaryViewModel </strong>is injected in the view only once: in the property.</p>\r\n<p>You can find more information about this in the following page of MEF's codeplex site:</p>\r\n<ul>\r\n<li><a href=\"http://mef.codeplex.com/wikipage?title=Declaring%20Imports\">Declaring Imports</a></li>\r\n</ul>\r\n<p>Also, we have checked that, with the <strong>Stock Trader RI as out of the box</strong>, the setter of the property of the aforementioned view is being called correctly when resolved through the container, after the constructor of the class has finalized.</p>\r\n<p>As this is more related to the features provided by <strong>MEF</strong>, I believe you could also find support regarding this topic in the <strong>MEF </strong>forums:</p>\r\n<ul>\r\n<li><a href=\"http://mef.codeplex.com/\">Welcome to the MEF Community Site</a></li>\r\n</ul>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-04-03T10:45:23.463-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "819446",
    "ThreadId": "350937",
    "Html": "<p>Hi Damien,</p>\r\n<p>Thank you very much for taking the time to answer my questions. I have a better understanding of the use of [ImportingConstructor] and [Import] attributes now. I'm still a bit puzzled about the setting of the ViewModel as show here:</p>\r\n<pre>       [Import]\r\n        public IPositionSummaryViewModel ViewModel\r\n        {\r\n            get\r\n            {\r\n                return DataContext as IPositionSummaryViewModel;\r\n            }\r\n            set\r\n            {\r\n                DataContext = value;\r\n            }\r\n        }\r\n</pre>\r\n<p>You mentioned: <br /><em>the setter of the property of the aforementioned view is being called correctly <strong>when resolved through the container</strong>, after the constructor of the class has finalized.</em></p>\r\n<p>I need to know exactly how the container resolves this setting of the ViewModel property. I'll have a look at the MEF Community Site as you recommended. Again thank you for your help.</p>",
    "PostedDate": "2012-04-03T14:25:59.733-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]