[
  {
    "Id": "697412",
    "ThreadId": "279224",
    "Html": "<p>Hi All,</p>\n<p>i know, that there are several discussions about this topic. But they did not give me a solution, so i hope i can explain my \"problem\" good enough that someone understand it and will give me the tip i need.</p>\n<p>In a shellview i have&nbsp;a tabcontrol with a regionname \"ShellTabRegion\".</p>\n<p>There are two views</p>\n<p>=&gt; \"ProducttListView\" (defined as CreationPolicy.Shared) which enables the user to search and list searchresults</p>\n<p>=&gt; \"ProductFormView\" (defined as CreationPolicy.NonShared) which shows one Product (called from ProductListView)&nbsp;or to create a new one (called via menu).</p>\n<p>To make a view visible i create/call an existing one (via navigation and the INavigationAware-Interface implemented in the views) like this way:</p>\n<p><span style=\"color: blue;\">this</span>.RegionManager.RequestNavigate(<br />&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">\"ShellTabRegion\"</span>,<br />&nbsp;&nbsp;&nbsp; <span style=\"color: blue;\">new</span> System.Uri(<span style=\"color: blue;\">\"ProductFormView\"</span> + <span style=\"color: blue;\">this</span>.ParametersUriQuery,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.UriKind.Relative));</p>\n<p>All this works proper.&nbsp;ProductListView is shown maximum one times, ProductFormView as offen as needed. And, the main point, they&nbsp;will show in the tabcontrol of the shell as defined.&nbsp;Now to my Problem:</p>\n<p>The \"ProductFormView\"&nbsp;own a TabControl with an Region \"ProductFormViewTabRegion\" to show further informations (by sub-views) about the product like MasterData, Stockdata and so on - one tab for each subview.</p>\n<p>For this TabControl a need a scoped region to make the view independing from the other (ProductForm)-Views and the shell. Where do i have to define what? Does it happen in the Module-Initialize (as found in one example)? Or via a own RegionController as found in the UICompositionQuickStart?</p>\n<p>Is it possible to register a scoped region in code behind in the ProductFormView after the view was instantiated?</p>\n<p>I found several examples, but no one gives me the final eyecatcher.</p>\n<p>Regards and thanks for any help</p>",
    "PostedDate": "2011-11-12T13:23:02.913-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "697819",
    "ThreadId": "279224",
    "Html": "<p>AddOn: Actual i have a small sample app which shows the problem in full source. Will send it zipped via email...</p>\n<p>As everone i need help very urgent (!) :-)</p>",
    "PostedDate": "2011-11-14T05:33:51.17-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "697839",
    "ThreadId": "279224",
    "Html": "<p>Hi,</p>\r\n<p>It would be helpful if you could upload that sample into a page like <a href=\"http://skydrive.live.com/\"> SkyDrive</a> for us to check it.</p>\r\n<p>Thanks,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a>ï»¿</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-11-14T06:28:45.613-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "697875",
    "ThreadId": "279224",
    "Html": "<p>Okay&nbsp;- the sample is placed on skydrive. The main parts are marked with \"P&amp;P\" so you will find the relevant code by searching for that string.</p>\r\n<p><a href=\"https://skydrive.live.com/#cid=4B39F3D010EE4988&amp;id=4B39F3D010EE4988%21117\">https://skydrive.live.com/#cid=4B39F3D010EE4988&amp;id=4B39F3D010EE4988%21117</a></p>\r\n<p>is the link if you logged in.</p>\r\n<p>Regards and thanks for any help and the time</p>",
    "PostedDate": "2011-11-14T07:36:58.237-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "698537",
    "ThreadId": "279224",
    "Html": "<p>Hi,</p>\n<p><strong>Prism Region Navigation</strong> does not provide a way of using scoped regions out-of-the-box. If you need to use scoped regions you could use the view injection approach (with the <strong>Add </strong>method of the region) to add the <strong>ProductFormView </strong> views to the <strong>ShellTabRegion</strong>. You can find more information about this in the following thread were a similar topic were discussed:</p>\n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/236849\">Navigation and ScopedRegions</a> </li>\n</ul>\n<p>Based on my understanding of your scenario, you seems to be using the <strong> Prism Region Navigation</strong> to check if the specified record id is already being shown in a view and to send information (in this case, the record id) to that view as a parameter. As a possible approach, you could implement your own custom logic to check  if the specified record id is being shown in the region and add a new view or activate an existing one when required without requiring to use <strong>Prism Region Navigation.</strong></p>\n<p>If you believe that <strong>scoped regions</strong> should be supported by <strong>Prism Region Navigation </strong>out-of-the-box, you can create a work item in the <a href=\"http://compositewpf.codeplex.com/workitem/list/basic\">Issue Tracker</a> so that the p&amp;p team analyzes it for future releases.</p>\n<p>I hope you find this useful,</p>\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\" target=\"_blank\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-11-15T10:11:37.067-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "700441",
    "ThreadId": "279224",
    "Html": "<p>Hi Damian,</p>\n<p>tx again for reply.</p>\n<p>Scoped regions are&nbsp;discriped in the official Documentation. But the regions did not belong to a control like a tabcontrol. If i create a (global) region in the shell (xaml)&nbsp;like:</p>\n<div style=\"background-color: white; color: black;\">\n<pre>        &lt;TabControl Name=<span style=\"color: #a31515;\">\"TabControlMain\"</span>\r\n                    Grid.Row=<span style=\"color: #a31515;\">\"4\"</span> Grid.Column=<span style=\"color: #a31515;\">\"1\"</span>\r\n                    cal:RegionManager.RegionName=<span style=\"color: #a31515;\">\"{x:Static InfraStructure:ShellRegionNames.ShellTabRegion}\"</span>\r\n                    ItemContainerStyle=<span style=\"color: #a31515;\">\"{DynamicResource TabHeaderStyle}\"</span> \r\n                    SelectionChanged=<span style=\"color: #a31515;\">\"TabControlMain_SelectionChanged\"</span>&gt;\r\n\r\n</pre>\n</div>\n<p>and add views to the region like:</p>\n<div style=\"background-color: white; color: black;\">\n<pre><span style=\"color: blue;\">this</span>.RegionManager.RequestNavigate(\r\n    InfraStructure:ShellRegionNames.ShellTabRegion,\r\n    <span style=\"color: blue;\">new</span> System.Uri(<span style=\"color: #a31515;\">\"ProductFormView\"</span>,\r\n                   System.UriKind.Relative));\r\n</pre>\n</div>\n<p>it works fine. Now the view \"ProductFormView\" owns a tabcontrol (\"ProductFormViewTabRegion\"), too. And it that tabcontrol&nbsp;\"ProductFormViewTabRegion\" i want to add views in the same way as i do it in the shell-tabcontrol \"TabControlMain\". For an example an \"sub\"view to show the masterdata and a second one for the stock. Another important fact is, that i need the possibility, to show more than one \"ProductFormView\" in the \"TabControlMain\" - different products are shown in there own \"ProductFormView\"s. Everything inside the \"ProductFormView\" should be \"local\"!</p>\n<p>Up to know, i did not have a working way.&nbsp;Pherhaps you can take my small sample app and show me in code how i can implement that behaviour. The subviews are not important - important is HOW i make the \"ProductFormViewTabRegion\" local.</p>\n<p>Did i understand it right, that this can not be implement with prism?&nbsp;I read so much about regions, that i am currently confused *smile*</p>\n<p>Thanks again for help</p>",
    "PostedDate": "2011-11-18T14:11:14.747-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "701397",
    "ThreadId": "279224",
    "Html": "<p>Hi,</p>\n<p>Based on my understanding to achieve navigation using Scoped Regions, you could try a similar approach like the one <a href=\"http://blogs.southworks.net/gmaliandi/\">Guido Maliandi</a> suggested in the aforementioned <a href=\"236849\">thread</a>, which is based on modifying the Prism library, specifically the <strong>LoadContent</strong> method of the <strong>RegionNavigationContentLoader</strong> (which is internally called by the <strong>RegionNavigationService</strong>).</p>\n<p>In case the requested view isn't present in the region at the moment navigation is requested, the <strong>RegionNavigationContentLoader</strong> will add the view to the region using the <strong>Region.Add </strong>method. There, you could specify that the view is added using a Scoped Region Manager. However this approach will only work with the view discovery approach, since you won&rsquo;t be able to store or retrieve the scoped region manager  generated when calling the <strong>Region.Add</strong> method.</p>\n<p>I believe you could add some other modifications that might be helpful:</p>\n<p>For example you could decide if you want to use Scoped Regions or not, based on a parameter in the navigation request. (e.g. <strong>ScopedRegionManagerName</strong>). If some value is specified, then scoped regions will be used, and if no value is specified, scoped regions won&rsquo;t be used.</p>\n<p>Also it would be helpful to save the scoped region manager returned by the call to the <strong>Region.Add</strong> method, in case you need to use it in the future. A possible way could be to store it in a shared dictionary, where you can save the value passed in the parameter as a key, and the scoped region manager as its corresponding value.</p>\n<p><em>Note that if you intend to navigate to a view using this approach with a duplicate name, it would crash because it would try to add a duplicate key to a dictionary.</em></p>\n<p>For example, the <strong>LoadContent</strong> method of your custom <strong>RegionNavigationContentLoader</strong> could look like this:</p>\n<div style=\"color: black; background-color: white;\">\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">object</span> LoadContent(IRegion region, NavigationContext navigationContext)\n{\n(...)\n\n<span style=\"color: blue;\">var</span> scopedRegionManagerName = navigationContext.Parameters[<span style=\"color: #a31515;\">\"ScopedRegionManagerName\"</span>];\n\n<span style=\"color: blue;\">if</span> (<span style=\"color: blue;\">string</span>.IsNullOrEmpty(scopedRegionManagerName))\n{\nregion.Add(view);\n}\n<br /><span style=\"color: blue;\">else</span>\n{\n<span style=\"color: blue;\">var</span> scopedRegionManager = region.Add(view, <span style=\"color: blue;\">null</span>, <span style=\"color: blue;\">true</span>);\n\n<span style=\"color: blue;\">var</span> dictionary = ServiceLocator.Current.GetInstance&lt;ScopedRegionManagersSharedDictionary&gt;();\n\ndictionary.Add(scopedRegionManagerName, scopedRegionManager);\n}\n\n<span style=\"color: blue;\">return</span> view;\n}\n(...)\n}\n</pre>\n</div>\n<p>&nbsp;</p>\n<p>Where <strong>ScopedRegionManagersSharedDictionary </strong>can be a class that implements an <strong>Add </strong>method and an indexer that returns the corresponding <strong> IRegionManager </strong>based on the key provided.</p>\n<p>On the other hand, we created a <a href=\"http://compositewpf.codeplex.com/workitem/8927\"> workitem</a> in the issue tracker so that the Prism team considers this for a future release.</p>\n<p>I hope you find this handy.</p>\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a>ï»¿</p>",
    "PostedDate": "2011-11-21T11:55:54.08-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "701694",
    "ThreadId": "279224",
    "Html": "<p>Would it be possible to see a simple example app of using this workaround?</p>",
    "PostedDate": "2011-11-22T03:15:06.957-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "702584",
    "ThreadId": "279224",
    "Html": "<p>Hi,</p>\r\n<p>We thought of an alternative approach which I believe might be a more elegant solution. The approach consist of obtaining the region manager returned by the call of the <strong>Region.Add </strong>method, through the <strong>NavigationResult </strong>passed in the navigation callback from the <strong>RequestNavigate </strong>method instead of using a shared dictionary to save it.</p>\r\n<p>As the result you will be able to navigate with scoped regions, like in the following code snippet:ï»¿</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">this</span>.regionManager.RequestNavigate(\r\n                <span style=\"color: #a31515;\">\"MainRegion\"</span>, \r\n                <span style=\"color: blue;\">new</span> Uri(<span style=\"color: #a31515;\">\"HelloWorldView?createRegionManagerScope=true\"</span>, UriKind.Relative), \r\n                (result) =&gt;\r\n                {\r\n                    <span style=\"color: blue;\">var</span> myRegionManager = result.ExtractRegionManager();\r\n                    myRegionManager.RequestNavigate(<span style=\"color: #a31515;\">\"NestedRegion\"</span>, <span style=\"color: blue;\">new</span> Uri(<span style=\"color: #a31515;\">\"View1\"</span>, UriKind.Relative));\r\n                });\r\n\r\n</pre>\r\n</div>\r\n<p>Below you will find the details of this implementation:</p>\r\n<p>To achieve this scenario, the first thing we needed was a <strong>NavigationResult</strong> that allows us to pass the region manager instance. For this we created a <strong>CustomNavigationResult</strong> class that inherits from <strong>NavigationResult</strong>, but with another constructor which added an <strong>IRegionManager</strong> parameter, that sets its <strong>RegionManager</strong> property.</p>\r\n<p>Next, to obtain the region manager returned by the call of the <strong>Region.Add</strong> method, we needed the <strong>LoadContent</strong> method in the <strong>RegionNavigationContentLoader</strong> to return a <strong>Tuple</strong>&lt;<strong>object</strong>,<strong>IRegionManager</strong>&gt; instead of only an <strong>object</strong> view. Therefore we created a <strong>CustomRegionNavigationContentLoader</strong> and its corresponding interface. Also we changed the name of the parameter passed with the view when navigating to \"<strong><em>createRegionManagerScope</em></strong>\" and verify if its value is &ldquo;<strong>true</strong>&rdquo; to specify if a new region manager must be created (in case scoped regions are used).</p>\r\n<p>This changes can be seen in the following code snippet:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> Tuple&lt;<span style=\"color: blue;\">object</span>, IRegionManager&gt; LoadContent(IRegion region, NavigationContext navigationContext)\r\n        {\r\n(...)\r\n<span style=\"color: blue;\">if</span> (view != <span style=\"color: blue;\">null</span>)\r\n            {\r\n                <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">new</span> Tuple&lt;<span style=\"color: blue;\">object</span>, IRegionManager&gt;(view, region.RegionManager);\r\n            }\r\n\r\n            view = <span style=\"color: blue;\">this</span>.CreateNewRegionItem(candidateTargetContract);\r\n\r\n            <span style=\"color: blue;\">bool</span> createRegionManagerScope = navigationContext.Parameters[<span style=\"color: #a31515;\">\"createRegionManagerScope\"</span>] == <span style=\"color: #a31515;\">\"true\"</span>;\r\n\r\n            <span style=\"color: blue;\">var</span> rm = region.Add(view, <span style=\"color: blue;\">null</span>, createRegionManagerScope);\r\n\r\n            <span style=\"color: blue;\">return</span> <span style=\"color: blue;\">new</span> Tuple&lt;<span style=\"color: blue;\">object</span>, IRegionManager&gt;(view, rm);\r\n        }\r\n(...)\r\n\r\n</pre>\r\n</div>\r\n<p>Also, as the <strong>ExecuteNavigation </strong>method in the <strong>RegionNavigationService </strong>is the one that calls the <strong>LoadContent </strong>method, we had to create a <strong>CustomRegionNavigationService</strong>, to let it receive the returned tuple. In this same method instead of passing the default <strong>NavigationResult </strong>to the <strong>navigationCallback </strong>we pass our <strong>CustomNavigationResult </strong>with the returned region manager as a parameter.</p>\r\n<p>You can find this modifications in the following code snippet:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">private</span> <span style=\"color: blue;\">void</span> ExecuteNavigation(NavigationContext navigationContext, <span style=\"color: blue;\">object</span>[] activeViews, Action&lt;NavigationResult&gt; navigationCallback)\r\n        {\r\n(...)\r\n  Tuple&lt;<span style=\"color: blue;\">object</span>, IRegionManager&gt; tuple = <span style=\"color: blue;\">this</span>.regionNavigationContentLoader.LoadContent(<span style=\"color: blue;\">this</span>.Region, navigationContext);\r\n\r\n                <span style=\"color: green;\">// Raise the navigating event just before activing the view.</span>\r\n                <span style=\"color: blue;\">this</span>.RaiseNavigating(navigationContext);\r\n\r\n                <span style=\"color: blue;\">this</span>.Region.Activate(tuple.Item1);\r\n\r\n                <span style=\"color: green;\">// Update the navigation journal before notifying others of navigaton</span>\r\n                IRegionNavigationJournalEntry journalEntry = <span style=\"color: blue;\">this</span>.serviceLocator.GetInstance&lt;IRegionNavigationJournalEntry&gt;();\r\n                journalEntry.Uri = navigationContext.Uri;\r\n               <span style=\"color: blue;\">this</span>.journal.RecordNavigation(journalEntry);\r\n\r\n                <span style=\"color: green;\">// The view can be informed of navigation</span>\r\n                InvokeOnNavigationAwareElement(tuple.Item1, (n) =&gt; n.OnNavigatedTo(navigationContext));\r\n\r\n                navigationCallback(<span style=\"color: blue;\">new</span> CustomNavigationResult(navigationContext, <span style=\"color: blue;\">true</span>, tuple.Item2));\r\n(...)\r\n}\r\n</pre>\r\n</div>\r\n<p>Finally to avoid modifying the prism library we used the export attribute at the top of our custom classes (<strong>CustomRegionNavigationContentLoader </strong>and <strong>CustomRegionNavigationService</strong>) which allows the <strong>MefBootstrapper </strong>to provide these classes as a default implementation.</p>\r\n<p>How to use:</p>\r\n<p>If you apply this changes, then you will be able to call the <strong>RequestNavigate </strong>method with a delegate method as the navigation callback, which will receive a <strong>NavigationResult</strong>. The only problem is that you will have to cast the <strong>NavigationResult </strong>to our <strong>CustomNavigationResult </strong>class, in order to obtain the desired <strong>regionManager</strong>. Hence we created an extension method called <strong>ExtractRegionManager </strong>in the <strong>NavigationResultExtension </strong>class, which will make things easier.</p>\r\n<p>For those interested, we prepared a sample application that portrays the aforementioned modifications. This sample shows two instances of a view being navigated to using the <strong>RequestNavigate </strong>method, inside a region in a <strong>TabControl</strong>. Each of these views has an inner region, and because this region names will be duplicated they must be defined as scoped regions. You can find the application sample in my <a href=\"https://skydrive.live.com/?cid=7890102b5b8bc928&amp;sc=documents&amp;uc=1&amp;id=7890102B5B8BC928%21103\">Skydrive account</a> under the name <strong>NavigationWithScopedRegionSample</strong>.</p>\r\n<p>I hope you find this useful</p>\r\n<p>&nbsp;</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a>ï»¿</p>",
    "PostedDate": "2011-11-23T13:16:32.177-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "705273",
    "ThreadId": "279224",
    "Html": "<p>Thank you, this is very useful. I'm probably saying something very simple here, but how would you pass the new regionmanager to the newly scoped viewmodel? There isn't a way to get this from the navigationcontext is there?</p>\r\n<p><br />I am wanting to navigate within the scoped viewmodel changing the region within.</p>",
    "PostedDate": "2011-11-30T06:28:11.037-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "705497",
    "ThreadId": "279224",
    "Html": "<p>James,</p>\r\n<p>I'm glad you find this useful. Regarding your question, you might find this <a href=\"http://blogs.southworks.net/aadami/2011/11/30/prism-region-navigation-and-scoped-regions/\">blog post</a> useful, where we implemented the aforementioned suggestions and also added the posibility to pass the new <strong>RegionManager </strong>to the corresponding ViewModel. To achieve this we used the <strong>RegionManagerAwareBehavior </strong>proposed in the following <a href=\"http://blogs.southworks.net/dcherubini/2011/11/10/regions-inside-datatemplates-in-prism-v4-using-a-region-behavior/\">blog post</a> from Damian Cherubini.</p>\r\n<p>I hope you find it helpful</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a>ï»¿</p>",
    "PostedDate": "2011-11-30T12:56:37.69-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "705770",
    "ThreadId": "279224",
    "Html": "<p>Thank you that has sorted me out!</p>",
    "PostedDate": "2011-12-01T03:17:23.57-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "817964",
    "ThreadId": "279224",
    "Html": "<p>I would like to offer another, simpler workaround for this problem.</p>\n<p>The issue could be separated into two parts: to&nbsp;force content loader to add view to the region using scope when required, and accessing correct RegionManager in scoped view.</p>\n<p>To solve first part of the problem we could use interface or custom attribute on the view type. So with&nbsp;just a&nbsp;few lines of code added to LoadContent function we could make&nbsp;the loader to&nbsp;add views with scope when necessary:</p>\n<pre>public object LoadContent(IRegion region, NavigationContext navigationContext)\r\n{\r\n    ...\r\n\r\n    // Check if scoped region is required\r\n    IProvideRegionScopeInfo info = (view as IProvideRegionScopeInfo) ??\r\n                                   (ScopedRegionManagerAttribute)view.GetType()\r\n        .GetCustomAttributes(typeof(ScopedRegionManagerAttribute), false).FirstOrDefault();\r\n\r\n    if (null == info)\r\n        region.Add(view);\r\n    else\r\n        region.Add(view, info.ViewName, info.CreateRegionManagerScope);\r\n\r\n    return view;\r\n}\r\n</pre>\n<p>Accessing the correct manager is even easier. When view is added to the region attached property RegionManager.RegionManageris added and updated with reference to instance of the manager responsible for that view. So if the view is added with scope this property will have reference to correct scoped instance of the manager. <br />All we have to do is to bind to that attached property, this is what&nbsp;these attached properties&nbsp;are for, and use the manager in the&nbsp;View or a&nbsp;ViewModel.</p>\n<p>Sample project ImprovedScopedRegionSample.zip could be downloaded on this page: <a href=\"http://compositewpf.codeplex.com/workitem/8927If\">http://compositewpf.codeplex.com/workitem/8927 </a></p>\n<p>If you need more explanation please see it here:</p>\n<p><a href=\"http://www.codeproject.com/Articles/320673/PrismScopedRegions\">http://www.codeproject.com/Articles/320673/PrismScopedRegions</a></p>",
    "PostedDate": "2012-03-30T14:51:14.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1198992",
    "ThreadId": "279224",
    "Html": "Is there any chance of actually implementing this to be a part of Prism 4.2?<br />\n",
    "PostedDate": "2014-01-27T08:25:38.113-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1214403",
    "ThreadId": "279224",
    "Html": "Hello? Any feedback on this?<br />\n",
    "PostedDate": "2014-02-25T03:46:18.493-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]