[
  {
    "Id": "134432",
    "ThreadId": "40523",
    "Html": "Hi,<br>\r\n<br>\r\nI'm using PRISM V1 in my app's and i really appreciate the work you guys have done!<br>\r\n<br>\r\nBut one thing that really bothers me is the fact that you include in the same assembly (Composite) both the interfaces and implementations. My modules only depend on the interface IModule and they shouldnt have access to the core implementations of the module loaders or enumerators or whatesoever. I'd rather depend on Composite.Common.dll or something like that, which would have only the common interfaces that modules would need to access, while the Composite.dll would be available to the application that has the bootstrapper, for the initializations.<br>\r\n<br>\r\nI dont know why you didnt separate things in PRISM V1, and you still havent done it in PRISM V2, so i guess there must be a good reason for it and i'd like to know :)<br>\r\n<br>\r\nIf you're thinking in ever changing it, i'm sure me and a lot of ppl would be grateful.<br>\r\n<br>\r\nIn the meantime, keep up the good work!<br>\r\n<br>\r\nRegards,<br>\r\nMFelicio.<br>\r\n",
    "PostedDate": "2008-11-22T03:26:11.94-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "134872",
    "ThreadId": "40523",
    "Html": "<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Hi</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">The first drops of the Composite Application Guidance for WPF did have completely separated the interfaces from their implementation. The team decided to change this design to separate UI-specific components from common components used by Composite Applications:</span></p>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><span style=\"font-family:calibri\">The <b>Microsoft.Practices.Composite</b> assembly contains the implementation of the Composite Application Library core components such as modularity, logging and communication services, and several core interfaces’ definitions. This assembly does not contain UI-specific elements and could be potentially used for both WPF and Winforms applications.</span>\r\n<p style=\"margin:0in 0in 0pt 0.5in\"><span style=\"font-family:symbol\">·<span style=\"font:7pt 'times new roman'\">         </span><span style=\"font-family:calibri\">The <b>Microsoft.Practices.Composite.Wpf</b> assembly contains the implementation of Composite Application Library components that target Windows Presentation Foundation applications including commands, regions, and events.</span>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">The reason that some interfaces and implementations remains in the same assembly is to keep a simpler usage and avoid you having to add more references to your projects, or if you prefer to consume the library as source code, avoid having several projects in your solution. Having separate assemblies for interface would trigger an assembly explosion that goes against the <i>simple first</i> principle.</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Do you have a concrete scenario where having implementations close to the interfaces would be a problem? If so, please let us know, so the Prism team can take the feedback into account.</span></p>\r\n<p style=\"margin:0in 0in 0pt\"><span style=\"font-family:calibri\">Furthermore, please feel free to add a <b>Workitem</b> in the </span><a href=\"http://www.codeplex.com/CompositeWPF/WorkItem/List.aspx\"><span style=\"font-family:calibri\">Issue Tracker</span></a><span style=\"font-family:calibri\"> to let the people vote it and perhaps your suggestion could be consider for future releases.</span></p>\r\n<p style=\"margin:0in 0in 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt -0.6pt\"><span style=\"font-family:calibri\">Please let me know if this helps.</span></p>\r\n<p style=\"margin:0in 0in 0pt -0.6pt\"><span style=\"font-family:calibri\"> </span></p>\r\n<p style=\"margin:0in 0in 0pt -0.6pt\"><span style=\"font-family:calibri\">Mariano Converti</span></p>\r\n<span style=\"font-size:11pt;font-family:'calibri','sans-serif'\"><a href=\"http://blogs.southworks.net/mconverti\">http://blogs.southworks.net/mconverti</a></span></span></p>\r\n</span></p>\r\n",
    "PostedDate": "2008-11-24T12:09:14.61-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "134938",
    "ThreadId": "40523",
    "Html": "Hi Mariano,<br>\r\n<br>\r\nThanks for your reply. I understand your point of view. Keep it simple and usable from both WPF and Windows Forms.<br>\r\n<br>\r\nBut now imagine deploying modules which will be downloaded from a remote server, like the silverlight aproach.These modules have to reference an assembly that can potentially grow-up in size, when it would be preferable to have references to an assembly that has only a couple of interfaces, thus decreasing the download size.<br>\r\n<br>\r\nAlso, the implementations usually tend to change but not the interfaces, so they should be separated.<br>\r\n<br>\r\nRegards,<br>\r\nMFelicio<br>\r\n",
    "PostedDate": "2008-11-24T16:28:02.623-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "135546",
    "ThreadId": "40523",
    "Html": "Hi MFelicio,<br>\r\n<br>\r\nRegarding the concern about size in the module deployment, this needn't be an issue, because you can assume that those 2 DLLs will be already loaded in the context of the application, so you don't need to deploy those assemblies with your modules.<br>\r\nYou can accomplish this by setting Copy Local to false on the reference properties from your modules.<br>\r\n<br>\r\nRegarding your other concern, about interfaces being less prone to change (and versioning), it is true. But here is where simplicity on the use comes in to play, and balances the scale. It also simplifies versioning of the release, because all DLLs can have the same version number, and it's easier to upgrade and to create the release for us.<br>\r\n<br>\r\nIf you think separating the interfaces is a very important feature, please feel free to add it to the issue tracker and have people vote on it. We are really driven by the community, so if we find that this is something that many people want and outweights the simple use scenario, we will probably include it.<br>\r\n<br>\r\nLet me know your thoughts about this.<br>\r\n<br>\r\nJulian Dominguez<br>\r\n<a href=\"http://blogs.southworks.net/jdominguez\">http://blogs.southworks.net/jdominguez</a><br>\r\n",
    "PostedDate": "2008-11-26T05:50:11.217-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]