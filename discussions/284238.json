[
  {
    "Id": "717425",
    "ThreadId": "284238",
    "Html": "\r\n<p>&nbsp;</p>\r\n<p>Hi,<br>\r\nI am using the MVVMP pattern, which I find superior to MVVM.<br>\r\nFollowing my preseneter constrcutor</p>\r\n<p><br>\r\npublic MainPresenter(IMainView view) { <br>\r\nviewModel = new MainViewModel (); <br>\r\nthis.view = view; <br>\r\n}</p>\r\n<p><br>\r\nRegistration of view done in the following way</p>\r\n<p><br>\r\n...RegisterViewWithRegion(RegionNames.MainContentRegion,()=&gt;container.Resolve&lt;MainPresenter&gt;().view);</p>\r\n<p><br>\r\nI would like to support &quot;navigation&quot; to presenters using same way prism does for view and view model<br>\r\nMy view and my view model doesnot hold a reference to the presenter<br>\r\nBoth must&nbsp; not implement INavigationAware<br>\r\nI also dont want to declare navigation events in IMainView so the presenter can handle them<br>\r\nAnd i need to pass parameters(objects) between presenters</p>\r\n<p><br>\r\nLooks like i need some application controller which tracks active presenters.</p>\r\n<p><br>\r\nWhat would be the best way to do it?<br>\r\nThanks in advance</p>\r\n<p><br>\r\n&nbsp;</p>\r\n",
    "PostedDate": "2011-12-27T05:16:03.18-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "717504",
    "ThreadId": "284238",
    "Html": "<p>&nbsp;</p>\r\n<p>This is my first try without handling re activation, the view displayed but command not get called</p>\r\n<p>If i am casting IView to UserControl i also dont get the Loaded event!!</p>\r\n<p>public static void ActivatePresenter(this IRegionManager manager , string regionName,string presenterName)<br />{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IUnityContainer container = ServiceLocator.Current.GetInstance&lt;IUnityContainer&gt;();</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IPresenter presenter = container.Resolve&lt;IPresenter&gt;(presenterName);</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IView view = presenter.View;</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; manager.RegisterViewWithRegion(regionName, view.GetType());</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; manager.RequestNavigate(regionName,GetNavigationName());</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; presenter.Activate();//should be called after the View is loaded<br />}</p>\r\n<p>in presenter:</p>\r\n<p>&nbsp;public void Activate()<br />&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; viewModel.UpdateReportPropertiesCommand = new DelegateCommand(LoadReport);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.View.DataContext = viewModel;<br />&nbsp;}</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-12-27T09:31:19.413-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "717513",
    "ThreadId": "284238",
    "Html": "<div id=\"_mcePaste\" class=\"mcePaste\" style=\"position: absolute; width: 1px; height: 1px; overflow: hidden; top: 0px; left: -10000px;\">ï»¿</div>\r\n<p>ok,it is working now,i should use</p>\r\n<p><em>ContainerControlledLifetimeManager</em></p>\r\n<p>when registering the view type in the container</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-12-27T09:50:08.037-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "717533",
    "ThreadId": "284238",
    "Html": "<p>Hi,</p>\r\n<p>As far as I know, the Prism Library is intended to be neutral respecting the choice of  separated UI patterns. You can be successful with any of the available patterns,  although considering the facilities in WPF and Silverlight for data  binding, commands, and behaviors, the MVVM pattern is the recommended  approach. Based on this, Prism (as out of the box) provides navigation functionality focusing on the case where the application is using the MVVM pattern.</p>\r\n<p>For the MVVMP pattern case, the implementation details for capabilities you describe above will depend mostly of your personal preferences and the requirements of your scenario.</p>\r\n<p>Based on my understanding, as a possible approach you might be able to perform navigation using a kind of <em>\"presenter first approach\"</em>:</p>\r\n<p>For example, instead of registering the view for navigation, you could register the presenter doing something like this:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: green;\">// We register the MainPresenter instead of its view.</span>\r\nContainer.RegisterType&lt;Object, MainPresenter&gt;(<span style=\"color: #a31515;\">\"MainPresenter\"</span>);\r\n\r\n<span style=\"color: green;\">// Then we invoke a navigation request like usual.</span>\r\nregionManager.RequestNavigate(<span style=\"color: #a31515;\">\"MyRegion\"</span>, <span style=\"color: blue;\">new</span> Uri(<span style=\"color: #a31515;\">\"MyPresenter\"</span>, UriKind.Relative));\r\n</pre>\r\n</div>\r\n<p>When the navigation request is performed, the <strong>MainPresenter </strong>presenter will be injected in the region instead of its view. Then, in the aforementioned region, you could take benefit for the capabilities of <strong>DataTemplates</strong>, and create a binding to the <strong>View </strong>property of the presenter, for example:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ContentControl</span> <span style=\"color: red;\">prism:RegionManager.RegionName</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">MyRegion</span><span style=\"color: black;\">\"</span> <span style=\"color: blue;\">&gt;</span>\r\n    <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ContentControl.ContentTemplate</span><span style=\"color: blue;\">&gt;</span>\r\n        <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">DataTemplate</span> <span style=\"color: red;\">DataType</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">infra:IPresenter</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n            <span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">ContentControl</span> <span style=\"color: red;\">Content</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{Binding Path=View}</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">/&gt;</span>\r\n        <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">DataTemplate</span><span style=\"color: blue;\">&gt;</span>\r\n    <span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">ContentControl.ContentTemplate</span><span style=\"color: blue;\">&gt;</span>\r\n<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">ContentControl</span><span style=\"color: blue;\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p>Like this, the presenter will be in charge of creating its view and view model, wiring them together and exposing its <strong>View</strong>.</p>\r\n<p>As a possible approach to communicate between presenters, you could use a <strong>Shared Service</strong> that could be obtained though the container. You can find more information about communication between components in the following chapter of the prism documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28PandP.40%29.aspx\">Chapter 9: Communicating Between Loosely Coupled Components on MSDN</a></li>\r\n</ul>\r\n<p>Also, you can pass parameters to the presenter when performing the navigation request, like you would do with a view.</p>\r\n<p>As a side note, take into account that there is a known issue in Prism, where if a visual element containing a region is not part of the logical tree of the control (this can happen, for example, when using DataTemplates), the region might not be registered in the corresponding <strong>RegionManager</strong>. You can find more information about this issue, as well as various workarounds in the following work item:</p>\r\n<ul>\r\n<li><a href=\"http://compositewpf.codeplex.com/workitem/3612\">Region Registration Fails w/ Templated Controls</a></li>\r\n</ul>\r\n<p>I hope you find this useful,<br /><br />Damian Cherubini<br /><a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-12-27T11:27:33.67-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "717537",
    "ThreadId": "284238",
    "Html": "<p>&nbsp;</p>\r\n<p dir=\"ltr\">Awesome,<span style=\"font-family: 'Segoe UI','sans-serif'; color: black; font-size: 10pt;\">Thanks! Actually it was my first attempt, but I thought I need to implement custom</span></p>\r\n<p><em><span style=\"color: black; font-size: 10pt;\"><span style=\"font-family: 'Segoe UI','sans-serif'; color: black; font-size: 10pt;\">RegionNavigationContentLoader</span></span></em></p>\r\n<p><span style=\"color: black; font-size: 10pt;\"><span style=\"font-family: 'Segoe UI','sans-serif'; color: black; font-size: 10pt;\">In order to bring the content (view) out of the presenter.</span></span></p>\r\n<p><span style=\"color: black; font-size: 10pt;\"><span style=\"font-family: 'Segoe UI','sans-serif'; color: black; font-size: 10pt;\">It is just that I am not too experience with WPF so i didnt even think about using xaml</span></span></p>\r\n<p><span style=\"color: black; font-size: 10pt;\"><span style=\"font-family: 'Segoe UI','sans-serif'; color: black; font-size: 10pt;\">Presenter first is indeed my preferred approach.</span></span></p>\r\n<p><span style=\"color: black; font-size: 10pt;\"><span style=\"font-family: 'Segoe UI','sans-serif'; color: black; font-size: 10pt;\">I prefere passing paramaters using the <em>INavigationAware</em></span></span></p>\r\n<p><span style=\"color: black; font-size: 10pt;\"><span style=\"font-family: 'Segoe UI','sans-serif'; color: black; font-size: 10pt;\">I will try it.</span></span></p>\r\n<p><span style=\"color: black; font-size: 10pt;\"><span style=\"font-family: 'Segoe UI','sans-serif'; color: black; font-size: 10pt;\">Thanks for the info,helped me a lot,</span></span></p>\r\n<p dir=\"ltr\">&nbsp;</p>",
    "PostedDate": "2011-12-27T11:45:44.143-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]