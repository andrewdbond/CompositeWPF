[
  {
    "Id": "503617",
    "ThreadId": "229981",
    "Html": "<p>Hi guys,</p>\r\n<p>Since this is my first post, thanks to all contributors for the great work and for better software (Let's hope I'll get there !!).</p>\r\n<p>&nbsp;</p>\r\n<p>About a year ago, I discovered &quot;patterns &amp; practices&quot; and&nbsp;found quantity of rich documentation like : &quot;Microsoft Application Architecture Guide&quot;, &quot;Enterprise Library&quot;, Unity Container, ...</p>\r\n<p>But going into code examples, using software factory and CAB, I stepped back, lost by the complexity AND the difficulty to understand routines.</p>\r\n<p>I know attributes are part of the framework, and I use them when necessary, but I personnaly found the extensive use of them makes code harder to read, applications harder to understand and harder to explain to other programmers (beginners or not).</p>\r\n<p>&nbsp;</p>\r\n<p>About half a year ago, around the time CAL got renamed to Prism, everything started to clear again : compact library, great separation of concerns, nice examples, ...</p>\r\n<p>I was starting to get familiar with boostrapper, modularity, container, communication, UI composition&nbsp;and even new concepts like M-V-VM, or shared code between Silverlight and WPF.</p>\r\n<p>Since the introduction of MEF within Prism, everything got MEF-coded, and the&nbsp;StrockTraderRI&nbsp;example in the last version (Prism4Drop9) is getting unreadable to me.</p>\r\n<p>I don't say MEF is bad, I don't say I'll never use it (I will probably take a look into it) but I wish Prism versions and examples could remain POCU :-) &quot;plain old code understandable&quot;.</p>\r\n<p>&nbsp;</p>\r\n<p>Anyway, is it just the way you'd rather code or&nbsp;what's the difference (performance, memory, accessibility, ...) between : <em>container.RegisterType&lt;ILoggerFacade, LoggerFacade&gt;</em> and <em>[Export(typeof(ILoggerFacade)] public class LoggerFacade : ILoggerFacade</em> ...</p>\r\n<p>(I'm not talking here about differences between both containers, which are well explained in documentation).</p>\r\n<p>&nbsp;</p>\r\n<p>Well, I hope to stick with Prism for a long time now, so that's the thought I wanted to share.</p>\r\n<p>St&eacute;phane.</p>\r\n<p>&nbsp;</p>\r\n<p>PS : I have no problem with using previous versions of Prism, but as new functionnality (and bug corrections) are added within each new versions, I like to stay up to date.</p>",
    "PostedDate": "2010-10-07T06:05:02.553-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "503830",
    "ThreadId": "229981",
    "Html": "<p>Hi St&eacute;phane,</p>\r\n<p>Nice to see that you started using the drop 9 and thanks for your feedback, since this is really valuable. As you mentioned the  attributes are part of the .NET, and MEFEE code&nbsp;is decoration-oriented  (declarative), while Unity&nbsp;tends to be more&nbsp;imperative. But Prism is  container-agnostic and choosing the container is one the key  decisions when starting with Prism.</p>\r\n<p>Therefore, I think that you can take&nbsp;this into account when choosing /changing your container, since this is something valid.</p>\r\n<p>For more information on this topic, you could take a look at the following  forum thread, where a member of the product team has answered interesting  questions about this:</p>\r\n<ul>\r\n<li><a href=\"View.aspx?ThreadId=228924\">MEF or  Unity for Prism v4 &quot;Dependency Injection&quot;?</a></li>\r\n</ul>\r\n<p>Fernando Antivero&nbsp;<br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n<ul>\r\n</ul>",
    "PostedDate": "2010-10-07T11:22:04.193-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "504092",
    "ThreadId": "229981",
    "Html": "<p>Thanks for the quick answer.</p>\r\n<p>&nbsp;</p>\r\n<p>For the time being, I have made a choice of using Unity and the more imperative code-declaration style (vs. MEF and declarative attribute-declaration).</p>\r\n<p>Anyway, as said in the post you refer to : &quot;it is possible to port an application from Unity to MEF with just a few day(s) of work&quot;.</p>\r\n<p>&nbsp;</p>\r\n<p>Do you plan to support both MEF and Unity branch through all new Prism releases ?</p>\r\n<p>Do you think we'll get to see all new features (navigation, MVVM integration, ...) with nice examples/quickstarts both in MEF-style and Unity-style ?</p>\r\n<p>&nbsp;</p>\r\n<p>St&eacute;phane.</p>",
    "PostedDate": "2010-10-08T00:06:25.83-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "504247",
    "ThreadId": "229981",
    "Html": "<p>Hi St&eacute;phane,</p>\r\n<p>Regarding to your first questions, I have no official information about this. In general, this kind of decisions are taken based on design decisions from the product team as well as community feedback (e.g. community surveys). <br><br>From the Major Changes section in the <a href=\"http://compositewpf.codeplex.com/releases/view/53420\">Download Page</a>: <em>The Prism Library 4.0 code base, reference implementations, and QuickStarts are now code complete. </em>In general, when the code is completed, the next drops contain bug fixes but do not add new features.<em><br></em></p>\r\n<p>Fernando Antivero&nbsp;<br><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>",
    "PostedDate": "2010-10-08T06:42:50.667-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]