[
  {
    "Id": "938099",
    "ThreadId": "402303",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I'm implemeting a wizard like window using SL navigation in a Prism application and encounter error &quot;Content for the URI cannot be loaded&quot;. I looked at this link;\r\n<a href=\"http://compositewpf.codeplex.com/discussions/268440\">http://compositewpf.codeplex.com/discussions/268440</a></p>\r\n<p>and added RegisterType code&nbsp;but no success.</p>\r\n<p>I created a bare minimum solution to show this (</p>\r\n<p><a href=\"https://skydrive.live.com/redir?resid=4F0CE6C357477187!121&authkey=!jAqYuAXpZr0%24\">https://skydrive.live.com/redir?resid=4F0CE6C357477187!121&amp;authkey=!jAqYuAXpZr0%24</a></p>\r\n<p>).</p>\r\n<p>&nbsp;The &quot;Open Wizard&quot; button suppose to open wizard widow using MainView.xaml but it errors out.</p>\r\n<p>Can you help me with the problem? Thank you!</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-11-07T10:52:11.287-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "938644",
    "ThreadId": "402303",
    "Html": "\r\n<p>Hi,<br>\r\n<br>\r\nBased on my understanding, the cause of your problem is that the <strong>Silverlight</strong> navigation framework does not directly support the use of dependency injection containers, which you may need if you want to use views defined in different loosely\r\n coupled modules. As far as I know, the default <strong>Frame</strong>'s <strong>\r\nContentLoader </strong>only loads pages from the main application package (.<strong>xap\r\n</strong>file). Hence, you may not be able to directly target your views using the\r\n<strong>MappedUri </strong>property (e.g like in your <strong>MainView.xaml</strong>), unless the project where your views reside is being referenced by the main project, or this will cause the error you mentioned.</p>\r\n<p>In order to avoid this problem without referencing your module projects, you will not only have to register your views in the container as you mentioned, but also you may have to extend the\r\n<strong>Silverlight </strong>default navigation system by setting the <strong>Frame</strong>'s\r\n<strong>ContentLoader </strong>property to a custom <strong>INavigationContentLoader</strong> implementation, which is used by the frame to load the content associated with a specific\r\n<strong>URI</strong>, allowing to perform arbitrary <strong>URI </strong>resolution. For example this implementation could resolve the views from the dependency injection container based on the\r\n<strong>Uri </strong>passed. An example on how to implement a custom content loader that also integrates\r\n<strong>Silverlight Frame Navigation </strong>with <strong>Prism </strong>region navigation can be found in\r\n<em>Karl Shifflett</em>'s blogs suggested by <em>Guido Maliandi</em> in the aforementioned related thread:</p>\r\n<ul>\r\n<li><a href=\"http://blogs.msdn.com/b/kashiffl/archive/2011/03/10/prism-4-region-navigation-with-silverlight-frame-navigation-and-unity.aspx\">Prism 4 Region Navigation with Silverlight Frame Navigation and Unity</a>\r\n</li><li><a href=\"http://blogs.msdn.com/b/kashiffl/archive/2010/10/05/integrating-prism-v4-region-navigation-with-silverlight-frame-navigation.aspx\" target=\"_blank\"><span style=\"color:#0066cc\">Integrating Prism v4 Region Navigation with Silverlight Frame Navigation</span></a>\r\n</li></ul>\r\n<p>In my opinion these could be an useful starting point to achieve this kind of functionality.</p>\r\n<p>As a side note if there is no specific requirement for using <strong>Frame </strong>\r\nnavigation for your wizard, I believe you could also try using the <strong>Prism </strong>\r\nregion navigation API instead, which by default support navigation to views in loosely coupled modules.<br>\r\n<br>\r\nI hope you find this handy,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-11-08T09:26:06.817-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "939106",
    "ThreadId": "402303",
    "Html": "<p>In my case, the wizard is inside a module, so maybe using Prism navigation makes more sense?</p>\r\n<p>The wizard is in a child window, when I resolve the region manager using Service.Location, it dosn't see the region defined in child window. Can you point me to a sample or a start how to use Prism navigation using child window?</p>\r\n<p>Thanks for your help.</p>",
    "PostedDate": "2012-11-09T05:58:59.603-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "939264",
    "ThreadId": "402303",
    "Html": "<p>Hi Julie,</p>\r\n<p>Based on my understanding, the reason behind why the <strong>ChildWindow</strong>'s region is not present in the <strong>RegionManager </strong>is because your <strong>ChildWindow </strong>has no <strong>RegionManager </strong>attached to it.</p>\r\n<p>By default, <strong>Prism </strong>automatically attaches its main <strong>RegionManager </strong>to the <strong>RootVisual </strong>element of your <strong>Silverlight </strong>application. However, as far as I know, for any other element which is not part of the visual tree of your <strong>RootVisual </strong>element, you will need to set the <strong>RegionManager </strong>in it manually, for example, by using the following method:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>RegionManager.SetRegionManager(childWindow, regionManager);\r\n</pre>\r\n</div>\r\n</p>\r\n<p>You can find a sample that uses navigation on a region inside a <strong>ChildWindow </strong>in the following <strong>SkyDrive </strong>account with the name <strong>RegionInChildWindowWithNavigation.zip</strong>:</p>\r\n<ul>\r\n<li><a href=\"https://skydrive.live.com/?cid=7890102B5B8BC928&amp;id=7890102B5B8BC928!103#\">RegionInChildWindowWithNavigation.zip in SkyDrive</a></li>\r\n</ul>\r\n<p>I hope you find this useful,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-11-09T10:18:53.687-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "940997",
    "ThreadId": "402303",
    "Html": "\r\n<p>Hi Damian,</p>\r\n<p>Thanks for the example. I was able to use it and converted to use Unity container. Manually set RegionManager was required to make my child window work, even you didn't need it in your example.</p>\r\n<p>Now I'm trying to understand how this works. My child window is in the same location as Shell. Shell will recieve&nbsp;Prism events from different modules and open up child window with&nbsp;different views from those&nbsp;modules. I have this line in my\r\n ChildWindow constructor:</p>\r\n<pre style=\"font-family:Consolas; background:white; color:black; font-size:13px\">container.RegisterType&lt;<span style=\"color:#2b91af\">WizardChildWindow</span>&gt;(<span style=\"color:blue\">new</span>&nbsp;<span style=\"color:#2b91af\">ContainerControlledLifetimeManager</span>());\r\n</pre>\r\n<p>And in my ShellViewModel, in event subscriber:</p>\r\n<pre style=\"font-family:Consolas; background:white; color:black; font-size:13px\"><span style=\"color:#2b91af\"><pre style=\"font-family:Consolas; background:white; color:black; font-size:13px\"><span style=\"color:green\">//ChildWindow&nbsp;wizard&nbsp;=&nbsp;ServiceLocator.Current.GetInstance&lt;Main.Views.ChildWindow&gt;(); This works too</span></pre>\n</span></pre>\r\n<pre style=\"font-family:Consolas; background:white; color:black; font-size:13px\"><span style=\"color:#2b91af\">ChildWindow</span>&nbsp;wizard&nbsp;=&nbsp;<span style=\"color:blue\">this</span>._container.Resolve&lt;Main.Views.<span style=\"color:#2b91af\">ChildWindow</span>&gt;();</pre>\r\n<pre style=\"font-family:Consolas; background:white; color:black; font-size:13px\"><span style=\"color:#2b91af\">RegionManager</span>.SetRegionManager(wizard,&nbsp;_regionManager);</pre>\r\n<pre style=\"font-family:Consolas; background:white; color:black; font-size:13px\">wizard.Show();\r\n</pre>\r\n<pre style=\"font-family:Consolas; background:white; color:black; font-size:13px\">_regionManager.RequestNavigate(<span style=\"color:#a31515\">&quot;ChildWindowRegion&quot;</span>, &quot;ViewFromOtherModule&quot;);</pre>\r\n<p>In this implementation, is &quot;RegisterType&quot; in the right place?&nbsp;Should&nbsp;&quot;Resolve&quot; and &quot;SetRegionManger&quot; for&nbsp;ChildWindow&nbsp;only run once, so they should not be in event subscriber?</p>\r\n<p>Using &quot;RegisterType&quot; in Unity is going to register an instance? There is&nbsp;the same&nbsp;instance of ChildWindow evey time child window is opened?</p>\r\n<p>Thanks for your help!</p>\r\n",
    "PostedDate": "2012-11-13T06:59:38.18-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "941123",
    "ThreadId": "402303",
    "Html": "\r\n<p>Hi Julie,</p>\r\n<p>In my opinion, the registration of the <strong>ChildWindow </strong>type should not be in the constructor of that same type. Based on my understanding, by doing this the\r\n<strong>ChildWindow </strong>type would be registered again each time it's constructed, which can lead to unexpected behaviors. If the\r\n<strong>ChildWindow </strong>class is defined in the <strong>Shell</strong> project then you can register it during the bootstrapping process, for example in the\r\n<strong>ConfigureContainer </strong>method of your <strong>Bootstrapper </strong>\r\nclass. On the other hand, if the class is defined in a module, you can register it in its\r\n<strong>Initialize </strong>method.</p>\r\n<p>Based on my understanding, even if you are retrieving the <strong>ChildWindow </strong>\r\nfrom the container and setting its <strong>RegionManager </strong>each time the event is raised, it should not generate any problems in your scenario. As you are registering the\r\n<strong>ChildWindow </strong>type as a singleton (using the <strong>ContainerControlledLifetimeManager</strong>) each time you resolve it from the container you are obtaining the same instance of\r\n<strong>ChildWindow</strong>. Then, you are setting the same <strong>RegionManager\r\n</strong>and showing the same <strong>ChildWindow </strong>than before.</p>\r\n<p>However, if you are planing to use always the same <strong>ChildWindow </strong>\r\nfor the wizard, in my opinion it would be a cleaner approach to obtain the <strong>\r\nChildWindow </strong>from the container and setting its <strong>RegionManager </strong>\r\nonly once, for example, in the constructor of the <strong>ShellViewModel</strong>.</p>\r\n<p>I hope this helps,</p>\r\n<p>Damian Cherubini<br>\r\n<a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>\r\n",
    "PostedDate": "2012-11-13T10:24:30.807-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]