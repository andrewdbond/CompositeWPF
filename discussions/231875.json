[
  {
    "Id": "510773",
    "ThreadId": "231875",
    "Html": "<p>I have a busy indicator in my shell. I have an event that I fire anywhere in the app that will change IsBusy to true. I have a collapsed border that is bound to the IsBusy property. In one of my modules, I fire the WaitScreenEvent with true, run my async process using Reactive Extensions. I'm using a Scheduler option of Dispatcher. I can see from my debug output, IsBusy goes true, items are added to my observable collection, and then IsBusy goes false. However, the border never updates. The subscription on the event is ThreadOption.BackgroundThread. I observed the same behavior when I had it at ThreadOption.UIThread too. Thanks.</p>",
    "PostedDate": "2010-10-21T14:19:14.607-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "511127",
    "ThreadId": "231875",
    "Html": "\r\n<p>Not sure if this helps you or not, but I was having the same problem at first. I'm assuming that what I have below is similar to what you have. If so, the part that was necessary is below, which I had to put in my ViewModel</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>ProgressBarEvent progressBarEvent = _eventAggregator.GetEvent&lt;ProgressBarEvent&gt;();\r\nprogressBarEvent.Subscribe(OnProgressBarEvent, Microsoft.Practices.Prism.Events.ThreadOption.BackgroundThread);\r\n</pre>\r\n<pre>---------------------------------------------------------</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>  <span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> OnProgressBarEvent(<span style=\"color:blue\">object</span> args)\r\n            {\r\n                ProgressBarActionArgs pargProgressBarAction = args <span style=\"color:blue\">as</span> ProgressBarActionArgs;\r\n                <span style=\"color:blue\">if</span> (pargProgressBarAction == <span style=\"color:blue\">null</span>)\r\n                {\r\n                    <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> Exception(<span style=\"color:#a31515\">&quot;Arguments passed into OnProgressBarEvent should only be of type 'ProgressBarActionArgs'&quot;</span>);\r\n                }\r\n\r\n                UpdateStatusBar(pargProgressBarAction.StatusMessage, pargProgressBarAction.ErrorMessage, pargProgressBarAction.ProgressBarAction);\r\n\r\n            }\r\n</pre>\r\n</div>\r\n<p>----------------------------------------------------------------------------------</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> UpdateStatusBar(<span style=\"color:blue\">string</span> statusMessage, <span style=\"color:blue\">string</span> errorMessage, ProgressBarEnum progressBarAction)\r\n            {\r\n                ThreadStart start = <span style=\"color:blue\">delegate</span>()\r\n                {\r\n                    \r\n                    DispatcherOperation op = Dispatcher.BeginInvoke(\r\n                        DispatcherPriority.Send,\r\n                        <span style=\"color:blue\">new</span> Action&lt;<span style=\"color:blue\">string</span>, <span style=\"color:blue\">string</span>, ProgressBarEnum&gt;(SetStatus),\r\n                        statusMessage, errorMessage, progressBarAction);\r\n\r\n                    DispatcherOperationStatus status = op.Status;\r\n                    <span style=\"color:blue\">while</span> (status != DispatcherOperationStatus.Completed)\r\n                    {\r\n                        status = op.Wait(TimeSpan.FromMilliseconds(1000));\r\n                        <span style=\"color:blue\">if</span> (status == DispatcherOperationStatus.Aborted)\r\n                        {\r\n                            <span style=\"color:green\">// Alert Someone</span>\r\n                        }\r\n                    }\r\n                };\r\n\r\n                <span style=\"color:blue\">new</span> Thread(start).Start();\r\n            }\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>-------------------View Model Code--------------------------</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">void</span> OKClicked(<span style=\"color:blue\">object</span> sender, EventArgs e)\r\n        {\r\n            <span style=\"color:blue\">base</span>.UpdateStatusBar(ProgressBarEnum.Start, <span style=\"color:#a31515\">&quot;Searching&quot;</span>);\r\n\r\n            mWorker = <span style=\"color:blue\">new</span> System.ComponentModel.BackgroundWorker();\r\n            mWorker.DoWork &#43;= <span style=\"color:blue\">new</span> System.ComponentModel.DoWorkEventHandler(mWorker_DoWork);\r\n            mWorker.WorkerReportsProgress = <span style=\"color:blue\">true</span>;\r\n            mWorker.WorkerSupportsCancellation = <span style=\"color:blue\">true</span>;\r\n            mWorker.RunWorkerCompleted &#43;= <span style=\"color:blue\">new</span> System.ComponentModel.RunWorkerCompletedEventHandler(mWorker_RunWorkerCompleted);\r\n            \r\n            mWorker.RunWorkerAsync();\r\n            System.Threading.Thread.Sleep(10);\r\n            \r\n        }\r\n</pre>\r\n</div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">void</span> mWorker_DoWork(<span style=\"color:blue\">object</span> sender, DoWorkEventArgs e)\r\n        {\r\n            RunSearch();\r\n            \r\n        }\r\n</pre>\r\n</div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">void</span> mWorker_RunWorkerCompleted(<span style=\"color:blue\">object</span> sender, RunWorkerCompletedEventArgs e)\r\n        {\r\n            ProcessQueryResults();\r\n           \r\n            <span style=\"color:blue\">base</span>.UpdateStatusBar(ProgressBarEnum.Stop, <span style=\"color:blue\">string</span>.Format(<span style=\"color:#a31515\">&quot;{0} Records Returned&quot;</span>, SearchResults.Count.ToString(<span style=\"color:#a31515\">&quot;#,##0&quot;</span>)));\r\n            \r\n        }\r\n</pre>\r\n</div>\r\nThe one caveat to this is that I didn't feel like messing with the dispatcher in the RunSearch, so rather than putting the results directly in the dependency property that the UI is bound to, I put the results in a module level variable and then in the ProcessQueryResults,\r\n I pushed that into my dependency property.\r\n<p></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-22T07:36:05.08-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "511314",
    "ThreadId": "231875",
    "Html": "\r\n<p>I played around with this before your response. I believe I essentially have the same thing:</p>\r\n<p>ViewModel</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">var</span> cycles = <span style=\"color:blue\">new</span> ObservableCollection&lt;Cycle&gt;();\r\n\r\n_cycleInvoicingService.GetCycles(CompanyID).Subscribe(\r\n    item =&gt; cycles.Add(item),\r\n    ex =&gt; EventAggregator.GetEvent&lt;ExceptionEvent&gt;().Publish(<span style=\"color:blue\">new</span> ExceptionEvent(ex)),\r\n    () =&gt; {\r\n        EventAggregator.GetEvent&lt;WaitScreenEvent&gt;().Publish(<span style=\"color:blue\">false</span>);\r\n        Cycles = <span style=\"color:blue\">new</span> ObservableCollection&lt;Cycle&gt;(cycles);\r\n    });\r\n\r\nEventAggregator.GetEvent&lt;WaitScreenEvent&gt;().Publish(<span style=\"color:blue\">true</span>);\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>I also noticed the issue with binding and being on the same thread. That's why I assign my local collection to the dependency property in the Subscribe's &quot;finally&quot;. &nbsp;Here is my service:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> IObservable&lt;Cycle&gt; GetCycles(<span style=\"color:blue\">int</span> companyId) {\r\n    <span style=\"color:blue\">return</span>\r\n        Observable.Using(\r\n            () =&gt; <span style=\"color:blue\">new</span> CycleInvoicingModelContainer(),\r\n            container =&gt; {\r\n                container.Connection.ConnectionString = _connectionService.GetEntityConnectionString(companyId,\r\n                                                                                                        container);\r\n                <span style=\"color:blue\">return</span> container.Cycles.Where(c =&gt; c.Posted == <span style=\"color:#a31515\">&quot;Y&quot;</span>).OrderBy(c =&gt; c.Creation_Date).ToObservable(Scheduler.ThreadPool);\r\n\r\n            });\r\n}\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-22T14:08:32.847-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]