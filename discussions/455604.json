[
  {
    "Id": "1088725",
    "ThreadId": "455604",
    "Html": "Apologies in advance for the long post. I'm having a hard time understanding if/how/when views and view models are cleaned up and GC'd/disposed.\r<br />\n<br />\nSome background on my app: it's WPF and Prism 4.1, and I'm using Castle Windsor as my IoC. The app consists of a &quot;main&quot; window containing a region into which I load a &quot;results&quot; view. The &quot;results&quot; view contains a number of regions of its own - these always show the same view, so they are loaded using the &quot;<em>regionManager.RegisterViewWithRegion</em>&quot; notation during application startup. These child regions do not participate in navigation at runtime.\r<br />\n<br />\nAll views and view-models are registered with Castle as &quot;transient&quot;. View-models are decorated with the &quot;<em>[RegionMemberLifetime(KeepAlive = false)]</em>&quot; attribute, and the views include the &quot;<em>ClearChildViewsRegionBehavior.ClearChildViews=&quot;True&quot;</em>&quot; attached property. View-models are injected into their corresponding view's constructor (I believe this is &quot;view first&quot;?). \r<br />\n<br />\nDespite all this, if I navigate away from the &quot;results&quot; view (using <em>regionManager.RequestNavigate</em>), it seems that neither this view/VM, or any of its child views/VMs are being GC'd/disposed. I've tried implementing IDisposable on all the views and VMs, but Dispose() never gets called.\r<br />\n<br />\nMy main concern is to avoid memory leaks - my &quot;results&quot; view, and its child views, render a huge amount of information (based on records in a db), and if the user continually navigates in and out of this view, viewing these records, it's going to eat up memory. Also, I've implemented an &quot;events service&quot; (similar to Prism's event aggregator) where the VMs register as event publishers and/or subscribers. I'm finding that even after navigating away from the &quot;results&quot; view, its VM and the child VMs, are still responding to events - further evidence that things aren't being cleared up.\r<br />\n<br />\nI guess I need some way for the child VMs to cleanup, including unsubscribing from these events, when the parent &quot;results&quot; view is navigated away from, but how/where? IDisposable.Dispose() seemed like the ideal place, but it's not being called - whether that's down to Castle or Prism, I don't know.\r<br />\n<br />\nOne other option might be to change my approach and register all the views and VMs as &quot;singletons&quot;, avoiding such memory concerns. However I still might want to perform some cleanup on the child VMs, so how/where could I do that?\r<br />\n<br />\nThanks in advance<br />\n",
    "PostedDate": "2013-09-05T05:43:04.783-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1088784",
    "ThreadId": "455604",
    "Html": "Hi,\r<br />\n<br />\nBased on my understanding, the <strong>RegionMemberLifetime</strong> attribute is only in charge of telling if the VM has to be removed from the Region or not, which does not force the destruction of the VM. Therefore, the root of your problem is more likely to be related to the &quot;events service&quot; you implemented, since the subscription to these events are <strong>strong references</strong> to your VMs which causes them to be kept alive and responding to events. \r<br />\n<br />\nIn order to be able to resolve this, you can choose between the following 2 options:<br />\n<h1></h1>\n<ul>\n<li>Make your VMs implement <strong>IActiveAware</strong> which provides the <strong>IsActive</strong> property. Then, in the setter of the property you verify if <strong>its value</strong> and <strong>RegionMemberLifetime</strong> are <strong>false</strong> so you can do the cleanup.</li>\n<li>\nOn the other hand, you can make your VMs implement <strong>INavigationAware</strong> and the just check if <strong>RegionMemberLifetime</strong> is <strong>false</strong> in the <strong>OnNavigatedFrom</strong> method (provided by INavigationAware) and do the cleanup there. <br />\n</li>\n</ul>\nHope this helps,\r<br />\n<br />\nFederico Martinez \r<br />\n<a href=\"http://blogs.southworks.net/fmartinez\" rel=\"nofollow\">http://blogs.southworks.net/fmartinez</a> <br />\n",
    "PostedDate": "2013-09-05T07:57:49.01-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]