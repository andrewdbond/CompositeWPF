[
  {
    "Id": "658883",
    "ThreadId": "269271",
    "Html": "\r\n<p>Hello,</p>\r\n<p>I'm working through a proof-of-concept with WPF &#43; Prism &#43; MEF, and it seems that using [PartCreationPolicy(CreationPolicy.NonShared)] is required when using MEF and implementing IConfirmNavigationRequest in the ViewModel layer.&nbsp; The app has two navigation\r\n regions: a navigation region on the left, and&nbsp;a content area taking the center stage.&nbsp; I had wanted to use the default of CreationPolicy.Shared and set IsNavigationTarget = true for the views/viewmodels that go into the navigation region because\r\n even though they get populated from individual modules, once the app in launched an the imports are satisfied, they never change.&nbsp; However, what I found is that if you use the combination of IsNavigationTarget=true and CreationPolicy.Shared (or don't\r\n provide the PartCreationPolicy attribute at all, that the application actually begins to leak the views (they never get disposed).&nbsp; What happens is that rather than Prism reusing the view when responding to a RequestNavigate command, it creates a new\r\n instance of the view while retaining the previous instance instance in memory indefinitely.</p>\r\n<p>I ran across this because I implemented an InteractionRequest in the ConfirmNavigationRequest method&nbsp;of the navigation view model for one of the navigation screens and found that if I navigated to that view multiple times and then triggeded the code\r\n that would fire the interaction request, that I would get a MessageBox (implemented via a Behavior) multiple times... one for each view that was hanging out in memory.</p>\r\n<p>I'm ok with using [PartCreationPolicy(CreationPolicy.NonShared)] and setting IsNavigationTarget = false, but it just seems like a bug that Prism would leak views like that when trying to reuse views.</p>\r\n<p>I'm also not convinced that I'm not doing something wrong, and if someone can point me to a working sample of a WPF &#43; Prism &#43; MEF app that uses views that implement IConfirmNavigationRequest and set IsNavigationTarget to true, I'd love to look through the\r\n code.</p>\r\n<p>Sample codebehind for a view:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    [Export(<span style=\"color:#a31515\">&quot;OrderEntryNavigationView&quot;</span>)]\r\n    [PartCreationPolicy(CreationPolicy.NonShared)] <span style=\"color:green\">//if ommitted or set to Shared, this view will leak during RequestNavigate</span>\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> OrderEntryNavigationView : UserControl\r\n    {\r\n        <span style=\"color:blue\">public</span> OrderEntryNavigationView()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        [Import]\r\n        <span style=\"color:blue\">public</span> OrderEntryNavigationViewModel ViewModel\r\n        {\r\n            <span style=\"color:blue\">set</span> { <span style=\"color:blue\">this</span>.DataContext = value; }\r\n        }\r\n\r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>ViewModel snippets:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Export]\r\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> OrderEntryNavigationViewModel : NavigationAwareViewModelBase\r\n\r\n...\r\n</pre>\r\n</div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">\tpublic</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">bool</span> IsNavigationTarget(NavigationContext navigationContext)\r\n        {\r\n            <span style=\"color:blue\">return</span> <span style=\"color:blue\">false</span>; <span style=\"color:green\">//if set to true, the view &#43; viewmodel will leak during RequestNavigate</span>\r\n        }\r\n</pre>\r\n</div>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:blue\">public</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> ConfirmNavigationRequest(Microsoft.Practices.Prism.Regions.NavigationContext navigationContext, Action&lt;<span style=\"color:blue\">bool</span>&gt; continuationCallback)\r\n        {\r\n            <span style=\"color:blue\">if</span> (!_isContentValid) <span style=\"color:green\">//when leaking this code fires once for each instance of the viewmodel in memory</span>\r\n            {\r\n                <span style=\"color:blue\">this</span>._confirmExitNoSaveRequest.Raise(<span style=\"color:blue\">new</span> Confirmation()\r\n                {\r\n                    Content = <span style=\"color:#a31515\">&quot;There are errors in the current record and the record cannot be saved.  Are you sure you want to navigate away and lose unsaved changes?&quot;</span>,\r\n                    Title = <span style=\"color:#a31515\">&quot;Confirm Discard Changes&quot;</span>\r\n                },\r\n                    c =&gt;\r\n                    {\r\n                        <span style=\"color:blue\">if</span> (c.Confirmed)\r\n                        {\r\n                            <span style=\"color:blue\">this</span>.Aggrigator.GetEvent&lt;ClearContentErrorsEvent&gt;().Publish(<span style=\"color:blue\">true</span>);\r\n                            <span style=\"color:blue\">this</span>.Aggrigator.GetEvent&lt;ViewModelValidationEvent&gt;().Unsubscribe(_token);\r\n                        }\r\n                        continuationCallback(c.Confirmed);\r\n                    });\r\n            }\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                <span style=\"color:blue\">this</span>.Aggrigator.GetEvent&lt;ViewModelValidationEvent&gt;().Unsubscribe(_token);\r\n                continuationCallback(<span style=\"color:blue\">true</span>);\r\n            }\r\n        }\r\n</pre>\r\n</div>\r\n<div id=\"_mcePaste\" style=\"width:1px; height:1px; overflow:hidden; top:0px; left:-10000px\">\r\n&#65279;</div>\r\n<p>The behavior I built:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> ConfirmDialogBehavior:Behavior&lt;Control&gt;\r\n    {\r\n\r\n\r\n        <span style=\"color:blue\">public</span> IInteractionRequest InteractionRequest\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> (IInteractionRequest)GetValue(InteractionRequestProperty); }\r\n            <span style=\"color:blue\">set</span> { SetValue(InteractionRequestProperty, value); }\r\n        }\r\n\r\n        <span style=\"color:green\">// Using a DependencyProperty as the backing store for InteractionRequest.  This enables animation, styling, binding, etc...</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">static</span> <span style=\"color:blue\">readonly</span> DependencyProperty InteractionRequestProperty =\r\n            DependencyProperty.Register(<span style=\"color:#a31515\">&quot;InteractionRequest&quot;</span>, <span style=\"color:blue\">typeof</span>(IInteractionRequest), <span style=\"color:blue\">typeof</span>(ConfirmDialogBehavior), <span style=\"color:blue\">new</span> UIPropertyMetadata(<span style=\"color:blue\">null</span>));\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> OnAttached()\r\n        {\r\n            <span style=\"color:blue\">this</span>.AssociatedObject.Loaded &#43;= <span style=\"color:blue\">new</span> RoutedEventHandler(AssociatedObject_Loaded);\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> AssociatedObject_Loaded(<span style=\"color:blue\">object</span> sender, RoutedEventArgs e)\r\n        {\r\n            InteractionRequest.Raised &#43;= <span style=\"color:blue\">new</span> EventHandler&lt;InteractionRequestedEventArgs&gt;(InteractionRequest_Raised);\r\n        }\r\n\r\n        <span style=\"color:blue\">void</span> InteractionRequest_Raised(<span style=\"color:blue\">object</span> sender, InteractionRequestedEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">if</span> (e.Context <span style=\"color:blue\">is</span> Confirmation)\r\n            {\r\n                Confirmation confirmation = e.Context <span style=\"color:blue\">as</span> Confirmation;\r\n                Window parent=Window.GetWindow(<span style=\"color:blue\">this</span>.AssociatedObject);\r\n\r\n                <span style=\"color:blue\">if</span> (parent != <span style=\"color:blue\">null</span>)\r\n                {\r\n                    <span style=\"color:blue\">if</span> (MessageBox.Show(parent, confirmation.Content.ToString(), confirmation.Title.ToString(), MessageBoxButton.OKCancel, MessageBoxImage.Warning) == MessageBoxResult.OK)\r\n                    {\r\n                        confirmation.Confirmed = <span style=\"color:blue\">true</span>;\r\n                    }\r\n                    <span style=\"color:blue\">else</span>\r\n                    {\r\n                        confirmation.Confirmed = <span style=\"color:blue\">false</span>;\r\n                    }\r\n\r\n                    e.Callback.Invoke();\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> OnDetaching()\r\n        {\r\n            <span style=\"color:blue\">this</span>.AssociatedObject.Loaded -= AssociatedObject_Loaded;\r\n            InteractionRequest.Raised -= InteractionRequest_Raised;\r\n        }\r\n\r\n        \r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>The behavior used in xaml:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>\t<span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">i</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Interaction.Behaviors</span><span style=\"color:blue\">&gt;</span>\r\n\t\t&lt;RQOnePOC_Core_Behaviors:ConfirmDialogBehavior InteractionRequest=&quot;{Binding ConfirmExitNoSaveRequest}&quot;/&gt;\r\n\t<span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">i</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">Interaction.Behaviors</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n<pre>So, if it's a requirement to use NonShared and set IsNavigationTarget to false then I'm ok with that.&nbsp; I'd just like someone to confirm/deny that's the case.&nbsp; <br>If it's not the cases I'd loke to see some sample code where it works.</pre>\r\n</div>\r\n",
    "PostedDate": "2011-08-16T08:35:04.697-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "658997",
    "ThreadId": "269271",
    "Html": "<p>Hi,</p>\n<p>It would be useful if you could provide us a repro sample application portraying this problem, so we could analyze why it is happening.</p>\n<p>Thanks,</p>\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\" target=\"_blank\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2011-08-16T11:51:09.167-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]