[
  {
    "Id": "945977",
    "ThreadId": "404319",
    "Html": "\r\n<p>1) [Export(&quot;UnifiedSearchResultsViewModel&quot;, typeof(<strong>ISearchResultsViewModel</strong>))]<br>\r\n&nbsp;&nbsp;&nbsp; [PartCreationPolicy(CreationPolicy.NonShared)]<br>\r\n&nbsp;&nbsp;&nbsp; public class UnifiedSearchResultsViewModel : <span style=\"font-size:small\">\r\nViewModel&lt;ISearchResultsView&gt;, ISearchResultsViewModel</span><br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>This is my viewmodel class</p>\r\n<p>2) <span style=\"font-size:small\">[Export(&quot;UnifiedSearchResultsView&quot;, typeof(<strong>ISearchResultsView</strong>))]<br>\r\n&nbsp;&nbsp;&nbsp; [PartCreationPolicy(CreationPolicy.NonShared)]<br>\r\n&nbsp;&nbsp;&nbsp; public partial class UnifiedSearchResultsView: UserControl, ISearchResultsView<br>\r\n&nbsp;&nbsp;&nbsp; {</span></p>\r\n<p><span style=\"font-size:small\">}</span></p>\r\n<p><span style=\"font-size:small\">This is my view class</span></p>\r\n<p><span style=\"font-size:small\">How can I make sure that when I resolve my viewmodel class &quot;</span>UnifiedSearchResultsViewModel&quot;, it should load the &quot;UnifiedSearchResultsView&quot; only.. I have so many other views/viewmodels which inherits\r\n from ISearchresultsView/ISearchResultsViewModel. Should I create a seperate interface for each view?Any idea?</p>\r\n",
    "PostedDate": "2012-11-22T23:10:41.097-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "946125",
    "ThreadId": "404319",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Based on my understanding if you are exporting different classes implementing the same interface and you are also defining a contract came while doing so, like in the code snippets above, you should be able to distinguish from the different exported implementations\r\n by defining different contract names in each <strong>Export </strong>attribute, this way this contract name could be used to specify which implementation you will use when defining your\r\n<strong>Import </strong>attributes. For example by defining your attribute like this:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Import(<span style=\"color:#a31515\">&quot;customSearchResultsViewModel&quot;</span>,<span style=\"color:blue\">typeof</span>(ISearchResultsViewModel))]\r\n</pre>\r\n</div>\r\nFor more information on the different approaches you could use when importing and exporting using the\r\n<strong>MEF </strong>container you could check the <a href=\"http://mef.codeplex.com/wikipage?title=Guide\">\r\nMEF Programming Guide</a>.\r\n<p></p>\r\n<p>On the other hand, take into account that when applying the <strong>MVVM </strong>\r\npattern&nbsp; your view models should ideally not depend on any specific implementation of the view, as they should have no explicit knowledge of the specific visual elements in the view, in order to provide a clean separation between application logic and the UI\r\n makes your application.</p>\r\n<p>You could find more information about this in the following chapter of the <strong>\r\nPrism </strong>documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg405484(v=pandp.40).aspx\">Chapter 5: Implementing the MVVM Pattern</a>\r\n</li></ul>\r\n<p>I hope you find this handy,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-11-23T06:15:08.193-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "946462",
    "ThreadId": "404319",
    "Html": "\r\n<p>Thank you Adami for the comment. but I think I didn't explain my issue.Please see below explanation again.</p>\r\n<p>here are my classes.</p>\r\n<p>1) [Export(&quot;UnifiedSearchResultsViewModel&quot;, typeof(<strong>ISearchResultsViewModel</strong>))]<br>\r\n&nbsp;&nbsp;&nbsp; [PartCreationPolicy(CreationPolicy.NonShared)]<br>\r\n&nbsp;&nbsp;&nbsp; public class UnifiedSearchResultsViewModel : <span style=\"font-size:small\">ViewModel&lt;ISearchResultsView&gt;, ISearchResultsViewModel</span><br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>// Here the parameter is ISearchResultsView, and my two views implements same interface</strong></em><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public UnifiedSearchResultsViewModel(<strong>ISearchResultsView view</strong>)&nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>This is first viewmodel class</p>\r\n<p>2) <span style=\"font-size:small\">[Export(&quot;UnifiedSearchResultsView&quot;, typeof(<strong>ISearchResultsView</strong>))]<br>\r\n&nbsp;&nbsp;&nbsp; [PartCreationPolicy(CreationPolicy.NonShared)]<br>\r\n&nbsp;&nbsp;&nbsp; public partial class UnifiedSearchResultsView: UserControl, ISearchResultsView<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; </span><span style=\"font-size:small\">}</span></p>\r\n<p><span style=\"font-size:small\">This is my first view class</span></p>\r\n<p>3) [Export(&quot;CustomerSearchResultsViewModel&quot;, typeof(<strong>ISearchResultsViewModel</strong>))]<br>\r\n&nbsp;&nbsp;&nbsp; [PartCreationPolicy(CreationPolicy.NonShared)]<br>\r\n&nbsp;&nbsp;&nbsp; public class CustomerSearchResultsViewModel : <span style=\"font-size:small\">ViewModel&lt;ISearchResultsView&gt;, ISearchResultsViewModel</span><br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n<em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>// Here the parameter is ISearchResultsView, and my two views implements same interface</strong></em><br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public CustomerSearchResultsViewModel(<strong>ISearchResultsView view</strong>)&nbsp;<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>This is second viewmodel class</p>\r\n<p>4) <span style=\"font-size:small\">[Export(&quot;CustomerSearchResultsView&quot;, typeof(<strong>ISearchResultsView</strong>))]<br>\r\n&nbsp;&nbsp;&nbsp; [PartCreationPolicy(CreationPolicy.NonShared)]<br>\r\n&nbsp;&nbsp;&nbsp; public partial class CustomerSearchResultsView: UserControl, ISearchResultsView<br>\r\n&nbsp;&nbsp;&nbsp; {<br>\r\n&nbsp;&nbsp;&nbsp; </span><span style=\"font-size:small\">}</span></p>\r\n<p><span style=\"font-size:small\">This is my second view class</span></p>\r\n<p><span style=\"font-size:small\">Now While resolving viewmodel class, I am using following code:</span></p>\r\n<p><strong><span style=\"font-size:small\">ISearchResultsViewModel searchResultsViewModel = _container.Resolve&lt;ISearchResultsViewModel&gt;(&quot;UnifiedSearchResultsViewModel&quot;);</span></strong></p>\r\n<p><strong><span style=\"font-size:small\">ISearchResultsViewModel searchResultsViewModel = _container.Resolve&lt;ISearchResultsViewModel&gt;(&quot;CustomerSearchResultsViewModel&quot;);</span></strong></p>\r\n<p><span style=\"font-size:small\">Now the issue is&nbsp;how viewmodel knows that which ISearchResultsView needs to be loaded?? Please suggest</span></p>\r\n<p><span style=\"font-size:small\">&nbsp;</span></p>\r\n<p><span style=\"font-size:small\">&nbsp;</span></p>\r\n<p><strong><span style=\"font-size:small\">&nbsp;</span></strong></p>\r\n",
    "PostedDate": "2012-11-24T10:30:25.397-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "947683",
    "ThreadId": "404319",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Based on my understanding you could try defining an <strong>Import </strong>attribute with a contract name in the constructor of your view model to specify which implementation will be used for each case, for example your\r\n<strong>CustomerSearchResultsViewModel </strong>could look like this</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Export(<span style=\"color:#a31515\">&quot;CustomerSearchResultsViewModel&quot;</span>, <span style=\"color:blue\">typeof</span>(ISearchResultsViewModel))]\n[PartCreationPolicy(CreationPolicy.NonShared)]\n    <span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> CustomerSearchResultsViewModel : ViewModel&lt;ISearchResultsView&gt;, ISearchResultsViewModel\n    {\n      <span style=\"color:blue\">&nbsp;</span>\n          <span style=\"color:blue\">public</span> CustomerSearchResultsViewModel([Import(<span style=\"color:#a31515\">&quot;CustomerSearchResultsView&quot;</span>,<span style=\"color:blue\">typeof</span>(ISearchResultsView ))] ISearchResultsView view) \n          {\n          }\n     }\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Also, a similar approach could be implemented by using <strong>Property Injection</strong>, or as an alternative approach you could as mentioned above define different interfaces for each kind of your views. Which approach you take will depend on your personal\r\n preferences.</p>\r\n<p>On the other hand, take into account that in order to resolve instances when using\r\n<strong>MEF, </strong>this could be achieve through the <strong>CompositionContainer</strong> class in which case the call to resolve an instance could be like this (this will differ when using\r\n<strong>Unity </strong>as your container, in which case the method called will be similar like the one you posted above to resolve the view models classes):</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>ISearchResultsViewModel searchResultsViewModel = <span style=\"color:blue\">this</span>.Container.GetExportedValue&lt;ISearchResultsViewModel&gt;(<span style=\"color:#a31515\">&quot;</span><span style=\"color:#a31515\">CustomerSearchResultsViewModel&quot;</span>);\n</pre>\r\n</div>\r\n<p>Note that, resolving instances in <strong>MEF</strong> could also be achieved by using\r\n<strong>Import </strong>attribute in your classes or the <strong>Service Locator</strong>.</p>\r\n<p>For more information about this you could also check the following chapter of the\r\n<strong>Prism </strong>documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ff921140(v=pandp.40).aspx\">Chapter 3: Managing Dependencies Between Components</a>\r\n</li></ul>\r\n<p>I hope you find this helpful,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-11-27T06:32:05.533-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "947801",
    "ThreadId": "404319",
    "Html": "\r\n<p>Thank you very much Adami, it worked... thanks a ton...</p>\r\n",
    "PostedDate": "2012-11-27T09:29:22.04-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]