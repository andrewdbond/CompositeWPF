[
  {
    "Id": "943448",
    "ThreadId": "403658",
    "Html": "\r\n<p>What I want is getting a custom window from a module or Custom type asssembly to be set as my default window.</p>\r\n<p>I did a sample project here which would describe the issue,</p>\r\n<p><em>Here I used a Custom Ribbon Window.</em></p>\r\n<p>I want to know what should I change here :</p>\r\n<p>http://sdrv.ms/SWkOmh</p>\r\n",
    "PostedDate": "2012-11-18T00:45:24.707-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "944152",
    "ThreadId": "403658",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Based on my understanding defining the default window in a module may not be a recommended approach as by default the\r\n<strong>Prism </strong>initialization process initializes the shell before initializing the modules (<a href=\"http://msdn.microsoft.com/en-us/library/gg430868(v=pandp.40).aspx\">Chapter 2: Initializing Prism Applications</a>), in which case this will cause a\r\n timing issue if your modules are loosely coupled as you won't be able to resolve the window until the corresponding module is initialized.</p>\r\n<p>On the other hand, in the sample you posted this scenario could be only possible because your main project has a reference to your modules' project, hence this will allow you to register and resolve the window before initializing the modules. The problem\r\n with this approach is that any other module you have will be dependent of this module, in which case defining this window in the main project makes more sense.</p>\r\n<p>Also, one thing I notice in your application is that the <strong>bootstrapper.run</strong> method is not being called in your\r\n<strong>App.Xaml</strong> file, which will be required to start the initialization process. For example you<strong> App.xaml\r\n</strong>code behind could look like this:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> App : Application\r\n    {\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">override</span> <span style=\"color:blue\">void</span> OnStartup(StartupEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">base</span>.OnStartup(e);\r\n            Bootstrapper bootstrapper = <span style=\"color:blue\">new</span> BootStrapper();\r\n            bootstrapper.Run();\r\n        }\r\n    }\r\n}\r\n</pre>\r\n</div>\r\n<p>I hope you find this handy,</p>\r\n<p>&nbsp;</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br>\r\nhttp://blogs.southworks.net/aadami</a></p>\r\n",
    "PostedDate": "2012-11-19T11:15:05.617-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "944200",
    "ThreadId": "403658",
    "Html": "\r\n<p>Thanks really,</p>\r\n<p>I think you covered the mistakes here,</p>\r\n<p>What I was looking for was placing the <strong>Ribbon </strong>in a module while I want to use a\r\n<strong>RibbonWindow</strong>,</p>\r\n<p>I have looked every possible article or discussions but this wasn't mentioned anywhere.</p>\r\n<p>Should I really define any tab in a related module or can I have all in one place (Module or Assembly or ...)</p>\r\n<p><span style=\"text-decoration:underline\"><strong>Main Concerns and goals :</strong></span></p>\r\n<p>using a RibbonWindow and moving things related to it outside the Shell(Main)</p>\r\n<p>Having all the Tabs defined in one place (Not sure on this, but looking more to have a movable module),</p>\r\n<p>great Xaml and Design-Time support.</p>\r\n<p>please answer this if you got mine idea and could complete it.</p>\r\n<p>thanks again ...</p>\r\n",
    "PostedDate": "2012-11-19T13:06:22.81-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "945828",
    "ThreadId": "403658",
    "Html": "\r\n<p>Hi,</p>\r\n<p>As Agustin mentioned, the window you will use as the <strong>Shell </strong>window should be placed in the main project (or\r\n<strong>Shell </strong>project) of your application. In your case, you will need to place your\r\n<strong>RibbonWindow </strong>in the main project in order to use it as the shell. However, any other &quot;thing&quot; related to this\r\n<strong>RibbonWindow </strong>could be moved to a module, depending if that &quot;thing&quot; is required by the\r\n<strong>RibbonWindow </strong>at the time of its construction or not. For example, if the\r\n<strong>RibbonWindow </strong>is resolved through dependency injection, all of its dependencies should be in the\r\n<strong>Shell </strong>project too.</p>\r\n<p>Regarding the Tabs (I assume you mean the <strong>RibbonTabs</strong>), I believe they could be defined in any place you want. You could define them all in the\r\n<strong>Shell </strong>project or in a <strong>Module</strong>, or distribute them across different\r\n<strong>Modules</strong>. Where to define them will depend mostly on which components should interact with them and the requirements of your scenario along with your personal preferences. Also, depending on where you define them, you will need to take into\r\n account how you will add them to the <strong>RibbonWindow</strong>. For example, you could use a shared service to add the\r\n<strong>RibbonTabs </strong>to the <strong>RibbonWindow</strong>. Another approach could be to define\r\n<strong>Regions </strong>in the <strong>RibbonWindow </strong>where you could inject your\r\n<strong>Ribbons </strong>as if they were views, however take into account that <strong>\r\nPrism </strong>does not provide a <strong>RegionAdapter</strong> for <strong>Ribbons</strong>, so you will need to create your custom\r\n<strong>RegionAdapter </strong>for them.</p>\r\n<p>Finally, regarding the design time support, take into account that due to how <strong>\r\nVisual Studio</strong>'s designer works, any visual component defined in a loosely coupled\r\n<strong>Module </strong>will not be available in the <strong>Shell </strong>project during design time and vice versa.</p>\r\n<p>Regards,</p>\r\n<p>Damian Cherubini<br>\r\n<a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-11-22T12:11:54.51-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]