[
  {
    "Id": "200429",
    "ThreadId": "59203",
    "Html": "<p>I'm a bit confused as how I should handle specific things in a MVVM pattern.<br><br>Say I have a button in my view which should trigger the start of a Storyboard, defined in my View.<br><br>I've injected my View in the ViewModel. From the View I dispatch a click event using Command.Click. <br><br>In the ViewModel I've done the following :<br><br>&nbsp;public DelegateCommand&lt;object&gt; ExpandCriteria;<br><br>&nbsp;public SourceListViewModel(ISourceManagerService sourceManagerService,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IEventAggregator aggregator,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ISourceListView view)<br>&nbsp;&nbsp;&nbsp; {<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.View = view;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view.SetViewModel(this);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExpandCriteria =&nbsp; new DelegateCommand&lt;object&gt;(OnExpandCriteria, null);<br>&nbsp;&nbsp;&nbsp; }<br><br>&nbsp;&nbsp;&nbsp; private void OnExpandCriteria(object obj)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trigger the storyboard begin here.&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp; }<br><br>First, is this the correct way of doing things ? <br><br>Second, how do I access the storyboard ? i can't see it from the ViewModel. I've defined it as a local resource in the View.<br><br>Thanks</p>",
    "PostedDate": "2009-06-11T07:57:06.347-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "200527",
    "ThreadId": "59203",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Hi,</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">To access the view&rsquo;s storyboard, you can expose it in the view&rsquo;s interface like this:</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>public interface ISourceListView </span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp; {</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Storyboard MyStoryBoard { get; }</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // rest of the interface here</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp; }</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Then in your view, you can implement the property getter to return the storyboard:</span></span></span></p>\r\n<p style=\"text-indent:34.2pt;margin:0cm 0cm 0pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp; public Storyboard MyStoryBoard</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"text-indent:34.2pt;margin:0cm 0cm 0pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"text-indent:34.2pt;margin:0cm 0cm 0pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"text-indent:34.2pt;margin:0cm 0cm 0pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"text-indent:34.2pt;margin:0cm 0cm 0pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return this.Resources[&quot;MyResource&quot;] as Storyboard;</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"text-indent:34.2pt;margin:0cm 0cm 0pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;}</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"text-indent:34.2pt;margin:0cm 0cm 0pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"text-indent:34.2pt;margin:0cm 0cm 0pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">In the <strong>OnExpandCriteria</strong> method you should be able to begin the storyboard:</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt 34.2pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>private void OnExpandCriteria(object obj)</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"text-indent:34.8pt;margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp; {</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;this.View.MyStoryboard.Begin();</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"text-indent:34.8pt;margin:0cm 0cm 0pt -0.6pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;&nbsp;&nbsp; }</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Please let me know if this helps.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Damian Schenkelman</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"font-family:Calibri;font-size:small\">http://blogs.southworks.net/dschenkelman</span></a></span></p>",
    "PostedDate": "2009-06-11T11:54:47.767-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "200742",
    "ThreadId": "59203",
    "Html": "<p>Thanks Damian,</p>\r\n<p>&nbsp;</p>\r\n<p>Yes, that helps. Actually I was wondering what would be the approach for the VisualStateManager as it works differently from the Storyboard.</p>\r\n<p>At the moment in my View I have the following code :</p>\r\n<p>private void Button_Click(object sender, System.Windows.RoutedEventArgs e)<br>&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (isExpanded)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VisualStateManager.GoToState(this, &quot;CollapsedState&quot;, true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VisualStateManager.GoToState(this, &quot;ExpandedState&quot;, true);&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; isExpanded = !isExpanded;<br>&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;</p>\r\n<p>And I would like to move this to a MVVM approach. What is the best way for doing this using the EventAggregator ?</p>",
    "PostedDate": "2009-06-12T02:46:05.533-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "200941",
    "ThreadId": "59203",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">Hi</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">The way I see it, you can implement the <strong>MVVM</strong> approach and still have that code in the View&rsquo;s code behind. I believe there is no need to find a way to trigger the animation from the <strong>ViewModel</strong> since it <span style=\"color:black\">is fully UI related (if you were developing in WPF you could achieve this from XAML using Triggers).</span></span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">If you are required to place this code in the <strong>ViewModel</strong>, I would not use the </span><a href=\"http://msdn.microsoft.com/en-us/library/dd458915.aspx\"><span style=\"font-family:Calibri;font-size:small\">Event Aggregator</span></a><span style=\"font-size:small\"><span style=\"font-family:Calibri\"> to communicate the View and Model. As the article explains: <em>&ldquo;The EventAggregator service is primarily a container for events that allow decoupling of publishers and subscribers so they can evolve independently.&rdquo;.</em> In the MVVM pattern, or any other presentation pattern, the View and its Presenter/Controller/<span style=\"color:black\">ViewModel are coupled and have no reason</span> to evolve independently. Exposing common .NET events in the view&rsquo;s interface (if the Model has a reference to the view), and calling Model methods, if the view has a reference to the Model are probably a better approach and less of an overkill.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">As I said before, this is my own opinion without knowing your application specifics.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Please let me know if this helps.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">&nbsp;</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Damian Schenkelman</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"font-family:Calibri;font-size:small\">http://blogs.southworks.net/dschenkelman</span></a></span></p>",
    "PostedDate": "2009-06-12T11:43:53.167-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]