[
  {
    "Id": "585783",
    "ThreadId": "251044",
    "Html": "\r\n<p>Hi,</p>\r\n<p>I am using a DataGrid control with a Selected Command behavior (as used in Stocktrader RI) in order to raise a Command when the selected item changed.</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">DataGrid</span> <span style=\"color:red\">ItemsSource</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding SortedDocuments}</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">RowHeaderWidth</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">0</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">AutoGenerateColumns</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">False</span><span style=\"color:black\">&quot; </span><span style=\"color:red\">x:Name</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">dgResults</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">SelectionMode</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">Single</span><span style=\"color:black\">&quot;</span> <span style=\"color:red\">commands:Selected.Command</span><span style=\"color:blue\">=</span><span style=\"color:black\">&quot;</span><span style=\"color:blue\">{Binding SelectDocumentCommand}</span><span style=\"color:black\">&quot;/</span><span style=\"color:blue\">&gt;</span>\r\n</pre>\r\n</div>\r\n<p><br>\r\nThis works so far, so when an item is selected in the DataGrid, the SelectedDocumentCommand is raised.</p>\r\n<p>Now I want to achieve that the command is raised <span style=\"text-decoration:underline\">\r\nagain</span> if the already selected item is clicked again. Actually it doesn't, since the selected item doesn't change. Is there any event/possibility to get that? How can I determine if the already selected item is &quot;selected&quot; (clicked) again??</p>\r\n<p>&nbsp;</p>\r\n<p>Best Regards<br>\r\nAndreas&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2011-03-24T08:35:15.29-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "587657",
    "ThreadId": "251044",
    "Html": "<p>Hi Andreas,</p>\r\n<p>One possible way to fulfill your requirement could be to define the command in your DataGrid&rsquo;s <strong>Item Template</strong>, for example, triggering the command when you click the items.</p>\r\n<p>In order to do so, you need to access your command that resides in your <strong>ViewModel</strong> from within a <strong>DataTemplate</strong> (whose <strong>DataContext</strong> is overridden), therefore you should implement one of the possibilities described in the following threads:</p>\r\n<ul>\r\n<li><a href=\"http://compositewpf.codeplex.com/discussions/242032\">Commanding in datagrid not works</a></li>\r\n<li><a href=\"http://compositewpf.codeplex.com/discussions/64514\">Click command for Button into dataTemplate</a></li>\r\n</ul>\r\n<p>Please, let us know if this information helps you.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br /><a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-03-28T08:48:30.42-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "587681",
    "ThreadId": "251044",
    "Html": "<p>Hi Miguel,</p>\r\n<p>thanks for replying! Just a moment ago I thoght about using a Command Behavior like the Selected behavior from Stocktrader RI, but execute the command on mouse action (instead of SelectionChanged) something like this (maybe another possibility):</p>\r\n<p>&lt;DataGrid ... commands:SelectorClicked.Command=\"{Binding DocumentSelectedCommand}\"/&gt;</p>\r\n<p>&nbsp;</p>\r\n<p>SelectorClicked.cs<br /><br /></p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">class</span> SelectorClicked\r\n    {\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">readonly</span> DependencyProperty SelectorClickedCommandBehaviorProperty = DependencyProperty.RegisterAttached(\r\n            <span style=\"color: #a31515;\">\"SelectorClickedCommandBehavior\"</span>,\r\n            <span style=\"color: blue;\">typeof</span>(SelectorClickedCommandBehavior),\r\n            <span style=\"color: blue;\">typeof</span>(Selected),\r\n            <span style=\"color: blue;\">null</span>);\r\n\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">readonly</span> DependencyProperty CommandProperty = DependencyProperty.RegisterAttached(\r\n            <span style=\"color: #a31515;\">\"Command\"</span>,\r\n            <span style=\"color: blue;\">typeof</span>(ICommand),\r\n            <span style=\"color: blue;\">typeof</span>(SelectorClicked),\r\n            <span style=\"color: blue;\">new</span> PropertyMetadata(OnSetCommandCallback));\r\n\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(<span style=\"color: #a31515;\">\"Microsoft.Design\"</span>, <span style=\"color: #a31515;\">\"CA1011:ConsiderPassingBaseTypesAsParameters\"</span>, Justification = <span style=\"color: #a31515;\">\"Only works for selector\"</span>)]\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> SetCommand(Selector selector, ICommand command)\r\n        {\r\n            selector.SetValue(CommandProperty, command);\r\n        }\r\n\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(<span style=\"color: #a31515;\">\"Microsoft.Design\"</span>, <span style=\"color: #a31515;\">\"CA1011:ConsiderPassingBaseTypesAsParameters\"</span>, Justification = <span style=\"color: #a31515;\">\"Only works for selector\"</span>)]\r\n        <span style=\"color: blue;\">public</span> <span style=\"color: blue;\">static</span> ICommand GetCommand(Selector selector)\r\n        {\r\n            <span style=\"color: blue;\">return</span> selector.GetValue(CommandProperty) <span style=\"color: blue;\">as</span> ICommand;\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> OnSetCommandCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e)\r\n        {\r\n            <span style=\"color: blue;\">var</span> selector = dependencyObject <span style=\"color: blue;\">as</span> Selector;\r\n            <span style=\"color: blue;\">if</span> (selector != <span style=\"color: blue;\">null</span>)\r\n            {\r\n                GetOrCreateBehavior(selector).Command = e.NewValue <span style=\"color: blue;\">as</span> ICommand;\r\n            }\r\n        }\r\n\r\n        <span style=\"color: blue;\">private</span> <span style=\"color: blue;\">static</span> SelectorClickedCommandBehavior GetOrCreateBehavior(Selector selector)\r\n        {\r\n            <span style=\"color: blue;\">var</span> behavior = selector.GetValue(SelectorClickedCommandBehaviorProperty) <span style=\"color: blue;\">as</span> SelectorClickedCommandBehavior;\r\n            <span style=\"color: blue;\">if</span> (behavior == <span style=\"color: blue;\">null</span>)\r\n            {\r\n                behavior = <span style=\"color: blue;\">new</span> SelectorClickedCommandBehavior(selector);\r\n                selector.SetValue(SelectorClickedCommandBehaviorProperty, behavior);\r\n            }\r\n\r\n            <span style=\"color: blue;\">return</span> behavior;\r\n        }\r\n</pre>\r\n</div>\r\n&nbsp;\r\n<p>&nbsp;</p>\r\n<p>SelectorClickedCommandBehavior:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">public</span> <span style=\"color: blue;\">class</span> SelectorClickedCommandBehavior : CommandBehaviorBase&lt;Selector&gt;\r\n    {\r\n        <span style=\"color: blue;\">public</span> SelectorClickedCommandBehavior(Selector selectableObject)\r\n            : <span style=\"color: blue;\">base</span>(selectableObject)\r\n        {\r\n            selectableObject.PreviewMouseLeftButtonUp += selectableObject_PreviewMouseLeftButtonUp;\r\n        }\r\n\r\n        <span style=\"color: blue;\">void</span> selectableObject_PreviewMouseLeftButtonUp(<span style=\"color: blue;\">object</span> sender, System.Windows.Input.MouseButtonEventArgs e)\r\n        {\r\n            <span style=\"color: green;\">// just for testing: cast selector to datagrid to get current item / selected item</span>\r\n            CommandParameter = (TargetObject <span style=\"color: blue;\">as</span> DataGrid).CurrentItem;\r\n            <span style=\"color: blue;\">if</span> (CommandParameter != <span style=\"color: blue;\">null</span>)\r\n                ExecuteCommand();\r\n        }\r\n\r\n    }\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p><br />What do you think about this solution? Instead of handling the SelectionChanged event to execute the command I handle the mouse click.. Done a short test, seems to work. Good approach??</p>\r\n<p>&nbsp;</p>\r\n<p>Kind Regards,<br />Andreas&nbsp;</p>",
    "PostedDate": "2011-03-28T09:19:48.273-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "587722",
    "ThreadId": "251044",
    "Html": "<p>Andreas,</p>\r\n<p>Your approach seems to be a valid possibility to achieve your scenario. Thank you for sharing this solution with the rest of the community.</p>\r\n<p>Miguel Bronzovic<br /><a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-03-28T10:29:05.61-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]