[
  {
    "Id": "829825",
    "ThreadId": "353930",
    "Html": "\r\n<p>Hi!</p>\r\n<p>First of all thank you for open source Prism library ;)</p>\r\n<p>Is it possible to share an<span>&nbsp;</span><code>dynamic</code><span>&nbsp;</span>type object from a Module between other modules without any static referencing or<span>&nbsp;</span><code>interface</code><span>&nbsp;</span>or any other DI/IoC solution?</p>\r\n<p>Lets say we have a GlobalEvent like this in<span>&nbsp;</span><code>Core.dll</code><span>&nbsp;</span>assembly:</p>\r\n<pre><span>public</span><span> </span><span>class</span><span> </span><span>GlobalEvent</span><span> </span><span>:</span><span> </span><span>CompositePresentationEvent</span><span class=\"str\">&lt;dynamic&gt;</span><span>\r\n</span><span>{</span><span>\r\n    </span><span>public</span><span> </span><span>GlobalEvent</span><span>()</span><span>\r\n    </span><span>{</span><span>\r\n    </span><span>}</span><span>\r\n\r\n    </span><span>// public void Publish(dynamic payload) exist in base class</span><span>\r\n</span><span>}</span></pre>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>and in<span>&nbsp;</span><code>ModuleA.dll</code><span>&nbsp;</span>(has static reference to<span>&nbsp;</span><code>Core.dll</code>), publish it like this:</p>\r\n<pre><span>public</span><span> </span><span>void</span><span> </span><span>RaiseVoucherAdded</span><span>(</span><span>Models</span><span>.</span><span>Voucher</span><span> voucher</span><span>)</span><span>\r\n</span><span>{</span><span>\r\n    _eventAggregator</span><span>.</span><span>GetEvent</span><span>&lt;</span><span>GlobalEvent</span><span>&gt;().</span><span>Publish</span><span>(</span><span>voucher</span><span>);</span><span>\r\n</span><span>}</span><span>\r\n\r\n</span><span>// also Voucher class is in ModuleA.dll in Models namespace</span><span>\r\n</span><span>public</span><span> </span><span>class</span><span> </span><span>Voucher</span><span>\r\n</span><span>{</span><span>\r\n     </span><span>// members...</span><span>\r\n</span><span>}</span></pre>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>and in<span>&nbsp;</span><code>ModuleB.dll</code><span>&nbsp;</span>(has static reference to<span>&nbsp;</span><code>Core.dll</code>), subscribe like this:</p>\r\n<pre><span>    </span><span>this</span><span>.</span><span>_eventAggregator</span><span>.</span><span>GetEvent</span><span>&lt;</span><span>GlobalEvent</span><span>&gt;().</span><span>Subscribe</span><span>(</span><span>EventOccured</span><span>);</span><span>\r\n    </span><span>...</span><span>\r\n    </span><span>private</span><span> </span><span>void</span><span> </span><span>EventOccured</span><span>(</span><span>dynamic</span><span> data</span><span>)</span><span>\r\n    </span><span>{</span><span>\r\n        </span><span>if</span><span> </span><span>(</span><span>data</span><span>.</span><span>GetType</span><span>().</span><span>Name</span><span> </span><span>==</span><span> </span><span class=\"str\">&quot;ModuleA.Models.Voucher&quot;</span><span>)</span><span>\r\n        </span><span>{</span><span>\r\n            </span><span>DoSomethingByVoucher</span><span>(</span><span>data</span><span>);</span><span>\r\n        </span><span>}</span><span>\r\n    </span><span>}</span></pre>\r\n<p>Well,</p>\r\n<p>What are disadvantages of this solution? Is it even possible? If it is, does it support modules that created by any other CLR language in .NET?</p>\r\n<p>Thanks in advance :)</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2012-04-28T23:54:58.32-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "831239",
    "ThreadId": "353930",
    "Html": "<p>Hi,</p>\r\n<p>Based on my understanding of your proposed scenario, this could be achieved without problems, specially if you don't desire any static referencing or<span> interface as you mentioned.</span></p>\r\n<p>In my opinion this approach could be helpful if you need an element to support any operation at compile time. On the other hand, you may have to be very careful when using it as it can provoke <strong>run-time</strong> failures that will not appear in a statically typed language where you can catch them at compile time.</p>\r\n<p>On the hand a very similar implementation can be achieved by passing the <strong>object </strong>type as the payload of the event instead. But this will imply that you will have to cast this object to support any specific operation (e.g. using a common interface). Which way you choose, may depend on your personal preferences and the requirements of your scenario.</p>\r\n<p>Also, as far as I know variables of type <strong><span class=\"input\">dynamic</span> </strong>are compiled into variables of type <strong><span class=\"input\">object</span></strong>. Therefore, type <strong><span class=\"input\">dynamic</span> </strong>exists only at compile time, not at run time. Based on this, I believe you shouldn't encountered problems with other <strong>CLR </strong>languages in .<strong>NET</strong>.</p>\r\n<p>Additionally, you could find the following <strong>MSDN </strong>articles interesting:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd264741.aspx\">dynamic (C# Reference)</a></li>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/dd264736.aspx\">Using Type dynamic (C# Programming Guide)</a></li>\r\n</ul>\r\n<p>I hope you find this handy,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-05-02T11:06:42.497-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "839936",
    "ThreadId": "353930",
    "Html": "<p>Thank you for answer. I found it very useful. :)</p>",
    "PostedDate": "2012-05-23T07:53:07.113-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]