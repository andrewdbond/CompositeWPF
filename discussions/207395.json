[
  {
    "Id": "423993",
    "ThreadId": "207395",
    "Html": "<div id=\"ctl00_ctl00_MasterContent_Content_PostRepeater_ctl00_BodyDiv\">\r\n<p>Hi, <br>Developing a Silverlight project, I'm subscribing to some events in a View Model class such:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void Subscibe(IEventAggregator eventAggregator)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Subscribe to logged out event (from menu or button or what evre<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventAggregator.GetEvent&lt;EventCommand&gt;().Subscribe(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnCommandEvent,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the function that implements the response <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ThreadOption.UIThread,&nbsp;&nbsp;&nbsp;&nbsp; // invoke subscription on the UI Thread<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color:#ff0000\">true,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;// false KeepAlive means weak fn references such that this object will be GCed as soon as not anymore in use<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // However this caused an exception, so I put it to true and the ScreenFactoryMap is responsible for unsubscribing<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // to allow the instance to be GCed</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Fn to filter events so only hear pertinent events<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br><br>Notice the red section in my call. I use a screenfactory to instantiate the view model class such (notice again the red sectoin):</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void CreateAndShowMapView() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (m_viewModel != null) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return; // race guard; superfluous?<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CreateMapView();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShowMapView();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void CreateMapView() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_view = m_container.Resolve&lt;ViewMap&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#ff0000\"> m_viewModel = m_container.Resolve&lt;VMMap&gt;();<br></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_view.DataContext = m_viewModel;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void ShowMapView() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_regionManager.AddToRegion(RegionNames.Map, m_view);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\r\n<p>I was going to subscribe to events in the VM class by setting keepAlive = false to avoid having to call Unsubscribe() when the view is closed (I'm opening the view and closing as user requests). Setting keepAlive to true and not calling Unsubscribe() will cause memory leak as the EventAggregator keeps a strong link to the VM instance after it is no more in use.</p>\r\n<p>If I set the keepAlive parameter to false I get an ActivationException telling &quot;Activation error occured while trying to get instance of type VMMap, key &quot;&quot;&quot;&quot; when calling eventAggregator.GetEvent&lt;EventCommand&gt;().Subscribe(...) as detailed above.<br>Why is that happening for keepAlive = false?</p>\r\n<p>The&nbsp;exception details are:<br><span style=\"color:#ff0000\">{Microsoft.Practices.ServiceLocation.ActivationException: Activation error occured while trying to get instance of type VMMap, key &quot;&quot; ---&gt; Microsoft.Practices.Unity.ResolutionFailedException: Resolution of the dependency failed, type = &quot;C2Net.Modules.Map.VMMap&quot;, name = &quot;&quot;. Exception message is: The current build operation (build key Build Key[C2Net.Modules.Map.VMMap, null]) failed: C2Net.Modules.Map.VMMap.OnLoggedIn(C2Net.Modules.Infrastructure.EventAggregation.EventLoggedIn) (Strategy type BuildPlanStrategy, index 3) ---&gt; Microsoft.Practices.ObjectBuilder2.BuildFailedException: The current build operation (build key Build Key[C2Net.Modules.Map.VMMap, null]) failed: C2Net.Modules.Map.VMMap.OnLoggedIn(C2Net.Modules.Infrastructure.EventAggregation.EventLoggedIn) (Strategy type BuildPlanStrategy, index 3) ---&gt; System.MethodAccessException: C2Net.Modules.Map.VMMap.OnLoggedIn(C2Net.Modules.Infrastructure.EventAggregation.EventLoggedIn)<br>&nbsp;&nbsp; at System.Delegate.BindToMethodInfo(Object target, RuntimeMethodHandle method, RuntimeTypeHandle methodType, DelegateBindingFlags flags)<br>&nbsp;&nbsp; at System.Delegate.CreateDelegate(Type type, Object firstArgument, MethodInfo method, Boolean throwOnBindFailure)<br>&nbsp;&nbsp; at System.Delegate.CreateDelegate(Type type, Object firstArgument, MethodInfo method)<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Events.DelegateReference.TryGetDelegate()<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Events.DelegateReference.get_Target()<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Events.EventSubscription`1..ctor(IDelegateReference actionReference, IDelegateReference filterReference)<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Events.DispatcherEventSubscription`1..ctor(IDelegateReference actionReference, IDelegateReference filterReference, IDispatcherFacade dispatcher)<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Events.CompositePresentationEvent`1.Subscribe(Action`1 action, ThreadOption threadOption, Boolean keepSubscriberReferenceAlive, Predicate`1 filter)<br>&nbsp;&nbsp; at C2Net.Modules.Map.VMMap.Subscibe(IEventAggregator eventAggregator)<br>&nbsp;&nbsp; at C2Net.Modules.Map.VMMap..ctor(IMapRepository repository, IEventAggregator eventAggregator)<br>&nbsp;&nbsp; at BuildUp_C2Net.Modules.Map.VMMap(IBuilderContext )<br>&nbsp;&nbsp; at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)<br>&nbsp;&nbsp; at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)<br>&nbsp;&nbsp; at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)<br>&nbsp;&nbsp; --- End of inner exception stack trace ---<br>&nbsp;&nbsp; at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)<br>&nbsp;&nbsp; at Microsoft.Practices.ObjectBuilder2.Builder.BuildUp(IReadWriteLocator locator, ILifetimeContainer lifetime, IPolicyList policies, IStrategyChain strategies, Object buildKey, Object existing)<br>&nbsp;&nbsp; at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name)<br>&nbsp;&nbsp; --- End of inner exception stack trace ---<br>&nbsp;&nbsp; at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name)<br>&nbsp;&nbsp; at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, String name)<br>&nbsp;&nbsp; at Microsoft.Practices.Unity.UnityContainer.Resolve(Type t, String name)<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.UnityExtensions.UnityServiceLocatorAdapter.DoGetInstance(Type serviceType, String key)<br>&nbsp;&nbsp; at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType, String key)<br>&nbsp;&nbsp; --- End of inner exception stack trace ---<br>&nbsp;&nbsp; at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType, String key)<br>&nbsp;&nbsp; at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance[TService]()<br>&nbsp;&nbsp; at C2Net.Modules.Map.ScreenFactoryMap.CreateMapView()<br>&nbsp;&nbsp; at C2Net.Modules.Map.ScreenFactoryMap.CreateAndShowMapView()<br>&nbsp;&nbsp; at C2Net.Modules.Map.ScreenFactoryMap.OnCommandEvent(EventCommand msg)}</span></p>\r\n<p>Inner exceptoin is:<br><span style=\"color:#ff0000\">{Microsoft.Practices.Unity.ResolutionFailedException: Resolution of the dependency failed, type = &quot;C2Net.Modules.Map.VMMap&quot;, name = &quot;&quot;. Exception message is: The current build operation (build key Build Key[C2Net.Modules.Map.VMMap, null]) failed: C2Net.Modules.Map.VMMap.OnLoggedIn(C2Net.Modules.Infrastructure.EventAggregation.EventLoggedIn) (Strategy type BuildPlanStrategy, index 3) ---&gt; Microsoft.Practices.ObjectBuilder2.BuildFailedException: The current build operation (build key Build Key[C2Net.Modules.Map.VMMap, null]) failed: C2Net.Modules.Map.VMMap.OnLoggedIn(C2Net.Modules.Infrastructure.EventAggregation.EventLoggedIn) (Strategy type BuildPlanStrategy, index 3) ---&gt; System.MethodAccessException: C2Net.Modules.Map.VMMap.OnLoggedIn(C2Net.Modules.Infrastructure.EventAggregation.EventLoggedIn)<br>&nbsp;&nbsp; at System.Delegate.BindToMethodInfo(Object target, RuntimeMethodHandle method, RuntimeTypeHandle methodType, DelegateBindingFlags flags)<br>&nbsp;&nbsp; at System.Delegate.CreateDelegate(Type type, Object firstArgument, MethodInfo method, Boolean throwOnBindFailure)<br>&nbsp;&nbsp; at System.Delegate.CreateDelegate(Type type, Object firstArgument, MethodInfo method)<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Events.DelegateReference.TryGetDelegate()<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Events.DelegateReference.get_Target()<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Events.EventSubscription`1..ctor(IDelegateReference actionReference, IDelegateReference filterReference)<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Events.DispatcherEventSubscription`1..ctor(IDelegateReference actionReference, IDelegateReference filterReference, IDispatcherFacade dispatcher)<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.Presentation.Events.CompositePresentationEvent`1.Subscribe(Action`1 action, ThreadOption threadOption, Boolean keepSubscriberReferenceAlive, Predicate`1 filter)<br>&nbsp;&nbsp; at C2Net.Modules.Map.VMMap.Subscibe(IEventAggregator eventAggregator)<br>&nbsp;&nbsp; at C2Net.Modules.Map.VMMap..ctor(IMapRepository repository, IEventAggregator eventAggregator)<br>&nbsp;&nbsp; at BuildUp_C2Net.Modules.Map.VMMap(IBuilderContext )<br>&nbsp;&nbsp; at Microsoft.Practices.ObjectBuilder2.DynamicMethodBuildPlan.BuildUp(IBuilderContext context)<br>&nbsp;&nbsp; at Microsoft.Practices.ObjectBuilder2.BuildPlanStrategy.PreBuildUp(IBuilderContext context)<br>&nbsp;&nbsp; at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)<br>&nbsp;&nbsp; --- End of inner exception stack trace ---<br>&nbsp;&nbsp; at Microsoft.Practices.ObjectBuilder2.StrategyChain.ExecuteBuildUp(IBuilderContext context)<br>&nbsp;&nbsp; at Microsoft.Practices.ObjectBuilder2.Builder.BuildUp(IReadWriteLocator locator, ILifetimeContainer lifetime, IPolicyList policies, IStrategyChain strategies, Object buildKey, Object existing)<br>&nbsp;&nbsp; at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name)<br>&nbsp;&nbsp; --- End of inner exception stack trace ---<br>&nbsp;&nbsp; at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, Object existing, String name)<br>&nbsp;&nbsp; at Microsoft.Practices.Unity.UnityContainer.DoBuildUp(Type t, String name)<br>&nbsp;&nbsp; at Microsoft.Practices.Unity.UnityContainer.Resolve(Type t, String name)<br>&nbsp;&nbsp; at Microsoft.Practices.Composite.UnityExtensions.UnityServiceLocatorAdapter.DoGetInstance(Type serviceType, String key)<br>&nbsp;&nbsp; at Microsoft.Practices.ServiceLocation.ServiceLocatorImplBase.GetInstance(Type serviceType, String key)}</span><span style=\"color:#ff0000\"><br></span></p>\r\n</div>",
    "PostedDate": "2010-03-26T03:05:02.22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "424136",
    "ThreadId": "207395",
    "Html": "<p id=afb195e0-1b13-012d-71f7-12313d013db1>Hi,</p>\r\n<p id=afb204a0-1b13-012d-71f8-12313d013db1>A possible reason for getting an  exception when subscribing using a weak reference could be that your event  handler (in this case <strong>OnCommandEvent</strong>) is declared as private.  As explained in <a href=\"http://msdn.microsoft.com/en-us/library/74x8f551(VS.95).aspx\">this  article</a> the method must be accessible (so in this case it should be  public).</p>\r\n<p>A similar situation is dealt with in <a href=\"View.aspx?ThreadId=57362\">this  thread</a>.</p>\r\n<p id=afb2f1e0-1b13-012d-71fa-12313d013db1>Please let me know if this helps.</p>\r\n<p id=afb367a0-1b13-012d-71fb-12313d013db1>Damian Schenkelman <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2010-03-26T08:54:44.493-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "424169",
    "ThreadId": "207395",
    "Html": "<p>Yes you are right, that was the problem. <br>However even though I can now use weak reference (keepAlive = false) I still need to unsubscribe the events to get the ViewModel class GCed<br>Why is that?</p>",
    "PostedDate": "2010-03-26T09:52:06.927-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]