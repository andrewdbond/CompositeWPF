[
  {
    "Id": "510668",
    "ThreadId": "231854",
    "Html": "\r\n<p>Hy again guys,</p>\r\n<p>I'm trying to design the structure of my application and I'm having some doubts.</p>\r\n<p>Let me try to explain how it will work my application:</p>\r\n<p>I Have a Shell with a &quot;MainRegion&quot; and 2 modules:</p>\r\n<p>&nbsp;&nbsp;- ModuleA : that have a ViewA, and a ChildWindowA</p>\r\n<p>&nbsp;&nbsp;- ModuleB : that have a ViewB, and a ChildWindowB</p>\r\n<p>In the Shell i have 2 buttons (show ViewA and show ViewB).</p>\r\n<p>The ViewA and ViewB is just a DataGrid that load the TableA and TableB data respectively, and also have 3 buttons (add, edit and Delete).</p>\r\n<p>The Add and Edit buttons for the ViewA call the ChildWindowA, and the Add and Edit buttons for the ViewB call the ChildWindowsB.</p>\r\n<p>Thats all fine,no problem here.</p>\r\n<p>The problem is: The ChildWindowA (in the ViewA), also have a shortcut to add a TableB record, so, i need to call the ChildWindowB (in the ModuleB) inside the ChildWindoA (in TheModuleA),<strong> how can i do that?</strong></p>\r\n<p>------- -----</p>\r\n<p>Given the structure above, ill will use the Ria Service as a Data Context in my Application.</p>\r\n<p>In that case, is there any problema to create a Singleton DomainContext in the Shell? that all my Modules/Views/Childwindows can use?</p>\r\n",
    "PostedDate": "2010-10-21T11:21:35.69-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "511235",
    "ThreadId": "231854",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Based on my understanding, you have a PopupRegion in your ViewA and other in the ViewB (also named SecondaryRegion in the StockTrader RI). And, you are registering/adding your popup views in these regions.</p>\r\n<p>Additionally, you need to show the PopupViewB from the your ViewA. So, for achieving this scenario, you have two possible options within sight:<br>\r\n<br>\r\n1) Expose your Shell Window as a region and display all your dialog windows in that region. For more information on this topic, you could take a look at the Stock Trader RI, since it has already implemented this scenario</p>\r\n<p>2) If you have two different regions for displaying your dialogs:</p>\r\n<ul>\r\n<li>Use<a href=\"http://msdn.microsoft.com/en-us/library/ff921076%28PandP.20%29.aspx\"> View Injection</a> and add your ViewB to the PopupRegionA using the following code\r\n<strong>(pseudo-code</strong>): </li></ul>\r\n<p style=\"padding-left:60px\"><strong>regionManager.Region[&quot;PopupRegionA&quot;].add(container.Resolve&lt;PopupRegionB&gt;());</strong></p>\r\n<ul>\r\n<li>Use Navigation and navigate to your ViewB in the PopupRegionA using the following code\r\n<strong>(pseudo-code</strong>) </li></ul>\r\n<p style=\"padding-left:60px\"><strong>regionManager.RequestNavigate(&quot;PopupRegionA&quot;, new Uri(&quot;/PopupRegionB&quot;, UriKind.Relative));</strong></p>\r\n<p>Hope this helps.</p>\r\n<p>Fernando Antivero <br>\r\n<a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-22T11:04:39.53-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "511247",
    "ThreadId": "231854",
    "Html": "\r\n<p>The Popup is not a region, thats the problem.</p>\r\n<p>The popups, in my Application are Childwindow (a modal windows from silverlight Toolkit), that arent in a region. so how can i do that?</p>\r\n<p>My Shell have only one region (&quot;MainRegion&quot;), that i load a ViewA, with datagrid and some buttons. The button call a ChildWindows (modal windows) to the user enter the data, but in that windows i need to call another ChildWindow that is in another module.</p>\r\n<p>And i need to pass parameters to that Windows.</p>\r\n<p>Is there a way to do that with Prism?&nbsp;</p>\r\n",
    "PostedDate": "2010-10-22T11:43:05.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "511279",
    "ThreadId": "231854",
    "Html": "\r\n<p>Hi,<br>\r\n<br>\r\nThere is not guidance on using the ChildWindow (Silverlight Toolkit) in Prism out-of-the-box. But the recommended approach for displaying dialogs is implemented in the Stock Trader RI.<br>\r\n<br>\r\nTherefore, I would recommend you to check the Stock Trader Reference Implementation Application, since this application implement a pretty similar scenario as you described.<br>\r\n<br>\r\nThe Shell Window contains a &quot;MainRegion&quot; and also it exposes a &quot;SecondaryRegion&quot; to display all the dialog windows in the application:</p>\r\n<pre><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">UserControl x</span><span style=\"color:blue\">:</span><span style=\"color:red\">Class</span><span style=\"color:blue\">=&quot;StockTraderRI.Shell&quot;\r\n    </span><span style=\"color:red\">...\r\n    </span><strong><span style=\"color:#a31515\">infBehaviors</span><span style=\"color:blue\">:</span><span style=\"color:red\">RegionPopupBehaviors.CreatePopupRegionWithName</span><span style=\"color:blue\">=&quot;SecondaryRegion&quot;\r\n    </span></strong><span style=\"color:#a31515\">infBehaviors</span><span style=\"color:blue\">:</span><span style=\"color:red\">RegionPopupBehaviors.ContainerWindowStyle</span><span style=\"color:blue\">=&quot;{StaticResource PopupStyle}&quot;&gt;\r\n            </span>...\r\n            <span style=\"color:green\">&lt;!-- main bar --&gt;\r\n            </span><span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ItemsControl x</span><span style=\"color:blue\">:</span><span style=\"color:red\">Name</span><span style=\"color:blue\">=&quot;MainToolbar&quot; </span><strong><span style=\"color:#a31515\">Regions</span><span style=\"color:blue\">:</span><span style=\"color:red\">RegionManager.RegionName</span><span style=\"color:blue\">=&quot;MainToolBarRegion&quot; </span></strong><span style=\"color:red\">HorizontalAlignment</span><span style=\"color:blue\">=&quot;Right&quot; </span><span style=\"color:red\">VerticalAlignment</span><span style=\"color:blue\">=&quot;Top&quot; </span><span style=\"color:red\">Margin</span><span style=\"color:blue\">=&quot;0,0,10,0&quot; </span><span style=\"color:red\">Grid.Row</span><span style=\"color:blue\">=&quot;1&quot; </span><span style=\"color:red\">RenderTransformOrigin</span><span style=\"color:blue\">=&quot;0.5,0.5&quot;&gt;\r\n                </span>...\r\n            <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">ItemsControl</span><span style=\"color:blue\">&gt;\r\n            </span><span style=\"color:green\">&lt;!-- content --&gt;\r\n            </span>...\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">Controls</span><span style=\"color:blue\">:</span><span style=\"color:#a31515\">AnimatedTabControl <strong>Regions</strong></span><strong><span style=\"color:blue\">:</span><span style=\"color:red\">RegionManager.RegionName</span><span style=\"color:blue\">=&quot;MainRegion&quot; </span></strong><span style=\"color:red\">Opacity</span><span style=\"color:blue\">=&quot;1&quot; </span><span style=\"color:red\">... </span><span style=\"color:blue\">/&gt;            \r\n            </span>...\r\n            <span style=\"color:blue\">&lt;</span><span style=\"color:#a31515\">ContentControl <strong>Regions</strong></span><strong><span style=\"color:blue\">:</span><span style=\"color:red\">RegionManager.RegionName</span><span style=\"color:blue\">=&quot;ActionRegion&quot; </span></strong><span style=\"color:#a31515\">x</span><span style=\"color:blue\">:</span><span style=\"color:red\">Name</span><span style=\"color:blue\">=&quot;ActionControl&quot; </span><span style=\"color:red\">LayoutUpdated</span><span style=\"color:blue\">=&quot;ActionControl_LayoutUpdated&quot; &gt;\r\n                </span>...\r\n            <span style=\"color:blue\">&lt;/</span><span style=\"color:#a31515\">ContentControl</span><span style=\"color:blue\">&gt;\r\n&lt;/</span><span style=\"color:#a31515\">UserControl</span><span style=\"color:blue\">&gt;\r\n</span></pre>\r\n<p>Then, you could take a look at the <strong>PopupDialogActivationBehavior.Silverlight.cs</strong> class, since it helps to display the dialog windows in the SecondaryRegion by providing the wrapper class (IWindow), which manages the control to be displayed.</p>\r\n<p>So, you will be able to modify/create this behavior to use the control of your choice (e.g. ChildWindow) and if you have any particular problem implementing this, you could ask for help here.</p>\r\n<p>Hope this helps.</p>\r\n<p>Fernando Antivero <br>\r\n<a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-22T12:57:55.56-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "511302",
    "ThreadId": "231854",
    "Html": "\r\n<p>i ll take a look at the&nbsp;&nbsp;<strong>PopupDialogActivationBehavior.Silverlight.cs</strong>, but let me show you my temp solution:</p>\r\n<p>My App:</p>\r\n<ul>\r\n<li>App (Main Project) </li><li>ModuleA\r\n<ul>\r\n<li>ViewA </li><li>ChildWindowA </li></ul>\r\n</li><li>ModuleB\r\n<ul>\r\n<li>ViewB </li><li>ChildWindowB (that needs to call the ChildWindowA) </li></ul>\r\n</li><li>Lib (Silverlight Library Project) </li></ul>\r\n<p>So, in the Lib project a declared an Interface:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">interface</span> IChildWindowA\r\n{\r\n   <span style=\"color:blue\">void</span> Show(<span style=\"color:green\">/* pass ViewModal and Current Record to update*/</span>);\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>in the ChildWindowA, implements the Interface</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[Export(<span style=\"color:blue\">typeof</span>(IChildWindowA))]\r\n[PartCreationPolicy(CreationPolicy.NonShared)]\r\n<span style=\"color:blue\">public</span> <span style=\"color:blue\">partial</span> <span style=\"color:blue\">class</span> EditTemp : ChildWindow, IChildWindowA\r\n{\r\n   <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> Show(...)\r\n   {\r\n      <span style=\"color:blue\">this</span>.Show();\r\n   }\r\n}\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>The ModuleB DependsOn the ModuleA, In a Button Click inside the ChildWindowB in the ModuleB:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">private</span> <span style=\"color:blue\">void</span> OnButtonClick(<span style=\"color:blue\">object</span> sender, RoutedEventArgs e)\r\n{\r\n   _editWindowA = (IChildWindowA)ServiceLocator.Current.GetInstance(<span style=\"color:blue\">typeof</span>(IChildWindowA));\r\n   _editWindow.Show(...);\r\n}\r\n</pre>\r\n</div>\r\n<p>Is that a Bad Solution? or i can go with that</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-10-22T13:41:46.55-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "512108",
    "ThreadId": "231854",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Although it is a possible approach for achieving your scenario, please take into account that in general you will find the recommended approaches by the product team in the Quickstarts and Reference Implementations provided in Prism.<br>\r\n<br>\r\nThat said, note that you are loosing the ability of UI Composition since you do not use regions, while the recommended approach provides you an homogenized way for displaying views in your application.<br>\r\n<br>\r\nBut it is important to remark that if you consider that the recommended approach does not fit with your scenario, you could use either the implementation that you shared or others.<br>\r\n<br>\r\nHope this helps.<br>\r\n<br>\r\nFernando Antivero</p>\r\n<p><a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n",
    "PostedDate": "2010-10-25T06:21:52.477-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]