[
  {
    "Id": "381357",
    "ThreadId": "173110",
    "Html": "<div id=\"ctl00_ctl00_MasterContent_Content_PostRepeater_ctl00_BodyDiv\">I've run into what I believe to be a general Silverlight 2 limitation and was hoping to get MVVM/Prism guidance on how to overcome it. I'll give a brief description of the problem and provide the relevant code snippets.<br><br><strong>Scenario:</strong><br><br>I'm using Prism and the MVVM pattern on a project which has a DataGrid and I'd like to use a ComboBox in the CellEditingTemplate to allow the end user to select a new value from a list. To enable this scenario, I've exposed two properties on my ViewModel -&nbsp;Types and Items. Types is an array of a class containing properties Key and Value and is where I store my display text and actual value for the ComboBox. Items is an ObservableCollection of my model class which exposes a property which is the type of my Key/Value class.<br><br>The project is setup such that I have a&nbsp;ContainerControlledLifetimeManager Service which returns values to a ViewModel which is bound to by the View: (i.e. Service &lt;--&gt; ViewModel &lt;--&gt; View). <br><br><strong>Problem:</strong><br><br>When I set the ItemsSource of the DataGrid like so,&nbsp;ItemsSource={Binding Path=Items},&nbsp;the ComboBox contained within the&nbsp;CellEditingTemplate is unable to bind to the Types property of my ViewModel because the relative binding path now has Items as the root.<br><br><strong>Solution?:</strong><br><br>The obvious solution would be to reset the root of the relative binding path back to the DataContext for the ComboBox (something like ItemsSource={Binding Path=Types, Source={DataContext}}, but I've searched high and low and haven't found a way to do that. All the other solutions I've seen involves setting up a class that exposes the property you want to bind to as a StaticReource. However, in my scenario that won't work (at least I don't think it will)&nbsp;because I'm using&nbsp;the&nbsp;ContainerControlledLifetimeManager Service to get the values for the Types property and as far as I know any class you markup as a resource needs to have an empty default constructor - which would prevent me from being able to pull the service from the container using constructor Dependency Injection.<br><br>For the time being, I've handled the binding in the code behind in the&nbsp;PreparingCellForEdit event handler, but I would definitly prefer a pure XAML/binding method if one exists.<br><br>The main code to reconstruct the scenario is below. Thanks in advance for any guidance you can provide.<br><br>Ryan<br><br><strong>Module</strong><br><br>\r\n<pre><span>using</span> Microsoft.Practices.Composite.Modularity;\r\n<span>using</span> Microsoft.Practices.Composite.Regions;\r\n<span>using</span> Microsoft.Practices.Unity;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.Services;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.ViewModels;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.Views;\r\n\r\n<span>namespace</span> SLPrismGridComboBox.ModuleA\r\n{\r\n    <span>public</span> <span>class</span> ModuleAModule : IModule\r\n    {\r\n\r\n        IUnityContainer _container;\r\n        IRegionManager _regionManager;\r\n\r\n        <span>public</span> ModuleAModule(IUnityContainer container, IRegionManager regionManager)\r\n        {\r\n            _container = container;\r\n            _regionManager = regionManager;\r\n        }\r\n\r\n        <span>public</span> <span>void</span> Initialize()\r\n        {\r\n            RegisterTypes();\r\n\r\n            IMiscView view = _container.Resolve&lt;IMiscView&gt;();\r\n            _regionManager.AddToRegion(<span>&quot;MainRegion&quot;</span>, view);\r\n        }\r\n\r\n        <span>private</span> <span>void</span> RegisterTypes()\r\n        {\r\n            _container.RegisterType&lt;IMiscView, MiscView&gt;();\r\n            _container.RegisterType&lt;IMiscViewModel, MiscViewModel&gt;();\r\n            _container.RegisterType&lt;IMiscService, MiscService&gt;(<span>new</span> ContainerControlledLifetimeManager());\r\n        }\r\n\r\n    }\r\n}</pre>\r\n<br><strong>Models</strong> <br>\r\n<pre><span>namespace</span> SLPrismGridComboBox.ModuleA.Models\r\n{\r\n    <span>public</span> <span>class</span> SimpleKeyValuePair\r\n    {\r\n        <span>public</span> <span>string</span> Key { get; set; }\r\n        <span>public</span> <span>string</span> Value { get; set; }\r\n\r\n        <span>public</span> SimpleKeyValuePair(<span>string</span> key, <span>string</span> <span>value</span>)\r\n        {\r\n            <span>this</span>.Key = key;\r\n            <span>this</span>.Value = <span>value</span>;\r\n        }\r\n\r\n        <span>public</span> <span>override</span> <span>bool</span> Equals(<span>object</span> obj)\r\n        {\r\n            <span>if</span> (obj.GetType().Equals(<span>this</span>.GetType()))\r\n            {\r\n                <span>if</span> (((SimpleKeyValuePair)obj).Value.Equals(<span>this</span>.Value))\r\n                {\r\n                    <span>return</span> <span>true</span>;\r\n                }\r\n            }\r\n            <span>return</span> <span>false</span>;\r\n        }\r\n\r\n        <span>public</span> <span>override</span> <span>int</span> GetHashCode()\r\n        {\r\n            <span>return</span> <span>base</span>.GetHashCode();\r\n        }\r\n    }\r\n}\r\n\r\n<span>namespace</span> SLPrismGridComboBox.ModuleA.Models\r\n{\r\n    <span>public</span> <span>class</span> MiscModel\r\n    {\r\n\r\n        <span>public</span> <span>string</span> Name { get; set; }\r\n        <span>public</span> SimpleKeyValuePair Type { get; set; }\r\n\r\n    }\r\n}</pre>\r\n<br><strong>Service</strong><br>\r\n<pre><span>using</span> System.Collections.ObjectModel;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.Models;\r\n\r\n<span>namespace</span> SLPrismGridComboBox.ModuleA.Services\r\n{\r\n    <span>public</span> <span>interface</span> IMiscService\r\n    {\r\n        ObservableCollection&lt;MiscModel&gt; GetAllMiscModels();\r\n        SimpleKeyValuePair[] GetAllTypes();\r\n    }\r\n}</pre>\r\n<pre><span>using</span> System.Collections.Generic;\r\n<span>using</span> System.Collections.ObjectModel;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.Models;\r\n\r\n<span>namespace</span> SLPrismGridComboBox.ModuleA.Services\r\n{\r\n    <span>public</span> <span>class</span> MiscService : IMiscService\r\n    {\r\n        <span>public</span> ObservableCollection&lt;MiscModel&gt; GetAllMiscModels()\r\n        {\r\n            ObservableCollection&lt;MiscModel&gt; result = <span>new</span> ObservableCollection&lt;MiscModel&gt;();\r\n            SimpleKeyValuePair[] types = GetAllTypes();\r\n            <span>int</span> i = -1;\r\n\r\n            result.Add(<span>new</span> MiscModel() { Name = <span>&quot;Name 1&quot;</span>, Type = types[i += 1] });\r\n            result.Add(<span>new</span> MiscModel() { Name = <span>&quot;Name 2&quot;</span>, Type = types[i += 1] });\r\n            result.Add(<span>new</span> MiscModel() { Name = <span>&quot;Name 3&quot;</span>, Type = types[i += 1] });\r\n            result.Add(<span>new</span> MiscModel() { Name = <span>&quot;Name 4&quot;</span>, Type = types[i += 1] });\r\n            result.Add(<span>new</span> MiscModel() { Name = <span>&quot;Name 5&quot;</span>, Type = types[i += 1] });\r\n            result.Add(<span>new</span> MiscModel() { Name = <span>&quot;Name 6&quot;</span>, Type = types[i += 1] });\r\n            result.Add(<span>new</span> MiscModel() { Name = <span>&quot;Name 7&quot;</span>, Type = types[i += 1] });\r\n\r\n            <span>return</span> result;\r\n        }\r\n\r\n        <span>public</span> SimpleKeyValuePair[] GetAllTypes()\r\n        {\r\n            List&lt;SimpleKeyValuePair&gt; result = <span>new</span> List&lt;SimpleKeyValuePair&gt;();\r\n\r\n            result.Add(<span>new</span> SimpleKeyValuePair(<span>&quot;Type 1&quot;</span>, <span>&quot;Value 1&quot;</span>));\r\n            result.Add(<span>new</span> SimpleKeyValuePair(<span>&quot;Type 2&quot;</span>, <span>&quot;Value 2&quot;</span>));\r\n            result.Add(<span>new</span> SimpleKeyValuePair(<span>&quot;Type 3&quot;</span>, <span>&quot;Value 3&quot;</span>));\r\n            result.Add(<span>new</span> SimpleKeyValuePair(<span>&quot;Type 4&quot;</span>, <span>&quot;Value 4&quot;</span>));\r\n            result.Add(<span>new</span> SimpleKeyValuePair(<span>&quot;Type 5&quot;</span>, <span>&quot;Value 5&quot;</span>));\r\n            result.Add(<span>new</span> SimpleKeyValuePair(<span>&quot;Type 6&quot;</span>, <span>&quot;Value 6&quot;</span>));\r\n            result.Add(<span>new</span> SimpleKeyValuePair(<span>&quot;Type 7&quot;</span>, <span>&quot;Value 7&quot;</span>));\r\n\r\n            <span>return</span> result.ToArray();\r\n        }\r\n    }\r\n}</pre>\r\n<br><br><strong>ViewModel</strong> <br><br>\r\n<pre><span>using</span> System.Collections.ObjectModel;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.Models;\r\n<span>namespace</span> SLPrismGridComboBox.ModuleA.ViewModels\r\n{\r\n    <span>public</span> <span>interface</span> IMiscViewModel\r\n    {\r\n        ObservableCollection&lt;MiscModel&gt; Items { get; set; }\r\n        SimpleKeyValuePair[] Types { get; }\r\n    }\r\n}\r\n\r\n<span>using</span> System.Collections.ObjectModel;\r\n<span>using</span> System.ComponentModel;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.Models;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.Services;\r\n\r\n<span>namespace</span> SLPrismGridComboBox.ModuleA.ViewModels\r\n{\r\n    <span>public</span> <span>class</span> MiscViewModel : IMiscViewModel, INotifyPropertyChanged\r\n    {\r\n        IMiscService _miscService;\r\n\r\n        <span>private</span> ObservableCollection&lt;MiscModel&gt; _items;\r\n        <span>public</span> ObservableCollection&lt;MiscModel&gt; Items\r\n        {\r\n            get { <span>return</span> _items; }\r\n            set\r\n            {\r\n                <span>if</span> (_items != <span>value</span>)\r\n                {\r\n                    _items = <span>value</span>;\r\n                    RaisePropertyChanged(<span>&quot;Items&quot;</span>);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span>private</span> SimpleKeyValuePair[] _types;\r\n        <span>public</span> SimpleKeyValuePair[] Types\r\n        {\r\n            get { <span>return</span> _types; }\r\n            <span>private</span> set\r\n            {\r\n                <span>if</span> (_types != <span>value</span>)\r\n                {\r\n                    _types = <span>value</span>;\r\n                    RaisePropertyChanged(<span>&quot;Types&quot;</span>);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span>public</span> <span>event</span> PropertyChangedEventHandler PropertyChanged;\r\n\r\n        <span>public</span> MiscViewModel(IMiscService miscService)\r\n        {\r\n            _miscService = miscService;\r\n            <span>this</span>.Items = _miscService.GetAllMiscModels();\r\n            <span>this</span>.Types = _miscService.GetAllTypes();\r\n        }\r\n\r\n        <span>private</span> <span>void</span> RaisePropertyChanged(<span>string</span> propertyName)\r\n        {\r\n            <span>if</span> (PropertyChanged != <span>null</span>)\r\n            {\r\n                PropertyChanged(<span>this</span>, <span>new</span> PropertyChangedEventArgs(propertyName));\r\n            }\r\n        }\r\n\r\n    }\r\n}</pre>\r\n<br><strong>View</strong> <br>\r\n<pre><span>namespace</span> SLPrismGridComboBox.ModuleA.Views\r\n{\r\n    <span>public</span> <span>interface</span> IMiscView\r\n    {\r\n\r\n    }\r\n}\r\n\r\n<span>using</span> System.Windows.Controls;\r\n<span>using</span> SLPrismGridComboBox.ModuleA.ViewModels;\r\n\r\n<span>namespace</span> SLPrismGridComboBox.ModuleA.Views\r\n{\r\n    <span>public</span> <span>partial</span> <span>class</span> MiscView : UserControl, IMiscView\r\n    {\r\n        IMiscViewModel _viewModel;\r\n\r\n        <span>public</span> MiscView(IMiscViewModel viewModel)\r\n        {\r\n            InitializeComponent();\r\n\r\n            _viewModel = viewModel;\r\n            <span>this</span>.DataContext = _viewModel;\r\n        }\r\n    }\r\n}</pre>\r\n<br>\r\n<pre><span>&lt;</span><span>UserControl</span> <span>x:Class</span><span>=&quot;SLPrismGridComboBox.ModuleA.Views.MiscView&quot;</span>\r\n    <span>xmlns</span><span>=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span> \r\n    <span>xmlns:x</span><span>=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span>\r\n    <span>xmlns:data</span><span>=&quot;clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Data&quot;</span> \r\n    <span>Width</span><span>=&quot;400&quot;</span> <span>Height</span><span>=&quot;300&quot;</span><span>&gt;</span>\r\n    <span>&lt;</span><span>Grid</span> <span>x:Name</span><span>=&quot;LayoutRoot&quot;</span> <span>Background</span><span>=&quot;White&quot;</span><span>&gt;</span>\r\n        <span>&lt;</span><span>data:DataGrid</span> <span>AutoGenerateColumns</span><span>=&quot;False&quot;</span> <span>ItemsSource</span><span>=&quot;{Binding Path=Items}&quot;</span><span>&gt;</span>\r\n            <span>&lt;</span><span>data:DataGrid.Columns</span><span>&gt;</span>\r\n                <span>&lt;</span><span>data:DataGridTextColumn</span> <span>Header</span><span>=&quot;Name&quot;</span> <span>Binding</span><span>=&quot;{Binding Path=Name}&quot;</span> <span>/&gt;</span>\r\n                <span>&lt;</span><span>data:DataGridTemplateColumn</span> <span>Header</span><span>=&quot;Type&quot;</span><span>&gt;</span>\r\n                    <span>&lt;</span><span>data:DataGridTemplateColumn.CellTemplate</span><span>&gt;</span>\r\n                        <span>&lt;</span><span>DataTemplate</span><span>&gt;</span>\r\n                            <span>&lt;</span><span>TextBlock</span> <span>Text</span><span>=&quot;{Binding Path=Type.Key}&quot;</span> <span>/&gt;</span>\r\n                        <span>&lt;/</span><span>DataTemplate</span><span>&gt;</span>\r\n                    <span>&lt;/</span><span>data:DataGridTemplateColumn.CellTemplate</span><span>&gt;</span>\r\n                    <span>&lt;</span><span>data:DataGridTemplateColumn.CellEditingTemplate</span><span>&gt;</span>\r\n                        <span>&lt;</span><span>DataTemplate</span><span>&gt;</span>\r\n                            <span>&lt;</span><span>ComboBox</span> <span>DisplayMemberPath</span><span>=&quot;{Binding Path=Type.Key}&quot;</span> <span>SelectedItem</span><span>=&quot;{Binding Path=Type}&quot;</span> <span>ItemsSource</span><span>=&quot;{Binding Path=Types}&quot;</span> <span>/&gt;</span>\r\n                        <span>&lt;/</span><span>DataTemplate</span><span>&gt;</span>\r\n                    <span>&lt;/</span><span>data:DataGridTemplateColumn.CellEditingTemplate</span><span>&gt;</span>\r\n                <span>&lt;/</span><span>data:DataGridTemplateColumn</span><span>&gt;</span>\r\n            <span>&lt;/</span><span>data:DataGrid.Columns</span><span>&gt;</span>\r\n        <span>&lt;/</span><span>data:DataGrid</span><span>&gt;</span>\r\n    <span>&lt;/</span><span>Grid</span><span>&gt;</span>\r\n<span>&lt;/</span><span>UserControl</span><span>&gt;</span></pre>\r\n</div>",
    "PostedDate": "2010-02-24T17:42:01.45-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "409755",
    "ThreadId": "173110",
    "Html": "<p id=17ee4050-0533-012d-fb0f-123139096d81>Hi Ryan,</p>\r\n<p id=17ee5200-0533-012d-fb10-123139096d81><span style=\"text-decoration:underline\"><strong>Cause</strong> </span> <br>As you said this is because your <strong>DataGrid</strong> has  been set with a different <strong>DataContext</strong> (this action is  performed when you set the ItemsSource property for a DataGrid), which  doesn&rsquo;t contain the property you want to bind to. Therefore, the Binding  is not able to reach the <strong>DataContext</strong> within a <strong>DataGrid</strong>.      <br>That said, as <strong>Silverlight</strong> doesn&rsquo;t support <a href=\"http://msdn.microsoft.com/en-us/library/system.windows.data.binding.relativesource(VS.95).aspx\">RelativeSource</a> binding values other than &ldquo;Self&rdquo; and &ldquo;Templated Parent&rdquo; (which would be  really useful in these cases) you have to perform a workaround.</p>\r\n<p id=17ee6a20-0533-012d-fb11-123139096d81><strong><span style=\"text-decoration:underline\">Possible  Workaround</span> <br></strong>The team Prism Stock Trader RI came up  with a possible approach to solve this. You can review it in the  following files in the <strong>StockTrader.RI.Modules.Position </strong>project:</p>\r\n<ul>\r\n<li><strong>PositionSummaryView.xaml</strong>: shows how  the Click.Command dependency property for the Action buttons is set.  They are inside a <strong>DataGrid</strong> named PositionsGrid. You  will notice that the source property has been set with Observable  Commands to avoid running into timing issues when the resource is be set  and when it is consumed. </li>\r\n<li><strong>PositionSummaryView.xaml.cs</strong>:  the code-behind not only sets its Model property, but also sets the  Observable Commands with the same model. </li>\r\n</ul>\r\n<p id=17ee85a0-0533-012d-fb12-123139096d81>Please let me know if this  helps.</p>\r\n<p id=17eea9e0-0533-012d-fb13-123139096d81>Damian  Schenkelman    <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2010-02-26T10:33:36.83-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]