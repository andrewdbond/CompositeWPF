[
  {
    "Id": "585762",
    "ThreadId": "251036",
    "Html": "<p>I have a UserControl (UC1)&nbsp;that contains a Grid with 2 columns and 2 rows.&nbsp; Each cell in the Grid contains a different type of UserControl (UC2,UC3,UC4,UC5).&nbsp; I use the RegionManager.RequestNavigate() method to load UC1, and all of its imports are satisfied via MEF.</p>\n<p>However, UC2-UC5 don't have their imports satisfied.&nbsp; Its seems odd that I would need to dynamically add these controls at runtime via RegionManager.RequestNavigate() in order for them all to have their imports satisfied, as I know exactly what content (UC) belongs to each cell at design time.</p>\n<p>So my question is, can I invoke DI at runtime without having to use RegionManager.RequestNavigate() so that UC2-UC5 have their imports satisfied?</p>\n<p>My layout seems logical to me, but perhaps there's a different (better) way of laying this out with the realm of Prism?</p>\n<p>Thanks much!</p>",
    "PostedDate": "2011-03-24T08:09:03.403-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "587541",
    "ThreadId": "251036",
    "Html": "<p>-</p>",
    "PostedDate": "2011-03-28T06:03:29.053-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "587620",
    "ThreadId": "251036",
    "Html": "<p>Hi,</p>\r\n<p>One possible way to achieve your requirement is to use the <strong>ServiceLocator</strong> to resolve your imports. Since you are using MEF and you already export all the user controls, the container will be able to resolve instances of that classes.</p>\r\n<p>So your UC1 code could have something like this:</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">var</span> myUserControl = ServiceLocator.Current.GetInstance&lt;IUC2&gt;();\r\n</pre>\r\n</div>\r\n<p>Additionally, you can read <a href=\"http://msdn.microsoft.com/en-us/library/ff921140(v=PandP.40).aspx\">Chapter 3: Managing Dependencies Between Components</a>. Inside you will find key concepts when using Dependency Injection containers within Prism (Unity and MEF).</p>\r\n<p>Let me know if this information helps you.</p>\r\n<p>Thanks,</p>\r\n<p>Miguel Bronzovic<br /><a href=\"http://blogs.southworks.net/mbronzovic\">http://blogs.southworks.net/mbronzovic</a></p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-03-28T07:53:02.617-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "587735",
    "ThreadId": "251036",
    "Html": "<p>That is exactly what I was after, thanks much!</p>",
    "PostedDate": "2011-03-28T10:59:51.48-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "587863",
    "ThreadId": "251036",
    "Html": "<p>So the <strong>ServiceLocatorï»¿</strong> worked just fine.&nbsp; However, drawing on the UC2 example, now 2 issues are occuring as a result.</p>\r\n<p>UC2 is marked with the [Export] attribute.</p>\r\n<p>UC2 contains a VM that is being imported via [Import] attribute.</p>\r\n<p>1.)&nbsp; I noticed that now the constructor for UC2 is invoked twice.&nbsp; This also happens in a few of the PRISM samples.</p>\r\n<p>2.)&nbsp; Also, UC2 contains a DataGrid whose ItemsList binds to a property of the VM (Projects).&nbsp; However, the DataGrid wants to bind to Projects before MEF has imported the VM, so DataGrid is actually looking to its container's DataContext to find Projects.</p>\r\n<p>Any thoughts here?</p>\r\n<p>Thanks again!</p>",
    "PostedDate": "2011-03-28T14:13:54.553-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588196",
    "ThreadId": "251036",
    "Html": "<p>Hi,</p>\r\n<p>Regarding your first question, it would be helpful if you could provide us with more information of the scenario in which this is happening, and also point us where you have found this behavior in the Prism QuickStarts and/or Reference Implementations, so that we can help you troubleshoot this undesired behavior.</p>\r\n<p>As for your second one, you could specify the import in the constructor, using the <strong>ImportingConstructor </strong>attribute (more information <a href=\"http://mef.codeplex.com/wikipage?title=Declaring%20Imports\">here</a>). That way you would guarantee that the export will be present in your view before it is initialized, thus avoiding what you've mentioned.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-03-29T06:26:19.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588276",
    "ThreadId": "251036",
    "Html": "<p>Guido, thanks your continued correspondence.&nbsp; Unfortunately, applying the <strong>ImportingConstructor </strong>attribute to the constructor of the view doesn't work.&nbsp; The view needs a public default constructor.&nbsp; If it does not have this, the control will not render properly at design time, and I will also receive a XamlParseException (No matching constructor found on type...).</p>\r\n<p>I tried&nbsp;overloading the constructor by providing the public default constructor and a constructor that takes the VM as an argument, like so:</p>\r\n<p>public UC2() { InitializeComponent(); }</p>\r\n<p>[ImportingConstructor] public UC2(SomeViewModel vm) { InitializeComponent(); DataContext = vm; }</p>\r\n<p>When I run, I am back at square one;&nbsp;both constructors are called and the DataGrid is looking for the Projects property on the DataContext belonging to its container's DataContext.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-03-29T08:39:30.287-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588339",
    "ThreadId": "251036",
    "Html": "<p>Hi,</p>\n<p>That's correct, when you instantiate your view in XAML you must have a default constructor. If you need to have it instantiated in the XAML in order to achieve blendability, you could again use the <strong>ServiceLocator</strong> to obtain an instance of your ViewModel.</p>\n<p>Take into account that the constructor of your view is probably being called twice because you're instantiating your view two times: one in the XAML and one in your other component through the use of the <strong>ServiceLocator</strong>.</p>\n<p>For more information on design time support (blendability), you could check the following threads:</p>\n<ul>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/237265\"><span>Blendability in PRISM v4 </span></a></li>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/221972\"><span>Views in Design view/Design time (controls not showing up) </span></a></li>\n<li><a href=\"http://compositewpf.codeplex.com/discussions/240359\"><span>Design time support for Prism 4</span></a> </li>\n</ul>\n<p>I hope you find this helpful.</p>\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>\n<div id=\"_mcePaste\" class=\"mcePaste\" style=\"position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px; overflow: hidden;\">http://compositewpf.codeplex.com/discussions/237265 to</div>",
    "PostedDate": "2011-03-29T10:16:00.58-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588355",
    "ThreadId": "251036",
    "Html": "<p>Hi Guido, yes, what you say is correct.&nbsp; However, I believe there have been a couple things lost in translation, so as a quick reminder, here is what i'm trying to accomplish:</p>\r\n<p>In the following layout (much code omitted for brevity sake), UC1 is being added to a region via <strong>IRegionManager.RegisterViewWithRegion()</strong></p>\r\n<p><span style=\"color: #a31515;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">UserControl</span><span style=\"color: red;\">&nbsp;Name</span><span style=\"color: blue;\">=</span><span style=\"color: blue;\">\"UC1\"</span><span style=\"color: blue;\">&gt;</span><br /><span style=\"color: #a31515;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">StackPanel</span><span style=\"color: blue;\">&gt;</span><br /><span style=\"color: #a31515;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">UC2</span><span style=\"color: blue;\">&gt;&lt;/</span><span style=\"color: #a31515;\">UC2</span><span style=\"color: blue;\">&gt;</span><br /><span style=\"color: #a31515;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">UC3</span><span style=\"color: blue;\">&gt;&lt;/</span><span style=\"color: #a31515;\">UC3</span><span style=\"color: blue;\">&gt;</span><br /><span style=\"color: #a31515;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">UC4</span><span style=\"color: blue;\">&gt;&lt;/</span><span style=\"color: #a31515;\">UC4</span><span style=\"color: blue;\">&gt;</span><br /><span style=\"color: #a31515;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">UC5</span><span style=\"color: blue;\">&gt;&lt;/</span><span style=\"color: #a31515;\">UC5</span><span style=\"color: blue;\">&gt;</span><br /><span style=\"color: #a31515;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">StackPanel</span><span style=\"color: blue;\">&gt;</span><br /><span style=\"color: #a31515;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">UserControl</span><span style=\"color: blue;\">&gt;</span></p>\r\n<p>All imports are satisfied properly on UC1.&nbsp; However, none of the imports are satisfied on UC2-UC5.&nbsp; UC2-UC5 are all different user controls that I want displayed at design time, therefore I am statically&nbsp;laying them out as opposed to relying on Region Management to add them.</p>\r\n<p>To satisfy their imports, I am relying on a call to <strong>ServiceLocator.Current.GetInstance&lt;T&gt;() </strong>(4 times, for UC2-UC5) within the <strong>Loaded </strong>Event of UC1.</p>\r\n<p>Doing this satisfies the imports, however, by the time that happens, the controls that depend on VM's in UC2-UC5 look to the DataContext in UC1.&nbsp; This is due to the imports being resolved too late.</p>\r\n<p>Following your advice as a test, I have placed a call <strong>ServiceLocator.Current.GetInstance&lt;T&gt;() </strong>within UC2's default public constructor (before call to InitializeComponent()), and this seems to have performed the trick (the controls that rely on databinding in UC2's XAML can find what they're looking for on the VM that is properly set as UC2's DataContext).</p>\r\n<p>But this approach will force me to have calls to <strong>ServiceLocator.Current.GetInstance&lt;T&gt;() </strong>scattered throughout my code (in Views and ViewModels).</p>\r\n<p>Surely there must be a better way to accomplish what I'm after?&nbsp; Perhaps I should just allow UC2-UC5 to be dynamically to the StackPanel in UC1 via a Region?&nbsp; Only problem with this, of course, as that I can't see UC2-UC5 displayed in UC1 at design time.</p>\r\n<p>Please stick with me here, I think we're almost there.&nbsp; :)</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-03-29T10:49:03.433-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588826",
    "ThreadId": "251036",
    "Html": "<p>From my understanding, the approaches you've mentioned are the most common way to deal with that scenario. When you register a view through the <strong>RegisterViewWithRegion</strong> method, it gets added to a region when it's created, and in order to do so, the view is internally resolved using the Service Locator.</p>\r\n<p>An alternative possibility, as a workaround to avoid having calls to <strong>ServiceLocator.Current.GetInstance&lt;T&gt;() </strong>scattered throughout your code, while keeping the benefits of design-time support for your views, would be to make your views implement <a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.composition.ipartimportssatisfiednotification.aspx\">IPartImportsSatisfiedNotification</a> and set the ViewModel to its <strong>DataContext </strong>and call <strong>InitializeComponent </strong>from within the <strong>ImportsSatisfied </strong>method (instead of calling the latter from the constructor). That way, you would guarantee that you would only load the view into the UI when the ViewModel import has been satisfied.</p>\r\n<p>I hope you find this helpful.</p>\r\n<p>Guido Leandro Maliandi <br /> <a href=\"http://blogs.southworks.net/gmaliandi\">http://blogs.southworks.net/gmaliandi</a></p>",
    "PostedDate": "2011-03-30T07:04:00.203-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "588851",
    "ThreadId": "251036",
    "Html": "<p>Thanks, Guido.&nbsp; I'll give that a shot.</p>",
    "PostedDate": "2011-03-30T07:43:07.55-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]