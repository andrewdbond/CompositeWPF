[
  {
    "Id": "849737",
    "ThreadId": "359811",
    "Html": "\r\n<p>Can anyone provide a link to a sample&nbsp;(or guidance)&nbsp;where Prism region persistance is tied to units of work? I realize this is a very general request but while my question isn't specific it should be fairly common.</p>\r\n<p>If you reference the QuickStarts and look at the UICompositionQuickStart you will get an idea of where I want to go. A very basic app with a list of employee names down the left navigation and when you click on a name you get a tabbed interface with details\r\n on that selected employee.</p>\r\n<p>Now what I want to add is the ability to update that information, which shouldn't be an issue. But let's say I'm using EF and after I'm done with the update I hit Save. I want to make sure that the data I just updated isn't in cache anymore. From what I\r\n read about dbContext and the EF, the best method is to dispose of the context and force the next read to come from the DB and not from cache. That's where I hit a wall.</p>\r\n<p>From what I understand on the UICompositionQuickStart (and nearly all other samples out there) the data in the sample is retained for the life of the application. Reading articles like this (<a href=\"http://www.paulstovell.com/unit-of-work\">http://www.paulstovell.com/unit-of-work</a>)\r\n what I'd like to do is have each edit window for an employee be a unit of work that lasts only until the user closes (or saves) the window. To do that, I can't have (or at least I don't think I can) a single data context for my left navigation of employees\r\n and the context used for my employee edit. If I did, once I disposed of my context my navigation list on the left would disappear.</p>\r\n<p>Sorry for the lengthy post. I've been reading a lot on the topic and a bit confused as to how to solve what is probably an easy coding&nbsp;approach issue.</p>\r\n",
    "PostedDate": "2012-06-15T18:50:43.963-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "850494",
    "ThreadId": "359811",
    "Html": "<p>Hi,</p>\r\n<p>So far, I'm not aware of a specific sample which combines <strong>Prism</strong>, <strong>MVVM</strong>, <strong>EF </strong>and the <strong>Unit of Work </strong>pattern. As far as I know, <strong>Prism </strong>does not provide specific guidance on how to implement this scenario, I believe this is mainly because <strong>Prism </strong>is agnostic of which data access and persistence strategy you decide to implement, as it allows you to use any data access layer implementation depending on your personal preferences and the requirements of your scenario.</p>\r\n<p>Also, as these implementations will be tied to your <strong>Model </strong>classes and not your custom presentation logic, you should be able to use any <strong>EF </strong>and <strong>Unit of Work</strong> articles to learn about them, and should be able to implement them without major problems.</p>\r\n<p>For example I believe you could find the following resources useful as a starting point, as they may give you some hints and ideas on how to achieve this kind of scenarios:</p>\r\n<ul>\r\n<li><a href=\"http://blogs.msdn.com/b/adonet/archive/2009/06/16/using-repository-and-unit-of-work-patterns-with-entity-framework-4-0.aspx\">Using Repository and Unit of Work patterns with Entity Framework 4.0</a></li>\r\n</ul>\r\n<ul>\r\n<li><a href=\"http://archive.msdn.microsoft.com/ef4\">Entity Framework 4.0 Samples</a> <em>(it illustrates <span id=\"ctl00_ctl00_Content_TabContentPanel_Content_wikiSourceLabel\">common design patterns such as Repository, Unit of Work, and Model View View-Model (MVVM))</span></em></li>\r\n</ul>\r\n<p>I hope you find this useful,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-06-18T11:54:44.827-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "850581",
    "ThreadId": "359811",
    "Html": "<p>Thanks for the reply. Now that I think about it more, you are correct in that Prism could be considered ignorant of the key points of my question. And those points are better directed to the EF, UOW,&nbsp;or MVVM folks. The examples you provided were informative but mainly stuff I had seen before which actually ignore the issue of persistence that I am trying to resolve.</p>\r\n<p>I went back and started reading the Prism Patterns and Practices guide and focused on Chapter 8 where it discusses navigation. I'm still processing all the information in the chapter but one topic relates directly to this post:</p>\r\n<p style=\"padding-left: 30px;\"><em>The <strong>IRegionMemberLifetime</strong> interface defines a single read-only property, <strong>KeepAlive</strong>. If this property returns <strong>false</strong>, the view is removed from the region when it is deactivated. Because the region no longer has a reference to the view, it then becomes eligible for garbage collection (unless some other component in your application maintains a reference to it). You can implement this interface on your view or your view model classes. Although the <strong>IRegionMemberLifetime</strong> interface is primarily intended to allow you to manage the lifetime of views within regions during activation and deactivation, the <strong>KeepAlive</strong> property is also considered during navigation after the new view is activated in the target region.</em></p>\r\n<p>If I were able to resolve my&nbsp;data layer&nbsp;persistence issues and somehow make a simple app that launched an edit view based on a list of employees, I would want the data used in that view to be disposed when finished (or when replaced). The KeepAlive implies that this could happen but I believe it is only allowing garbage collection to happen and not forcing it. I think I could put a call to the Dispose() step in my view model but that does no good if it isn't used when the presentation view is removed from the region.</p>\r\n<p>If Prism just marks a replaced or removed view as available for garbage collection then it isn't enough for me to rely on it disposing of my cached data in EF. That would mean I need to come up with explicit methods of making sure the cached data was refreshed or removed from EF after certain actions were taken on the view. Without sitting down and writing the code this idea seems counter productive as it ties view model to the view.</p>",
    "PostedDate": "2012-06-18T14:27:55.417-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "850876",
    "ThreadId": "359811",
    "Html": "<p>Hi,</p>\r\n<p>Have you considered implementing the <strong>INavigationAware </strong>interface in your view models. This way you could benefit from the <strong>OnNavigatedFrom </strong>method defined by this interface which is called before the navigation takes place, allowing the view to save its state or any changes the user has made.</p>\r\n<p>You could find more information about this in the following <a href=\"http://msdn.microsoft.com/en-us/library/gg430861(v=pandp.40)#sec9 \">section </a>of the Prism documentation.<br /><br />I hope you find this handy,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-06-19T06:27:48.027-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]