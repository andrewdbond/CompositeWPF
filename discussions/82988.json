[
  {
    "Id": "285204",
    "ThreadId": "82988",
    "Html": "<p>&nbsp;</p>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">Hi, I am trying to bind the button content to a property in my ViewModel, when I click the button it goes through the whole INotifyPropertyChanged implementation within the ViewModel but nothing gets changed. Basicly the button content should change from 'Connect' to 'Disconnect'. I must be missing something quite important here?</div>\r\n<div id=\"_mcePaste\" style=\"left:-10000px;top:0px;width:1px;height:1px;overflow-x:hidden;overflow-y:hidden\">Here is my button defined in the .xaml View:</div>\r\n<p>&nbsp;</p>\r\n<pre>Hi, I am trying to bind the button content to a property in my ViewModel, when I click the button it goes through the whole INotifyPropertyChanged implementation within the ViewModel but nothing gets changed. Basicly the button content should change from 'Connect' to 'Disconnect'. I must be missing something quite important here?\r\n\r\nHere is my button defined in the .xaml View:</pre>\r\n<pre></pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">&lt;</span><span style=\"color:#A31515\">Button</span> <span style=\"color:Red\">Grid.Column</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">3</span><span style=\"color:Black\">&quot;</span> <span style=\"color:Red\">x:Name</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">gwConnectionBarButton</span><span style=\"color:Black\">&quot;</span>\r\n                        <span style=\"color:Red\">Content</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding ButtonContent, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}</span><span style=\"color:Black\">&quot;</span>\r\n                        <span style=\"color:Red\">commands:Click.Command</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding ConnectionBarClickCommand}</span><span style=\"color:Black\">&quot;</span>\r\n                        <span style=\"color:Red\">commands:Click.CommandParameter</span><span style=\"color:Blue\">=</span><span style=\"color:Black\">&quot;</span><span style=\"color:Blue\">{Binding ElementName=gwConnectionBarButton,Path=Content}</span><span style=\"color:Black\">&quot;</span>\r\n                        <span style=\"color:Blue\">/&gt;</span>\r\n</pre>\r\n</div>\r\n<pre></pre>\r\nAnd here is my backing ViewModel:</pre>\r\n<pre></pre>\r\n<pre><div style=\"color:Black;background-color:White\"><pre><span style=\"color:Blue\">public</span> <span style=\"color:Blue\">class</span> ConnectionBarViewModel : IConnectionBarViewModel, INotifyPropertyChanged \r\n    {\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">readonly</span> ILog log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);\r\n\r\n        <span style=\"color:Blue\">private</span> IUnityContainer container;\r\n        <span style=\"color:Blue\">private</span> IRegionManager regionManager;\r\n        <span style=\"color:Blue\">private</span> IEventAggregator eventAggregator;\r\n        \r\n        <span style=\"color:Blue\">public</span> IConnectionBarController Controller;\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">string</span> ButtonContent { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">set</span>; }\r\n\r\n        <span style=\"color:Blue\">public</span> DelegateCommand&lt;<span style=\"color:Blue\">string</span>&gt; ConnectionBarClickCommand { <span style=\"color:Blue\">get</span>; <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">set</span>; }\r\n\r\n        <span style=\"color:Blue\">public</span> ConnectionBarViewModel(IUnityContainer container, IRegionManager regionManager, IEventAggregator eventAggregator, IConnectionBarController controller)\r\n        {\r\n            log.Info(<span style=\"color:#A31515\">&quot;ConnectionVarViewModel&quot;</span>);\r\n\r\n            <span style=\"color:Blue\">this</span>.container = container;\r\n            <span style=\"color:Blue\">this</span>.regionManager = regionManager;\r\n            <span style=\"color:Blue\">this</span>.eventAggregator = eventAggregator;\r\n            Controller = controller;\r\n\r\n            ConnectionBarClickCommand = <span style=\"color:Blue\">new</span> DelegateCommand&lt;<span style=\"color:Blue\">string</span>&gt;(OnButtonClick); <span style=\"color:Green\">//, CanButtonClick);</span>\r\n            ButtonContent = <span style=\"color:#A31515\">&quot;Connect&quot;</span>;\r\n        }\r\n\r\n        <span style=\"color:Blue\">#region</span> INotifyPropertyChanged\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">event</span> PropertyChangedEventHandler PropertyChanged;\r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">void</span> OnPropertyChanged(<span style=\"color:Blue\">string</span> name)\r\n        {\r\n            log.Info(<span style=\"color:#A31515\">&quot;OnPropertyChanged string&quot;</span>);\r\n            OnPropertyChanged(<span style=\"color:Blue\">new</span> PropertyChangedEventArgs(name));\r\n        }\r\n \r\n        <span style=\"color:Blue\">protected</span> <span style=\"color:Blue\">virtual</span> <span style=\"color:Blue\">void</span> OnPropertyChanged(PropertyChangedEventArgs args)\r\n        {\r\n            log.Info(<span style=\"color:#A31515\">&quot;OnPropertyChanged args&quot;</span>);\r\n            <span style=\"color:Blue\">var</span> handler = PropertyChanged;\r\n            <span style=\"color:Blue\">if</span> (handler != <span style=\"color:Blue\">null</span>)\r\n            {\r\n                log.Info(<span style=\"color:#A31515\">&quot;Firing handler&quot;</span>);\r\n                handler(<span style=\"color:Blue\">this</span>, args);\r\n            }\r\n        }\r\n        <span style=\"color:Blue\">#endregion</span>\r\n\r\n\r\n        <span style=\"color:Blue\">void</span> OnButtonClick(<span style=\"color:Blue\">string</span> pValue)\r\n        {\r\n            log.Info(pValue);\r\n            <span style=\"color:Blue\">if</span> (pValue.ToLower().Equals(<span style=\"color:#A31515\">&quot;connect&quot;</span>))\r\n            {\r\n                <span style=\"color:Blue\">if</span> (Controller.ConnectionBarClickCommand(pValue))\r\n                {\r\n                    ButtonContent = <span style=\"color:#A31515\">&quot;Disconnect&quot;</span>;\r\n                    OnPropertyChanged(<span style=\"color:#A31515\">&quot;gwConnectionBarButton&quot;</span>);\r\n                }\r\n            }\r\n            <span style=\"color:Blue\">else</span>\r\n            {\r\n                ButtonContent = <span style=\"color:#A31515\">&quot;Connect&quot;</span>;\r\n                OnPropertyChanged(<span style=\"color:#A31515\">&quot;gwConnectionBarButton&quot;</span>);\r\n            }\r\n\r\n        }\r\n\r\n        <span style=\"color:Blue\">bool</span> CanButtonClick(<span style=\"color:Blue\">string</span> pValue)\r\n        {\r\n            <span style=\"color:Blue\">return</span> !<span style=\"color:Blue\">string</span>.IsNullOrEmpty(pValue);\r\n        }\r\n\r\n    }\r\n</pre>\r\n<pre></pre>\r\n<pre>And some log output:</pre>\r\n<pre><pre>2010-02-03 10:31:03,294 [9] INFO  iPoke.GatewayUX.ConnectionBar.Controllers.ConnectionBarController - (null) - ConnectionBarClickCommand\r\n2010-02-03 10:31:03,295 [9] INFO  iPoke.GatewayUX.ConnectionBar.ViewModels.ConnectionBarViewModel - (null) - OnPropertyChanged string\r\n2010-02-03 10:31:03,296 [9] INFO  iPoke.GatewayUX.ConnectionBar.ViewModels.ConnectionBarViewModel - (null) - OnPropertyChanged args\r\n2010-02-03 10:31:03,296 [9] INFO  iPoke.GatewayUX.ConnectionBar.ViewModels.ConnectionBarViewModel - (null) - Firing handler\r\n</pre>\r\n</pre>\r\n<pre>Any help much appreciated. Mark</pre>\r\n<pre></pre>\r\n</div>\r\n<div style=\"text-align:center\"><span style=\"font-family:Arial\"><br></span></div>\r\n</pre>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-02-03T02:51:54.213-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "285362",
    "ThreadId": "82988",
    "Html": "<p id=99f2f7a0-f2f7-012c-1d4e-12313900f081>Hi Mark,</p>\r\n<p id=99f305d0-f2f7-012c-1d4f-12313900f081>From the code above I notice that you are raising the <strong>OnPropertyChanged</strong> event passing the button&rsquo;s name (&ldquo;gwConnectionBarButton&rdquo;) as the property name. In this case, you would need to pass the &ldquo;ButtonContent&rdquo; property (which is the one being updated), so the binding engine notices the update to that property and updates the button&rsquo;s content:<br><span style=\"font-family:Consolas;font-size:x-small\">OnPropertyChanged(&quot;ButtonContent&quot;); </span></p>\r\n<p id=99f31410-f2f7-012c-1d50-12313900f081>You can check how this is implemented in some ViewModels of the <a href=\"http://msdn.microsoft.com/en-us/library/dd458919.aspx\">Prism RI</a>.</p>\r\n<p id=99f32260-f2f7-012c-1d51-12313900f081>Please let me know if this helps.</p>\r\n<p id=99f331c0-f2f7-012c-1d52-12313900f081>Damian Schenkelman <br><a href=\"http://blogs.southworks.net/dschenkelman\">http://blogs.southworks.net/dschenkelman</a></p>",
    "PostedDate": "2010-02-03T08:51:49.987-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "285395",
    "ThreadId": "82988",
    "Html": "<p>Thanks, had a feeling it was something simple. Mark</p>",
    "PostedDate": "2010-02-03T10:09:23.55-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]