[
  {
    "Id": "921250",
    "ThreadId": "397887",
    "Html": "\r\n<p>Hello,</p>\r\n<p>I was hoping someone can guide me in the right direction.</p>\r\n<p>Here is the issue I am running into.&nbsp; We have a shell with a single MainRegion, which is a content control, in another view in one of the modules, I have a tab control that is made up of multiple Views &amp; View Models, for example on Tab #1 I have\r\n First and Second views andtheir view models, and on the second tab I have a third and fourth view and view model.&nbsp;&nbsp; When I run the application it builds and runs, but only the first view constructor is called.&nbsp;&nbsp;</p>\r\n<p>I can not change the main region to be a tab control, since it will break other functionality.&nbsp;</p>\r\n<p>How can I write code to create the tab control and have all 4 views &amp; view models constructors called everytime the view is constructed.</p>\r\n<p>Thanks in advance.</p>\r\n",
    "PostedDate": "2012-10-03T07:00:43.91-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921510",
    "ThreadId": "397887",
    "Html": "<p>Hi,</p>\r\n<p>I believe I am not completely understanding your scenario.</p>\r\n<p>When a view is constructed, one of its constructor will be always invoked. As far as I know it's not possible to create an instance of any class without invoking a constructor. Also, after an object (or in this case, view) is created, the constructor of that instance should never be executed again as the object is already constructed.</p>\r\n<p>If your views are being shown, it means that they were <strong>constructed</strong>, <strong>initialized </strong>an <strong>loaded</strong>.</p>\r\n<p>On the other hand, if in your scenario you are obtaining the views through the container and the constructor of these views is only called the first time each view is requested, this could be related to how the views' types are registered in the container. If the views' types are registered as singletons in the container, the container will only create one instance of each view and will return always the same instance. Therefore, the views are only constructed once.</p>\r\n<p>It would be helpful if you could provide more information about your scenario and about what you are trying to achieve so that we can help you further with this.</p>\r\n<p>Regards,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-10-03T13:48:51.313-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921518",
    "ThreadId": "397887",
    "Html": "<p>Hello,</p>\r\n<p>Thank you so much for your reply, Let me try to claraify.&nbsp;</p>\r\n<p>The views gets created, but the view models for each one of those views does not get instanitated.&nbsp;</p>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 16px;\">&nbsp;<span style=\"color: green;\">//_regionManager.RegisterViewWithRegion(RegionNames.MainRegion,&nbsp;typeof(DetailsView));</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: green;\">//_regionManager.RegisterViewWithRegion(RegionNames.MainRegion,&nbsp;typeof&nbsp;(OrderLinesView));</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: green;\">//_regionManager.RegisterViewWithRegion(RegionNames.MainRegion,&nbsp;typeof(StatusView));</span></pre>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 16px;\"></pre>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 16px;\"><span style=\"color: green;\">I try to do that for each view I need, but the datacontext for all of the views is the first view model</span></pre>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 16px;\"><span style=\"color: green;\">which view contains the views.   </span></pre>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 16px;\"></pre>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 16px;\"><span style=\"color: green;\">I guess the best question how do I instantiate all the views &amp; view models for that perticular case.</span></pre>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 16px;\"></pre>\r\n<pre style=\"font-family: Consolas; background: white; color: black; font-size: 16px;\"><span style=\"color: green;\">I hope i made more sense, if not let me know and I can see if I can elaborate further.</span></pre>",
    "PostedDate": "2012-10-03T14:09:59.987-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921523",
    "ThreadId": "397887",
    "Html": "\r\n<p>I guess another way to say it is, I have a composite view which consists of 4 views &amp; view models.</p>\r\n<p>The views get created fine when I have them in different tabs.&nbsp; The problem I am having is that the viewmodel for each view I want to use does not get called although I have it set as UNITY DEPENDENCY PROPERTY in each view.&nbsp; And the DataContext\r\n for all views gets set to be the first view model I created.&nbsp;</p>\r\n<p>Or you can say, how I can create a composite view (one consisting of multiple views) with each view having it's own view model.&nbsp; Currently the views get created but the data context is always set to the first view model.</p>\r\n<p>I want each view to have it's own view model.</p>\r\n<p>Can you help.</p>\r\n",
    "PostedDate": "2012-10-03T14:19:02.433-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921651",
    "ThreadId": "397887",
    "Html": "\r\n<p><a href=\"https://skydrive.live.com/?cid=e2d58421786a3234&id=E2D58421786A3234%21108&Bsrc=Share&Bpub=SDX.SkyDrive\">https://skydrive.live.com/?cid=e2d58421786a3234&amp;id=E2D58421786A3234%21108&amp;Bsrc=Share&amp;Bpub=SDX.SkyDrive</a></p>\r\n<p>The location above you would find a project that demonstrate the issues I am running into.&nbsp;&nbsp; In the project, I have an order module.&nbsp; In that module I have a view called &quot;Composite View&quot;, that view consists of 3 additional views (OrderView,\r\n LinesView, NotesView).&nbsp; As you can tell each one of these views have their own view model.&nbsp;&nbsp; If you run the application you would see that all 3 views are rendered, which is correct.&nbsp;&nbsp;</p>\r\n<p>What I am struggling with is how to get the views to construct their viewmodels.&nbsp; Meaning if you look at the code behind of any of the other 3 views (OrderView, LinesView, NotesView) you will find a [Dependency] for their viewmodels.&nbsp;&nbsp; but\r\n if you look at the data context for each view you would notice that it is not the views prespective viewmodel instead they are all CompositeViewModel instead.&nbsp; I want to be able to have the corosponding viewmodel be the datacontext for each view.</p>\r\n<p>In the constructor of each view model there is a debug statement that does not fire.&nbsp;</p>\r\n<p>Can you help?&nbsp;</p>\r\n<p><strong><em><span style=\"text-decoration:underline\">Can you please reply and let me know as soon as possible if you understand my issue, if not I can try to elaborate further.</span></em></strong></p>\r\n",
    "PostedDate": "2012-10-03T21:54:50.2-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "921995",
    "ThreadId": "397887",
    "Html": "<p>Hi,</p>\r\n<p>Thanks for providing us with a repro-sample application. It was very useful to troubleshot this issue.</p>\r\n<p>The problem you are experiencing is caused by the fact that you are creating the aforementioned views directly in <strong>XAML</strong>, instead of creating the views through the container.</p>\r\n<p>Based on my understanding, when the container creates a view it will inject the corresponding types in all the properties marked with a <strong>Dependency </strong>attribute. However, the view <em><strong>needs to be created through the container</strong></em> in order for it to inject the corresponding dependencies. If instead the view is constructed manually, the attribute becomes meaningless, as the container doesn't have any participation in the construction of the view. This is also true when using <em><strong>construction injection</strong></em>. Finally, as due to this no <strong>DataContext </strong>is set for those views, the views inherit the <strong>DataContext </strong>for their parent view, that is the <strong>CompositeViewModel </strong>of the <strong>CompositeView</strong>.</p>\r\n<p>As far as I know, when creating an instance of a control (or view) in <strong>XAML</strong>, the container is not involved.</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre>// As a simplification, you can think of this sentence:\r\n<span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">views</span><span style=\"color: blue;\">:</span><span style=\"color: #a31515;\">OrderView</span> <span style=\"color: blue;\">/&gt;</span>\r\n\r\n// As being equal to this one:\r\nvar orderView = new OrderView();\r\n</pre>\r\n</div>\r\n</p>\r\n<p>In my opinion, an easy approach to change this and delegate the construction of the views to the container would be to make the <strong>TabControl </strong>of the <strong>CompositeView </strong>a region and insert the corresponding views in it, for example, using the <em><strong>view discovery</strong></em> method:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: green;\">&lt;!-- CompositeView --&gt;</span>\r\n<span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">TabControl</span> <span style=\"color: red;\">prism:RegionManager.RegionName</span><span style=\"color: blue;\">=</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">{x:Static common:RegionNames.TabRegion}</span><span style=\"color: black;\">\"</span><span style=\"color: blue;\">&gt;</span>\r\n    <span style=\"color: green;\">&lt;!-- The views that were declared in XAML are removed --&gt;</span>        \r\n<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">TabControl</span><span style=\"color: blue;\">&gt;</span><br />&nbsp;</pre>\r\n</div>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: green;\">// ModuleInitilizer</span>\r\n<span style=\"color: blue;\">public</span> <span style=\"color: blue;\">void</span> Initialize()\r\n{\r\n    ...\r\n    _regionManager.RegisterViewWithRegion( RegionNames.MainRegion, <span style=\"color: blue;\">typeof</span> (CompositeView));\r\n    _regionManager.RegisterViewWithRegion( RegionNames.TabRegion, <span style=\"color: blue;\">typeof</span>(OrderView));\r\n    _regionManager.RegisterViewWithRegion( RegionNames.TabRegion, <span style=\"color: blue;\">typeof</span>(LinesView));\r\n    _regionManager.RegisterViewWithRegion( RegionNames.TabRegion, <span style=\"color: blue;\">typeof</span>(NotesView));\r\n}\r\n</pre>\r\n</div>\r\nWhen using the view discovery approach, <strong>Prism </strong>will try to create the specified views' types using the container; therefore, the dependencies of those views should be resolved correctly.</p>\r\n<p>On the other hand, if for some reason you are unable to apply the aforementioned changes and you need to create the views directly in <strong>XAML</strong>, another possible approach could be to manually obtain the corresponding view models in the views' constructors using the <strong>ServiceLocator</strong>:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: green;\">// OrderView's constructor</span>\r\n<span style=\"color: blue;\">public</span> OrderView()\r\n{\r\n    InitializeComponent();\r\n    <span style=\"color: blue;\">this</span>.DataContext = ServiceLocator.Current.GetInstance&lt;OrderViewModel&gt;();\r\n}\r\n</pre>\r\n</div>\r\n</p>\r\n<p>I hope you find this useful to solve this problem,</p>\r\n<p>Damian Cherubini<br /> <a href=\"http://blogs.southworks.net/dcherubini\">http://blogs.southworks.net/dcherubini</a></p>",
    "PostedDate": "2012-10-04T10:44:17.787-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "924309",
    "ThreadId": "397887",
    "Html": "<p>Thank you for your response, I am able to use the service locator with success.&nbsp;</p>\r\n<p>I am running into this following problem.&nbsp;&nbsp; I am using non-linear navigation similar to the concept used here :&nbsp; <a href=\"http://blogs.msdn.com/b/kashiffl/archive/2010/10/04/prism-v4-region-navigation-pipeline.aspx\">http://blogs.msdn.com/b/kashiffl/archive/2010/10/04/prism-v4-region-navigation-pipeline.aspx</a></p>\r\n<p>I am using the eventaggregator to pass data from the (composite view model) to the other view models I have.</p>\r\n<p>The issue is that the first order I opened gets the values from the second order I opened, meaning the event aggregator data gets assigned to all the view models that are open, I know I can filter the event aggregator, but&nbsp;how I pass the order Id to all the view models the first time?&nbsp; or how can I solve this.&nbsp;</p>\r\n<p>I hope you can help.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2012-10-09T15:02:48.51-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "924673",
    "ThreadId": "397887",
    "Html": "<p>Hi,</p>\r\n<p>I believe you could try passing the corresponding order Id as a parameter the first time you navigate to each view, an example of this can be seen in the<strong> Region Navigation Pipeline</strong> sample when navigating to the different <strong>ItemViews</strong>, and where the navigation parameters are retrieved and set on the initial navigation to each of this views in the <strong>OnNavigatedTo </strong>method of the <strong>ItemViewModel </strong>class:</p>\r\n<p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: green;\">//only set the current item on the initial navigation</span>\r\n<span style=\"color: blue;\">if</span>(navigationContext.Parameters != <span style=\"color: blue;\">null</span> &amp;&amp; <span style=\"color: blue;\">this</span>.CurrentItem == <span style=\"color: blue;\">null</span>) {\r\n                <span style=\"color: blue;\">this</span>.CurrentItem = navigationContext.Parameters[Constants.Global.Item];\r\n            }\r\n</pre>\r\n</div>\r\n</p>\r\n<p>This way once you set the corresponding Id to each view model, you could filter the published events based on this information.</p>\r\n<p>For additional information on how to pass parameters during navigation, you could check the following section of the documentation:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/gg430861(v=pandp.40).aspx#sec10\">Chapter 8: Navigation, Passing Parameters During Navigation</a></li>\r\n</ul>\r\n<p>I hope you find this handy,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-10-10T06:45:29.183-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "924695",
    "ThreadId": "397887",
    "Html": "<p>I understand what you are saying and I understand about passing the ID during the navigation.&nbsp; Unfortunatly, that is not what is going on.</p>\r\n<p>I am only navigating to the composite view, but that composite view can be created N-number of times.&nbsp;&nbsp; The composite view publish events via eventaggregator to the other view models to pass data for the views to display.&nbsp; But everytime the event aggregator fires, all the view models gets updaed with the latest value, the navigation interface IConfirmNavigationRequest does not get executed at all on the child views.&nbsp;</p>\r\n<p>Any suggestions?</p>",
    "PostedDate": "2012-10-10T07:37:31.67-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "925228",
    "ThreadId": "397887",
    "Html": "<p>Hi,</p>\r\n<p>Based on my understanding if the view models of your inner views are subscribing to this event, you will have to implement the necessary logic to pass the Id information during the construction of the inner view models to filter the published event. Based on my understanding how to achieve this will depend on which approach your are using to compose your composite views.</p>\r\n<p>In my opinion, if you are you are creating the inner views directly in <strong>XAML </strong>like mentioned above in this thread, this will increase the complexity to pass the required information without coupling the view models to the parent view. If following this approach the only clean approach I could think of, could be by sharing the <strong>DataContext </strong>of the parent view, as the child elements could inherit the <strong>DataContext </strong>of their parent element, although making this decision would depend on your personal preferences and design choices.</p>\r\n<p>On the other hand, if you decide to compose your composite views by benefiting of <strong>Prism </strong>regions, then I believe you could have other options like passing the Id information using a <strong>Region Context</strong>, which will allow you to share contextual information between the view that is hosting a region and a view that is inside a region letting you to communicate with the inner views in a loosely couple way, an example of this can be seen in the <strong>TabRegion </strong>defined in the <a href=\"http://msdn.microsoft.com/en-us/library/ff921174(v=pandp.40).aspx\">UI Composition QuickStart</a>, additionally for more information about this approach you could check the <a href=\"http://msdn.microsoft.com/en-us/library/ff921122%28v=pandp.40%29.aspx\">Communicating Between Loosely Coupled Components</a> chapter of the documentation.</p>\r\n<p>Also, I believe another possibility when using <strong>Prism </strong>regions, could be to define this required initialization logic of your composite views in a controller class that will be en charge of injecting the corresponding views with their corresponding view model values set when initialized, this will allow you to react to the events as expected. Examples using this kind of structure to compose your <strong>UI </strong>can be seen in the<strong> UIComposition Lab</strong> and <strong>Communication Lab</strong> of the <a href=\"http://prismtk.codeplex.com/\">Prism Training Kit</a>.<br /><br />I hope this help you to analyze which approach will suit best your needs,</p>\r\n<p>Regards,</p>\r\n<p>Agustin Adami<a href=\"http://blogs.southworks.net/aadami\"><br /> http://blogs.southworks.net/aadami</a></p>",
    "PostedDate": "2012-10-11T06:18:42.043-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]