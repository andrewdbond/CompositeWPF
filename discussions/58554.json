[
  {
    "Id": "198154",
    "ThreadId": "58554",
    "Html": "<p>Hi</p>\r\n<p>I have a user control that up until now has had a MouseLeftButtonDown event on its outer border to handle any clicking on the control.</p>\r\n<p>The click event causes a visual state manager change.</p>\r\n<p>Now I am trying to refactor so MVVM is used and have a couple of questions:</p>\r\n<p>1. The cal:Click.Command attribute does not work on the border (presumable because it does not handle the click event). Can anyone point me in the write direction of how to create a command for the MouseLeftButtonDown event or am I better off just making my whole user control a button with all the internal xaml declared in a style? Alternatively is there another container element or similar that i could wrap the control in that has a click event?</p>\r\n<p>2. In the code behind previously I have VisualStateManager.GoToState(this,.... . How should this now be handled since my viewmodel does not have any reference to the view? One thought I had was to try the supervising controller pattern as described here: http://jonas.follesoe.no/CombiningDifferentSeparatedPresentationPatterns.aspx. Is there a cleaner way than this?</p>\r\n<p>Thanks</p>\r\n<p>Mark</p>",
    "PostedDate": "2009-06-05T03:47:14.183-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "198405",
    "ThreadId": "58554",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">Hi Mark,</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">I will try to answer your questions separately.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><strong><span style=\"text-decoration:underline\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">Command Attached Behavior</span></span></span></span></strong></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">Some time ago, I created a blog post that explain<span style=\"color:#1f497d\">s</span> how to create a command with an attached behavior for a Silverlight 3 <strong>DataForm&rsquo;s</strong> particular event. This scenario appears to be very similar, so the following links might be of use:</span></span></span></p>\r\n<p style=\"text-indent:-18pt;margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:Symbol\" lang=EN-US><span style=\"\"><span style=\"font-size:small\">&middot;</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"\" lang=EN-US><a href=\"http://blogs.southworks.net/dschenkelman/2009/04/18/commands-with-attached-behavior-for-silverlight-3-dataform/\"><span style=\"font-family:Calibri;font-size:small\">Commands with Attached Behavior for Silverlight 3 DataForm</span></a></span></p>\r\n<p style=\"text-indent:-18pt;margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:Symbol\" lang=EN-US><span style=\"\"><span style=\"font-size:small\">&middot;</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"\" lang=EN-US><a href=\"http://msdn.microsoft.com/en-us/library/dd458928.aspx\"><span style=\"font-family:Calibri;font-size:small\">Commands</span></a><span style=\"font-family:Calibri\"><span style=\"font-size:small\"> (Extending Command Support part)</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><strong><span style=\"text-decoration:underline\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">ViewModel and View reference</span></span></span></span></strong></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri\"><span style=\"font-size:small\">I do not know your exact scenario, but if your <strong>ViewModel</strong> does not have a reference to the view the usual approach would be to have a reference to the <strong>ViewModel </strong>(then you would be able to call the methods of the model from the view). If for a particular reason this is not the scenario you have implemented, you could always use the Prism <strong>EventAggregator</strong> to publish an event in the view and subscribe to it in the model. However, this might be a bit of an overkill in this situation (again, this would depend on your application needs).<strong><span style=\"text-decoration:underline\"></span></strong></span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><strong><span style=\"text-decoration:underline\"><span style=\"\" lang=EN-US><span style=\"text-decoration:none\"></span></span></span></strong></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">Ward Bell also blogged about his approach </span><a href=\"http://neverindoubtnet.blogspot.com/2009/05/birth-and-death-of-m-v-vm-triads.html\"><span style=\"font-family:Calibri;font-size:small\">here</span></a><span style=\"font-family:Calibri\"><span style=\"font-size:small\">, you might find it interesting.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">The following section from the </span><a href=\"http://compositewpf.codeplex.com/Wiki/View.aspx?title=Knowledge Base\"><span style=\"font-family:Calibri;font-size:small\">Composite WPF &amp; SL KB</span></a><span style=\"font-family:Calibri\"><span style=\"font-size:small\"> has some articles about MVVM:</span></span></span></p>\r\n<p style=\"text-indent:-18pt;margin:0cm 0cm 0pt 36pt\"><span style=\"font-family:Symbol\" lang=EN-US><span style=\"\"><span style=\"font-size:small\">&middot;</span><span style=\"font:7pt &quot;Times New Roman&quot;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span style=\"\" lang=EN-US><a href=\"http://compositewpf.codeplex.com/Wiki/View.aspx?title=Model View ViewModel (MVVM)&referringTitle=Home\"><span style=\"font-family:Calibri;font-size:small\">Model View ViewModel (MVVM)</span></a></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><strong><span style=\"text-decoration:underline\"><span style=\"\" lang=EN-US><span style=\"text-decoration:none\"></span></span></span></strong></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Please let me know if this helps.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Damian Schenkelman</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"font-family:Calibri;font-size:small\">http://blogs.southworks.net/dschenkelman</span></a></span></p>",
    "PostedDate": "2009-06-05T13:39:36-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "198416",
    "ThreadId": "58554",
    "Html": "<p>Re Q1</p>\r\n<p>I will give this I try thanks.</p>\r\n<p>Re Q2</p>\r\n<p>I saw in one of the articles in the knowledge base (http://www.global-webnet.net/BlogEngine/post/2008/09/08/Composite-WPF-Obtaining-View-reference-with-Presentation-Model.aspx) that Bill Kratochvil actually passes in the view to the Command as a Command Parameter</p>\r\n<p>Another option I have seen floating around is the use of the Blend3 attached behaviours. If I did this is it straight forward to access the VM from the behaviour code?</p>\r\n<p>I guess I had hoped there would be a straight forward MVVM pattern to handle a the scenario where an event needs to cause a change to both the data (VM) and the XAML. Sounds like something good to blog about when I figure it out!</p>\r\n<p>Thanks again</p>",
    "PostedDate": "2009-06-05T14:02:52.77-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "198937",
    "ThreadId": "58554",
    "Html": "<p>I'm afraid I gave up and was able to do what I wanted by treating my control as a checkbox and completing changing the control template. All the visual changes I needed where just handled in the visual state manager.</p>\r\n<p>Damian my view does not have a direct reference to my viewmodel because it is injected as the datacontext with Ninject. Is it possible to call the commands I have created or somehow get and set the properties of my datacontext?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2009-06-08T02:26:46.797-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "199153",
    "ThreadId": "58554",
    "Html": "<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Hi Mark,</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">I have not used NInject, but as you said after performing DI the ViewModel is injected as the the dataContext in the view.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>&nbsp;</span></p>\r\n<p style=\"margin:0cm 0cm 0pt -1.2pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">In this case, although you do not have a property that is of the ViewModels type inside your view<span style=\"color:#1f497d\"> (</span></span></span></span><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>private IViewModel model</span><span style=\"font-size:small\"><span style=\"font-family:Calibri\"><span style=\"\" lang=EN-US>), y</span><span style=\"\" lang=EN-US>ou do</span><span style=\"\" lang=EN-US> have a reference to the <strong>ViewModel </strong>(through the datacontext). Therefore, all you have to do to access the view model's public properties is cast your data context to your view model's type:</span></span></span></p>\r\n<p style=\"text-indent:34.2pt;margin:0cm 0cm 0pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>IViewModel model = (IViewModel)this.DataContext;</span></p>\r\n<p style=\"text-indent:34.2pt;margin:0cm 0cm 0pt\"><span style=\"font-family:'Courier New';font-size:10pt\" lang=EN-US>ICommand command = model.Command1;</span><span style=\"\" lang=EN-US></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Of course this depends on your implementation, but the main idea should be the same.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">I hope you can find this useful.</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-family:Calibri;font-size:small\">&nbsp;</span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt -0.6pt\"><span style=\"\" lang=EN-US><span style=\"font-size:small\"><span style=\"font-family:Calibri\">Damian Schenkelman</span></span></span></p>\r\n<p style=\"margin:0cm 0cm 0pt\"><span style=\"\" lang=EN-US><a href=\"http://blogs.southworks.net/dschenkelman\"><span style=\"font-family:Calibri;font-size:small\">http://blogs.southworks.net/dschenkelman</span></a></span></p>",
    "PostedDate": "2009-06-08T10:49:28.23-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]