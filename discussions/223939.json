[
  {
    "Id": "481801",
    "ThreadId": "223939",
    "Html": "<p>Hi guys,</p>\r\n<p>Great to see V4 of prism coming to life! I'll be watching it closely ;) I like the looks of the new samples! Also, the mvvm sample is shaping up to be very interesting.</p>\r\n<p>One thing I'd like to suggest:</p>\r\n<p>I see you have taken the approach of letting a viewmodel select the next view, with syntax like this:</p>\r\n<p style=\"padding-left:30px\">this.uiService.ShowView(ViewNames.CompleteQuestionnaire, questionnaireTemplate);</p>\r\n<p>Have you also considered an approach like this:</p>\r\n<p style=\"padding-left:30px\">this.uiService.ShowViewModel(new QuestionnaireViewModel{Template = questionnaireTemplate});</p>\r\n<p>Then the uiService should find out what view (or skin or datatemplate) to use to visualize that view. The nice thing of this approach is that you can create a complete working tree of your viewmodels in your unit tests, without having to have a live view instantiated. It's also a much more direct way for viewmodels to communicate with eachother, without resorting to a 'context' object. If you need a form of decoupling between different viewmodels, you can hide them behind an interface and either get them from a container or from a service.</p>\r\n<p>If you want, I can provide some more info on why I like this approach.</p>\r\n<p>Anyway, keep up the good work!</p>\r\n<p>with kind regards,</p>\r\n<p>Erwin van der Valk</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-08-18T04:42:03.007-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "482032",
    "ThreadId": "223939",
    "Html": "<p>Erwin, thanks for the feedback.&nbsp;</p>\r\n<p>As always, this is a work in progress and evolving.&nbsp; I've passed&nbsp;your feedback on to the rest of the team.</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2010-08-18T13:20:09.4-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]