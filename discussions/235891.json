[
  {
    "Id": "526491",
    "ThreadId": "235891",
    "Html": "\r\n<p>Hello everyone,</p>\r\n<p>First of all - I've discovered MVVM and Prism 3 weeks ago - it's incredible how the SL application are written in this style. Thank you for this technology and this framework (SDK).</p>\r\n<p>Then, I have a problem - I spent more then 2 days browsing the internet for some solutions and I couldn't find anything exact, all that I've found was only some pieces.</p>\r\n<p>Now, the description (simple as possible) of my solution: I have an MVVM SL 4 application with Models, ViewModels, Viewes, Modules, etc... Everything is working great but I will give you an example for a viewmodel:</p>\r\n<p>&nbsp;</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">public</span> <span style=\"color:blue\">class</span> LoginChildViewModel : ViewModelBase\r\n    {\r\n        <span style=\"color:blue\">#region</span> Private properties\r\n        <span style=\"color:blue\">private</span> IEventAggregator eventAggregator;\r\n        <span style=\"color:blue\">private</span> IUnityContainer unityContainer;\r\n        <span style=\"color:blue\">private</span> SecurityBusinessServicesClient securityServiceClient;\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">bool</span> isLoading;\r\n\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> username;\r\n        <span style=\"color:blue\">private</span> <span style=\"color:blue\">string</span> password;\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Public properties\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the is loading.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:green\">The is loading.&lt;/value&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">bool</span> IsLoading\r\n        {\r\n            <span style=\"color:blue\">get</span> { <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.isLoading; }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.isLoading == value)\r\n                    <span style=\"color:blue\">return</span>;\r\n\r\n                <span style=\"color:blue\">this</span>.isLoading = value;\r\n                <span style=\"color:blue\">this</span>.RaisePropertyChanged(() =&gt; <span style=\"color:blue\">this</span>.IsLoading);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the username.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:green\">The username.&lt;/value&gt;</span>\r\n        [Required(ErrorMessage = <span style=\"color:#a31515\">&quot;Camp obligatoriu.&quot;</span>)]\r\n        [Display(Name = <span style=\"color:#a31515\">&quot;Nume utilizator&quot;</span>)]\r\n        [StringLength(30, MinimumLength = 3, ErrorMessage = <span style=\"color:#a31515\">&quot;Minim 3 caractere, maxim 50 caractere.&quot;</span>)]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Username\r\n        {\r\n            <span style=\"color:blue\">get</span> \r\n            {\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.username; \r\n            }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.username == value)\r\n                    <span style=\"color:blue\">return</span>;\r\n\r\n                <span style=\"color:blue\">this</span>.ValidateProperty(<span style=\"color:#a31515\">&quot;Username&quot;</span>, value);\r\n                \r\n                <span style=\"color:blue\">this</span>.username = value;\r\n                <span style=\"color:blue\">this</span>.RaisePropertyChanged (() =&gt; <span style=\"color:blue\">this</span>.Username);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the password.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:green\">The password.&lt;/value&gt;</span>\r\n        [Required(ErrorMessage = <span style=\"color:#a31515\">&quot;Camp obligatoriu.&quot;</span>)]\r\n        [Display(Name = <span style=\"color:#a31515\">&quot;Parola&quot;</span>)]\r\n        [StringLength(30, MinimumLength = 6, ErrorMessage = <span style=\"color:#a31515\">&quot;Minim 6 caractere, maxim 50 caractere.&quot;</span>)]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Password\r\n        {\r\n            <span style=\"color:blue\">get</span> \r\n            {\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.password; \r\n            }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.password == value)\r\n                    <span style=\"color:blue\">return</span>;\r\n\r\n                <span style=\"color:blue\">this</span>.ValidateProperty(<span style=\"color:#a31515\">&quot;Password&quot;</span>, value); \r\n                \r\n                <span style=\"color:blue\">this</span>.password = value;\r\n                <span style=\"color:blue\">this</span>.RaisePropertyChanged(() =&gt; <span style=\"color:blue\">this</span>.Password);\r\n            }\r\n        }\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Constructor\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Initializes a new instance of the &lt;see cref=&quot;LoginChildViewModel&quot;/&gt; class.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> LoginChildViewModel()\r\n        {\r\n\t\t\t\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Initializes a new instance of the &lt;see cref=&quot;LoginChildViewModel&quot;/&gt; class.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;eventAggregator&quot;&gt;</span><span style=\"color:green\">The event aggregator.&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;unityContainer&quot;&gt;</span><span style=\"color:green\">The unity container.&lt;/param&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;param name=&quot;securityClient&quot;&gt;</span><span style=\"color:green\">The security client.&lt;/param&gt;</span>\r\n        <span style=\"color:blue\">public</span> LoginChildViewModel(IEventAggregator eventAggregator, IUnityContainer unityContainer, SecurityBusinessServicesClient securityClient)\r\n            : <span style=\"color:blue\">this</span>()\r\n        {\r\n            <span style=\"color:blue\">this</span>.eventAggregator = eventAggregator;\r\n            <span style=\"color:blue\">this</span>.unityContainer = unityContainer;\r\n            <span style=\"color:blue\">this</span>.securityServiceClient = securityClient;\r\n\r\n            <span style=\"color:blue\">this</span>.securityServiceClient.AuthenticateUserCompleted &#43;= <span style=\"color:blue\">new</span> EventHandler&lt;AuthenticateUserCompletedEventArgs&gt;(securityServiceClient_AuthenticateUserCompleted);\r\n        }\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> Public methods\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Authenticates the user.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> AuthenticateUser()\r\n        {\r\n            <span style=\"color:blue\">bool</span> isViewModelValid = <span style=\"color:blue\">this</span>.ValidateViewModel();\r\n            <span style=\"color:blue\">if</span> (!isViewModelValid)\r\n                <span style=\"color:blue\">return</span>;\r\n\r\n            <span style=\"color:blue\">this</span>.IsLoading = <span style=\"color:blue\">true</span>;\r\n            <span style=\"color:blue\">this</span>.securityServiceClient.AuthenticateUserAsync(<span style=\"color:blue\">this</span>.Username, <span style=\"color:blue\">this</span>.Password);\r\n        }\r\n        <span style=\"color:blue\">#endregion</span>\r\n\r\n        <span style=\"color:blue\">#region</span> WCF Events\r\n        <span style=\"color:blue\">void</span> securityServiceClient_AuthenticateUserCompleted(<span style=\"color:blue\">object</span> sender, AuthenticateUserCompletedEventArgs e)\r\n        {\r\n            <span style=\"color:blue\">this</span>.IsLoading = <span style=\"color:blue\">false</span>;\r\n        }\r\n        <span style=\"color:blue\">#endregion</span>\r\n    }\r\n\r\n</pre>\r\n</div>\r\n<p>&nbsp;</p>\r\n<p>Now, the standard behavior when the user enters something in one of the textboxes binded to Username or Password VM properties and then deletes the values, the validation summary from the View works and displays the errors. But, as you've seen above, I have\r\n a method ValidateViewModel which just validates the ViewModel object as an entire piece. The code follows:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Validates the view model.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span><span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">bool</span> ValidateViewModel()\r\n        {\r\n            ValidationContext validationContext = <span style=\"color:blue\">new</span> ValidationContext(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">null</span>, <span style=\"color:blue\">null</span>);\r\n            \r\n            List&lt;ValidationResult&gt; validationResults = <span style=\"color:blue\">new</span> List&lt;ValidationResult&gt;();\r\n            Validator.TryValidateObject(<span style=\"color:blue\">this</span>, validationContext, validationResults);\r\n\r\n            <span style=\"color:blue\">this</span>.ErrorsContainer.SetErrors(validationContext.MemberName, validationResults);\r\n            \r\n            <span style=\"color:blue\">return</span> (validationResults.Count == 0);\r\n        }\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>This method is getting called on the ViewModel's AuthenticateUser method - and it really works from the logic point of view because it's getting the errors as it's supposed to behave BUT all the ValidationResults generated by this method are not displayed\r\n in the validation summary and I'm going crazy because I don't understand why!!!!! Please take in consideration that the implementation of INotifyDataErrorInfo is done as described in the chm doc of PRISM 4.&nbsp;</p>\r\n<p>Please give me some clues!</p>\r\n<p>&nbsp;</p>\r\n<p>Thank you.</p>\r\n",
    "PostedDate": "2010-11-24T08:22:00.68-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526582",
    "ThreadId": "235891",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Nice to see that you started using Prism. There is not guidance on this exact topic in Prism out-of-the-box. So, I think that you can find the following link interesting, since another user achieved a similar scenario:</p>\r\n<ul>\r\n<li><a href=\"http://social.msdn.microsoft.com/Forums/en/adonetefx/thread/55fca141-1e73-4543-b7f8-ffc881d00d43\">Validation does not work when I use Validator.TryValidateObject</a>\r\n</li></ul>\r\n<p>Hope this helps.</p>\r\n<p>Fernando Antivero <br>\r\n<a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n",
    "PostedDate": "2010-11-24T11:18:15.347-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "526604",
    "ThreadId": "235891",
    "Html": "\r\n<p>Hi,</p>\r\n<p>Thank you very much for your quick response. I've read the posts thar you've told me to. From what I've seen overthere that it's not similar with my issue because in my case (as I've said in my initial post), the ValidateObject really works and it collects\r\n real issues and it put them in the right collection - my issue is that those errors are not listed within the ValidationSummary.</p>\r\n<p>So, to take it step by step...</p>\r\n<p>a) In the VM I have a method / command which is getting called when a button from the V is clicked.</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:blue\">#region</span> Public methods\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Authenticates the user.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> AuthenticateUser()\r\n        {\r\n            <span style=\"color:blue\">bool</span> isViewModelValid = <span style=\"color:blue\">this</span>.ValidateViewModel();\r\n            <span style=\"color:blue\">if</span> (!isViewModelValid)\r\n                <span style=\"color:blue\">return</span>;\r\n\r\n            <span style=\"color:blue\">this</span>.IsLoading = <span style=\"color:blue\">true</span>;\r\n            <span style=\"color:blue\">this</span>.securityServiceClient.AuthenticateUserAsync(<span style=\"color:blue\">this</span>.Username, <span style=\"color:blue\">this</span>.Password);\r\n        }\r\n        <span style=\"color:blue\">#endregion</span>\r\n</pre>\r\n</div>\r\n<p>b)&nbsp;The VM contains some properties signed&nbsp;with DataAnnotations attributes as follows:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the username.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:green\">The username.&lt;/value&gt;</span>\r\n        [Required(ErrorMessage = <span style=\"color:#a31515\">&quot;Camp obligatoriu.&quot;</span>)]\r\n        [Display(Name = <span style=\"color:#a31515\">&quot;Nume utilizator&quot;</span>)]\r\n        [StringLength(30, MinimumLength = 3, ErrorMessage = <span style=\"color:#a31515\">&quot;Minim 3 caractere, maxim 50 caractere.&quot;</span>)]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Username\r\n        {\r\n            <span style=\"color:blue\">get</span> \r\n            {\r\n                <span style=\"color:blue\">this</span>.ValidateProperty(<span style=\"color:#a31515\">&quot;Username&quot;</span>, <span style=\"color:blue\">this</span>.username);\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.username; \r\n            }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.username == value)\r\n                    <span style=\"color:blue\">return</span>;\r\n\r\n                <span style=\"color:blue\">this</span>.ValidateProperty(<span style=\"color:#a31515\">&quot;Username&quot;</span>, value);\r\n                \r\n                <span style=\"color:blue\">this</span>.username = value;\r\n                <span style=\"color:blue\">this</span>.RaisePropertyChanged (() =&gt; <span style=\"color:blue\">this</span>.Username);\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Gets or sets the password.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;value&gt;</span><span style=\"color:green\">The password.&lt;/value&gt;</span>\r\n        [Required(ErrorMessage = <span style=\"color:#a31515\">&quot;Camp obligatoriu.&quot;</span>)]\r\n        [Display(Name = <span style=\"color:#a31515\">&quot;Parola&quot;</span>)]\r\n        [StringLength(30, MinimumLength = 6, ErrorMessage = <span style=\"color:#a31515\">&quot;Minim 6 caractere, maxim 50 caractere.&quot;</span>)]\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">string</span> Password\r\n        {\r\n            <span style=\"color:blue\">get</span> \r\n            {\r\n                <span style=\"color:blue\">this</span>.ValidateProperty(<span style=\"color:#a31515\">&quot;Password&quot;</span>, <span style=\"color:blue\">this</span>.password);\r\n                <span style=\"color:blue\">return</span> <span style=\"color:blue\">this</span>.password; \r\n            }\r\n            <span style=\"color:blue\">set</span>\r\n            {\r\n                <span style=\"color:blue\">if</span> (<span style=\"color:blue\">this</span>.password == value)\r\n                    <span style=\"color:blue\">return</span>;\r\n\r\n                <span style=\"color:blue\">this</span>.ValidateProperty(<span style=\"color:#a31515\">&quot;Password&quot;</span>, value); \r\n                \r\n                <span style=\"color:blue\">this</span>.password = value;\r\n                <span style=\"color:blue\">this</span>.RaisePropertyChanged(() =&gt; <span style=\"color:blue\">this</span>.Password);\r\n            }\r\n        }\r\n</pre>\r\n</div>\r\n<p>&nbsp;c) If I'm writing something in the textboxes and then I'm deleting those values or I do something that is against the validation attributes (by getting into the setters of the properties) the ValidationSummary reports correctly those errors.</p>\r\n<p>d) &#65279;In the BaseViewModel class I have a method which validates the entire ViewModel instance as follows:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> Validates the view model.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;returns&gt;</span><span style=\"color:gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:blue\">protected</span> <span style=\"color:blue\">bool</span> ValidateViewModel()\r\n        {\r\n            ValidationContext validationContext = <span style=\"color:blue\">new</span> ValidationContext(<span style=\"color:blue\">this</span>, <span style=\"color:blue\">null</span>, <span style=\"color:blue\">null</span>);\r\n            \r\n            List&lt;ValidationResult&gt; validationResults = <span style=\"color:blue\">new</span> List&lt;ValidationResult&gt;();\r\n            Validator.TryValidateObject(<span style=\"color:blue\">this</span>, validationContext, validationResults);\r\n\r\n            <span style=\"color:blue\">this</span>.ErrorsContainer.SetErrors(validationContext.MemberName, validationResults);\r\n            \r\n            <span style=\"color:blue\">return</span> (validationResults.Count == 0);\r\n        }\r\n</pre>\r\n</div>\r\n<p>e) The 3rd code line in my method which actually validates the object instance (TryValidateObject) does the trick all the time, even when properties are empty and the user pressed on the buttons with an emtpy form, and it puts into the validationResults\r\n list the correct errors BUT the validation errors doesn't show up into the ValidationSummary - the only difference that I found using the debugger was that the validationContext has the MemberName set as Empty which means that the validation is for the object\r\n not for a member...</p>\r\n<p>So - when TryValidateObject collects the data and the errorcontainer reports them, the ValidationSummary doesn't display them... Is anyone who has any ideea - I think that is something related with the ValidationSummary.</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-24T12:19:46.75-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "527511",
    "ThreadId": "235891",
    "Html": "\r\n<p>Hi,</p>\r\n<p>There is no similar issues reported so far. So, If you continue experiencing this situation in your application, could you please share a repro sample?</p>\r\n<p>Fernando Antivero <br>\r\n<a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-26T13:09:11.353-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "527616",
    "ThreadId": "235891",
    "Html": "\r\n<p>Hi,</p>\r\n<p>&nbsp;</p>\r\n<p>I will gladly do it. Being the first time when I'm doing this,&nbsp;I would like to ask you if it's ok to be a zip file with a VS 2010 SL 4 Solution?</p>\r\n<p>Thanks again,</p>\r\n<p>Evdin</p>\r\n",
    "PostedDate": "2010-11-27T01:20:42.167-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "528364",
    "ThreadId": "235891",
    "Html": "\r\n<p>Hi Evdin,</p>\r\n<p>Right, that might be helpful to analyze your scenario. I think that you could share this uploading it to the cloud, for example\r\n<a href=\"skydrive.live.com\">skydrive.live.com</a>. Then you could post the URL here, so the community will also be able to contribute.</p>\r\n<p>Fernando Antivero <br>\r\n<a href=\"http://blogs.southworks.net/fantivero\">http://blogs.southworks.net/fantivero</a></p>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-11-29T09:08:07.58-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]