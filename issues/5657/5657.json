{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 2,
    "Custom": "",
    "Description": "Hi Jimmi,\n \nWe have been working on this issue and have found a fix for it. You can read more about this http://blogs.southworks.net/dschenkelman/2009/12/23/memory-leak-removing-view-with-child-regions-in-prism-v2/.\n \nPlease let me know if this helps.\n \nDamian Schenkelman\nhttp://blogs.southworks.net/dschenkelman",
    "LastUpdatedDate": "2013-02-21T18:38:41.51-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "High",
      "Severity": 150,
      "Id": 3
    },
    "ProjectName": "CompositeWPF",
    "ReportedDate": "2009-12-28T06:50:33.83-08:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Remove view does not remove all sub-views",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 6,
    "Id": 5657
  },
  "FileAttachments": [
    {
      "FileId": 897966,
      "FileName": "MemoryLeakRemovingViews-PrismV4.zip",
      "DownloadUrl": ".\\897966"
    }
  ],
  "Comments": [
    {
      "Message": "Hi,\r\n\r\nFor those that are facing this problem, we have verified that it's still present in Prism v4, and that the workaround proposed in the blog post by Damian Schenkelman is still a valid possibility to overcome the problem.\r\nWe have applied his solution to a Prism v4 application with the same scenario . You might find the sample attached.\r\n\r\nHope you find this helpful.\r\n\r\nAgustin Adami\r\nhttp://blogs.southworks.net/aadami",
      "PostedDate": "2011-09-02T11:19:31.317-07:00",
      "Id": 156202
    },
    {
      "Message": "Hi, \r\n\r\nFor those interested in this subject, you might find useful to know that this can be solved since Prism 4.1 release (http://www.microsoft.com/download/en/details.aspx?displaylang=en&id=28950. The ClearChildViewsRegionBehavior proposed in Damian's Schenkleman blog post was adapted, to make it optional by defining an attached property in the desired view. Hence, this behavior will only apply if the ClearChildViewsRegionBehavior.ClearChildViews attached property is present in the view that holds the regions to be cleared.\r\n\r\nFor example, to indicate that regions defined in Right View should be removed from the region manager once the Main View is removed from its region, the following attached property must be defined in Right View’s XAML like in the following code snippet:\r\n\r\n\r\nI hope you find this useful,\r\n\r\nDamian Cherubini\r\nhttp://blogs.southworks.net/dcherubini",
      "PostedDate": "2012-03-08T11:14:33.3-08:00",
      "Id": 156203
    }
  ]
}