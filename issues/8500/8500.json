{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Hi,\r\n\r\nI'm closing this issue, as a fix for it has been included in the latest release of Prism for Windows Phone 7 updated for Mango (http://compositewpf.codeplex.com/releases/view/75760).\r\n\r\nThanks,\r\n\r\nGuido Leandro Maliandi\r\nhttp://blogs.southworks.net/gmaliandi",
    "ClosedDate": "2011-11-01T10:52:48.777-07:00",
    "CommentCount": 9,
    "Custom": "",
    "Description": "I've upgrade my WP7 project to mango and ApplicationBarButtonCommand has stopped working. I have confirmed that the exact same code runs under 7.0, then stops working when the project is upgraded to 7.1.\nÂ \nIs there a fix or workaround for this?",
    "LastUpdatedDate": "2013-05-16T05:28:41.91-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Medium",
      "Severity": 100,
      "Id": 2
    },
    "ProjectName": "CompositeWPF",
    "ReportedDate": "2011-07-19T21:15:45.983-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "ApplicationBarButtonCommand Doesn't Work in WP7 7.1 (Mango)",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 5,
    "Id": 8500
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I can confirm this. I have upgraded Prism to 7.1 and recompiled. Still problem exists.",
      "PostedDate": "2011-08-04T02:12:15.477-07:00",
      "Id": 156477
    },
    {
      "Message": "I have literally been fighting this for days, and finally noticed that System.Windows.Interactivity in a 7.1 project is pointing to the 7.1 Expression SDK. (As it should)\r\nI manually added the reference to the 7.0 SDK, and hope this is just an issue with the beta of the new SDK.\r\n\r\nIt's not a perfect solution, and the designer is having issues (possibly unrelated) but at least development can continue. I did confirm that at least ApplicationBarButtonNavigation works",
      "PostedDate": "2011-08-04T22:33:53.72-07:00",
      "Id": 156478
    },
    {
      "Message": "One more thing that I realized as I continued...it appears that the designer in Visual Studio is broken for all pages, not just ones that utilize the Prism binding. I THINK i was able to fix it by also replacing the Microsoft.Express.Interactions library with the 7.0 one.\r\n\r\nI say I think because it showed the page and didn't crash VS, but it's anyone's guess what will happen as I continue. Best of luck to you!",
      "PostedDate": "2011-08-04T22:41:41.207-07:00",
      "Id": 156479
    },
    {
      "Message": "At the risk of getting bothersome, I think I now understand more fully what you mean. My issue was with compiling and running without errors, but I'm guessing you're seeing the issue I've now hit. Everything runs fine, but the command is never called?",
      "PostedDate": "2011-08-04T23:18:51.45-07:00",
      "Id": 156480
    },
    {
      "Message": "Yes, the command is never executed.",
      "PostedDate": "2011-08-05T06:33:41.97-07:00",
      "Id": 156481
    },
    {
      "Message": "confirm this too",
      "PostedDate": "2011-08-09T08:33:00.573-07:00",
      "Id": 156482
    },
    {
      "Message": "The issue is due to a change to data binding in the Silverlight for Windows Phone 7.1. I've created a small toolkit to address this issue, which includes AppBarButtonCommand, AppBarMenuItemCommand, AppBarButtonNavigation, and AppBarMenuItemNavigation. All of them work in Windows Phone SDK 7.1 Beta 2. Here's the link: http://appbarutils.codeplex.com/",
      "PostedDate": "2011-08-11T07:43:15.36-07:00",
      "Id": 156483
    },
    {
      "Message": "I found that the ApplicationBarButtonCommand's CommandBinding dependency property needs to be updated for Mango. In Pre-Mango, it seems that the dependency property needed to be of type Binding and then use a BindingListener to track when the dependency property was bound to a new ICommand. Now in Mango, you can remove the BindingListener and declare the dependency property of type ICommand.\r\n\r\npublic static readonly DependencyProperty CommandBindingProperty =\r\n    DependencyProperty.Register(\"CommandBinding\", typeof(ICommand), typeof(ApplicationBarButtonCommand), new PropertyMetadata(HandleCommandChanged));\r\n\r\nThis updated code will be included in the updated release of WP7 developer guidance to be released in the Fall.",
      "PostedDate": "2011-09-14T09:20:47.15-07:00",
      "Id": 156484
    },
    {
      "Message": "This issue is not fixed. Using the latest Prism 4.1 release. I set my root elements DataContext from code behind, since I'm resolving through funq. When debugging my binding is never fully wired and the CommandBinding is always null, so ApplicationBarButtonCommand.CreateBinding always returns and never creates the binding. The unit tests don't use binding and set the command in code. Thus, they pass. My test that uses a binding of ElementName does not pass, and the other one using Source on the binding works. The way I set my DataContext, I need to use ElementName binding since I don't have a StaticResource view model.\r\n\r\nThe tests to add to ApplicationBarButtonCommandFixture:\r\n\r\n[TestMethod]\r\n        public void CommandBindingIsNotNullWhenUsingViewModelAndElementNameBinding()\r\n        {\r\n            var page = new PhoneApplicationPage();\r\n            const string rootvisual = \"RootVisual\";\r\n            var grid = new Grid\r\n            {\r\n                Name = rootvisual\r\n            };\r\n            page.Content = grid;\r\n            var pageViewModel = new PageViewModel();\r\n            var dataContextBinding = new Binding\r\n            {\r\n                Source = pageViewModel\r\n            };\r\n            grid.SetBinding(FrameworkElement.DataContextProperty, dataContextBinding);\r\n\r\n            Assert.IsNotNull(grid.DataContext);\r\n\r\n            var bar = new ApplicationBar();\r\n            var button = new ApplicationBarIconButton(new Uri(\"/foo.png\", UriKind.Relative))\r\n            {\r\n                Text = \"Foo\"\r\n            };\r\n            bar.Buttons.Add(button);\r\n            page.ApplicationBar = bar;\r\n            var command = new ApplicationBarButtonCommand\r\n            {\r\n                ButtonText = \"Foo\"\r\n            };\r\n            var bindingSource = new MyCommandHolder();\r\n            pageViewModel.MyCommandHolder = bindingSource;\r\n            var commandBinding = new Binding(\"DataContext.MyCommandHolder.Command\")\r\n            {\r\n                ElementName = rootvisual\r\n            };\r\n            BindingOperations.SetBinding(command, ApplicationBarButtonCommand.CommandBindingProperty, commandBinding);\r\n            Interaction.GetBehaviors(page).Add(command);\r\n\r\n            Assert.IsNotNull(command.CommandBinding);\r\n        }\r\n\r\n        [TestMethod]\r\n        public void CommandBindingIsNotNullWhenUsingViewModelAndSourceBinding()\r\n        {\r\n            var page = new PhoneApplicationPage();\r\n            const string rootvisual = \"RootVisual\";\r\n            var grid = new Grid\r\n            {\r\n                Name = rootvisual\r\n            };\r\n            page.Content = grid;\r\n            var pageViewModel = new PageViewModel();\r\n            var dataContextBinding = new Binding\r\n            {\r\n                Source = pageViewModel\r\n            };\r\n            grid.SetBinding(FrameworkElement.DataContextProperty, dataContextBinding);\r\n\r\n            Assert.IsNotNull(grid.DataContext);\r\n\r\n            var bar = new ApplicationBar();\r\n            var button = new ApplicationBarIconButton(new Uri(\"/foo.png\", UriKind.Relative))\r\n            {\r\n                Text = \"Foo\"\r\n            };\r\n            bar.Buttons.Add(button);\r\n            page.ApplicationBar = bar;\r\n            var command = new ApplicationBarButtonCommand\r\n            {\r\n                ButtonText = \"Foo\"\r\n            };\r\n            var bindingSource = new MyCommandHolder();\r\n            pageViewModel.MyCommandHolder = bindingSource;\r\n            var commandBinding = new Binding(\"MyCommandHolder.Command\")\r\n            {\r\n                Source = pageViewModel\r\n            };\r\n            BindingOperations.SetBinding(command, ApplicationBarButtonCommand.CommandBindingProperty, commandBinding);\r\n            Interaction.GetBehaviors(page).Add(command);\r\n\r\n            Assert.IsNotNull(command.CommandBinding);\r\n        }\r\n\r\npublic class PageViewModel : INotifyPropertyChanged\r\n        {\r\n            public event PropertyChangedEventHandler PropertyChanged;\r\n\r\n            private MyCommandHolder _MyCommandHolder;\r\n            public MyCommandHolder MyCommandHolder\r\n            {\r\n                get { return this._MyCommandHolder; }\r\n                set\r\n                {\r\n                    const string propertyName = \"MyCommandHolder\";\r\n                    this._MyCommandHolder = value;\r\n                    this.RaisePropertyChanged(propertyName);\r\n                }\r\n            }\r\n\r\n            private void RaisePropertyChanged(string propertyName)\r\n            {\r\n                if (this.PropertyChanged != null)\r\n                {\r\n                    this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\r\n                }\r\n            }\r\n        }",
      "PostedDate": "2012-02-27T00:11:11.02-08:00",
      "Id": 156485
    }
  ]
}