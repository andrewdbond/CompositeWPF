{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 7,
    "Custom": "",
    "Description": "It would be greate if your will add built-in ability to create resource dictionaries shared between all modules.",
    "LastUpdatedDate": "2015-03-27T08:41:40.96-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "CompositeWPF",
    "ReportedDate": "2008-12-14T11:22:21.787-08:00",
    "Status": {
      "Name": "Active",
      "Id": 2
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Add ability to create resource dictionaries shared between all modules.",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 19,
    "Id": 3504
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "agree",
      "PostedDate": "2008-12-14T19:46:16.897-08:00",
      "Id": 156065
    },
    {
      "Message": "It is really necessary!",
      "PostedDate": "2008-12-14T21:09:51.223-08:00",
      "Id": 156066
    },
    {
      "Message": "I have written some lines about this issue. You might find it interessting: http://www.codeplex.com/CompositeExtensions/Thread/View.aspx?ThreadId=42919",
      "PostedDate": "2008-12-23T09:47:25.31-08:00",
      "Id": 156067
    },
    {
      "Message": "Have a look at using a themes library, and having your modules refer to that.  The WPFThemes project on codeplex is a good place to start.",
      "PostedDate": "2009-01-14T09:15:37.817-08:00",
      "Id": 156068
    },
    {
      "Message": "I have introduced the static ResourceService class in the Composite Extensions Library 1.0 Milestone 2. This class provides an attached property to define shared resource dictionaries.\r\nLink: http://www.codeplex.com/CompositeExtensions",
      "PostedDate": "2009-02-08T23:50:30.08-08:00",
      "Id": 156069
    },
    {
      "Message": "This is not an issue with WPF.  However, when using Silverlight with multiple modules that are created using the Silverlight Application Template, this is a problem.  The issue has been resolved in Expression Blend v4 by allowing developers to choose a design-time resource dictionary for the solution.\r\n\r\nWe are currently looking into another solution that could eliminate this problem, but this is still under investigation.\r\n\r\nThank you for reporting and voting on this issue,\r\n\r\nKarl Shifflett",
      "PostedDate": "2010-09-15T14:42:27.577-07:00",
      "Id": 156070
    },
    {
      "Message": "Hi,\r\n\r\nBased on my understanding, the most common concerns regarding this subject are:\r\n1.\tIf a ResourceDictionary is defined in the Shell project, this ResourceDictionary will not be available in design time in a module. (In runtime, the ResourceDictionary will be resolved correctly)\r\n2.\tIf a ResourceDictionary is defined in a module (to be used specifically inside the module), the ResourceDictionary will not be available at runtime.\r\n\r\nIn the first case, it would be worth noting that it’s possible to define application-wide resources out of the box, which will work in all modules. However, this doesn’t seem to work with the designer, when checking a view in a module. A possible work around would be to include the source path for the ResourceDictionary as a resource in the App.xaml file of the module doing something similar to this:\r\n\r\n    \r\n\r\n\r\nWhile the App.xaml file in a module isn’t consumed when running the application, it is used in design-time.\r\n\r\nAs for the second case, you might find the approach proposed in the following blog post by Guido Maliandi useful:\r\nHow to: define module-specific resource dictionaries in Prism (http://blogs.southworks.net/gmaliandi/2012/01/how-to-define-module-specific-resource-dictionaries-in-prism/)\r\n\r\nI hope you find this useful,\r\n\r\nDamian Cherubini\r\nhttp://blogs.southworks.net/dcherubini",
      "PostedDate": "2012-01-18T13:13:32.457-08:00",
      "Id": 156071
    }
  ]
}