{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "Please see Prism 4.0 CTP - August 2010 at http://compositewpf.codeplex.com/releases/view/49963\r\n\r\nThere is now a callback you can use for download progress and completion.  See the Modularity QuickStarts for samples of how to use them",
    "ClosedDate": "2010-08-02T13:57:12.14-07:00",
    "CommentCount": 5,
    "Custom": "",
    "Description": "If ModuleManager.LoadModule is called and the module group for the requested module needs retrieving then it is retrieved asynchronously. This means that the call to LoadModule returns before the requested module has been loaded. Any code that relies on the module being loaded at this point will fail.",
    "LastUpdatedDate": "2013-05-16T05:29:01.517-07:00",
    "PlannedForRelease": "Prism 4.0 CTP - August 2010",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "CompositeWPF",
    "ReportedDate": "2008-12-02T07:09:30.65-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Add a callback to ModuleManager.LoadModule",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 13,
    "Id": 3427
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Agreed. The only work around I can see at the moment is to add the callback code (that you would normally put into your handler) into the Initialize() method of your module object. As this is the only reliable point that you \"know\" that your module has been downloaded and is running.\r\n",
      "PostedDate": "2008-12-14T21:51:29.817-08:00",
      "Id": 156059
    },
    {
      "Message": "http://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=53284",
      "PostedDate": "2009-12-18T17:00:42.387-08:00",
      "Id": 156060
    },
    {
      "Message": "truly shocked this is still open. the scenario described in the thread referenced below is very reasonable. why not have an async completed callback as in every other async scenario we are used to dealing with?",
      "PostedDate": "2009-12-18T17:03:35.45-08:00",
      "Id": 156061
    },
    {
      "Message": "Please, count my vote in. This is simple enough to implement, but the impact is quite high. It's been over a year and nothing has been done about the issue!\r\nHint: Register ModuleLoaded event and call it from within the ModuleManager.LoadModulesThatAreReadyForLoad() method.",
      "PostedDate": "2010-01-11T07:10:51.187-08:00",
      "Id": 156062
    },
    {
      "Message": "This is important in order to display a progress dialog when loading modules asynchronously.",
      "PostedDate": "2010-01-11T07:12:19.68-08:00",
      "Id": 156063
    }
  ]
}