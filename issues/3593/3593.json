{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 3,
    "Custom": "",
    "Description": "I think any alternative to CAB's UIExtensionSite introduced into Prism would add a significant value to the library.",
    "LastUpdatedDate": "2013-02-21T18:38:52.1-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "CompositeWPF",
    "ReportedDate": "2009-01-13T07:31:58.21-08:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Introduce CAB's UIExtensionSite alternative",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 5,
    "Id": 3593
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Try creating your a module and letting the other modules publish events to it.  Put it in the position of the menu bar or the status bar.  For a menu have it include a region that other modules can add to.  For the status let the other modules publish an event it listens for.  in other words, use the CAL/Prism capabilities yourself.",
      "PostedDate": "2010-05-26T13:10:33.227-07:00",
      "Id": 156083
    },
    {
      "Message": "Hi,\r\n\r\nFor those interested, I've created a UIExtensionSite-like mechanism for PRISM.\r\n\r\nYou can download the code at CodeProject (cfr http://www.codeproject.com/KB/silverlight/UIExtensionSites.aspx).",
      "PostedDate": "2010-08-04T05:13:58.847-07:00",
      "Id": 156084
    },
    {
      "Message": "Hi,\r\n\r\nBased on my understanding, the functionality of a UIExtensionSite can be implemented easily using regions. For example, a Menu, ToolBar or StatusBar control can be defined as a region in the Shell and the corresponding modules can Add or Remove views to/from these controls through view injection of view discovery. This is possible because the aforementioned controls inherit from the ItemsControl class, which is supported by Prism out of the box through its ItemsControlRegionAdapter. \r\n\r\nBased on my understanding, any control that inherits from ContentControl, Selector or ItemsControl class should be able to be registered as a region. Also, if you need to use a control that does not inherit from one of the aforementioned classes, you can define you own region adapter for that control, as mentioned in the following chapter of the Prism documentation: Appendix E: Extending Prism - Region Adapters on MSDN (http://msdn.microsoft.com/en-us/library/gg430866%28PandP.40%29.aspx#sec25)\r\n\r\nRegards,\r\n\r\nDamian Cherubini\r\nhttp://blogs.southworks.net/dcherubini",
      "PostedDate": "2011-12-16T09:40:28.853-08:00",
      "Id": 156085
    }
  ]
}