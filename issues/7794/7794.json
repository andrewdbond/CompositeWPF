{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": "",
    "Description": "There are 3 or 4 classes that use ServiceLocator.Current.  Stating the obvious, Prism is all about modularity and components, which may also use Dependency Injection, unity and or many other containers. \n \nA better practice is to store a reference to IServiceLocator, as most of the other prism classes do.  Perhaps this was an oversight.  Imagine if someone who used a DI container called ServiceLocator.SetLocatorProvider(), classes like Region or RegionManager could run into some major dependency resolution issues.  See \nhttp://compositewpf.codeplex.com/Thread/View.aspx?ThreadId=240843&ANCHOR#Post546686.\n \nThank you.",
    "LastUpdatedDate": "2013-02-21T18:38:19.97-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "CompositeWPF",
    "ReportedDate": "2011-01-11T14:53:12.47-08:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Refactor out references to ServiceLocator.Current - Store reference to IServiceLocator instead",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 2,
    "Id": 7794
  },
  "FileAttachments": [],
  "Comments": []
}