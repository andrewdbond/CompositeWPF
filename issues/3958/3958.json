{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 1,
    "Custom": "",
    "Description": "Please review all the code and determine for each class if it was designed for inheritence. If so, check the (protected) constructors (perhaps create a protected default ctor) and what methods should be virtual and protected. If a class was not designed for inheritence mark it as 'sealed'.",
    "LastUpdatedDate": "2013-02-21T18:38:48.427-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "CompositeWPF",
    "ReportedDate": "2009-03-27T04:01:07.477-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Classes not designed for inheritence",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 3,
    "Id": 3958
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I believe it would be helpful to refactor the ModuleManager class to provide more virtual methods in order to make this class more extensible. For example like in the scenario mentioned in this thread (http://compositewpf.codeplex.com/discussions/402059) it would have been useful if the InitializeModule method was defined as a protected virtual method.\r\n\r\nAlso, as mentioned in this related work item (http://compositewpf.codeplex.com/workitem/8101) the DelegateCommandBase class doesn't have their Execute and CanExecute methods defined as virtual, which would be necessary to extend the functionalities of this class.\r\n\r\nRegards,\r\n\r\nAgustin Adamihttp://blogs.southworks.net/aadami",
      "PostedDate": "2012-11-30T08:33:55.59-08:00",
      "Id": 156122
    }
  ]
}