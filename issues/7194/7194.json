{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 0,
    "Custom": "",
    "Description": "I think the terminology used in the current code samples and documentation is confusing. Most of the diagrams and text seem to describe the term module in terms of a deployable unit of code.  The main introductory chapter pretty much defines a module as comprising multiple components such as Views, ViewModels, Controllers and Services. \nÂ \nHowever the source code tends to then define the module Controller as a class called \"Module\" and the interface such a controller implements is called IModule. This has lead to much confusion on the team I'm currently working on when discusssion around \"modules\" is assumed to be about the controller by those who haven't read the documentation and just looked at the code. I suspect the differences in use of the term \"module\" will lead to similar confusion with others. Wouldn't it be better to call the interface IModuleController rather than IModule, and to rename the concrete implementations of these classes provided as source to more accurately reflect the fact that they're controllers rather than modules?  There's enough confusion around modules vs services already without adding to the confusion by calling controllers \"modules\"!",
    "LastUpdatedDate": "2013-02-21T18:38:31.69-08:00",
    "PlannedForRelease": "Prism 4.0 - Drop 6",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "CompositeWPF",
    "ReportedDate": "2010-08-31T13:00:50.927-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Use of the term Module",
    "Type": {
      "Name": "Feature",
      "Id": 1
    },
    "VoteCount": 3,
    "Id": 7194
  },
  "FileAttachments": [],
  "Comments": []
}