{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "This is performing as designed. See the comment I added to the issue.",
    "ClosedDate": "2014-05-01T10:25:16.157-07:00",
    "CommentCount": 1,
    "Custom": "",
    "Description": "I noticed to get my app to work using the Prism 4.2 for WPF beta, you have to remove the \"View\" from name of Window View in order to wire up with the ViewModel.  As an example, my View must be named MainWindow.xaml and the ViewModel is MainWindowViewModel.  I thought the convention for the View would be MainWindowView.xaml.\n\nI noticed this was the case for the BasicMVVMQuickstart_Desktop example, as well.  Is this a current bug and be fixed for final release or I'm I doing something wrong?\n\nThx",
    "LastUpdatedDate": "2014-05-01T10:25:16.157-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "CompositeWPF",
    "ReportedDate": "2014-03-01T06:49:33.823-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Must Remove \"View\" from Window View",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 10539
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "The behavior you are seeing is by design. \r\n\r\nI copied the following content from the documentation that is close to being released so you know the convention based rules.\r\n\r\nTo locate the corresponding view model, the __ViewModelLocationProvider__ first attempts to resolve the view model from any mappings that may have been registered by the Register method of the __ViewModelLocationProvider__ class. If the view model cannot be resolved using this approach, for instance if the mapping wasn't created, the __ViewModelLocationProvider__ falls back to a convention-based approach to resolve the correct view model type. This convention assumes that view models are in the same assembly as the view types, that view models are in a .ViewModels child namespace, that views are in a .Views child namespace, and that view model names correspond with view names and end with \"ViewModel.\". ",
      "PostedDate": "2014-03-03T16:38:44.28-08:00",
      "Id": 156688
    }
  ]
}