{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "andersomimes is right.  There should be another event, rather than an order dependent chain of responsibility.",
    "ClosedDate": "2010-08-02T10:48:06.283-07:00",
    "CommentCount": 3,
    "Custom": "",
    "Description": "We've made an implementation in Event Aggregator so you can configure the order events are fired.\n \nRefer to the following pre-reqs of \"Save a new Client\":\na) You have to save a new client to the database\nb) You have to update interface A on module A\nc) You have to update interface B on module A (interface B cannot be updated before Interface A)\nd) You do not want to wire your entire project with events-everywere\n \nInterface A and B are different View Models.\n \nSo you could have the following event subscriber:\n \naggregator.GetEvent<CriterioExcluidoEvent>().Subscribe(ExcluirCriterio, order);\n \nWhere \"order\", is an int so you can define the firing order.\n \nYou then will have three lines of code with your desired firing order (at 3 different places), as follow:\na) Save interface: aggregator.GetEvent<CriterioExcluidoEvent>().Subscribe(ExcluirCriterio, 1);\nb) Interface A: aggregator.GetEvent<CriterioExcluidoEvent>().Subscribe(ExcluirCriterio, 2);\nc) Interface B: aggregator.GetEvent<CriterioExcluidoEvent>().Subscribe(ExcluirCriterio, 3);\n \nWhen the user clicks save, the EventAggregator.GetEvent<something>().Publish(obj) will fire all the subscribed events in the given order.\n \nWe have implemented this funcionality, and we would like to hear from the community. Is this valid?\n \nSource code modified is attached.\n \nThank you.",
    "LastUpdatedDate": "2013-05-16T05:28:58.997-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "CompositeWPF",
    "ReportedDate": "2009-03-23T06:12:51.21-07:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Events in Event Aggregator fired in a given order",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 11,
    "Id": 3940
  },
  "FileAttachments": [
    {
      "FileId": 897962,
      "FileName": "CAL_FEB2009_Desktop.zip",
      "DownloadUrl": ".\\897962"
    }
  ],
  "Comments": [
    {
      "Message": "IMO sometimes event order does matter.  It would be nice to have the option to specify.\r\n\r\nHowever with your code above... if Developer A writes interface A and Developer B writes interface B, and they both enter 2 for their order, who wins?\r\ni.e. say the code looks like this...\r\n\r\na) Save interface: aggregator.GetEvent().Subscribe(ExcluirCriterio, 1);\r\nb) Interface A: aggregator.GetEvent().Subscribe(ExcluirCriterio, 2);\r\nc) Interface B: aggregator.GetEvent().Subscribe(ExcluirCriterio, 2);\r\n\r\nis there a winner and a looser?  or is someone picked first?  is there an exception thrown at runtime?",
      "PostedDate": "2009-04-02T18:49:45.153-07:00",
      "Id": 156119
    },
    {
      "Message": "Thanks for your reply. No exception will be thrown. The algorithm will sort them as 1, 2 and 2, but I can't tell who will be fired first if you specify identical firing orders.\r\nIn a matter of fact, I did think about it when I was changing the code, and my thinking is that you do Can specify two or more identifical numbers, meaning that you do not care about the firing order of the identical ones (since they are fired ;) ).\r\nWhat do you think about this?",
      "PostedDate": "2009-04-05T19:09:56.32-07:00",
      "Id": 156120
    },
    {
      "Message": "If you have a dependency like this, you should be publishing another event, not handling an event in order.  Chains of responsibility are not a scenario events should handle.",
      "PostedDate": "2009-07-06T11:33:34.903-07:00",
      "Id": 156121
    }
  ]
}